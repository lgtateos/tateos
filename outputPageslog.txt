Ch01.html STARTED++++++++
------------------------------rows: 8 cols: 1<span class="head">1.1 <strong>Why use Python for GIS programming?</strong></span><span class="head">1.2 <strong>Sample data and scripts</strong></span><span class="head">1.3  A starter example<a name="example" id="example"></a></span><span class="head">1.4 What's next</span><hr />
<img src="../images/bear.png" alt="f" width="300" height="337" />
<p class="head">Chapter objectives</p>
        After reading this chapter, you'll be able to do the following:
        <ul>
<li>Articulate in general terms, what scripting can do for GIS workflow.</li>
<li>Explain why Python is selected for GIS programming. </li>
<li>Install and locate the sample materials provided with the book.</li>
<li>Contrast the view of compound GIS datasets in Windows Explorer and ArcCatalog. </li>
<li>Run code in the ArcGIS Python Window.</li>
</ul>
<hr />
<span class="foo"> <span class="head">Chapter Outline</span>
<ul>
<li>Why use Python for GIS programming</li>
<li>Sample scripts and data</li>
<li>A starter example</li>
<li> What's next</li>
</ul></span>
<hr />
        &lt;vignette&gt;
        <p>Congratulations on your new job as a GIS specialist for the  National Park Service. Your supervisor has asked you to analyze some wildlife data. She gives you a specific example to start with: One data table (Bird Species) contains a list of over 600 bird species known to be native to North Carolina. Another data table (Bird Inventory) contains over 5000 records, each corresponding to a sighting of a particular bird. Your task is to summarize this data by determining what percent of the native Bird Species appear in the inventory and map the results. Once you complete this, she would like you to answer the same question based on species inventory datasets for fish, invertebrates, and so forth. </p>
<p>Performing this analysis manually for one pair of datasets would be time consuming and error prone. Performing this manually for many pairs of datasets is completely impractical. Common GIS tasks such as this provide a strong motivation for learning how to automate tasks. </p>
<p>Python programming to the rescue! This analysis can be performed in about 10 lines of Python code. You could even add a graphical user interface, to allow your supervisor to run the analysis herself on other datasets. You could even use Python to automatically add the sighting locations to ArcMap. This book will equip you to do all of these things and more. </p>
<p>&lt;/vignette&gt;</p>
<p>Over the next 24 chapters readers will learn the rudimentary elements of programming through Python and how to use programming to solve GIS problems.     This book shows how to automatically read, write, and analyze GIS data, how to script repetitive processes for multiple datasets, and how to make  scripts flexible, reusable, portable, and robust. Readers will learn a little bit about HTML, KML, and SQL,  user interfaces and map modification, and a lot about  Python for ArcGIS.  Numerous  examples and exercises provide hands-on practice. Warning: this is not a passive learning experience. You will get your hands dirty. Excited yet? Let's get started!<span><br />
</span> </p>
<p> Geographic information science tasks often involve processing multiple large datasets.  These tasks may need to be repeated on multiple fields, files, and directories, hourly, daily, or monthly and performed by multiple users. Scripts provide a powerful solution with the ability to automate repetitive tasks. Scripting can increase productivity and facilitate sharing. Some scrip table tasks involve common workflow activities, such as, reformatting data, copying files selectively, and searching database content. Scripts can also harness the powerful tool set provided by ArcGIS for geoprocessing. <em>Geoprocessing</em> is a term for using GIS software to manipulate geographic data, to perform tasks such as buffering, clipping, and intersecting geographic data.  Scripting is a text-based means of running processes and accessing data that would otherwise be done using graphical user interfaces (GUI's), like the buffer tool dialog in Figure 1.6. Scripting offers two core capabilities that are needed in nearly any GIS work:</p>
<ul>
<li>Efficient batch processing.</li>
<li>Automated file reading and writing.</li>
</ul>
<p>This book explains how  to apply these skills to vector, raster, and ASCII text data files and their fields and records. Moreover, the reader will learn about <em>Script Tools </em>and <em>Python toolboxes</em> to create graphical user interfaces for  scripts. The book also discusses other useful  programming skills for those in the geospatial sciences, such as mapping with scripts and parsing HTML and KML.</p>
<table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">1.1 <strong>Why use Python for GIS programming?</strong></span></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p> The programming language named Python, created by Guido van Rossum, Dutch computer programmer and fan of the comedy group Monty Python, is an ideal programming language for GIS users for several reasons:</p>
<ul>
<li><strong>Python is easy to pick up. </strong>
<!--The selected scripting topics aim to explain how to automate common workflow tasks and geoprocessing tasks. -->
            Python is a nice 'starter'  programming language: easy to interpret with a  clean visual layout. Python uses English keywords or indentation frequently where  other languages use punctuation. Some languages require a lot of set-up  code before even creating a program that says 'Hello.' With  Python, the code you need to print Hello is <code>print 'Hello'</code>.<br />
<br />
</li>
<li><strong>Python is object-oriented.</strong> The idea of object-oriented programming (OOP) was a paradigm shift from functional programming approach used before the 1990's. In functional programming, coding is  like writing a collection of mathematical functions. By contrast, object-oriented coding is organized around  objects which have properties and functions that do things to that object. OOP languages  share common conventions, making it easier for those who have some OOP experience in other languages. There are also advantages  to programmers at any level such as context menus which provide cues about how to complete a line of code. <strong><br />
<br />
</strong></li>
<li><strong>Python help abounds.</strong> Another reason to use Python is the abundance of  resources available. Python is an open-source programming language. In the spirit of open-source software, the Python programming community posts plenty of free information online.  'PythonResources.pdf' in 'C:\gispy\sample_scripts\ch01' lists some key tutorials, references, and forums.  <br />
<br />
</li>
<li><strong> GIS embraces Python</strong>. Due to many of the reasons listed above, the GIS community has  adopted the Python programming language.  ArcGIS software, in particular has embraced Python and  expands the Python functionality with each new release. Python scripts can be used to run ArcGIS geoprocessing tools and more. Esri's ArcGIS Desktop  even provides a built-in Python command prompt for running  Python code statements.  The 'ArcGIS Resources' site provides extensive online help for Python, including examples and code templates.   You will refer to this site frequently for  writing ArcGIS Python scripts. Several open-source GIS programs  also provide Python programming interfaces. For example,  GRASS GIS  includes an embedded Python command prompt for running GRASS geoprocessing tools via Python and QGIS can be called from Python. Once you know Python for ArcGIS Desktop, you'll have  a good foundation to learn  Python for other GIS tools. <br />
<br />
</li>
<li><strong>Python comes with ArcGIS</strong>. Python is installed automatically when you install ArcGIS. The starter example below shows you how to use  Python inside of ArcGIS. Later, you'll use a program called PythonWin or PyScripter, instead of ArcGIS to run Python. An exercise in Chapter 2  walks you through the installation process. The installation is easy and only takes a few moments.</li>
</ul>
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">1.2 <strong>Sample data and scripts</strong></span></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>To use the  examples and exercises in this book, you'll need  to run the CD included with the book to copy the necessary files to your computer. Once the installation is complete, you should find  a 'C:\gispy' directory; Inside you will find  sample scripts, a scratch workspace, exercises, and sample data:<br />
</p>
<ul><li><strong>Sample scripts</strong> correspond to the examples that appear in the text. The 'C:\gispy\sample_scripts' directory contains one folder for each chapter.   Each time a sample script is referenced, by script name, such as 'simpleBuffer.py', it appears in the corresponding directory for that chapter. <br />
<br />
</li>
<li><strong>Scratch workspace</strong>  provides  an  output directory, a kind of sandbox where data output data can be sent. This directory is empty for now. You can run scripts that generate output, check the results in this directory, and then clear this space before starting the next example. This makes it easy to check if the desired output was created and to keep input data directories from getting cluttered with unneeded output. <br />
<br />
</li>
<li><strong>Exercises</strong>  are located in  'C:\gispy\data\exercises', which contains a folder for each chapter, except this one.  The sample scripts referred to in the exercise questions are located in the 'C:\gispy\sample_scripts' corresponding chapter directory. The book contains around 200 exercises.<br />
<br />
</li>
<li><strong>Sample data</strong> for testing the examples and exercises  will be located in  'C:\gispy\data'. There is a folder for each chapter. You will learn how to write and run scripts in any directory, but for consistency in the examples and exercises,  'C:\gispy' directories have been specified throughout the book. <br />
</li>
</ul>
<p>Several GIS data formats are used in this book, including  compound data formats such as GRID rasters,  geodatabases, and  shapefiles. In Windows Explorer, you can see the file components that make up these compound data formats. 
          In ArcCatalog, which is designed for browsing GIS data formats, you see the software interpretation of these files; It provides geographic and tabular views of the data. We'll look at three examples to compare these data representations.</p>
<p><strong>GRID raster<br />
</strong>A <em> GRID raster</em> defines a geographic space with a grid of equally sized cells. Unlike other raster formats, such as JPEG or PNG, the file name does have a file extension. The file format consists of two directories, each of which contains multiple files. One directory has the name of the raster and contains '.adf' files which store information about extent, cell resolution, and so forth; The other directory, named 'info', contains '.dat' and '.nit' files which store file organization information. Figure 1.1 shows a GRID raster named 'getty_rast' in Windows Explorer (left) and in ArcCatalog (right).  Windows explorer, displays the two directories, 'getty_rast' and 'info' that together define the raster named 'getty_rast'.   The ArcCatalog directory tree displays the same  GRID raster as a single item  with a grid-like icon. </p>
<p><img src="../images/getty_rast.png" alt="a" /> <img src="../images/CatalogGetty_rast.png" alt="a" /><br />
<strong>Figure 1.1: </strong>Windows Explorer (left) and ArcCatalog (right) views of an Esri grid raster file, 'getty_rast'.<br />
</p>
<p><strong>Geodatabase</strong><br />
       Esri has three geodatabase formats: file, personal, and ArcSDE. A geodatabase stores a collection of GIS datasets.  Multiple formats of data  (raster, vector, tabular, and so forth) can be stored together in a geodatabase.   Figure 1.2 shows a file geodatabase, 'regions.gdb' in Windows Explorer (top and left) and in ArcCatalog (right). The top image shows that 'region.gdb' is the name of a directory. Inside the directory are a set of files associated with each of datasets  (with extensions .freelist, .gdbindexes, .gdbtable, .gdbtablx and so forth), only a few of which  are shown here.  The ArcCatalog view in Figure 1.2 shows the 5 datasets (four vector and one raster) in this geodatabase. The geodatabase has a silo-shaped icon. Clicking the geodatabase name  expands the tree to show the datasets stored in the geodatabase. The dataset icons vary based on their formats: 'fireStations' is a point vector dataset, 'landCover' and 'workzones' are polygon vector datasets, 'trail' is a polyline dataset, and 'tree' is a raster dataset. The vector format files are referred to as geodatabase <em>feature classes</em>. Feature classes store geographic features and their non-geographic attributes.</p>
<p><img src="../images/testerGDB.png" alt="a" align="left" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><br />
</p>
<p>&nbsp;</p>
<p><br />
<img src="../images/CatalogTesterGDBInside.png" alt="a" /><img src="../images/CatalogTesterGDB.png" alt="a" /><br />
<strong>Figure 1.2: </strong>Windows Explorer (left) and ArcCatalog (right) views of an Esri file geodatabase, 'region.gdb'.<br />
</p>
<p><strong>Shapefile</strong><br />
        A <em>shapefile</em>, a stand-alone  feature class,   is a popular format for storing GIS vector data. The features, consisting of geometric primitives (points, lines, or polygons), with associated data attributes are stored in a set of files. Though it is referred to as a shapefile, it consists of three or more files, each with different file extensions (the '.shp', '.shx', and '.dbf' files are mandatory). Figure 1.4 (left) shows the Windows Explorer (left) and ArcCatalog (right) view of a shapefile named 'park'. Shapefiles are often referred to with their '.shp' extension in Python scripts. </p>
<table width="779" border="3" bgcolor="#CEDAE3">
<tr>
<td width="765"><blockquote>
<p>The best way to copy, delete, move, and rename Esri compound data types is to use ArcCatalog or call tools from a Python script.</p>
</blockquote></td>
</tr>
</table>
<br />
<table border="0" width="775">
<tbody>
<tr>
<th scope="row" align="left" width="561"><span class="head">1.3  A starter example<a name="example" id="example"></a></span></th>
<td align="right" width="204"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<table width="834" border="0" bgcolor="#FFFFCC">
<tr>
<td width="828" scope="row"><p><span style="font-weight: bold">Example 1.1:</span> This Python script calls the Buffer (Analysis) tool.</p>
<p><code><span class="c"># simpleBuffer.py</span>
<span class="kn"><br />
import</span> <span class="nn">arcpy</span>
<br />
<span class="c"># Buffer park.shp by 0.25 miles. The output buffer erases the input features so that the buffer is only outside it.</span>
<span class="c"><br />
# The ends of the buffers are rounded and all buffers are dissolved together as a single feature.</span>
<span class="n"><br />
arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="s">&#39;C:/gispy/data/ch01/park.shp&#39;</span><span class="p">,</span> <span class="s">&#39;parkBuffer.shp&#39;</span><span class="p">,</span> <span class="s">&#39;0.25 miles&#39;</span><span class="p">,</span> <span class="s">&#39;OUTSIDE_ONLY&#39;</span><span class="p">,</span> <span class="s">&#39;ROUND&#39;</span><span class="p">,</span> <span class="s">&#39;ALL&#39;</span><span class="p">)</span><br />
</code></p>
<p><img src="../images/buffer_outside_only.png" alt="Example 1 input and output" /><br />
<strong>Figure 1.3 </strong>Input (light gray) and output (dark gray) from script Example 1.1.</p></td>
</tr>
</table>
<p>To get a feel for how to work the sample data and scripts, call the ArcGIS Buffer (Analysis) tool, to generate buffers around the input features by following these steps:</p>
<ol>
<li>Preview  'park.shp' in 'C:/gispy/data/ch01' using both Windows Explorer and ArcCatalog, as shown in Figure 1.4.  <br />
<br />
<img src="../images/windowsDataCorrect.png" alt="a" /><img src="../images/catalogCorrect.png" alt="a" /><br />
<strong>Figure 1.4 </strong>Windows Explorer (left) and ArcCatalog (right) views of Esri shapefile, 'park.shp'.<br />
<br />
</li>
<li>When you preview the file in ArcCatalog, a lock file appears in the Windows Explorer directory. Locking interferes with geoprocessing tools. To unlock the file, select another directory in ArcCatalog and then refresh the table of contents. If the lock persists, close ArcCatalog. <br />
<br />
</li>
<li>Open ArcMap. Open the ArcGIS Python Window as shown in Figure 1.5.<br />
<img src="../images/pythonWindow.png" alt="ArcGISPythonWindow" /><br />
<strong>Figure 1.5</strong>: The ArcGIS Python window embedded in ArcMap.<br />
<br />
</li>
<li>Open Notepad (or Wordpad) on your computer. <br />
<br />
</li>
<li>In Notepad, browse to the sample scripts for Chapter 1 ('C:\gispy\sample_scripts\ch01') and open  'simpleBuffer.py'. It should look like the script shown in  Example 1.1, except the text will all appear black.<br />
<br />
</li>
<li>Copy the last line of code from 'simpleBuffer.py'   into the ArcGIS Python Window. Be sure to copy the entire line of code, starting with <code>arcpy.Buffer</code>, all the way through the right parenthesis. It should look like this:<br />
<code><br />
<span class="n">arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="s">&#39;C:/gispy/data/ch01/park.shp&#39;</span><span class="p">,</span> <span class="s">&#39;parkBuffer.shp&#39;</span><span class="p">,</span> <span class="s">&#39;0.25 miles&#39;</span><span class="p">,</span> <span class="s">&#39;OUTSIDE_ONLY&#39;</span><span class="p">,</span> <span class="s">&#39;ROUND&#39;</span><span class="p">,</span> <span class="s">&#39;ALL&#39;</span><span class="p">)</span> <br />
</code><br />
</li>
<li>Press the 'Enter' key and you'll see messages that the buffering is occurring.<br />
<br />
</li>
<li>When the process completes, confirm that an output buffer file  has been created and added to the map (Figure 1.3 has the output that was automatically added to the map in dark gray and the input which was added to the map by hand). The feature color is randomly assigned, so your buffer color may be different. <br />
<br />
</li>
<li>You should receive a message in the Python Window giving the name of the result file. If you get an error message instead, then  the input data may have been moved or corrupted or the Python statement wasn't copied correctly. <br />
<br />
</li>
<li>You have just called a tool from Python. This is  just like running it from the ArcToolbox graphical user interface (GUI) such as the one shown in Figure 1.6. The  items in the parentheses in the tool call are the
            parameter values, the user input. Compare these parameters to the user input in Figure 1.6. Identify the three differences between the parameters used in the Python statement you ran and those used in this GUI example (Answers given at the bottom of this page).<br />
</li>
</ol>
<p><img src="../images/tool_GUI.png" alt="Buffer tool graphical user interface" /><br />
<strong>Figure 1.6</strong> Each input slot in the graphical user interface (GUI) for running the buffer tool corresponds to a parameter in the Python code blueprint.</p>
<hr />
<table border="0" width="775">
<tbody>
<tr>
<th scope="row" align="left" width="561"><span class="head">1.4 What's next</span></th>
<td align="right" width="204"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<p>The ArcMap Python Window is good for running simple code and testing code related to mapping; Chapter 2 introduces other software which we'll use much more frequently to save and run scripts. You'll need to learn a little about this software before you can start learning more about Python.</p>
<hr />
<p>Answers to the question posed in step 10 above: <br />
          1) The output file names differ: parkBuffer.shp versus park_Buff.shp. <br />
          2) The buffer distances differ: 0.25 miles versus 5 miles.<br />
          3) Dissolve types differ: ALL versus NONE.</p><a href="#top">back to top</a> <a href="#top">back to top</a> <blockquote>
<p>The best way to copy, delete, move, and rename Esri compound data types is to use ArcCatalog or call tools from a Python script.</p>
</blockquote><a href="#top">back to top</a> <p><span style="font-weight: bold">Example 1.1:</span> This Python script calls the Buffer (Analysis) tool.</p>
<p><code><span class="c"># simpleBuffer.py</span>
<span class="kn"><br />
import</span> <span class="nn">arcpy</span>
<br />
<span class="c"># Buffer park.shp by 0.25 miles. The output buffer erases the input features so that the buffer is only outside it.</span>
<span class="c"><br />
# The ends of the buffers are rounded and all buffers are dissolved together as a single feature.</span>
<span class="n"><br />
arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="s">&#39;C:/gispy/data/ch01/park.shp&#39;</span><span class="p">,</span> <span class="s">&#39;parkBuffer.shp&#39;</span><span class="p">,</span> <span class="s">&#39;0.25 miles&#39;</span><span class="p">,</span> <span class="s">&#39;OUTSIDE_ONLY&#39;</span><span class="p">,</span> <span class="s">&#39;ROUND&#39;</span><span class="p">,</span> <span class="s">&#39;ALL&#39;</span><span class="p">)</span><br />
</code></p>
<p><img src="../images/buffer_outside_only.png" alt="Example 1 input and output" /><br />
<strong>Figure 1.3 </strong>Input (light gray) and output (dark gray) from script Example 1.1.</p><a href="#top">back to top</a> <span class="head">1.1 <strong>Why use Python for GIS programming?</strong></span><a href="#top">back to top</a> <span class="head">1.2 <strong>Sample data and scripts</strong></span><a href="#top">back to top</a> <blockquote>
<p>The best way to copy, delete, move, and rename Esri compound data types is to use ArcCatalog or call tools from a Python script.</p>
</blockquote><span class="head">1.3  A starter example<a name="example" id="example"></a></span><a href="#top">back to top</a> <p><span style="font-weight: bold">Example 1.1:</span> This Python script calls the Buffer (Analysis) tool.</p>
<p><code><span class="c"># simpleBuffer.py</span>
<span class="kn"><br />
import</span> <span class="nn">arcpy</span>
<br />
<span class="c"># Buffer park.shp by 0.25 miles. The output buffer erases the input features so that the buffer is only outside it.</span>
<span class="c"><br />
# The ends of the buffers are rounded and all buffers are dissolved together as a single feature.</span>
<span class="n"><br />
arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="s">&#39;C:/gispy/data/ch01/park.shp&#39;</span><span class="p">,</span> <span class="s">&#39;parkBuffer.shp&#39;</span><span class="p">,</span> <span class="s">&#39;0.25 miles&#39;</span><span class="p">,</span> <span class="s">&#39;OUTSIDE_ONLY&#39;</span><span class="p">,</span> <span class="s">&#39;ROUND&#39;</span><span class="p">,</span> <span class="s">&#39;ALL&#39;</span><span class="p">)</span><br />
</code></p>
<p><img src="../images/buffer_outside_only.png" alt="Example 1 input and output" /><br />
<strong>Figure 1.3 </strong>Input (light gray) and output (dark gray) from script Example 1.1.</p><span class="head">1.4 What's next</span><a href="#top">back to top</a> ------------------------------------------------------------rows: 8 cols: 1<span class="head">1.1 <strong>Why use Python for GIS programming?</strong></span><span class="head">1.2 <strong>Sample data and scripts</strong></span><span class="head">1.3  A starter example<a name="example" id="example"></a></span><span class="head">1.4 What's next</span><hr />
<img src="../images/bear.png" alt="f" width="300" height="337" />
<p class="head">Chapter objectives</p>
        After reading this chapter, you'll be able to do the following:
        <ul>
<li>Articulate in general terms, what scripting can do for GIS workflow.</li>
<li>Explain why Python is selected for GIS programming. </li>
<li>Install and locate the sample materials provided with the book.</li>
<li>Contrast the view of compound GIS datasets in Windows Explorer and ArcCatalog. </li>
<li>Run code in the ArcGIS Python Window.</li>
</ul>
<hr />
<span class="foo"> <span class="head">Chapter Outline</span>
<ul>
<li>Why use Python for GIS programming</li>
<li>Sample scripts and data</li>
<li>A starter example</li>
<li> What's next</li>
</ul></span>
<hr />
        &lt;vignette&gt;
        <p>Congratulations on your new job as a GIS specialist for the  National Park Service. Your supervisor has asked you to analyze some wildlife data. She gives you a specific example to start with: One data table (Bird Species) contains a list of over 600 bird species known to be native to North Carolina. Another data table (Bird Inventory) contains over 5000 records, each corresponding to a sighting of a particular bird. Your task is to summarize this data by determining what percent of the native Bird Species appear in the inventory and map the results. Once you complete this, she would like you to answer the same question based on species inventory datasets for fish, invertebrates, and so forth. </p>
<p>Performing this analysis manually for one pair of datasets would be time consuming and error prone. Performing this manually for many pairs of datasets is completely impractical. Common GIS tasks such as this provide a strong motivation for learning how to automate tasks. </p>
<p>Python programming to the rescue! This analysis can be performed in about 10 lines of Python code. You could even add a graphical user interface, to allow your supervisor to run the analysis herself on other datasets. You could even use Python to automatically add the sighting locations to ArcMap. This book will equip you to do all of these things and more. </p>
<p>&lt;/vignette&gt;</p>
<p>Over the next 24 chapters readers will learn the rudimentary elements of programming through Python and how to use programming to solve GIS problems.     This book shows how to automatically read, write, and analyze GIS data, how to script repetitive processes for multiple datasets, and how to make  scripts flexible, reusable, portable, and robust. Readers will learn a little bit about HTML, KML, and SQL,  user interfaces and map modification, and a lot about  Python for ArcGIS.  Numerous  examples and exercises provide hands-on practice. Warning: this is not a passive learning experience. You will get your hands dirty. Excited yet? Let's get started!<span><br />
</span> </p>
<p> Geographic information science tasks often involve processing multiple large datasets.  These tasks may need to be repeated on multiple fields, files, and directories, hourly, daily, or monthly and performed by multiple users. Scripts provide a powerful solution with the ability to automate repetitive tasks. Scripting can increase productivity and facilitate sharing. Some scrip table tasks involve common workflow activities, such as, reformatting data, copying files selectively, and searching database content. Scripts can also harness the powerful tool set provided by ArcGIS for geoprocessing. <em>Geoprocessing</em> is a term for using GIS software to manipulate geographic data, to perform tasks such as buffering, clipping, and intersecting geographic data.  Scripting is a text-based means of running processes and accessing data that would otherwise be done using graphical user interfaces (GUI's), like the buffer tool dialog in Figure 1.6. Scripting offers two core capabilities that are needed in nearly any GIS work:</p>
<ul>
<li>Efficient batch processing.</li>
<li>Automated file reading and writing.</li>
</ul>
<p>This book explains how  to apply these skills to vector, raster, and ASCII text data files and their fields and records. Moreover, the reader will learn about <em>Script Tools </em>and <em>Python toolboxes</em> to create graphical user interfaces for  scripts. The book also discusses other useful  programming skills for those in the geospatial sciences, such as mapping with scripts and parsing HTML and KML.</p>
<table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">1.1 <strong>Why use Python for GIS programming?</strong></span></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p> The programming language named Python, created by Guido van Rossum, Dutch computer programmer and fan of the comedy group Monty Python, is an ideal programming language for GIS users for several reasons:</p>
<ul>
<li><strong>Python is easy to pick up. </strong>
<!--The selected scripting topics aim to explain how to automate common workflow tasks and geoprocessing tasks. -->
            Python is a nice 'starter'  programming language: easy to interpret with a  clean visual layout. Python uses English keywords or indentation frequently where  other languages use punctuation. Some languages require a lot of set-up  code before even creating a program that says 'Hello.' With  Python, the code you need to print Hello is <code>print 'Hello'</code>.<br />
<br />
</li>
<li><strong>Python is object-oriented.</strong> The idea of object-oriented programming (OOP) was a paradigm shift from functional programming approach used before the 1990's. In functional programming, coding is  like writing a collection of mathematical functions. By contrast, object-oriented coding is organized around  objects which have properties and functions that do things to that object. OOP languages  share common conventions, making it easier for those who have some OOP experience in other languages. There are also advantages  to programmers at any level such as context menus which provide cues about how to complete a line of code. <strong><br />
<br />
</strong></li>
<li><strong>Python help abounds.</strong> Another reason to use Python is the abundance of  resources available. Python is an open-source programming language. In the spirit of open-source software, the Python programming community posts plenty of free information online.  'PythonResources.pdf' in 'C:\gispy\sample_scripts\ch01' lists some key tutorials, references, and forums.  <br />
<br />
</li>
<li><strong> GIS embraces Python</strong>. Due to many of the reasons listed above, the GIS community has  adopted the Python programming language.  ArcGIS software, in particular has embraced Python and  expands the Python functionality with each new release. Python scripts can be used to run ArcGIS geoprocessing tools and more. Esri's ArcGIS Desktop  even provides a built-in Python command prompt for running  Python code statements.  The 'ArcGIS Resources' site provides extensive online help for Python, including examples and code templates.   You will refer to this site frequently for  writing ArcGIS Python scripts. Several open-source GIS programs  also provide Python programming interfaces. For example,  GRASS GIS  includes an embedded Python command prompt for running GRASS geoprocessing tools via Python and QGIS can be called from Python. Once you know Python for ArcGIS Desktop, you'll have  a good foundation to learn  Python for other GIS tools. <br />
<br />
</li>
<li><strong>Python comes with ArcGIS</strong>. Python is installed automatically when you install ArcGIS. The starter example below shows you how to use  Python inside of ArcGIS. Later, you'll use a program called PythonWin or PyScripter, instead of ArcGIS to run Python. An exercise in Chapter 2  walks you through the installation process. The installation is easy and only takes a few moments.</li>
</ul>
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">1.2 <strong>Sample data and scripts</strong></span></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>To use the  examples and exercises in this book, you'll need  to run the CD included with the book to copy the necessary files to your computer. Once the installation is complete, you should find  a 'C:\gispy' directory; Inside you will find  sample scripts, a scratch workspace, exercises, and sample data:<br />
</p>
<ul><li><strong>Sample scripts</strong> correspond to the examples that appear in the text. The 'C:\gispy\sample_scripts' directory contains one folder for each chapter.   Each time a sample script is referenced, by script name, such as 'simpleBuffer.py', it appears in the corresponding directory for that chapter. <br />
<br />
</li>
<li><strong>Scratch workspace</strong>  provides  an  output directory, a kind of sandbox where data output data can be sent. This directory is empty for now. You can run scripts that generate output, check the results in this directory, and then clear this space before starting the next example. This makes it easy to check if the desired output was created and to keep input data directories from getting cluttered with unneeded output. <br />
<br />
</li>
<li><strong>Exercises</strong>  are located in  'C:\gispy\data\exercises', which contains a folder for each chapter, except this one.  The sample scripts referred to in the exercise questions are located in the 'C:\gispy\sample_scripts' corresponding chapter directory. The book contains around 200 exercises.<br />
<br />
</li>
<li><strong>Sample data</strong> for testing the examples and exercises  will be located in  'C:\gispy\data'. There is a folder for each chapter. You will learn how to write and run scripts in any directory, but for consistency in the examples and exercises,  'C:\gispy' directories have been specified throughout the book. <br />
</li>
</ul>
<p>Several GIS data formats are used in this book, including  compound data formats such as GRID rasters,  geodatabases, and  shapefiles. In Windows Explorer, you can see the file components that make up these compound data formats. 
          In ArcCatalog, which is designed for browsing GIS data formats, you see the software interpretation of these files; It provides geographic and tabular views of the data. We'll look at three examples to compare these data representations.</p>
<p><strong>GRID raster<br />
</strong>A <em> GRID raster</em> defines a geographic space with a grid of equally sized cells. Unlike other raster formats, such as JPEG or PNG, the file name does have a file extension. The file format consists of two directories, each of which contains multiple files. One directory has the name of the raster and contains '.adf' files which store information about extent, cell resolution, and so forth; The other directory, named 'info', contains '.dat' and '.nit' files which store file organization information. Figure 1.1 shows a GRID raster named 'getty_rast' in Windows Explorer (left) and in ArcCatalog (right).  Windows explorer, displays the two directories, 'getty_rast' and 'info' that together define the raster named 'getty_rast'.   The ArcCatalog directory tree displays the same  GRID raster as a single item  with a grid-like icon. </p>
<p><img src="../images/getty_rast.png" alt="a" /> <img src="../images/CatalogGetty_rast.png" alt="a" /><br />
<strong>Figure 1.1: </strong>Windows Explorer (left) and ArcCatalog (right) views of an Esri grid raster file, 'getty_rast'.<br />
</p>
<p><strong>Geodatabase</strong><br />
       Esri has three geodatabase formats: file, personal, and ArcSDE. A geodatabase stores a collection of GIS datasets.  Multiple formats of data  (raster, vector, tabular, and so forth) can be stored together in a geodatabase.   Figure 1.2 shows a file geodatabase, 'regions.gdb' in Windows Explorer (top and left) and in ArcCatalog (right). The top image shows that 'region.gdb' is the name of a directory. Inside the directory are a set of files associated with each of datasets  (with extensions .freelist, .gdbindexes, .gdbtable, .gdbtablx and so forth), only a few of which  are shown here.  The ArcCatalog view in Figure 1.2 shows the 5 datasets (four vector and one raster) in this geodatabase. The geodatabase has a silo-shaped icon. Clicking the geodatabase name  expands the tree to show the datasets stored in the geodatabase. The dataset icons vary based on their formats: 'fireStations' is a point vector dataset, 'landCover' and 'workzones' are polygon vector datasets, 'trail' is a polyline dataset, and 'tree' is a raster dataset. The vector format files are referred to as geodatabase <em>feature classes</em>. Feature classes store geographic features and their non-geographic attributes.</p>
<p><img src="../images/testerGDB.png" alt="a" align="left" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><br />
</p>
<p>&nbsp;</p>
<p><br />
<img src="../images/CatalogTesterGDBInside.png" alt="a" /><img src="../images/CatalogTesterGDB.png" alt="a" /><br />
<strong>Figure 1.2: </strong>Windows Explorer (left) and ArcCatalog (right) views of an Esri file geodatabase, 'region.gdb'.<br />
</p>
<p><strong>Shapefile</strong><br />
        A <em>shapefile</em>, a stand-alone  feature class,   is a popular format for storing GIS vector data. The features, consisting of geometric primitives (points, lines, or polygons), with associated data attributes are stored in a set of files. Though it is referred to as a shapefile, it consists of three or more files, each with different file extensions (the '.shp', '.shx', and '.dbf' files are mandatory). Figure 1.4 (left) shows the Windows Explorer (left) and ArcCatalog (right) view of a shapefile named 'park'. Shapefiles are often referred to with their '.shp' extension in Python scripts. </p>
<table width="779" border="3" bgcolor="#CEDAE3">
<tr>
<td width="765"><blockquote>
<p>The best way to copy, delete, move, and rename Esri compound data types is to use ArcCatalog or call tools from a Python script.</p>
</blockquote></td>
</tr>
</table>
<br />
<table border="0" width="775">
<tbody>
<tr>
<th scope="row" align="left" width="561"><span class="head">1.3  A starter example<a name="example" id="example"></a></span></th>
<td align="right" width="204"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<table width="834" border="0" bgcolor="#FFFFCC">
<tr>
<td width="828" scope="row"><p><span style="font-weight: bold">Example 1.1:</span> This Python script calls the Buffer (Analysis) tool.</p>
<p><code><span class="c"># simpleBuffer.py</span>
<span class="kn"><br />
import</span> <span class="nn">arcpy</span>
<br />
<span class="c"># Buffer park.shp by 0.25 miles. The output buffer erases the input features so that the buffer is only outside it.</span>
<span class="c"><br />
# The ends of the buffers are rounded and all buffers are dissolved together as a single feature.</span>
<span class="n"><br />
arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="s">&#39;C:/gispy/data/ch01/park.shp&#39;</span><span class="p">,</span> <span class="s">&#39;parkBuffer.shp&#39;</span><span class="p">,</span> <span class="s">&#39;0.25 miles&#39;</span><span class="p">,</span> <span class="s">&#39;OUTSIDE_ONLY&#39;</span><span class="p">,</span> <span class="s">&#39;ROUND&#39;</span><span class="p">,</span> <span class="s">&#39;ALL&#39;</span><span class="p">)</span><br />
</code></p>
<p><img src="../images/buffer_outside_only.png" alt="Example 1 input and output" /><br />
<strong>Figure 1.3 </strong>Input (light gray) and output (dark gray) from script Example 1.1.</p></td>
</tr>
</table>
<p>To get a feel for how to work the sample data and scripts, call the ArcGIS Buffer (Analysis) tool, to generate buffers around the input features by following these steps:</p>
<ol>
<li>Preview  'park.shp' in 'C:/gispy/data/ch01' using both Windows Explorer and ArcCatalog, as shown in Figure 1.4.  <br />
<br />
<img src="../images/windowsDataCorrect.png" alt="a" /><img src="../images/catalogCorrect.png" alt="a" /><br />
<strong>Figure 1.4 </strong>Windows Explorer (left) and ArcCatalog (right) views of Esri shapefile, 'park.shp'.<br />
<br />
</li>
<li>When you preview the file in ArcCatalog, a lock file appears in the Windows Explorer directory. Locking interferes with geoprocessing tools. To unlock the file, select another directory in ArcCatalog and then refresh the table of contents. If the lock persists, close ArcCatalog. <br />
<br />
</li>
<li>Open ArcMap. Open the ArcGIS Python Window as shown in Figure 1.5.<br />
<img src="../images/pythonWindow.png" alt="ArcGISPythonWindow" /><br />
<strong>Figure 1.5</strong>: The ArcGIS Python window embedded in ArcMap.<br />
<br />
</li>
<li>Open Notepad (or Wordpad) on your computer. <br />
<br />
</li>
<li>In Notepad, browse to the sample scripts for Chapter 1 ('C:\gispy\sample_scripts\ch01') and open  'simpleBuffer.py'. It should look like the script shown in  Example 1.1, except the text will all appear black.<br />
<br />
</li>
<li>Copy the last line of code from 'simpleBuffer.py'   into the ArcGIS Python Window. Be sure to copy the entire line of code, starting with <code>arcpy.Buffer</code>, all the way through the right parenthesis. It should look like this:<br />
<code><br />
<span class="n">arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="s">&#39;C:/gispy/data/ch01/park.shp&#39;</span><span class="p">,</span> <span class="s">&#39;parkBuffer.shp&#39;</span><span class="p">,</span> <span class="s">&#39;0.25 miles&#39;</span><span class="p">,</span> <span class="s">&#39;OUTSIDE_ONLY&#39;</span><span class="p">,</span> <span class="s">&#39;ROUND&#39;</span><span class="p">,</span> <span class="s">&#39;ALL&#39;</span><span class="p">)</span> <br />
</code><br />
</li>
<li>Press the 'Enter' key and you'll see messages that the buffering is occurring.<br />
<br />
</li>
<li>When the process completes, confirm that an output buffer file  has been created and added to the map (Figure 1.3 has the output that was automatically added to the map in dark gray and the input which was added to the map by hand). The feature color is randomly assigned, so your buffer color may be different. <br />
<br />
</li>
<li>You should receive a message in the Python Window giving the name of the result file. If you get an error message instead, then  the input data may have been moved or corrupted or the Python statement wasn't copied correctly. <br />
<br />
</li>
<li>You have just called a tool from Python. This is  just like running it from the ArcToolbox graphical user interface (GUI) such as the one shown in Figure 1.6. The  items in the parentheses in the tool call are the
            parameter values, the user input. Compare these parameters to the user input in Figure 1.6. Identify the three differences between the parameters used in the Python statement you ran and those used in this GUI example (Answers given at the bottom of this page).<br />
</li>
</ol>
<p><img src="../images/tool_GUI.png" alt="Buffer tool graphical user interface" /><br />
<strong>Figure 1.6</strong> Each input slot in the graphical user interface (GUI) for running the buffer tool corresponds to a parameter in the Python code blueprint.</p>
<hr />
<table border="0" width="775">
<tbody>
<tr>
<th scope="row" align="left" width="561"><span class="head">1.4 What's next</span></th>
<td align="right" width="204"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<p>The ArcMap Python Window is good for running simple code and testing code related to mapping; Chapter 2 introduces other software which we'll use much more frequently to save and run scripts. You'll need to learn a little about this software before you can start learning more about Python.</p>
<hr />
<p>Answers to the question posed in step 10 above: <br />
          1) The output file names differ: parkBuffer.shp versus park_Buff.shp. <br />
          2) The buffer distances differ: 0.25 miles versus 5 miles.<br />
          3) Dissolve types differ: ALL versus NONE.</p><a href="#top">back to top</a> <a href="#top">back to top</a> <blockquote>
<p>The best way to copy, delete, move, and rename Esri compound data types is to use ArcCatalog or call tools from a Python script.</p>
</blockquote><a href="#top">back to top</a> <p><span style="font-weight: bold">Example 1.1:</span> This Python script calls the Buffer (Analysis) tool.</p>
<p><code><span class="c"># simpleBuffer.py</span>
<span class="kn"><br />
import</span> <span class="nn">arcpy</span>
<br />
<span class="c"># Buffer park.shp by 0.25 miles. The output buffer erases the input features so that the buffer is only outside it.</span>
<span class="c"><br />
# The ends of the buffers are rounded and all buffers are dissolved together as a single feature.</span>
<span class="n"><br />
arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="s">&#39;C:/gispy/data/ch01/park.shp&#39;</span><span class="p">,</span> <span class="s">&#39;parkBuffer.shp&#39;</span><span class="p">,</span> <span class="s">&#39;0.25 miles&#39;</span><span class="p">,</span> <span class="s">&#39;OUTSIDE_ONLY&#39;</span><span class="p">,</span> <span class="s">&#39;ROUND&#39;</span><span class="p">,</span> <span class="s">&#39;ALL&#39;</span><span class="p">)</span><br />
</code></p>
<p><img src="../images/buffer_outside_only.png" alt="Example 1 input and output" /><br />
<strong>Figure 1.3 </strong>Input (light gray) and output (dark gray) from script Example 1.1.</p><a href="#top">back to top</a> <span class="head">1.1 <strong>Why use Python for GIS programming?</strong></span><a href="#top">back to top</a> <span class="head">1.2 <strong>Sample data and scripts</strong></span><a href="#top">back to top</a> <blockquote>
<p>The best way to copy, delete, move, and rename Esri compound data types is to use ArcCatalog or call tools from a Python script.</p>
</blockquote><span class="head">1.3  A starter example<a name="example" id="example"></a></span><a href="#top">back to top</a> <p><span style="font-weight: bold">Example 1.1:</span> This Python script calls the Buffer (Analysis) tool.</p>
<p><code><span class="c"># simpleBuffer.py</span>
<span class="kn"><br />
import</span> <span class="nn">arcpy</span>
<br />
<span class="c"># Buffer park.shp by 0.25 miles. The output buffer erases the input features so that the buffer is only outside it.</span>
<span class="c"><br />
# The ends of the buffers are rounded and all buffers are dissolved together as a single feature.</span>
<span class="n"><br />
arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="s">&#39;C:/gispy/data/ch01/park.shp&#39;</span><span class="p">,</span> <span class="s">&#39;parkBuffer.shp&#39;</span><span class="p">,</span> <span class="s">&#39;0.25 miles&#39;</span><span class="p">,</span> <span class="s">&#39;OUTSIDE_ONLY&#39;</span><span class="p">,</span> <span class="s">&#39;ROUND&#39;</span><span class="p">,</span> <span class="s">&#39;ALL&#39;</span><span class="p">)</span><br />
</code></p>
<p><img src="../images/buffer_outside_only.png" alt="Example 1 input and output" /><br />
<strong>Figure 1.3 </strong>Input (light gray) and output (dark gray) from script Example 1.1.</p><span class="head">1.4 What's next</span><a href="#top">back to top</a> ------------------------------------------------------------rows: 8 cols: 1<span class="head">1.1 <strong>Why use Python for GIS programming?</strong></span><span class="head">1.2 <strong>Sample data and scripts</strong></span><span class="head">1.3  A starter example<a name="example" id="example"></a></span><span class="head">1.4 What's next</span><hr />
<img src="../images/bear.png" alt="f" width="300" height="337" />
<p class="head">Chapter objectives</p>
        After reading this chapter, you'll be able to do the following:
        <ul>
<li>Articulate in general terms, what scripting can do for GIS workflow.</li>
<li>Explain why Python is selected for GIS programming. </li>
<li>Install and locate the sample materials provided with the book.</li>
<li>Contrast the view of compound GIS datasets in Windows Explorer and ArcCatalog. </li>
<li>Run code in the ArcGIS Python Window.</li>
</ul>
<hr />
<span class="foo"> <span class="head">Chapter Outline</span>
<ul>
<li>Why use Python for GIS programming</li>
<li>Sample scripts and data</li>
<li>A starter example</li>
<li> What's next</li>
</ul></span>
<hr />
        &lt;vignette&gt;
        <p>Congratulations on your new job as a GIS specialist for the  National Park Service. Your supervisor has asked you to analyze some wildlife data. She gives you a specific example to start with: One data table (Bird Species) contains a list of over 600 bird species known to be native to North Carolina. Another data table (Bird Inventory) contains over 5000 records, each corresponding to a sighting of a particular bird. Your task is to summarize this data by determining what percent of the native Bird Species appear in the inventory and map the results. Once you complete this, she would like you to answer the same question based on species inventory datasets for fish, invertebrates, and so forth. </p>
<p>Performing this analysis manually for one pair of datasets would be time consuming and error prone. Performing this manually for many pairs of datasets is completely impractical. Common GIS tasks such as this provide a strong motivation for learning how to automate tasks. </p>
<p>Python programming to the rescue! This analysis can be performed in about 10 lines of Python code. You could even add a graphical user interface, to allow your supervisor to run the analysis herself on other datasets. You could even use Python to automatically add the sighting locations to ArcMap. This book will equip you to do all of these things and more. </p>
<p>&lt;/vignette&gt;</p>
<p>Over the next 24 chapters readers will learn the rudimentary elements of programming through Python and how to use programming to solve GIS problems.     This book shows how to automatically read, write, and analyze GIS data, how to script repetitive processes for multiple datasets, and how to make  scripts flexible, reusable, portable, and robust. Readers will learn a little bit about HTML, KML, and SQL,  user interfaces and map modification, and a lot about  Python for ArcGIS.  Numerous  examples and exercises provide hands-on practice. Warning: this is not a passive learning experience. You will get your hands dirty. Excited yet? Let's get started!<span><br />
</span> </p>
<p> Geographic information science tasks often involve processing multiple large datasets.  These tasks may need to be repeated on multiple fields, files, and directories, hourly, daily, or monthly and performed by multiple users. Scripts provide a powerful solution with the ability to automate repetitive tasks. Scripting can increase productivity and facilitate sharing. Some scrip table tasks involve common workflow activities, such as, reformatting data, copying files selectively, and searching database content. Scripts can also harness the powerful tool set provided by ArcGIS for geoprocessing. <em>Geoprocessing</em> is a term for using GIS software to manipulate geographic data, to perform tasks such as buffering, clipping, and intersecting geographic data.  Scripting is a text-based means of running processes and accessing data that would otherwise be done using graphical user interfaces (GUI's), like the buffer tool dialog in Figure 1.6. Scripting offers two core capabilities that are needed in nearly any GIS work:</p>
<ul>
<li>Efficient batch processing.</li>
<li>Automated file reading and writing.</li>
</ul>
<p>This book explains how  to apply these skills to vector, raster, and ASCII text data files and their fields and records. Moreover, the reader will learn about <em>Script Tools </em>and <em>Python toolboxes</em> to create graphical user interfaces for  scripts. The book also discusses other useful  programming skills for those in the geospatial sciences, such as mapping with scripts and parsing HTML and KML.</p>
<table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">1.1 <strong>Why use Python for GIS programming?</strong></span></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p> The programming language named Python, created by Guido van Rossum, Dutch computer programmer and fan of the comedy group Monty Python, is an ideal programming language for GIS users for several reasons:</p>
<ul>
<li><strong>Python is easy to pick up. </strong>
<!--The selected scripting topics aim to explain how to automate common workflow tasks and geoprocessing tasks. -->
            Python is a nice 'starter'  programming language: easy to interpret with a  clean visual layout. Python uses English keywords or indentation frequently where  other languages use punctuation. Some languages require a lot of set-up  code before even creating a program that says 'Hello.' With  Python, the code you need to print Hello is <code>print 'Hello'</code>.<br />
<br />
</li>
<li><strong>Python is object-oriented.</strong> The idea of object-oriented programming (OOP) was a paradigm shift from functional programming approach used before the 1990's. In functional programming, coding is  like writing a collection of mathematical functions. By contrast, object-oriented coding is organized around  objects which have properties and functions that do things to that object. OOP languages  share common conventions, making it easier for those who have some OOP experience in other languages. There are also advantages  to programmers at any level such as context menus which provide cues about how to complete a line of code. <strong><br />
<br />
</strong></li>
<li><strong>Python help abounds.</strong> Another reason to use Python is the abundance of  resources available. Python is an open-source programming language. In the spirit of open-source software, the Python programming community posts plenty of free information online.  'PythonResources.pdf' in 'C:\gispy\sample_scripts\ch01' lists some key tutorials, references, and forums.  <br />
<br />
</li>
<li><strong> GIS embraces Python</strong>. Due to many of the reasons listed above, the GIS community has  adopted the Python programming language.  ArcGIS software, in particular has embraced Python and  expands the Python functionality with each new release. Python scripts can be used to run ArcGIS geoprocessing tools and more. Esri's ArcGIS Desktop  even provides a built-in Python command prompt for running  Python code statements.  The 'ArcGIS Resources' site provides extensive online help for Python, including examples and code templates.   You will refer to this site frequently for  writing ArcGIS Python scripts. Several open-source GIS programs  also provide Python programming interfaces. For example,  GRASS GIS  includes an embedded Python command prompt for running GRASS geoprocessing tools via Python and QGIS can be called from Python. Once you know Python for ArcGIS Desktop, you'll have  a good foundation to learn  Python for other GIS tools. <br />
<br />
</li>
<li><strong>Python comes with ArcGIS</strong>. Python is installed automatically when you install ArcGIS. The starter example below shows you how to use  Python inside of ArcGIS. Later, you'll use a program called PythonWin or PyScripter, instead of ArcGIS to run Python. An exercise in Chapter 2  walks you through the installation process. The installation is easy and only takes a few moments.</li>
</ul>
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">1.2 <strong>Sample data and scripts</strong></span></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>To use the  examples and exercises in this book, you'll need  to run the CD included with the book to copy the necessary files to your computer. Once the installation is complete, you should find  a 'C:\gispy' directory; Inside you will find  sample scripts, a scratch workspace, exercises, and sample data:<br />
</p>
<ul><li><strong>Sample scripts</strong> correspond to the examples that appear in the text. The 'C:\gispy\sample_scripts' directory contains one folder for each chapter.   Each time a sample script is referenced, by script name, such as 'simpleBuffer.py', it appears in the corresponding directory for that chapter. <br />
<br />
</li>
<li><strong>Scratch workspace</strong>  provides  an  output directory, a kind of sandbox where data output data can be sent. This directory is empty for now. You can run scripts that generate output, check the results in this directory, and then clear this space before starting the next example. This makes it easy to check if the desired output was created and to keep input data directories from getting cluttered with unneeded output. <br />
<br />
</li>
<li><strong>Exercises</strong>  are located in  'C:\gispy\data\exercises', which contains a folder for each chapter, except this one.  The sample scripts referred to in the exercise questions are located in the 'C:\gispy\sample_scripts' corresponding chapter directory. The book contains around 200 exercises.<br />
<br />
</li>
<li><strong>Sample data</strong> for testing the examples and exercises  will be located in  'C:\gispy\data'. There is a folder for each chapter. You will learn how to write and run scripts in any directory, but for consistency in the examples and exercises,  'C:\gispy' directories have been specified throughout the book. <br />
</li>
</ul>
<p>Several GIS data formats are used in this book, including  compound data formats such as GRID rasters,  geodatabases, and  shapefiles. In Windows Explorer, you can see the file components that make up these compound data formats. 
          In ArcCatalog, which is designed for browsing GIS data formats, you see the software interpretation of these files; It provides geographic and tabular views of the data. We'll look at three examples to compare these data representations.</p>
<p><strong>GRID raster<br />
</strong>A <em> GRID raster</em> defines a geographic space with a grid of equally sized cells. Unlike other raster formats, such as JPEG or PNG, the file name does have a file extension. The file format consists of two directories, each of which contains multiple files. One directory has the name of the raster and contains '.adf' files which store information about extent, cell resolution, and so forth; The other directory, named 'info', contains '.dat' and '.nit' files which store file organization information. Figure 1.1 shows a GRID raster named 'getty_rast' in Windows Explorer (left) and in ArcCatalog (right).  Windows explorer, displays the two directories, 'getty_rast' and 'info' that together define the raster named 'getty_rast'.   The ArcCatalog directory tree displays the same  GRID raster as a single item  with a grid-like icon. </p>
<p><img src="../images/getty_rast.png" alt="a" /> <img src="../images/CatalogGetty_rast.png" alt="a" /><br />
<strong>Figure 1.1: </strong>Windows Explorer (left) and ArcCatalog (right) views of an Esri grid raster file, 'getty_rast'.<br />
</p>
<p><strong>Geodatabase</strong><br />
       Esri has three geodatabase formats: file, personal, and ArcSDE. A geodatabase stores a collection of GIS datasets.  Multiple formats of data  (raster, vector, tabular, and so forth) can be stored together in a geodatabase.   Figure 1.2 shows a file geodatabase, 'regions.gdb' in Windows Explorer (top and left) and in ArcCatalog (right). The top image shows that 'region.gdb' is the name of a directory. Inside the directory are a set of files associated with each of datasets  (with extensions .freelist, .gdbindexes, .gdbtable, .gdbtablx and so forth), only a few of which  are shown here.  The ArcCatalog view in Figure 1.2 shows the 5 datasets (four vector and one raster) in this geodatabase. The geodatabase has a silo-shaped icon. Clicking the geodatabase name  expands the tree to show the datasets stored in the geodatabase. The dataset icons vary based on their formats: 'fireStations' is a point vector dataset, 'landCover' and 'workzones' are polygon vector datasets, 'trail' is a polyline dataset, and 'tree' is a raster dataset. The vector format files are referred to as geodatabase <em>feature classes</em>. Feature classes store geographic features and their non-geographic attributes.</p>
<p><img src="../images/testerGDB.png" alt="a" align="left" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><br />
</p>
<p>&nbsp;</p>
<p><br />
<img src="../images/CatalogTesterGDBInside.png" alt="a" /><img src="../images/CatalogTesterGDB.png" alt="a" /><br />
<strong>Figure 1.2: </strong>Windows Explorer (left) and ArcCatalog (right) views of an Esri file geodatabase, 'region.gdb'.<br />
</p>
<p><strong>Shapefile</strong><br />
        A <em>shapefile</em>, a stand-alone  feature class,   is a popular format for storing GIS vector data. The features, consisting of geometric primitives (points, lines, or polygons), with associated data attributes are stored in a set of files. Though it is referred to as a shapefile, it consists of three or more files, each with different file extensions (the '.shp', '.shx', and '.dbf' files are mandatory). Figure 1.4 (left) shows the Windows Explorer (left) and ArcCatalog (right) view of a shapefile named 'park'. Shapefiles are often referred to with their '.shp' extension in Python scripts. </p>
<table width="779" border="3" bgcolor="#CEDAE3">
<tr>
<td width="765"><blockquote>
<p>The best way to copy, delete, move, and rename Esri compound data types is to use ArcCatalog or call tools from a Python script.</p>
</blockquote></td>
</tr>
</table>
<br />
<table border="0" width="775">
<tbody>
<tr>
<th scope="row" align="left" width="561"><span class="head">1.3  A starter example<a name="example" id="example"></a></span></th>
<td align="right" width="204"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<table width="834" border="0" bgcolor="#FFFFCC">
<tr>
<td width="828" scope="row"><p><span style="font-weight: bold">Example 1.1:</span> This Python script calls the Buffer (Analysis) tool.</p>
<p><code><span class="c"># simpleBuffer.py</span>
<span class="kn"><br />
import</span> <span class="nn">arcpy</span>
<br />
<span class="c"># Buffer park.shp by 0.25 miles. The output buffer erases the input features so that the buffer is only outside it.</span>
<span class="c"><br />
# The ends of the buffers are rounded and all buffers are dissolved together as a single feature.</span>
<span class="n"><br />
arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="s">&#39;C:/gispy/data/ch01/park.shp&#39;</span><span class="p">,</span> <span class="s">&#39;parkBuffer.shp&#39;</span><span class="p">,</span> <span class="s">&#39;0.25 miles&#39;</span><span class="p">,</span> <span class="s">&#39;OUTSIDE_ONLY&#39;</span><span class="p">,</span> <span class="s">&#39;ROUND&#39;</span><span class="p">,</span> <span class="s">&#39;ALL&#39;</span><span class="p">)</span><br />
</code></p>
<p><img src="../images/buffer_outside_only.png" alt="Example 1 input and output" /><br />
<strong>Figure 1.3 </strong>Input (light gray) and output (dark gray) from script Example 1.1.</p></td>
</tr>
</table>
<p>To get a feel for how to work the sample data and scripts, call the ArcGIS Buffer (Analysis) tool, to generate buffers around the input features by following these steps:</p>
<ol>
<li>Preview  'park.shp' in 'C:/gispy/data/ch01' using both Windows Explorer and ArcCatalog, as shown in Figure 1.4.  <br />
<br />
<img src="../images/windowsDataCorrect.png" alt="a" /><img src="../images/catalogCorrect.png" alt="a" /><br />
<strong>Figure 1.4 </strong>Windows Explorer (left) and ArcCatalog (right) views of Esri shapefile, 'park.shp'.<br />
<br />
</li>
<li>When you preview the file in ArcCatalog, a lock file appears in the Windows Explorer directory. Locking interferes with geoprocessing tools. To unlock the file, select another directory in ArcCatalog and then refresh the table of contents. If the lock persists, close ArcCatalog. <br />
<br />
</li>
<li>Open ArcMap. Open the ArcGIS Python Window as shown in Figure 1.5.<br />
<img src="../images/pythonWindow.png" alt="ArcGISPythonWindow" /><br />
<strong>Figure 1.5</strong>: The ArcGIS Python window embedded in ArcMap.<br />
<br />
</li>
<li>Open Notepad (or Wordpad) on your computer. <br />
<br />
</li>
<li>In Notepad, browse to the sample scripts for Chapter 1 ('C:\gispy\sample_scripts\ch01') and open  'simpleBuffer.py'. It should look like the script shown in  Example 1.1, except the text will all appear black.<br />
<br />
</li>
<li>Copy the last line of code from 'simpleBuffer.py'   into the ArcGIS Python Window. Be sure to copy the entire line of code, starting with <code>arcpy.Buffer</code>, all the way through the right parenthesis. It should look like this:<br />
<code><br />
<span class="n">arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="s">&#39;C:/gispy/data/ch01/park.shp&#39;</span><span class="p">,</span> <span class="s">&#39;parkBuffer.shp&#39;</span><span class="p">,</span> <span class="s">&#39;0.25 miles&#39;</span><span class="p">,</span> <span class="s">&#39;OUTSIDE_ONLY&#39;</span><span class="p">,</span> <span class="s">&#39;ROUND&#39;</span><span class="p">,</span> <span class="s">&#39;ALL&#39;</span><span class="p">)</span> <br />
</code><br />
</li>
<li>Press the 'Enter' key and you'll see messages that the buffering is occurring.<br />
<br />
</li>
<li>When the process completes, confirm that an output buffer file  has been created and added to the map (Figure 1.3 has the output that was automatically added to the map in dark gray and the input which was added to the map by hand). The feature color is randomly assigned, so your buffer color may be different. <br />
<br />
</li>
<li>You should receive a message in the Python Window giving the name of the result file. If you get an error message instead, then  the input data may have been moved or corrupted or the Python statement wasn't copied correctly. <br />
<br />
</li>
<li>You have just called a tool from Python. This is  just like running it from the ArcToolbox graphical user interface (GUI) such as the one shown in Figure 1.6. The  items in the parentheses in the tool call are the
            parameter values, the user input. Compare these parameters to the user input in Figure 1.6. Identify the three differences between the parameters used in the Python statement you ran and those used in this GUI example (Answers given at the bottom of this page).<br />
</li>
</ol>
<p><img src="../images/tool_GUI.png" alt="Buffer tool graphical user interface" /><br />
<strong>Figure 1.6</strong> Each input slot in the graphical user interface (GUI) for running the buffer tool corresponds to a parameter in the Python code blueprint.</p>
<hr />
<table border="0" width="775">
<tbody>
<tr>
<th scope="row" align="left" width="561"><span class="head">1.4 What's next</span></th>
<td align="right" width="204"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<p>The ArcMap Python Window is good for running simple code and testing code related to mapping; Chapter 2 introduces other software which we'll use much more frequently to save and run scripts. You'll need to learn a little about this software before you can start learning more about Python.</p>
<hr />
<p>Answers to the question posed in step 10 above: <br />
          1) The output file names differ: parkBuffer.shp versus park_Buff.shp. <br />
          2) The buffer distances differ: 0.25 miles versus 5 miles.<br />
          3) Dissolve types differ: ALL versus NONE.</p><a href="#top">back to top</a> <a href="#top">back to top</a> <blockquote>
<p>The best way to copy, delete, move, and rename Esri compound data types is to use ArcCatalog or call tools from a Python script.</p>
</blockquote><a href="#top">back to top</a> <p><span style="font-weight: bold">Example 1.1:</span> This Python script calls the Buffer (Analysis) tool.</p>
<p><code><span class="c"># simpleBuffer.py</span>
<span class="kn"><br />
import</span> <span class="nn">arcpy</span>
<br />
<span class="c"># Buffer park.shp by 0.25 miles. The output buffer erases the input features so that the buffer is only outside it.</span>
<span class="c"><br />
# The ends of the buffers are rounded and all buffers are dissolved together as a single feature.</span>
<span class="n"><br />
arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="s">&#39;C:/gispy/data/ch01/park.shp&#39;</span><span class="p">,</span> <span class="s">&#39;parkBuffer.shp&#39;</span><span class="p">,</span> <span class="s">&#39;0.25 miles&#39;</span><span class="p">,</span> <span class="s">&#39;OUTSIDE_ONLY&#39;</span><span class="p">,</span> <span class="s">&#39;ROUND&#39;</span><span class="p">,</span> <span class="s">&#39;ALL&#39;</span><span class="p">)</span><br />
</code></p>
<p><img src="../images/buffer_outside_only.png" alt="Example 1 input and output" /><br />
<strong>Figure 1.3 </strong>Input (light gray) and output (dark gray) from script Example 1.1.</p><a href="#top">back to top</a> <span class="head">1.1 <strong>Why use Python for GIS programming?</strong></span><a href="#top">back to top</a> <span class="head">1.2 <strong>Sample data and scripts</strong></span><a href="#top">back to top</a> <blockquote>
<p>The best way to copy, delete, move, and rename Esri compound data types is to use ArcCatalog or call tools from a Python script.</p>
</blockquote><span class="head">1.3  A starter example<a name="example" id="example"></a></span><a href="#top">back to top</a> <p><span style="font-weight: bold">Example 1.1:</span> This Python script calls the Buffer (Analysis) tool.</p>
<p><code><span class="c"># simpleBuffer.py</span>
<span class="kn"><br />
import</span> <span class="nn">arcpy</span>
<br />
<span class="c"># Buffer park.shp by 0.25 miles. The output buffer erases the input features so that the buffer is only outside it.</span>
<span class="c"><br />
# The ends of the buffers are rounded and all buffers are dissolved together as a single feature.</span>
<span class="n"><br />
arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="s">&#39;C:/gispy/data/ch01/park.shp&#39;</span><span class="p">,</span> <span class="s">&#39;parkBuffer.shp&#39;</span><span class="p">,</span> <span class="s">&#39;0.25 miles&#39;</span><span class="p">,</span> <span class="s">&#39;OUTSIDE_ONLY&#39;</span><span class="p">,</span> <span class="s">&#39;ROUND&#39;</span><span class="p">,</span> <span class="s">&#39;ALL&#39;</span><span class="p">)</span><br />
</code></p>
<p><img src="../images/buffer_outside_only.png" alt="Example 1 input and output" /><br />
<strong>Figure 1.3 </strong>Input (light gray) and output (dark gray) from script Example 1.1.</p><span class="head">1.4 What's next</span><a href="#top">back to top</a> ------------------------------Ch01.html processed++++++++
K:/www/outputPagesCh01.html written
Ch02.html STARTED++++++++
------------------------------rows: 47 cols: 0<strong class="head">2.1 Where to write code </strong><a name="IDE" id="models2"></a><span class="head">2.2 How to run code in PythonWin</span><a name="run" id="run"></a><strong class="head">2.3 How to pass input to a script</strong><a name="arguments" id="arguments"></a><b class="head">2.4 Python components</b><a name="components" id="keyterms2"></a><strong><span class="head">2.4.1 Comments</span></strong><strong><span class="head">2.4.2 Keywords</span></strong><strong><span class="head">2.4.3 Indentation</span></strong><strong><span class="head">2.4.4 Built-in functions</span></strong><code>functionName(argument1, 
                argument2, argument3,...)</code><strong><span class="head">2.4.5 Variables, assignment statements, and dynamic typing</span></strong><strong><span class="head">2.4.6 Naming variables and tracebacks</span></strong><strong><span class="head">2.4.7 Built-in constants and exceptions</span></strong><strong><span class="head">2.4.8 Standard modules</span></strong><a name="standardModules" id="models"></a><p align="left"><code><span class="key">import </span>moduleName1, moduleName2, ...</code><br />
</p><b class="head">2.5 Key terms</b><a name="keyterms" id="keyterms"></a><b class="head">2.6 Exercises</b><a name="exercises" id="exercises"></a><p class="head">Chapter objectives</p>
After reading this chapter, you'll be able to do the following:
<ul>
<li>Test individual lines of code interactively in a code editor.</li>
<li>Run Python scripts in a code editor.</li>
<li>Differentiate between scripting and interactive code editor windows.</li>
<li>Pass  input to a script.</li>
<li>Match code text color with code components.</li>
<li>Define seven fundamental components of Python code.<br />
</li>
</ul>
<hr />
<span class="foo">
<span class="head">Chapter Outline</span><br /><br />
<a href="#IDE">Where to run  code</a><br />
<a href="#run">How to run code in PythonWin</a> or PyScripter<br />
<a href="#arguments">How to pass input to a script</a><br />
<a href="#components">Python components<br />
</a>&nbsp;&nbsp;&nbsp;&nbsp;Comments<br />
        &nbsp;&nbsp;&nbsp;&nbsp;Keywords<br />
&nbsp;&nbsp;&nbsp;&nbsp;Indentation<br />
&nbsp;&nbsp;&nbsp;&nbsp;Built-in funcitons<br />
&nbsp;&nbsp;&nbsp;&nbsp;Variables, assignment statements, and dynamic typing<br />
&nbsp;&nbsp;&nbsp;&nbsp;Naming variables and tracebacks<br />
&nbsp;&nbsp;&nbsp;&nbsp;Built-in constants and exceptions<br />
&nbsp;&nbsp;&nbsp;&nbsp;Standard modules<br />
Key terms<br />
<a href="#exercises">Exercises</a><br />
</span>
<hr />
<p>Before  you can create GIS Python scripts, you need to know where to write and run the code and you need a familiarity with basic programming concepts. If you're unfamiliar with Python, it will be worthwhile to take a little time to go over the basics presented in this chapter before commencing the next chapter.</p>
<hr />
<table width="775" border="0">
<tbody>
<tr>
<th scope="row" align="left"><strong class="head">2.1 Where to write code </strong><a name="IDE" id="models2"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<p>Python scripts can be written and saved in any text editor; when a file is saved with a '.py' extension, the computer interprets it as a Python script. However, an <em>integrated development environment</em> (IDE), a software application designed for computer programming, is a better choice than a general purpose text editor, because it is tailored for programming. The <em>syntax</em> of a programming language is the set of rules that define how to form code statements that the computer will be able to interpret in that language. An IDE can check code syntax, highlight special code statements, suggest ways to complete a code statement, and  provide special tools, called debuggers, to investigate errors in the code.</p>
<p>The ArcGIS Python window embedded in ArcGIS desktop applications has some IDE functionality, such as Help pages and automatic code completion. It allows the user to save code (right-click &gt; Save as) or load a saved script (right-click &gt; Load), but it is missing some of the  functionality of a stand-alone IDE. For example, it  provides no means to pass input into a script and it doesn't provide a debugger.  Stand-alone IDE's are also lightweight and allow scripts to be run and tested outside of ArcGIS software. For these reasons, we will mainly use a popular stand-alone IDE called PythonWin. </p>
<p>The PythonWin IDE provides two windows for two modes of executing code: an interactive environment and a window for scripts (Figure 2.1).  The interactive environment works like this:</p>
<p>1. The user types a line of code in the interactive window (for example, <code><span class="key">print</span> <span class="s">'Hello'</span></code>).<br />
          2. 
          The user presses 'Enter' to indicate that the line of code is complete. <br />
          3. The single line of code is run.<br />
</p>
<p>The interactive mode is a convenient way to try out small pieces of code and see the results immediately. The code written in the interactive window is not saved when the IDE is closed. Often we want to save many lines of related code for reuse, in other words, we want to save scripts. A <em>Python script</em> is a program (a set of lines of Python code) saved in a file  with the '.py' extension. A script can later be opened in an IDE and run in its entirety from there. </p>
<p><img src="../images/PythonWin_small3.png" /><br />
<strong>Figure 2.1</strong> PythonWin has two windows: one for scripts and one for interactive coding.</p>
<p>Python is installed automatically when ArcGIS is installed, but PythonWin is not. To follow along in the rest of the chapter, install  PythonWin and PyScripter based on the instructions in Exercise 1. Then launch PythonWin and locate the Python prompt, as shown below:<br />
<img src="../images/launchPython.png" /></p>
<p>PyScripter is also a good choice as a Python IDE. PyScripter's equivalent of PythonWin's Interactive Window is the Python Interpreter window. PyScripter is more complex than PythonWin, but has additional functionality, such as interactive syntax checking, window tabs, variable watch tools, and the ability to create projects. <br />
</p>
<hr />
<br />
<table width="775" border="0">
<tbody>
<tr>
<th scope="row" width="512" align="left"><span class="head">2.2 How to run code in PythonWin</span><a name="run" id="run"></a></th>
<td width="253" align="right"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<p>Once you have installed PythonWin, you'll need to understand how to use the Interactive Window and script windows.   When PythonWin is first opened, only the Interactive Window is displayed, because you're not
          editing a script yet. Python statements in the window labeled 'Interactive Window' are executed as soon as you finish typing the line of code and  press the 'Enter' key. The <code>&gt;&gt;&gt;</code> symbol in the Interactive Window is the <em>Python prompt</em>. Just like the prompt in the ArcGIS Python Window, it 
          indicates that Python is
          waiting for input. </p>
<p><img src="../images/interactive_window1.png" /> </p>
<p>Type something at the Python prompt and press the 'Enter' key. On the following line, Python displays the result. Enter <code>print &quot;GIS rules&quot;</code>  and it displays 'GIS rules'. Enter <code>1 + 1</code> and Python displays <code>2</code>. Backspace and then enter <code>3 + 4</code>. Python doesn't display <code>7</code> because there is no space between the prompt and the Python code. There must be exactly one space between the prompt and the input. This problem only occurs if you 'Backspace' too far. When you press the 'Enter' key, the cursor is automatically placed in the correct position, ready for the next command. PyScripter avoids this issue by not allowing you to remove that space after the prompt. Backspacing has no affect.</p>
<p>Instead of showing screen shots of the Interactive Window, this book usually uses text to display these interactions.  For example, the screen shot above would be replaced with this text:</p>
<p><code>&gt;&gt;&gt; <span class="key">print</span> <span class="s">&quot;GIS rules.&quot;</span><br />
          GIS rules.<br />
          &gt;&gt;&gt; <span class="num">1</span><span style="vertical-align: top;"><span class="o"> +</span></span><span class="num"> 1</span><br />
          2<br />
          &gt;&gt;&gt;<span class="num">3</span><span style="vertical-align: top;"><span class="o"> +</span></span> <span class="num">4</span><br />
          &gt;&gt;&gt;<br />
</code></p>
<table width="779" border="3" bgcolor="#CEDAE3">
<tr>
<td width="765"><blockquote>
<p> Interactive Window examples are given as text with Python prompts. To try the examples yourself, note that the prompt indicates that you should type what follows on that
                  line in the Interactive Window, but don't type the '&gt;&gt;&gt;' marks. </p>
</blockquote></td>
</tr>
</table>
<p>The interactive mode is helpful for testing small pieces of code, but ultimately you will be writing Python  scripts. Editing scripts in an IDE is similar to
          working with a text editor. You can use  buttons (or menu selections or keyboard shortcuts) for creating, saving, closing, and opening scripts. Table 2.1 shows these options. If you're unfamiliar with PythonWin, it would be useful to walk through the following example, to practice these actions. <br />
<br />
          Create a
          new blank script as follows: </p>
<ol>
<li> Choose File &gt; new or press <strong>Ctrl + n</strong> or click the new script button <img src="../images/newScript.png" alt="the run button" width="24" border="1" />.</li>
<li> Select 'Python script'.</li>
<li>Click 'OK'. </li>
</ol>
        A new blank script window with no '&gt;&gt;&gt;' prompts
        appears. Next, organize the display by tiling the windows and turning on line numbers. To tile the windows as shown in Figure 2.1, click in the script window, then select: Window menu &gt; Tile. When you have two or more windows open in PythonWin, you need to be aware of the focus. The <em>focus</em> is the active window where you've clicked the mouse most recently. If you click in the Interactive Window and tile the windows again, the Interactive Window will be stacked on top, because the 'Tile' option places the focus window on top. To display the line numbers next to the code in the script window, select the View menu &gt; Options &gt; Editor  and set 'Line numbers'  to 30. This sets the width of the line numbers margin to 30 pixels.  Next, add some content to the script, by typing the following lines of code in the new window:
        <p><code><span class="key">print</span> <span class="s">&quot;I love GIS...&quot;</span><br />
<span class="key">print</span> <span class="s">&quot;and soon I will love Python!&quot;</span>
<!--          <p>Notice that PythonWin displays print in bold blue and
 quoted text in another color. PythonWin  automatically uses
font style and color to highlight special words. This is called <span
 style="font-style: italic;">context highlighting</span>. As you work
more in Python you’ll find this is very useful. For
example, if you intended to type print and you typed pirnt instead, you
are apt to notice the error because the word is not in bold. PythonWin
colors text inside quotes to show that it is interpreted literally, not
as a variable representing some other value. <br>-->
<br />
</code><br />
          The color of the text in the script window is meaningful as we discuss in an upcoming section.   Next, save the Python script in 'C:/gispy/scratch'.  To save the script: </p>
<ol>
<li> Click File &gt; Save or press <strong>Ctrl  + s</strong> or click the save button <img src="../images/saveScript.png" alt="the run button" width="24" border="1" height="23" />.</li>
<li>A 'Save as' window appears. Browse to the 'C:\gispy\scratch' directory.</li>
<li>Set the file name to  'gisRules.py'. </li>
<li>Click 'Save'.</li>
</ol>
<p>Beware of your focus; If you select <strong>Ctrl + s</strong> while your focus is in the Interactive Window, it will  save the contents of the Interactive Window instead of your script.  Confirm that you can view the entire 'gisRules.py'  file name in the 'C:\gispy\scratch' directory in ArcCatalog and Windows Explorer.  If not, see the sidebar &quot;Listing Python scripts in ArcCatalog and Windows Explorer.&quot; </p>
<table width="779" border="3" bgcolor="#CEDAE3">
<tr>
<td width="765" height="76"><p><strong>Listing Python scripts in ArcCatalog and Windows Explorer</strong></p>
<ol type="I">
<li>By default, ArcCatalog does not display scripts in the TOC. To change this setting, use the following steps:<br />
<ol>
<li>Customize menu &gt; ArcCatalog Options &gt; File Types tab &gt; New Type </li>
<li>Enter <em>Python</em> for Description and <em>py</em> for File extension </li>
<li> Import File Type From Registry... </li>
<li>Click 'OK' to complete the process.</li>
</ol>
<p>It may be necessary to restart ArcCatalog in order to view the python files.</p>
</li>
<li>
<p>By default, Windows users can see Python scripts in Windows Explorer, but the file extension may be hidden. If you don't
                    see the '.py' extension on Python files, change the settings under the
                    Windows Explorer tools menu. The procedure varies depending on the Windows version. For example, in Windows 7 follow these instructions:</p>
<ol>
<li> Tools &gt; FolderOptions... &gt; View. </li>
<li>Uncheck 'Hide extensions for known file types'.</li>
<li>Click 'Apply to All Folders'.<br />
<br />
</li>
</ol>
                  and in Windows 8 click View, then check 'File name extensions'. </li>
</ol></td>
</tr>
</table>
<p> Back in PythonWin, run the program:</p>
<ol>
<li> Select File &gt; Run or press <strong>Ctrl  + r</strong> or click the 'Run' button <img src="../images/running_man.png" alt="the run button" width="24" border="1" height="23" />. </li>
<li> A 'Run Script' window appears. Click ‘OK’.</li>
</ol>
<p>PythonWin will run the script and you should see these results in the Interactive Window:<br />
</p>
<blockquote> <code>&gt;&gt;&gt; I love GIS...<br />
<font class="num" color="#0099ff">and soon I will love Python!</font><br />
</code></blockquote>
<p>Code from the script prints output in the Interactive Window.  PythonWin prints the first line in black and the other in blue; This text coloring is inconsequential and can be ignored. </p>
<p> With the focus in the 'gisRules.py' script window, select File &gt; Close or click the X in the upper right corner of the window to close the script. Next, we'll reopen 'gisRules.py' to demonstrate running a saved script. To open and rerun it: </p>
<ol>
<li> File &gt; Open or press <strong>Ctrl  + o</strong> or click the open file button <img src="../images/openScript.png" alt="the run button" width="24" border="1" height="23" /></li>
<li> Browse to the file, 'gisRules.py' in C:\gispy\scratch.</li>
<li> Select File &gt; Run or press <strong>Ctrl  + r</strong> or click the run button <img src="../images/running_man.png" alt="the run button" width="24" border="1" height="23" />. </li>
<li> A 'Run Script' window appears. Click ‘OK’.</li>
</ol>
<p> You will see the same statements printed again in the Interactive Window. Clearing the Interactive Window between running scripts to make it easier to identify new output. To do so, click inside the Interactive Window to give it focus. Then select all the contents (<strong>Ctrl</strong> + <strong>a</strong>) and delete them. PythonWin allows you to open multiple script windows, so you can view more than one script at a time, but it only opens one Interactive Window. <br />
          To open and close the Interactive Window, click on the button that looks like a Python prompt <img src="../images/interactiveButton.png" alt="prompt" width="26" height="26" border="1" />. </p>
<p>Table 2.1 summarizes the actions described in this example. </p>
<table bgcolor="#EEEEEE" border="0" width="779">
<tbody>
<tr>
<td scope="row"><strong>Table 2.1</strong>: Buttons, keyboard shortcuts, and menu instructions for some basic actions in PythonWin.<br />
<table width="859" border="3" bgcolor="#eeeeeee">
<tr>
<td width="195" bgcolor="#CCCCCC"><span class="style4"><strong>Action</strong></span></td>
<td width="51" bgcolor="#CCCCCC"><strong>Button</strong></td>
<td width="285" bgcolor="#CCCCCC"><span class="style4"><strong>Keyboard shortcut</strong></span></td>
<td width="296" bgcolor="#CCCCCC"><span class="style4"><strong>Menu</strong></span></td>
</tr>
<tr>
<td>Create a new script window</td>
<td><div align="center"><img src="../images/newScript.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + n</td>
<td>File &gt; New </td>
</tr>
<tr>
<td>Open a script</td>
<td><div align="center"><img src="../images/openScript.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + o</td>
<td>File &gt; Open</td>
</tr>
<tr>
<td>Save a script</td>
<td><div align="center"><img src="../images/saveScript.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + s</td>
<td>File &gt; Save</td>
</tr>
<tr>
<td>Close script</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>File &gt; Close</td>
</tr>
<tr>
<td>Run a script</td>
<td><div align="center"><img src="../images/running_man.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + r</td>
<td>File &gt; Run</td>
</tr>
<tr>
<td>Tile the windows</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>Click in Script Window, then:  Window &gt; Tile</td>
</tr>
<tr>
<td>Show line numbers</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>View &gt; Options &gt; Editor &gt; Set Line numbers &gt;= 30</td>
</tr>
<tr>
<td>Shift focus between windows</td>
<td>&nbsp;</td>
<td>Ctrl+Tab</td>
<td>&nbsp;</td>
</tr>
<tr>
<td>Open/close Interactive Window</td>
<td><div align="center"><img src="../images/interactiveButton.png" alt="inter" width="26" height="26" /></div></td>
<td>&nbsp;</td>
<td>View &gt; Interactive Window</td>
</tr>
<tr>
<td>Clear the Interactive Window</td>
<td>&nbsp;</td>
<td> Ctrl+Tab to the Interactive Window, Ctrl+a, del</td>
<td>Click in Interactive Window, Edit &gt; Select All, Edit &gt; Delete</td>
</tr>
<tr>
<td>Toggle whitespace</td>
<td>&nbsp;</td>
<td>Ctrl+W</td>
<td>View &gt; Options &gt; Tabs and whitespace &gt; check 'View whitespace'</td>
</tr>
</table>
</td>
</tr>
</tbody>
</table>
<hr />
<table width="775" border="0">
<tbody>
<tr>
<th scope="row" align="left"><strong class="head">2.3 How to pass input to a script</strong><a name="arguments" id="arguments"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<p>Now you know how to run lines of code directly in the Interactive Window and how to create
          and run Python scripts in
          PythonWin. You also need to know how to give input to a script in PythonWin. Getting input from the user enables code
          reuse without editing the code. User input called <em>arguments</em>, is given to the script in PythonWin through the 'Run Script' window.   To use arguments, type them in the  'Run Script' window text box labeled 'Arguments'. To use multiple arguments, separate them by spaces. </p>
<p>This example  runs a script 'add_version1.py'  with no arguments and then runs 'add_version2.py', which takes two arguments: <br />
</p>
<ol>
<li>In PythonWin open (<span style="font-weight: bold;">Ctrl+o</span>) 'add_version1.py', which looks like this:</li>
<table border="1" cellpadding="2" cellspacing="2" bgcolor="#ffffcc" style="text-align: left; ; height: 30px;">
<tbody>
<tr>
<td width="627" style="vertical-align: top;"><code><br />
<span class="comment"># add_version1.py</span><span class="comment">: Add two numbers.</span> <br />
                  a <span class="o">=</span> <span class="num">5</span><br />
                  b <span class="o">=</span> <span class="num">6</span><br />
<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <br />
<span class="k">print</span> <span class="s">&quot;The sum is {0}.&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="comment"> # .format(c) substitutes the value of c for {0} in the print statement.</span><br />
</code></td>
</tr>
</tbody>
</table>
<br />
<li>Run the script (<span style="font-weight: bold;">Ctrl + r &gt; OK</span>). The output in the Interactive Window should look like this:<br />
<code><br />
            &gt;&gt;&gt; The sum is 11.<br />
</code><br />
</li>
<li> 'add_version1.py' is so simple that it always adds the same two
            numbers every time it is run. 'add_version2.py' instead adds two input numbers provided by the user. Open 'add_version2.py', which looks like this:
            <table border="1" cellpadding="2" cellspacing="2" bgcolor="#ffffcc" style="text-align: left; width: 412px; height: 30px;">
<tbody>
<tr>
<td nowrap="nowrap" style="vertical-align: top;"><code><br />
<span class="comment"># add_version2.py</span><span class="comment">:  Add two numbers
                    given as arguments.</span><br />
<br />
<span class="key">import</span> sys <span class="comment"># Now the script can use the built-in Python system module.</span><br />
<br />
                    a <span class="o">=</span> int(sys.argv[<span class="num">1</span>]) <span class="comment"># sys.argv is the <em><strong>sys</strong></em>tem <em><strong>arg</strong></em>ument <em><strong>v</strong></em>ector.</span><br />
                    b <span class="o">=</span> int(sys.argv[<span class="num">2</span>]) <span class="comment"># int changes the input to an <strong>integer</strong> number.</span><br />
<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <br />
<span class="k">print</span> <span class="s">&quot;The sum is {0}.&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="comment"># .format(c) substitutes the value of c for {0} in the print statement.</span><br />
</code></td>
</tr>
</tbody>
</table>
<br />
</li>
<li>This time, we  will add the numbers 2 and 3. To run the script  with these two arguments, select <strong>Ctrl + r</strong> and in the 'Run Script' window 'Arguments' text box, place a 2
            and 3, separated by a space. <br />
<img src="../images/arguments.jpg" width="383" height="134" /></li>
<li>Click '<strong>OK</strong>'. The output in the Interactive Window should look like this:<br />
            &gt;&gt;&gt; The sum is 5. <br />
</li>
</ol>
        The beginning of 'add_version2.py' differs from 'add_version1.py' so that it can use arguments. The new lines of code in 'add_version2.py'  use  the system argument vector, <code>sys.argv</code>, to get the values of the arguments that are passed into the script.
        <code>sys.argv[1]</code> holds the first argument and <code>sys.argv[2]</code> holds the second one. We'll revisit script arguments in more depth in an upcoming chapter. For now, you know enough to run some simple examples.<br />
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><b class="head">2.4 Python components</b><a name="components" id="keyterms2"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>The  color and indentation of Python code, as it appears in an IDE, highlights code components such as comments, keywords, block structures, numbers, and strings. This special formatting, called <span style="font-style: italic;">context highlighting, </span>provides extra cues to help programmers. For example, the keyword <code>import</code> appears as bold blue in a script, but if the word is misspelled as 'improt', it will have no special formatting. The script, 'describe_fc.py', in Figure 2.2,  shows several highlighted code components. 'describe_fc.py'   prints basic information about each feature class in a workspace. To try this example, follow  steps 1-5:</p>
<ol>
<li>Preview two feature classes in C:/gispy/data/ch02, 'park.shp' and 'fires.shp' in ArcCatalog. Before moving on to step 2, click on the ch02 directory in the ArcCatalog table of contents and select F5 to refresh the view and release the locks on the feature classes.</li>
<li>Open the 'describe_fc.py' in PythonWin. </li>
<li>Launch the 'Run Script' window (<strong>Ctrl + r</strong>).</li>
<li>Type &quot;C:/gispy/data/ch02&quot; in the Arguments text box. The script uses this argument as the data workspace.</li>
<li>Click 'OK' and confirm that the output looks something like what you see in Figure 2.3. </li>
</ol>
<p>Figure 2.2 shows the script as it is displayed with the default settings in PythonWin. The italic green text, bold blue text, and indentation correspond to comments, keywords, and block structures, respectively. These components along with variables and assignment statements are discussed next. <br />
</p>
<table width="775" border="0">
<tr>
<th align="left" scope="row"><strong><span class="head">2.4.1 Comments</span></strong></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p> Text lines shown in green are <em>comments, </em> information only included for humans readers, not for the computer to interpret. Anything that follows one or more hash sign (<code>#</code>)  on a line of Python code is a comment and is ignored by the computer.   PythonWin displays comments in italicized green when the comment starts with one  hash sign and gray  when the comment starts with two or more consecutive hash signs. Comments have several uses:</p>
<ul>
<li> Provide metadata - script name, purpose, author, data, how to run it, sample input syntax, expected output. These  comments are placed at the beginning of the script (Lines 1-6 in 'describe_fc.py').<br />
<br />
</li>
<li>Outline - for the programmer to fill in the code details and for the reader to glean the overall workflow. For example, an outline for 'describe_fc.py' looks like this:<br />
<br />
<code><br />
<span class="comment"># GET the input workspace from the user. <br />
            # GET a list of the feature classes in the workspace. <br />
            # PRINT basic information about each feature class in the folder</span>.<span style="vertical-align: top;"><br />
</span></code><br />
<br />
</li>
<li>Clarify specific pieces of code - good Python code is highly readable, but sometimes comments are still helpful. Skilled Python programmers use expository commenting selectively.<br />
<br />
</li>
<li>Debug - help the programmer isolate mistakes in the code. Since comments are ignored by the computer, creating 'commented out' sections, can help to focus attention on another section of code. Comment out or uncomment multiple lines of code in PythonWin by selecting the lines and clicking <strong>Alt+3</strong>/<strong>Alt+4</strong> (or right-click and choose <strong>Source code</strong> &gt; <strong>Comment out region</strong>/<strong>Uncomment region</strong>).</li>
</ul>
<p><img src="../images/describe_fc_script.png" alt="script" border="1" usemap="#Map2MapMap" /> <strong><br />
          Figure 2.2:</strong> Python script 'describe_fc.py' as it appears in an IDE.</p>
<p><img src="../images/describe_fc_output.png" alt="output" border="1" /> <br />
<strong>Figure 2.3</strong> Output printed in the PythonWin Interactive Window when 'describe_fc.py' (Figure 2.2) runs.</p>
<table width="775" border="0">
<tr>
<th align="left" scope="row"><strong><span class="head">2.4.2 Keywords</span></strong></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p><em>Python keywords</em>, words reserved for special usage, are shown in bold blue in PythonWin. 'describe_fc.py' in Figure 2.2 uses keywords <code>import</code>, <code>print</code>, <code>for</code> and <code>in</code>. Table 2.2 gives a list of Python keywords. Python is case sensitive; keywords must be written in all lower case.</p>
<table bgcolor="#EEEEEE" border="0" width="452">
<tbody>
<tr>
<td width="446" height="221" scope="row"><p><strong>Table 2.2 </strong>Python 2.7 keywords. <br />
</p>
<table width="385" border="0" bgcolor="#eeeeeee">
<tr>
<td width="379"><pre class="key"><font>and       del       from      not       while      <br />as        elif      global    or        with       <br />assert    else      if        pass      yield      <br />break     except    import    print                <br />class     exec      in        raise                <br />continue  finally   is        return               <br />def       for       lambda    try</font></pre></td>
</tr>
</table></td>
</tr>
</tbody>
</table>
<br />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><strong><span class="head">2.4.3 Indentation</span></strong></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Indentation is meaningful in Python. Notice that lines 19-27 are indented to the same position in 'describe_fc.py.' The code in line 18, which starts with the <code>for</code> keyword,  tells Python to repeat what follows for each feature class listed in the input directory. Lines 19-27 are indented because they are the block of code that gets repeated. The Name, Data type, and so forth are printed for each feature class. The <code>for</code> keyword structure is an example of a Python <em>block structure,</em> a set of related lines of code (a block of code). Block structures will be discussed in more detail later, but for now, it's useful to have some understanding of the significance of indentation in Python. Items within a block structure are indented the same amount to indicate that they are related. The first line of code dedented (moved back a notch) after a block structure signifies the end of the block structure. 'describe_fc.py' prints 'Feature class list complete' only once, because line 28  is dedented (the opposite of indented). Python does not have mandatory statement termination keywords or characters such as 'end for' or curly brackets to end the block structure; indentation is used instead. For example, if lines 20-27 were dedented, only one feature class description would be printed, the last one in the list. Indentation and loops will be discussed in more detail in an upcoming chapter.</p>
<table width="775" border="0">
<tr>
<th align="left" scope="row"><strong><span class="head">2.4.4 Built-in functions</span></strong></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>'describe_fc.py' uses the <code>print</code> keyword to print output to the Interactive Window. This works because <code>print</code> is both a keyword and a built-in function.  A <em>function</em> is a named set of code that performs a task. A <em>built-in function</em> is a function supplied by Python. Use it by typing the name of the function and the input separated by comma, usually inside parentheses.  A code statement that uses a built-in function  has this general format:</p>
<table border="0" width="797">
<tbody>
<tr>
<th scope="row" width="791" align="left"><code>functionName(argument1, 
                argument2, argument3,...)</code></th>
</tr>
</tbody>
</table>
<br />
The built-in <code>print</code> function, discussed in more detail in Chapter 3, is an exception which does not require parentheses.  In Python 2.7, which is the version of Python currently used by ArcGIS, the parentheses are optional in print statements. In Python 3.0 and higher, they are required.<br />
<br />
        Programming documentation uses special terminology related to dealing with functions, such as 'calling functions', 'passing arguments', and 'returning values'. These terms are defined here using built-in function examples:
        <ul>
<li> A code statement that invokes a function is referred to as a <em>function call</em>. We say we are 'calling the function', because we call upon it by name to do its work.   Think of a function as if it's a  task assigned to a butler. If 
            you want him to 
            make  tea, you need to call on the butler to do so. You don't need to know any more details about how the tea is made, because he does it for you. There is no Python <code>make_tea</code> function, so we'll look at the  built-in <code>round</code> function instead. The following line of code  is a function call that calls the <code>round</code> function to round a number: <br />
<code><br />
            &gt;&gt;&gt; <span class="nb">round</span><span class="p">(</span><span class="mf">1.7</span><span class="p">)</span> <br />
            2.0</code><br /><br />
</li>
<li>Providing  input for the function is referred to as <em>passing arguments</em> into the function. When
            you call the butler to 
            make  tea, you need to tell him if you want herbal or 
            green tea or some other kind. The type of tea would be 
            provided as an <em>argument</em>. A closely related term, <em>parameters</em>, are the pieces of information that can be specified to a function. The <code>round</code> function has one required parameter, a number to be rounded. The specific values passed in when calling the function are the arguments. The number <code>1.7</code> is used as the argument in the example above.  An argument is an expression used when calling   the function. The difference between the terms 'argument' and 'parameter' is subtle and often these terms are used interchangeably.   The following line of code calls the built-in <code>min</code> function to find the minimum number. Here, we pass in three comma separated arguments. The function finds the smallest of the three values:<br />
<code><br />
            &gt;&gt;&gt;<span class="nb"> min</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span><br />
            1<br />
</code><br />
</li>
<li>Some functions come up with results from the actions they perform. Others  do some action that may make changes or print information, but don't send a result to the caller. Those that do are said to <em> return a value</em>.  When we ask our butler to do something,  he goes away and does his work. Sometimes he returns with a result—like the cup  of tea we asked for. Other times, he just performs his duty and there's no  value returned -- he dimmed the lights, if that’s what you requested, but he  doesn't bring your slippers if you only asked him to adjust the lighting. The built-in <code>round</code> function returns the rounded number and the <code>min</code> function returns the minimum value. These return values are printed in the Interactive Window, but would not be printed in a script. By contrast, the <code>help</code> function is designed to print help about an argument, but it returns nothing. The following line of code calls the built-in <code>help</code> function to print help documentation for the <code>round</code> function. The name of the function is passed as an argument:<br />
<code>
</code><p>&gt;&gt;&gt;<span class="nb"> help</span><span class="p">(</span><span class="nb">round</span><span class="p">)</span> <br />
              Help on built-in function round in module __builtin__:</p>
            round(...)<br />
            round(number[, ndigits]) -&gt; floating point number<br />
<br />
            Round a number to a given precision in decimal digits (default 0 digits).<br />
            This always returns a floating point number.  Precision may be negative.<br />


</li>
</ul>
<p>The help prints a <em>signature</em>, a template for how to use the function which lists the required and optional parameters. The first parameter of the <code>round</code> function is the number to be rounded. The second parameter, ndigits, specifies the number of digits for rounding precision. The square brackets surrounding <code>ndigits</code> mean that it is an optional argument.  The arrow pointing to 'floating point number' means that this is the type of value that is returned by the function.<br />
<br />
          Other sections of this book employ additional built-in functions (e.g., <code>enumerate</code>, <code>int</code>, <code>float</code>, <code>len</code>, <code>open</code>, <code>range</code>, <code>raw_input</code>, and <code>type</code>).      Search online with the keywords 'Python Standard Library built-in functions' for a complete list of built-in functions and their uses.<br />
</p>
<table width="775" border="0">
<tr>
<th align="left" scope="row"><strong><span class="head">2.4.5 Variables, assignment statements, and dynamic typing</span></strong></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p> We still haven't discussed the turquoise and olive colored text in 'describe_fc.py'. These represent Python number and string data types. All objects in Python have a data type. To understand data types in Python you need to be familiar with variables, assignment statements, and dynamic typing. Variables are a basic building block of computer programming.  A programming <em>variable</em>, is a name that gets assigned a value (It's like an algebra variable, except that it can be given non-numeric values as well as numeric ones). The following statement  assigns the value 145 to the variable FID:</p>
<p><code>&gt;&gt;&gt; FID <span class="o">=</span> <span class="num">145</span><br />
</code></p>
<p>This line of code is called an assignment statement. An <em>assignment statement </em>is a line of code (or statement) used to set the value of a variable. An assignment statement consists of the variable name (on the left), a value (on the right) and a single equals sign in the middle.</p>
<p><img src="../images/assignmentStatementv2.png" alt="assignment statement" width="268" height="203" border="1" /><br />
</p>
<p>To print the value of a variable inside a script, you need to use the <code>print</code> function. This works in the Interactive Window too, but it is not necessary to use the <code>print</code> function in the Interactive Window. When you type a variable name and press the 'Enter' key in the Interactive Window, Python prints its value.<br />
</p>
<p><code>&gt;&gt;&gt; inputData <span class="o">=</span> <span class="s">'trees.shp'</span><br />
          &gt;&gt;&gt; inputData<br />
          'trees.shp'<br />
</code></p>
<p>A programming variable is similar to an algebra variable, except that it can be given non-numeric values, so the data type of a variable is an important piece of information. In other programming languages, declaration statements are used to specify the type.   Python determines the data type of a variable based on the value assigned to it. This is called <em>dynamic typing. </em>You can check the data type of a variable using the built-in <code>type</code> function.  The following tells us that  <code>FID</code> is an <code>'int'</code> type variable and inputData is an <code>'str'</code> type  variable: <br />
<code><br />
          |&gt;&gt;&gt; <span class="nb">type</span><span class="p">(</span><span class="n">FID</span><span class="p">)</span><br />
          &lt;type 'int'&gt;<br />
          &gt;&gt;&gt; <span class="nb">type</span><span class="p">(</span><span class="n">inputData</span><span class="p">)</span><br />
          &lt;type 'str'&gt;<br />
</code></p>
<p><code>'int'</code> stands for integer and <code>'str'</code> stands for string, (variable types which are discussed detail in the next chapter). Due to dynamic typing, the type of a variable can  change within a script. These statements  show the type of variable <code>avg</code> changing from integer  to string:</p>
<p><code>&gt;&gt;&gt; avg <span class="o">=</span> <span class="num">92</span><br />
          &gt;&gt;&gt; <span class="nb">type</span><span class="p">(</span><span class="n">avg</span><span class="p">)</span><br />
          &lt;type 'int'&gt;<br />
          &gt;&gt;&gt; avg <span class="o">=</span> <span class="s">'A'</span> <br />
          &gt;&gt;&gt; <span class="nb">type</span><span class="p">(</span><span class="n">avg</span><span class="p">)</span><br />
&lt;type 'str'&gt;<br />
</code></p>
<p>First, Python dynamically sets the data type of  <code>avg</code> as an integer, since 92 is an integer. Python considers characters within quotes to be strings. So when <code>avg</code> is set to <code>'A'</code>, it is dynamically typed to string. Dynamic typing is agile, but beware that if you unintentionally use the same name for two variables, the first value will be overwritten by the second.<br />
</p>
<table border="0" width="775">
<tbody>
<tr>
<th scope="row" align="left" width="561"><strong><span class="head">2.4.6 Naming variables and tracebacks</span></strong></th>
<td align="right" width="204"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<p><br />
        Variable names can't start with numbers nor contain spaces. For names that are a combination of more than one word, underscores or capitalization can be used to break up the words. Capitalizing the beginning of each word is known as camel case (the capital letters stick up like the humps on a camel). This book uses a variation called lower camel case -- all lower case for the first word and capitalization for the first letter of the rest. For example, <code>inputRasterData<span style="vertical-align: top;"></span></code> is lower camel case.</p>
<p><img src="../images/lower camel case.png" alt="lower Camel Case" /></p>
<p>Variable names are case sensitive.  In the following code, Python reports <code>fid</code> as undefined, even though <code>FID</code> has a value of <code>145</code> because we assigned it earlier:<br />
<code><br />
          &gt;&gt;&gt; fid<br />
<font class="err">Traceback (most recent call last):<br />
          File &quot;&lt;interactive input&gt;&quot;, line 1, in &lt;module&gt;<br />
          NameError: name 'fid' is not defined<br />
</font>&gt;&gt;&gt; FID<br />
         145<br />
</code><br />
        When we attempt to check the value of <code>fid</code>, PythonWin prints a red error message called a <em>traceback</em>.  The traceback traces the steps back to where  the error occurred. This example was typed in the Interactive Window, so it says 'interactive input', line 1. The last line of the traceback message explains the error. Python doesn't recognize 'fid'. It was never assigned a value, so it is considered to be an undefined object. When Python encounters an undefined object, it calls this kind of error a <code>NameError</code>. </p>
<table width="779" border="3" bgcolor="#CEDAE3">
<tr>
<td width="765" height="76"><blockquote>
<p><em> Look for an explanation of the error in the last line of a traceback message.</em></p>
</blockquote></td>
</tr>
</table>
<p>Keywords cannot be used as variable names. The following code attempts to use the keyword <code><span class="key">print</span></code> as a variable name:<br />
<code><br />
&gt;&gt;&gt; <font class="key"><strong>print</strong></font> <span class="o">=</span> <span class="s">'inputData'</span><br />
<font class="err">Traceback (  File &quot;&lt;interactive input&gt;&quot;, line 1<br />
          print <span class="o">=</span> 'inputData'<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^<br />
          SyntaxError: invalid syntax</font><br />
</code><br />
        Again, a traceback error message is printed, but this time, the message indicates invalid syntax because the keyword is being used in a way that it is not designed to be used. This statement does not conform with the rules about how print statements should be formed, so it reports a <code>SyntaxError</code>. </p>
<p>Python ensures that keywords are not used as variable names by reporting an error; However, Python does not report an error if you use the name of a built-in function as variable name. Making this mistake can cause unexpected behavior. For example, in the code below, the built-in <code>min</code> function is working correctly at the outset. Then <code>min</code> is used as a variable name in the assignment statement <code><span class="nb">min </span><span class="o">=</span> <span class="num">5</span></code>. Python accepts this with no error. But this makes <code>min</code> into an integer variable instead of a built-in function, so we can no longer use it to find the minimum value:<br />
<br />
<code>&gt;&gt;&gt; <span class="nb">type</span><span class="p">(</span><span class="nb">min</span><span class="p">)</span> <br />
          &lt;type 'builtin_function_or_method'&gt;<br />
          &gt;&gt;&gt;<span class="nb"> min</span>(<span class="num">1</span>, <span class="num">2</span>, <span class="num">3</span>)<br />
1<br />
          &gt;&gt;&gt;<span class="nb"> min </span><span class="o">=</span> <span class="num">5</span> <br />
          &gt;&gt;&gt;<span class="nb"> min</span>(<span class="num">1</span>, <span class="num">2</span>, <span class="num">3</span>)<br />
<span class="err">Traceback (most recent call last):<br />
          File &quot;&lt;interactive input&gt;&quot;, line 1, in &lt;module&gt;<br />
          TypeError: 'int' object is not callable</span><br />
          &gt;&gt;&gt; <span class="nb">type</span><span class="p">(</span><span class="nb">min</span><span class="p">)</span> <br />
          &lt;type 'int'&gt;<br />
</code></p>
<p>A <code>TypeError</code> is printed the second time we try to use <code>min</code> to find the minimum. <code>min</code> is now an <code>int</code> type so it  can no longer be called as a function. To restore <code>min</code> as a built-in function, you must restart PythonWin.</p>
<table width="775" border="0">
<tr>
<th align="left" scope="row"><strong><span class="head">2.4.7 Built-in constants and exceptions</span></strong></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>In addition to built-in functions, Python has built-in constants and exceptions. No built-in names should be used as variable names in scripts to avoid losing their special functionality. Built-in constants such as, <code>None</code>, <code>True</code>, and <code>False</code>, are assigned their values as soon as Python is launched, so that  value  is available to be used anywhere in Python. The built-in constant <code>None</code>  is a null value placeholder.  The data type of <code>True</code> and False is <code>'bool'</code> for boolean. Boolean objects can either be <code>True</code> or <code>False</code> :<br />
<br /><code>
          &gt;&gt;&gt; <span class="nb">type</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span><br />
          &lt;type 'bool'&gt;<br />
          &gt;&gt;&gt;<span class="bp"> True</span><br />
          True</code><br />
<br />
          The built-in constants <code>True</code> and <code>False</code> will be used in upcoming chapters to set variables that control aspects of the geoprocessing environment. For example, the following lines of code change the environment to allow geoprocessing output to overwrite existing files:</p>
<p><code>&gt;&gt;&gt; <span class="key">import</span> arcpy<br />
          &gt;&gt;&gt; arcpy.env.overwriteOutput <span class="o">=</span> True<br />
</code></p>
<p>The built-in exceptions, such as <code>NameError</code> or <code>SyntaxError</code>, are created for reporting specific errors in the code. Built-in exceptions are  common errors that Python can identify automatically. An exception is <em>thrown</em> when one of these errors is detected. This means a traceback message is generated and the message is printed in the Interactive Window; If the erroneous code is in a script, the script will stop running at that point.</p>
<p>New programmers often encounter <code>NameError</code>, <code>SyntaxError</code>, and <code>TypeError</code> exceptions. The <code>NameError</code> usually occurs because of a spelling or capitalization mistake in the code. The <code>SyntaxError</code> can occur for many reasons, but the underlying problem is that one of the rules of properly formed Python has been violated. A <code>TypeError</code> occurs when the code attempts to use an operator differently from how it's designed. For example, code that adds an integer to a string generates a <code>TypeError</code>. </p>
<p>There are many other types of built-in exceptions. The names of these usually end 'Error'. A traceback message is printed whenever one of these exceptions is thrown. The final line of traceback error messages states the name of the exception. We'll revisit exceptions and tracebacks in upcoming chapters. </p>
<p>The built-in <code>dir</code> function can be used to print a list of all the built-ins in Python. Type the following to print the built-ins in PythonWin (there are 2 underscores on each side):<br />
<br />
<code>&gt;&gt;&gt; <span class="nb">dir</span><span class="p">(</span><span class="n">__builtins__</span><span class="p">)</span><br />
</code><br />
          The printed list looks something like this:<br />
<code><br />
          'ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 'BufferError', 'BytesWarning', 'DeprecationWarning', 'EOFError', 'Ellipsis', 'EnvironmentError', 'Exception', 'False', 'FloatingPointError', 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError', 'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 'NameError', 'None', 'NotImplemented', 'NotImplementedError', 'OSError', 'OverflowError', 'PendingDeprecationWarning', 'ReferenceError', 'RuntimeError', 'RuntimeWarning', 'StandardError', 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit', 'TabError', 'True', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning', 'ValueError', 'Warning', 'WindowsError', 'ZeroDivisionError', '__debug__', '__doc__', '__import__', '__name__', '__package__', 'abs', 'all', 'any', 'apply', 'basestring', 'bin', 'bool', 'buffer', 'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'cmp', 'coerce', 'compile', 'complex', 'copyright', 'credits', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'execfile', 'exit', 'file', 'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash', 'help', 'hex', 'id', 'input', 'int', 'intern', 'isinstance', 'issubclass', 'iter', 'len', 'license', 'list', 'locals', 'long', 'map', 'max', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'quit', 'range', 'raw_input', 'reduce', 'reload', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'unichr', 'unicode', 'vars', 'xrange', 'zip']<br />
</code></p>
<p>The  built-in constants and built-in exceptions are interspersed in the beginning of this list <code>ArithmeticError</code> through <code>__package__</code>). The built-in functions are listed next, starting with <code>abs</code>. </p>
<table width="775" border="0">
<tr>
<th align="left" scope="row"><strong><span class="head">2.4.8 Standard modules</span></strong><a name="standardModules" id="models"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>When Python is installed, a library of standard modules is automatically installed. A <em>module</em> is a Python file containing related Python code. Python's standard library covers a wide variety of functionality. Examples include math functions, file copying, unzipping files, graphical user interface, and even Internet protocols for retrieving online data. To use a module you first use the <code>import</code> keyword.  The import statement can be applied to one or more modules using the following format:</p>
<table width="759" border="0" bgcolor="#EEEEEE">
<tr>
<th width="753" height="54" scope="row"><p align="left"><code><span class="key">import </span>moduleName1, moduleName2, ...</code><br />
</p></th>
</tr>
</table>
<p>Once a module is imported, its name can be used  to invoke its functionality. For example, the following code imports the standard <code>math</code> module and then uses it to convert 180 degrees to radians:</p>
<p><code>&gt;&gt;&gt; <span class="key">import</span> math<br />
          &gt;&gt;&gt; <span class="n">math</span><span class="o">.</span><span class="n">radians</span><span class="p">(</span><span class="mi">180</span><span class="p">)</span><br />
          3.141592653589793<br />
</code></p>
<p> The online 'Python Standard Library' contains documentation of the vast set of standard modules. For now, just highlight two modules <code>sys</code> and <code>os</code>) that are used in early chapters  and introduce others as the need arises.</p>
<p>The <code>sys</code> module gives access to variables that are used by the <em>Python interpreter</em>, the program that runs Python. For example, the following code imports the <code>sys</code> module and prints <code>sys<span class="o">.</span>path</code>:<br />
<br />
<code>&gt;&gt;&gt; <span class="key">import</span> sys<br />
          &gt;&gt;&gt; sys<span class="o">.</span>path<br />
          ['C:\\gispy\\sampleScripts\ch02', u'c:\\program files (x86)\\ArcGis\\desktop10.2\\arcpy', 'C:\\Windows\\system32\\python27.zip', 'C:\\Python27\\ArcGIS10.2\\DLLs', 'C:\\Python27\\ArcGIS10.2\\lib', 'C:\\Python27\\ArcGIS10.2\\lib\\plat-win']<br />
</code></p>
<p>Notice that <code>sys<span class="o">.</span>path</code> is a list of directory paths (only a few are shown here--your list may differ). These are the locations used by the Python interpreter when  it encounters an import statement. The Python interpreter or searches within these directories for the name of the module being imported. If the module isn't found in one of these directories, the import won't succeed. <br />
</p>
<p>The following code prints the  file name of the script last run in PythonWin.<br />
<code><br />
          &gt;&gt;&gt;<span class="n">sys.argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><br />
          'C:\\gispy\\sampleScripts\\ch02\\describe_fc.py'<br />
</code></p>
<p>The<code> sys</code>  module  is used to get the workspace from user input on line 11 in Figure 2.2 (<code><span class="n">arcpy.env.workspace = sys.argv</span>[1]</code>). Chapter 7 discusses this useful <code>sys</code> module variable in more depth. <br />
</p>
<p>The  <code>os</code> module allows you to access operating   system-related methods (<code>os</code> stands for operating system). The following code uses the <code>os</code> module to print a list of the files in the 'C:/gispy/data/ch02' directory:<br />
<code><br />
          &gt;&gt;&gt; <span class="key">import</span> os<br />
          &gt;&gt;&gt;<span class="n"> os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="s">&#39;C:/gispy/data/ch02&#39;</span><span class="p">)</span><br />
          ['fires.dbf', 'fires.prj', 'fires.sbn', 'fires.sbx', 'fires.shp', 'fires.shp.xml', 'fires.shx', 'park.dbf', 'park.prj', 'park.sbn', 'park.sbx', 'park.shp', 'park.shp.xml', 'park.shx']<br />
</code></p>
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><b class="head">2.5 Key terms</b><a name="keyterms" id="keyterms"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Integrated development environment (IDE)<br />
          Python script<br />
          ArcGIS Python window<br />
          PythonWin<br />
          PythonWin Interactive Window<br />
          PythonWin script window<br />
        Python prompt (<code>&gt;&gt;&gt;</code>)<br />
        Python interpreter<br />
          Window focus<br />
          Script arguments<br />
          Context highlighting<br />
          Code comments<br />
          Hash sign<br />
          Python keywords<br />
          Variables<br />
          Assignment statement<br />
          Dynamic typing<br />
          Block structure, block of code<br />
          Dedented<br />
          Tracebacks<br />
          Built-in functions, constants, and exceptions<br />
          Function arguments<br />
          Function signatures<br />
          Function parameters<br />
          Exceptions thrown<br />
<code>True</code>, <code>False</code>, <code>None</code><br />
<code>NameError</code>, <code>SyntaxError</code>, and <code>TypeError</code><br />
          Module<br />
          Standard modules<br />
<code>math</code>, <code>sys</code>, <code>os</code>, <code>shutil</code><br />
</p>
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><b class="head">2.6 Exercises</b><a name="exercises" id="exercises"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<br />
<br />
<ol>
<li>Set up your integrated development environment (IDE) software and check the functionality as described here: </li>
<ol type="a">
<li>To install PythonWin,
              <ol>
<li>Browse 'C:\gispy\sample_scripts\ch02\programs\PythonWin'.</li>
<li>Double-click on the executable ('exe') file.</li>
<li>Launch PythonWin. A PythonWin desktop icon should be created during installation. If not, search the machine for 'PythonWin.exe' and create a shortcut to this executable. When you first launch PythonWin, it will display the 'Interactive Window' with a prompt that looks just like the one in the ArcGIS Python window: <br />
<img src="../images/launchPython.png" alt="prompt" /><br />
</li>
<li>Test PythonWin.  Type <code>import arcpy</code> in the Interactive Window and press the 'Enter' key. If no error appears, everything is working. In other words, if you see only a prompt sign on the next line (<code>&gt;&gt;&gt;</code>), then it worked.    If, instead, you see red text, this is an error message. Check your ArcGIS software version. This book is designed for ArcGIS 10.1-10.2.2, which use the 2.7 version of Python. If you are using a different version of ArcGIS, you will need to get a different PythonWin executable. Start by searching online for 'pywin32 download', then navigate to the version you need. <br />
<table width="264" bgcolor="#eeeeee">
<tr>
<td width="256">Software versions
                        <table width="232" border="1">
<tr>
<td width="109"><strong>ArcGIS version</strong></td>
<td width="107"><strong>Python version</strong></td>
</tr>
<tr>
<td>10.1, 10.2</td>
<td>2.7</td>
</tr>
<tr>
<td>10</td>
<td>2.6</td>
</tr>
<tr>
<td>9.3</td>
<td>2.5</td>
</tr>
<tr>
<td>9.2</td>
<td>2.4.1</td>
</tr>
<tr>
<td>9.1</td>
<td>2.1</td>
</tr>
</table></td>
</tr>
</table>
<br />
</li>
</ol>
</li>
<li>Install PyScripter. To install PyScripter, browse to 'C:\gispy\sample_scripts\ch02\programs\PyScripter'. Double-click on the '.exe' file. Install using the defaults. PyScripter's equivalent of PythonWin's Interactive Window is the Python Interpreter window. Confirm that it is working correctly by typing <code>import arcpy</code> in the Python Interpreter window. Press the 'Enter' key. If you see only a prompt sign on the next line (<code>&gt;&gt;&gt;</code>), then it worked. If, instead, you see red text, this is an error message.  The ArcGIS Resources Python Forum is a good place for additional trouble-shooting.<br />
<br />
</li>
</ol>
<li>Type the code statements below in the Interactive Window. Notice that the built-in type function gives two different results -- first <code>str</code> and second <code>int</code>. Which word or phrase in the 'Key terms' list at the end of this chapter explains this phenomenon?<br />
<br />
<code>&gt;&gt;&gt; month <span class="o">=</span> <span class="s">'December'</span> <br />
&gt;&gt;&gt; <span class="nb">type</span><span class="p">(</span><span class="n">month</span><span class="p">)</span><br />
&gt;&gt;&gt; month <span class="o">=</span> <span class="num">12</span><br />
&gt;&gt;&gt; <span class="nb">type</span><span class="p">(</span><span class="n">month</span><span class="p">)</span><br />
</code><br />
</li>
<li>Match each key term with the most closely related statement. There are two distracter statements that should not be used. <br />
<table width="573" border="3">
<tbody>
<tr>
<td width="252" valign="top">Key term</td>
<td width="301" valign="top">Statement</td>
</tr>
<tr>
<td valign="top"><ol>
<li>Python keyword<br />
<br />
</li>
<li>IDE<br />
<br />
</li>
<li>Hash sign<br />
<br />
</li>
<li>Tracebacks<br />
<br />
</li>
<li> Window focus<br />
<br />
</li>
<li>Script arguments<br />
<br />
</li>
<li>Context highlighting<br />
<br />
</li>
<li>Assignment statement<br />
<br />
</li>
<li> Dynamic typing<br />
<br />
</li>
<li>False<br />
<br />
</li>
<li> NameError<br />
<br />
</li>
<li>Dedented code<br />
<br />
</li>
<li>math, os, and sys<br />
</li>
</ol>
</td>
<td valign="top"><ol type="A">
<li>This is a  built-in boolean constant.<br />
<br />
</li>
<li>If this isn't in the Script Window, you might save the Interactive Window by mistake.<br />
<br />
</li>
<li>Special font formatting (such as color) based on meaning of text in the code.<br />
<br />
</li>
<li>The controversial debates surrounding Python versus Perl scripting languages.<br />
<br />
</li>
<li><code><span class="key">print</span></code> is written in bold blue because it is one of these.<br />
<br />
</li>
<li>If a variable name is misspelled, this can occur.<br />
<br />
</li>
<li>A specialized editor for developing scripts.<br />
<br />
</li>
<li>Information passed into a script by the user.<br />
<br />
</li>
<li>Automatically set the data type of a variable when a value is assigned.<br />
<br />
</li>
<li><code>x <span class="o">=</span> 5</code> is an example of one of these. <br />
<br />
</li>
<li>Messages printed when exceptions are thrown.<br />
<br />
</li>
<li>This signals the end of a related block of code.<br />
<br />
</li>
<li>The shape of a camel's back.<br />
<br />
</li>
<li>Code following this character is only meant for the human reader. <br />
<br />
</li>
<li>These are examples of Python standard modules</li>
</ol></td>
</tr>
</tbody>
</table>
<br />
</li>
<li>Type the following lines of code in the Interactive Window. Each line of code should raise a built-in exception. Report the<em> name</em> of the built-in exception that is raised
            (part a is done for you).<br />
<br />
<ol type="a">
<li><code><span class="k">class</span> <span class="err">= </span><span class="s">&#39;combustibles&#39;</span></code><br />
<br />
                SyntaxError<br />
<br />
</li>
<li><code><span class="s">'five'</span><span style="vertical-align: top;"><span class="o"> + </span></span><span class="num">6</span> </code><br />
<br />
</li>
<li><code>Min</code><br />
<br />
</li>
<li><code><span class="nb">int</span><span class="p">(</span><span class="s">&#39;five&#39;</span><span class="p">)</span></code><br />
<br />
</li>
<li><code><span class="mi">5</span><span class="o">/</span><span class="mi">0</span></code><br />
<br />
</li>
<li><code>input file <span class="o">=</span> <span class="s">'park.shp'</span></code></li>
</ol>
</li>
<br />
<li><strong>times.py</strong> Write a script named 'times.py' that finds the product of two input integers and prints the results. Start by opening 'add_version2.py', modifying the last two lines and saving the file with the name 'times.py'. An asterisk is used as the multiplication operator in Python, so you'll use <code>c <span class="o">=</span> a * b</code> to multiply. Also change the comment on line 1 to reflect the modified functionality. Run the script using two integer arguments to check that it works. The example below shows the expected behavior. Check your results against this example.<br />
<br />
            Example:<br />
            Two arguments given in the 'Run Script' window Argument text box:<br />
            2 3<br />
<br />
            Output printed in the Interactive Window:<br />
<code><br />
            &gt;&gt;&gt; The product is 6.<br />
</code></li>
</ol><a href="#top">back to top</a> <a href="#top">back to top</a> <blockquote>
<p> Interactive Window examples are given as text with Python prompts. To try the examples yourself, note that the prompt indicates that you should type what follows on that
                  line in the Interactive Window, but don't type the '&gt;&gt;&gt;' marks. </p>
</blockquote><p><strong>Listing Python scripts in ArcCatalog and Windows Explorer</strong></p>
<ol type="I">
<li>By default, ArcCatalog does not display scripts in the TOC. To change this setting, use the following steps:<br />
<ol>
<li>Customize menu &gt; ArcCatalog Options &gt; File Types tab &gt; New Type </li>
<li>Enter <em>Python</em> for Description and <em>py</em> for File extension </li>
<li> Import File Type From Registry... </li>
<li>Click 'OK' to complete the process.</li>
</ol>
<p>It may be necessary to restart ArcCatalog in order to view the python files.</p>
</li>
<li>
<p>By default, Windows users can see Python scripts in Windows Explorer, but the file extension may be hidden. If you don't
                    see the '.py' extension on Python files, change the settings under the
                    Windows Explorer tools menu. The procedure varies depending on the Windows version. For example, in Windows 7 follow these instructions:</p>
<ol>
<li> Tools &gt; FolderOptions... &gt; View. </li>
<li>Uncheck 'Hide extensions for known file types'.</li>
<li>Click 'Apply to All Folders'.<br />
<br />
</li>
</ol>
                  and in Windows 8 click View, then check 'File name extensions'. </li>
</ol><strong>Table 2.1</strong>: Buttons, keyboard shortcuts, and menu instructions for some basic actions in PythonWin.<br />
<table width="859" border="3" bgcolor="#eeeeeee">
<tr>
<td width="195" bgcolor="#CCCCCC"><span class="style4"><strong>Action</strong></span></td>
<td width="51" bgcolor="#CCCCCC"><strong>Button</strong></td>
<td width="285" bgcolor="#CCCCCC"><span class="style4"><strong>Keyboard shortcut</strong></span></td>
<td width="296" bgcolor="#CCCCCC"><span class="style4"><strong>Menu</strong></span></td>
</tr>
<tr>
<td>Create a new script window</td>
<td><div align="center"><img src="../images/newScript.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + n</td>
<td>File &gt; New </td>
</tr>
<tr>
<td>Open a script</td>
<td><div align="center"><img src="../images/openScript.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + o</td>
<td>File &gt; Open</td>
</tr>
<tr>
<td>Save a script</td>
<td><div align="center"><img src="../images/saveScript.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + s</td>
<td>File &gt; Save</td>
</tr>
<tr>
<td>Close script</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>File &gt; Close</td>
</tr>
<tr>
<td>Run a script</td>
<td><div align="center"><img src="../images/running_man.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + r</td>
<td>File &gt; Run</td>
</tr>
<tr>
<td>Tile the windows</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>Click in Script Window, then:  Window &gt; Tile</td>
</tr>
<tr>
<td>Show line numbers</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>View &gt; Options &gt; Editor &gt; Set Line numbers &gt;= 30</td>
</tr>
<tr>
<td>Shift focus between windows</td>
<td>&nbsp;</td>
<td>Ctrl+Tab</td>
<td>&nbsp;</td>
</tr>
<tr>
<td>Open/close Interactive Window</td>
<td><div align="center"><img src="../images/interactiveButton.png" alt="inter" width="26" height="26" /></div></td>
<td>&nbsp;</td>
<td>View &gt; Interactive Window</td>
</tr>
<tr>
<td>Clear the Interactive Window</td>
<td>&nbsp;</td>
<td> Ctrl+Tab to the Interactive Window, Ctrl+a, del</td>
<td>Click in Interactive Window, Edit &gt; Select All, Edit &gt; Delete</td>
</tr>
<tr>
<td>Toggle whitespace</td>
<td>&nbsp;</td>
<td>Ctrl+W</td>
<td>View &gt; Options &gt; Tabs and whitespace &gt; check 'View whitespace'</td>
</tr>
</table>
<span class="style4"><strong>Action</strong></span><strong>Button</strong><span class="style4"><strong>Keyboard shortcut</strong></span><span class="style4"><strong>Menu</strong></span>Create a new script window<div align="center"><img src="../images/newScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + nFile &gt; New Open a script<div align="center"><img src="../images/openScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + oFile &gt; OpenSave a script<div align="center"><img src="../images/saveScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + sFile &gt; SaveClose script&nbsp;&nbsp;File &gt; CloseRun a script<div align="center"><img src="../images/running_man.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + rFile &gt; RunTile the windows&nbsp;&nbsp;Click in Script Window, then:  Window &gt; TileShow line numbers&nbsp;&nbsp;View &gt; Options &gt; Editor &gt; Set Line numbers &gt;= 30Shift focus between windows&nbsp;Ctrl+Tab&nbsp;Open/close Interactive Window<div align="center"><img src="../images/interactiveButton.png" alt="inter" width="26" height="26" /></div>&nbsp;View &gt; Interactive WindowClear the Interactive Window&nbsp; Ctrl+Tab to the Interactive Window, Ctrl+a, delClick in Interactive Window, Edit &gt; Select All, Edit &gt; DeleteToggle whitespace&nbsp;Ctrl+WView &gt; Options &gt; Tabs and whitespace &gt; check 'View whitespace'<a href="#top">back to top</a> <code><br />
<span class="comment"># add_version1.py</span><span class="comment">: Add two numbers.</span> <br />
                  a <span class="o">=</span> <span class="num">5</span><br />
                  b <span class="o">=</span> <span class="num">6</span><br />
<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <br />
<span class="k">print</span> <span class="s">&quot;The sum is {0}.&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="comment"> # .format(c) substitutes the value of c for {0} in the print statement.</span><br />
</code><code><br />
<span class="comment"># add_version2.py</span><span class="comment">:  Add two numbers
                    given as arguments.</span><br />
<br />
<span class="key">import</span> sys <span class="comment"># Now the script can use the built-in Python system module.</span><br />
<br />
                    a <span class="o">=</span> int(sys.argv[<span class="num">1</span>]) <span class="comment"># sys.argv is the <em><strong>sys</strong></em>tem <em><strong>arg</strong></em>ument <em><strong>v</strong></em>ector.</span><br />
                    b <span class="o">=</span> int(sys.argv[<span class="num">2</span>]) <span class="comment"># int changes the input to an <strong>integer</strong> number.</span><br />
<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <br />
<span class="k">print</span> <span class="s">&quot;The sum is {0}.&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="comment"># .format(c) substitutes the value of c for {0} in the print statement.</span><br />
</code><a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <p><strong>Table 2.2 </strong>Python 2.7 keywords. <br />
</p>
<table width="385" border="0" bgcolor="#eeeeeee">
<tr>
<td width="379"><pre class="key"><font>and       del       from      not       while      <br />as        elif      global    or        with       <br />assert    else      if        pass      yield      <br />break     except    import    print                <br />class     exec      in        raise                <br />continue  finally   is        return               <br />def       for       lambda    try</font></pre></td>
</tr>
</table><pre class="key"><font>and       del       from      not       while      <br />as        elif      global    or        with       <br />assert    else      if        pass      yield      <br />break     except    import    print                <br />class     exec      in        raise                <br />continue  finally   is        return               <br />def       for       lambda    try</font></pre><a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <blockquote>
<p><em> Look for an explanation of the error in the last line of a traceback message.</em></p>
</blockquote><a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> Software versions
                        <table width="232" border="1">
<tr>
<td width="109"><strong>ArcGIS version</strong></td>
<td width="107"><strong>Python version</strong></td>
</tr>
<tr>
<td>10.1, 10.2</td>
<td>2.7</td>
</tr>
<tr>
<td>10</td>
<td>2.6</td>
</tr>
<tr>
<td>9.3</td>
<td>2.5</td>
</tr>
<tr>
<td>9.2</td>
<td>2.4.1</td>
</tr>
<tr>
<td>9.1</td>
<td>2.1</td>
</tr>
</table><strong>ArcGIS version</strong><strong>Python version</strong>10.1, 10.22.7102.69.32.59.22.4.19.12.1Key termStatement<ol>
<li>Python keyword<br />
<br />
</li>
<li>IDE<br />
<br />
</li>
<li>Hash sign<br />
<br />
</li>
<li>Tracebacks<br />
<br />
</li>
<li> Window focus<br />
<br />
</li>
<li>Script arguments<br />
<br />
</li>
<li>Context highlighting<br />
<br />
</li>
<li>Assignment statement<br />
<br />
</li>
<li> Dynamic typing<br />
<br />
</li>
<li>False<br />
<br />
</li>
<li> NameError<br />
<br />
</li>
<li>Dedented code<br />
<br />
</li>
<li>math, os, and sys<br />
</li>
</ol>
<ol type="A">
<li>This is a  built-in boolean constant.<br />
<br />
</li>
<li>If this isn't in the Script Window, you might save the Interactive Window by mistake.<br />
<br />
</li>
<li>Special font formatting (such as color) based on meaning of text in the code.<br />
<br />
</li>
<li>The controversial debates surrounding Python versus Perl scripting languages.<br />
<br />
</li>
<li><code><span class="key">print</span></code> is written in bold blue because it is one of these.<br />
<br />
</li>
<li>If a variable name is misspelled, this can occur.<br />
<br />
</li>
<li>A specialized editor for developing scripts.<br />
<br />
</li>
<li>Information passed into a script by the user.<br />
<br />
</li>
<li>Automatically set the data type of a variable when a value is assigned.<br />
<br />
</li>
<li><code>x <span class="o">=</span> 5</code> is an example of one of these. <br />
<br />
</li>
<li>Messages printed when exceptions are thrown.<br />
<br />
</li>
<li>This signals the end of a related block of code.<br />
<br />
</li>
<li>The shape of a camel's back.<br />
<br />
</li>
<li>Code following this character is only meant for the human reader. <br />
<br />
</li>
<li>These are examples of Python standard modules</li>
</ol><strong class="head">2.1 Where to write code </strong><a name="IDE" id="models2"></a><a href="#top">back to top</a> <span class="head">2.2 How to run code in PythonWin</span><a name="run" id="run"></a><a href="#top">back to top</a> <blockquote>
<p> Interactive Window examples are given as text with Python prompts. To try the examples yourself, note that the prompt indicates that you should type what follows on that
                  line in the Interactive Window, but don't type the '&gt;&gt;&gt;' marks. </p>
</blockquote><p><strong>Listing Python scripts in ArcCatalog and Windows Explorer</strong></p>
<ol type="I">
<li>By default, ArcCatalog does not display scripts in the TOC. To change this setting, use the following steps:<br />
<ol>
<li>Customize menu &gt; ArcCatalog Options &gt; File Types tab &gt; New Type </li>
<li>Enter <em>Python</em> for Description and <em>py</em> for File extension </li>
<li> Import File Type From Registry... </li>
<li>Click 'OK' to complete the process.</li>
</ol>
<p>It may be necessary to restart ArcCatalog in order to view the python files.</p>
</li>
<li>
<p>By default, Windows users can see Python scripts in Windows Explorer, but the file extension may be hidden. If you don't
                    see the '.py' extension on Python files, change the settings under the
                    Windows Explorer tools menu. The procedure varies depending on the Windows version. For example, in Windows 7 follow these instructions:</p>
<ol>
<li> Tools &gt; FolderOptions... &gt; View. </li>
<li>Uncheck 'Hide extensions for known file types'.</li>
<li>Click 'Apply to All Folders'.<br />
<br />
</li>
</ol>
                  and in Windows 8 click View, then check 'File name extensions'. </li>
</ol><strong>Table 2.1</strong>: Buttons, keyboard shortcuts, and menu instructions for some basic actions in PythonWin.<br />
<table width="859" border="3" bgcolor="#eeeeeee">
<tr>
<td width="195" bgcolor="#CCCCCC"><span class="style4"><strong>Action</strong></span></td>
<td width="51" bgcolor="#CCCCCC"><strong>Button</strong></td>
<td width="285" bgcolor="#CCCCCC"><span class="style4"><strong>Keyboard shortcut</strong></span></td>
<td width="296" bgcolor="#CCCCCC"><span class="style4"><strong>Menu</strong></span></td>
</tr>
<tr>
<td>Create a new script window</td>
<td><div align="center"><img src="../images/newScript.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + n</td>
<td>File &gt; New </td>
</tr>
<tr>
<td>Open a script</td>
<td><div align="center"><img src="../images/openScript.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + o</td>
<td>File &gt; Open</td>
</tr>
<tr>
<td>Save a script</td>
<td><div align="center"><img src="../images/saveScript.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + s</td>
<td>File &gt; Save</td>
</tr>
<tr>
<td>Close script</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>File &gt; Close</td>
</tr>
<tr>
<td>Run a script</td>
<td><div align="center"><img src="../images/running_man.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + r</td>
<td>File &gt; Run</td>
</tr>
<tr>
<td>Tile the windows</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>Click in Script Window, then:  Window &gt; Tile</td>
</tr>
<tr>
<td>Show line numbers</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>View &gt; Options &gt; Editor &gt; Set Line numbers &gt;= 30</td>
</tr>
<tr>
<td>Shift focus between windows</td>
<td>&nbsp;</td>
<td>Ctrl+Tab</td>
<td>&nbsp;</td>
</tr>
<tr>
<td>Open/close Interactive Window</td>
<td><div align="center"><img src="../images/interactiveButton.png" alt="inter" width="26" height="26" /></div></td>
<td>&nbsp;</td>
<td>View &gt; Interactive Window</td>
</tr>
<tr>
<td>Clear the Interactive Window</td>
<td>&nbsp;</td>
<td> Ctrl+Tab to the Interactive Window, Ctrl+a, del</td>
<td>Click in Interactive Window, Edit &gt; Select All, Edit &gt; Delete</td>
</tr>
<tr>
<td>Toggle whitespace</td>
<td>&nbsp;</td>
<td>Ctrl+W</td>
<td>View &gt; Options &gt; Tabs and whitespace &gt; check 'View whitespace'</td>
</tr>
</table>
<span class="style4"><strong>Action</strong></span><strong>Button</strong><span class="style4"><strong>Keyboard shortcut</strong></span><span class="style4"><strong>Menu</strong></span>Create a new script window<div align="center"><img src="../images/newScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + nFile &gt; New Open a script<div align="center"><img src="../images/openScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + oFile &gt; OpenSave a script<div align="center"><img src="../images/saveScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + sFile &gt; SaveClose script&nbsp;&nbsp;File &gt; CloseRun a script<div align="center"><img src="../images/running_man.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + rFile &gt; RunTile the windows&nbsp;&nbsp;Click in Script Window, then:  Window &gt; TileShow line numbers&nbsp;&nbsp;View &gt; Options &gt; Editor &gt; Set Line numbers &gt;= 30Shift focus between windows&nbsp;Ctrl+Tab&nbsp;Open/close Interactive Window<div align="center"><img src="../images/interactiveButton.png" alt="inter" width="26" height="26" /></div>&nbsp;View &gt; Interactive WindowClear the Interactive Window&nbsp; Ctrl+Tab to the Interactive Window, Ctrl+a, delClick in Interactive Window, Edit &gt; Select All, Edit &gt; DeleteToggle whitespace&nbsp;Ctrl+WView &gt; Options &gt; Tabs and whitespace &gt; check 'View whitespace'<span class="style4"><strong>Action</strong></span><strong>Button</strong><span class="style4"><strong>Keyboard shortcut</strong></span><span class="style4"><strong>Menu</strong></span>Create a new script window<div align="center"><img src="../images/newScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + nFile &gt; New Open a script<div align="center"><img src="../images/openScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + oFile &gt; OpenSave a script<div align="center"><img src="../images/saveScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + sFile &gt; SaveClose script&nbsp;&nbsp;File &gt; CloseRun a script<div align="center"><img src="../images/running_man.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + rFile &gt; RunTile the windows&nbsp;&nbsp;Click in Script Window, then:  Window &gt; TileShow line numbers&nbsp;&nbsp;View &gt; Options &gt; Editor &gt; Set Line numbers &gt;= 30Shift focus between windows&nbsp;Ctrl+Tab&nbsp;Open/close Interactive Window<div align="center"><img src="../images/interactiveButton.png" alt="inter" width="26" height="26" /></div>&nbsp;View &gt; Interactive WindowClear the Interactive Window&nbsp; Ctrl+Tab to the Interactive Window, Ctrl+a, delClick in Interactive Window, Edit &gt; Select All, Edit &gt; DeleteToggle whitespace&nbsp;Ctrl+WView &gt; Options &gt; Tabs and whitespace &gt; check 'View whitespace'<strong class="head">2.3 How to pass input to a script</strong><a name="arguments" id="arguments"></a><a href="#top">back to top</a> <code><br />
<span class="comment"># add_version1.py</span><span class="comment">: Add two numbers.</span> <br />
                  a <span class="o">=</span> <span class="num">5</span><br />
                  b <span class="o">=</span> <span class="num">6</span><br />
<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <br />
<span class="k">print</span> <span class="s">&quot;The sum is {0}.&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="comment"> # .format(c) substitutes the value of c for {0} in the print statement.</span><br />
</code><code><br />
<span class="comment"># add_version2.py</span><span class="comment">:  Add two numbers
                    given as arguments.</span><br />
<br />
<span class="key">import</span> sys <span class="comment"># Now the script can use the built-in Python system module.</span><br />
<br />
                    a <span class="o">=</span> int(sys.argv[<span class="num">1</span>]) <span class="comment"># sys.argv is the <em><strong>sys</strong></em>tem <em><strong>arg</strong></em>ument <em><strong>v</strong></em>ector.</span><br />
                    b <span class="o">=</span> int(sys.argv[<span class="num">2</span>]) <span class="comment"># int changes the input to an <strong>integer</strong> number.</span><br />
<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <br />
<span class="k">print</span> <span class="s">&quot;The sum is {0}.&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="comment"># .format(c) substitutes the value of c for {0} in the print statement.</span><br />
</code><b class="head">2.4 Python components</b><a name="components" id="keyterms2"></a><a href="#top">back to top</a> <strong><span class="head">2.4.1 Comments</span></strong><a href="#top">back to top</a> <strong><span class="head">2.4.2 Keywords</span></strong><a href="#top">back to top</a> <p><strong>Table 2.2 </strong>Python 2.7 keywords. <br />
</p>
<table width="385" border="0" bgcolor="#eeeeeee">
<tr>
<td width="379"><pre class="key"><font>and       del       from      not       while      <br />as        elif      global    or        with       <br />assert    else      if        pass      yield      <br />break     except    import    print                <br />class     exec      in        raise                <br />continue  finally   is        return               <br />def       for       lambda    try</font></pre></td>
</tr>
</table><pre class="key"><font>and       del       from      not       while      <br />as        elif      global    or        with       <br />assert    else      if        pass      yield      <br />break     except    import    print                <br />class     exec      in        raise                <br />continue  finally   is        return               <br />def       for       lambda    try</font></pre><pre class="key"><font>and       del       from      not       while      <br />as        elif      global    or        with       <br />assert    else      if        pass      yield      <br />break     except    import    print                <br />class     exec      in        raise                <br />continue  finally   is        return               <br />def       for       lambda    try</font></pre><strong><span class="head">2.4.3 Indentation</span></strong><a href="#top">back to top</a> <strong><span class="head">2.4.4 Built-in functions</span></strong><a href="#top">back to top</a> <code>functionName(argument1, 
                argument2, argument3,...)</code><strong><span class="head">2.4.5 Variables, assignment statements, and dynamic typing</span></strong><a href="#top">back to top</a> <strong><span class="head">2.4.6 Naming variables and tracebacks</span></strong><a href="#top">back to top</a> <blockquote>
<p><em> Look for an explanation of the error in the last line of a traceback message.</em></p>
</blockquote><strong><span class="head">2.4.7 Built-in constants and exceptions</span></strong><a href="#top">back to top</a> <strong><span class="head">2.4.8 Standard modules</span></strong><a name="standardModules" id="models"></a><a href="#top">back to top</a> <p align="left"><code><span class="key">import </span>moduleName1, moduleName2, ...</code><br />
</p><b class="head">2.5 Key terms</b><a name="keyterms" id="keyterms"></a><a href="#top">back to top</a> <b class="head">2.6 Exercises</b><a name="exercises" id="exercises"></a><a href="#top">back to top</a> Software versions
                        <table width="232" border="1">
<tr>
<td width="109"><strong>ArcGIS version</strong></td>
<td width="107"><strong>Python version</strong></td>
</tr>
<tr>
<td>10.1, 10.2</td>
<td>2.7</td>
</tr>
<tr>
<td>10</td>
<td>2.6</td>
</tr>
<tr>
<td>9.3</td>
<td>2.5</td>
</tr>
<tr>
<td>9.2</td>
<td>2.4.1</td>
</tr>
<tr>
<td>9.1</td>
<td>2.1</td>
</tr>
</table><strong>ArcGIS version</strong><strong>Python version</strong>10.1, 10.22.7102.69.32.59.22.4.19.12.1<strong>ArcGIS version</strong><strong>Python version</strong>10.1, 10.22.7102.69.32.59.22.4.19.12.1Key termStatement<ol>
<li>Python keyword<br />
<br />
</li>
<li>IDE<br />
<br />
</li>
<li>Hash sign<br />
<br />
</li>
<li>Tracebacks<br />
<br />
</li>
<li> Window focus<br />
<br />
</li>
<li>Script arguments<br />
<br />
</li>
<li>Context highlighting<br />
<br />
</li>
<li>Assignment statement<br />
<br />
</li>
<li> Dynamic typing<br />
<br />
</li>
<li>False<br />
<br />
</li>
<li> NameError<br />
<br />
</li>
<li>Dedented code<br />
<br />
</li>
<li>math, os, and sys<br />
</li>
</ol>
<ol type="A">
<li>This is a  built-in boolean constant.<br />
<br />
</li>
<li>If this isn't in the Script Window, you might save the Interactive Window by mistake.<br />
<br />
</li>
<li>Special font formatting (such as color) based on meaning of text in the code.<br />
<br />
</li>
<li>The controversial debates surrounding Python versus Perl scripting languages.<br />
<br />
</li>
<li><code><span class="key">print</span></code> is written in bold blue because it is one of these.<br />
<br />
</li>
<li>If a variable name is misspelled, this can occur.<br />
<br />
</li>
<li>A specialized editor for developing scripts.<br />
<br />
</li>
<li>Information passed into a script by the user.<br />
<br />
</li>
<li>Automatically set the data type of a variable when a value is assigned.<br />
<br />
</li>
<li><code>x <span class="o">=</span> 5</code> is an example of one of these. <br />
<br />
</li>
<li>Messages printed when exceptions are thrown.<br />
<br />
</li>
<li>This signals the end of a related block of code.<br />
<br />
</li>
<li>The shape of a camel's back.<br />
<br />
</li>
<li>Code following this character is only meant for the human reader. <br />
<br />
</li>
<li>These are examples of Python standard modules</li>
</ol>------------------------------------------------------------rows: 47 cols: 0<strong class="head">2.1 Where to write code </strong><a name="IDE" id="models2"></a><span class="head">2.2 How to run code in PythonWin</span><a name="run" id="run"></a><strong class="head">2.3 How to pass input to a script</strong><a name="arguments" id="arguments"></a><b class="head">2.4 Python components</b><a name="components" id="keyterms2"></a><strong><span class="head">2.4.1 Comments</span></strong><strong><span class="head">2.4.2 Keywords</span></strong><strong><span class="head">2.4.3 Indentation</span></strong><strong><span class="head">2.4.4 Built-in functions</span></strong><code>functionName(argument1, 
                argument2, argument3,...)</code><strong><span class="head">2.4.5 Variables, assignment statements, and dynamic typing</span></strong><strong><span class="head">2.4.6 Naming variables and tracebacks</span></strong><strong><span class="head">2.4.7 Built-in constants and exceptions</span></strong><strong><span class="head">2.4.8 Standard modules</span></strong><a name="standardModules" id="models"></a><p align="left"><code><span class="key">import </span>moduleName1, moduleName2, ...</code><br />
</p><b class="head">2.5 Key terms</b><a name="keyterms" id="keyterms"></a><b class="head">2.6 Exercises</b><a name="exercises" id="exercises"></a><p class="head">Chapter objectives</p>
After reading this chapter, you'll be able to do the following:
<ul>
<li>Test individual lines of code interactively in a code editor.</li>
<li>Run Python scripts in a code editor.</li>
<li>Differentiate between scripting and interactive code editor windows.</li>
<li>Pass  input to a script.</li>
<li>Match code text color with code components.</li>
<li>Define seven fundamental components of Python code.<br />
</li>
</ul>
<hr />
<span class="foo">
<span class="head">Chapter Outline</span><br /><br />
<a href="#IDE">Where to run  code</a><br />
<a href="#run">How to run code in PythonWin</a> or PyScripter<br />
<a href="#arguments">How to pass input to a script</a><br />
<a href="#components">Python components<br />
</a>&nbsp;&nbsp;&nbsp;&nbsp;Comments<br />
        &nbsp;&nbsp;&nbsp;&nbsp;Keywords<br />
&nbsp;&nbsp;&nbsp;&nbsp;Indentation<br />
&nbsp;&nbsp;&nbsp;&nbsp;Built-in funcitons<br />
&nbsp;&nbsp;&nbsp;&nbsp;Variables, assignment statements, and dynamic typing<br />
&nbsp;&nbsp;&nbsp;&nbsp;Naming variables and tracebacks<br />
&nbsp;&nbsp;&nbsp;&nbsp;Built-in constants and exceptions<br />
&nbsp;&nbsp;&nbsp;&nbsp;Standard modules<br />
Key terms<br />
<a href="#exercises">Exercises</a><br />
</span>
<hr />
<p>Before  you can create GIS Python scripts, you need to know where to write and run the code and you need a familiarity with basic programming concepts. If you're unfamiliar with Python, it will be worthwhile to take a little time to go over the basics presented in this chapter before commencing the next chapter.</p>
<hr />
<table width="775" border="0">
<tbody>
<tr>
<th scope="row" align="left"><strong class="head">2.1 Where to write code </strong><a name="IDE" id="models2"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<p>Python scripts can be written and saved in any text editor; when a file is saved with a '.py' extension, the computer interprets it as a Python script. However, an <em>integrated development environment</em> (IDE), a software application designed for computer programming, is a better choice than a general purpose text editor, because it is tailored for programming. The <em>syntax</em> of a programming language is the set of rules that define how to form code statements that the computer will be able to interpret in that language. An IDE can check code syntax, highlight special code statements, suggest ways to complete a code statement, and  provide special tools, called debuggers, to investigate errors in the code.</p>
<p>The ArcGIS Python window embedded in ArcGIS desktop applications has some IDE functionality, such as Help pages and automatic code completion. It allows the user to save code (right-click &gt; Save as) or load a saved script (right-click &gt; Load), but it is missing some of the  functionality of a stand-alone IDE. For example, it  provides no means to pass input into a script and it doesn't provide a debugger.  Stand-alone IDE's are also lightweight and allow scripts to be run and tested outside of ArcGIS software. For these reasons, we will mainly use a popular stand-alone IDE called PythonWin. </p>
<p>The PythonWin IDE provides two windows for two modes of executing code: an interactive environment and a window for scripts (Figure 2.1).  The interactive environment works like this:</p>
<p>1. The user types a line of code in the interactive window (for example, <code><span class="key">print</span> <span class="s">'Hello'</span></code>).<br />
          2. 
          The user presses 'Enter' to indicate that the line of code is complete. <br />
          3. The single line of code is run.<br />
</p>
<p>The interactive mode is a convenient way to try out small pieces of code and see the results immediately. The code written in the interactive window is not saved when the IDE is closed. Often we want to save many lines of related code for reuse, in other words, we want to save scripts. A <em>Python script</em> is a program (a set of lines of Python code) saved in a file  with the '.py' extension. A script can later be opened in an IDE and run in its entirety from there. </p>
<p><img src="../images/PythonWin_small3.png" /><br />
<strong>Figure 2.1</strong> PythonWin has two windows: one for scripts and one for interactive coding.</p>
<p>Python is installed automatically when ArcGIS is installed, but PythonWin is not. To follow along in the rest of the chapter, install  PythonWin and PyScripter based on the instructions in Exercise 1. Then launch PythonWin and locate the Python prompt, as shown below:<br />
<img src="../images/launchPython.png" /></p>
<p>PyScripter is also a good choice as a Python IDE. PyScripter's equivalent of PythonWin's Interactive Window is the Python Interpreter window. PyScripter is more complex than PythonWin, but has additional functionality, such as interactive syntax checking, window tabs, variable watch tools, and the ability to create projects. <br />
</p>
<hr />
<br />
<table width="775" border="0">
<tbody>
<tr>
<th scope="row" width="512" align="left"><span class="head">2.2 How to run code in PythonWin</span><a name="run" id="run"></a></th>
<td width="253" align="right"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<p>Once you have installed PythonWin, you'll need to understand how to use the Interactive Window and script windows.   When PythonWin is first opened, only the Interactive Window is displayed, because you're not
          editing a script yet. Python statements in the window labeled 'Interactive Window' are executed as soon as you finish typing the line of code and  press the 'Enter' key. The <code>&gt;&gt;&gt;</code> symbol in the Interactive Window is the <em>Python prompt</em>. Just like the prompt in the ArcGIS Python Window, it 
          indicates that Python is
          waiting for input. </p>
<p><img src="../images/interactive_window1.png" /> </p>
<p>Type something at the Python prompt and press the 'Enter' key. On the following line, Python displays the result. Enter <code>print &quot;GIS rules&quot;</code>  and it displays 'GIS rules'. Enter <code>1 + 1</code> and Python displays <code>2</code>. Backspace and then enter <code>3 + 4</code>. Python doesn't display <code>7</code> because there is no space between the prompt and the Python code. There must be exactly one space between the prompt and the input. This problem only occurs if you 'Backspace' too far. When you press the 'Enter' key, the cursor is automatically placed in the correct position, ready for the next command. PyScripter avoids this issue by not allowing you to remove that space after the prompt. Backspacing has no affect.</p>
<p>Instead of showing screen shots of the Interactive Window, this book usually uses text to display these interactions.  For example, the screen shot above would be replaced with this text:</p>
<p><code>&gt;&gt;&gt; <span class="key">print</span> <span class="s">&quot;GIS rules.&quot;</span><br />
          GIS rules.<br />
          &gt;&gt;&gt; <span class="num">1</span><span style="vertical-align: top;"><span class="o"> +</span></span><span class="num"> 1</span><br />
          2<br />
          &gt;&gt;&gt;<span class="num">3</span><span style="vertical-align: top;"><span class="o"> +</span></span> <span class="num">4</span><br />
          &gt;&gt;&gt;<br />
</code></p>
<table width="779" border="3" bgcolor="#CEDAE3">
<tr>
<td width="765"><blockquote>
<p> Interactive Window examples are given as text with Python prompts. To try the examples yourself, note that the prompt indicates that you should type what follows on that
                  line in the Interactive Window, but don't type the '&gt;&gt;&gt;' marks. </p>
</blockquote></td>
</tr>
</table>
<p>The interactive mode is helpful for testing small pieces of code, but ultimately you will be writing Python  scripts. Editing scripts in an IDE is similar to
          working with a text editor. You can use  buttons (or menu selections or keyboard shortcuts) for creating, saving, closing, and opening scripts. Table 2.1 shows these options. If you're unfamiliar with PythonWin, it would be useful to walk through the following example, to practice these actions. <br />
<br />
          Create a
          new blank script as follows: </p>
<ol>
<li> Choose File &gt; new or press <strong>Ctrl + n</strong> or click the new script button <img src="../images/newScript.png" alt="the run button" width="24" border="1" />.</li>
<li> Select 'Python script'.</li>
<li>Click 'OK'. </li>
</ol>
        A new blank script window with no '&gt;&gt;&gt;' prompts
        appears. Next, organize the display by tiling the windows and turning on line numbers. To tile the windows as shown in Figure 2.1, click in the script window, then select: Window menu &gt; Tile. When you have two or more windows open in PythonWin, you need to be aware of the focus. The <em>focus</em> is the active window where you've clicked the mouse most recently. If you click in the Interactive Window and tile the windows again, the Interactive Window will be stacked on top, because the 'Tile' option places the focus window on top. To display the line numbers next to the code in the script window, select the View menu &gt; Options &gt; Editor  and set 'Line numbers'  to 30. This sets the width of the line numbers margin to 30 pixels.  Next, add some content to the script, by typing the following lines of code in the new window:
        <p><code><span class="key">print</span> <span class="s">&quot;I love GIS...&quot;</span><br />
<span class="key">print</span> <span class="s">&quot;and soon I will love Python!&quot;</span>
<!--          <p>Notice that PythonWin displays print in bold blue and
 quoted text in another color. PythonWin  automatically uses
font style and color to highlight special words. This is called <span
 style="font-style: italic;">context highlighting</span>. As you work
more in Python you’ll find this is very useful. For
example, if you intended to type print and you typed pirnt instead, you
are apt to notice the error because the word is not in bold. PythonWin
colors text inside quotes to show that it is interpreted literally, not
as a variable representing some other value. <br>-->
<br />
</code><br />
          The color of the text in the script window is meaningful as we discuss in an upcoming section.   Next, save the Python script in 'C:/gispy/scratch'.  To save the script: </p>
<ol>
<li> Click File &gt; Save or press <strong>Ctrl  + s</strong> or click the save button <img src="../images/saveScript.png" alt="the run button" width="24" border="1" height="23" />.</li>
<li>A 'Save as' window appears. Browse to the 'C:\gispy\scratch' directory.</li>
<li>Set the file name to  'gisRules.py'. </li>
<li>Click 'Save'.</li>
</ol>
<p>Beware of your focus; If you select <strong>Ctrl + s</strong> while your focus is in the Interactive Window, it will  save the contents of the Interactive Window instead of your script.  Confirm that you can view the entire 'gisRules.py'  file name in the 'C:\gispy\scratch' directory in ArcCatalog and Windows Explorer.  If not, see the sidebar &quot;Listing Python scripts in ArcCatalog and Windows Explorer.&quot; </p>
<table width="779" border="3" bgcolor="#CEDAE3">
<tr>
<td width="765" height="76"><p><strong>Listing Python scripts in ArcCatalog and Windows Explorer</strong></p>
<ol type="I">
<li>By default, ArcCatalog does not display scripts in the TOC. To change this setting, use the following steps:<br />
<ol>
<li>Customize menu &gt; ArcCatalog Options &gt; File Types tab &gt; New Type </li>
<li>Enter <em>Python</em> for Description and <em>py</em> for File extension </li>
<li> Import File Type From Registry... </li>
<li>Click 'OK' to complete the process.</li>
</ol>
<p>It may be necessary to restart ArcCatalog in order to view the python files.</p>
</li>
<li>
<p>By default, Windows users can see Python scripts in Windows Explorer, but the file extension may be hidden. If you don't
                    see the '.py' extension on Python files, change the settings under the
                    Windows Explorer tools menu. The procedure varies depending on the Windows version. For example, in Windows 7 follow these instructions:</p>
<ol>
<li> Tools &gt; FolderOptions... &gt; View. </li>
<li>Uncheck 'Hide extensions for known file types'.</li>
<li>Click 'Apply to All Folders'.<br />
<br />
</li>
</ol>
                  and in Windows 8 click View, then check 'File name extensions'. </li>
</ol></td>
</tr>
</table>
<p> Back in PythonWin, run the program:</p>
<ol>
<li> Select File &gt; Run or press <strong>Ctrl  + r</strong> or click the 'Run' button <img src="../images/running_man.png" alt="the run button" width="24" border="1" height="23" />. </li>
<li> A 'Run Script' window appears. Click ‘OK’.</li>
</ol>
<p>PythonWin will run the script and you should see these results in the Interactive Window:<br />
</p>
<blockquote> <code>&gt;&gt;&gt; I love GIS...<br />
<font class="num" color="#0099ff">and soon I will love Python!</font><br />
</code></blockquote>
<p>Code from the script prints output in the Interactive Window.  PythonWin prints the first line in black and the other in blue; This text coloring is inconsequential and can be ignored. </p>
<p> With the focus in the 'gisRules.py' script window, select File &gt; Close or click the X in the upper right corner of the window to close the script. Next, we'll reopen 'gisRules.py' to demonstrate running a saved script. To open and rerun it: </p>
<ol>
<li> File &gt; Open or press <strong>Ctrl  + o</strong> or click the open file button <img src="../images/openScript.png" alt="the run button" width="24" border="1" height="23" /></li>
<li> Browse to the file, 'gisRules.py' in C:\gispy\scratch.</li>
<li> Select File &gt; Run or press <strong>Ctrl  + r</strong> or click the run button <img src="../images/running_man.png" alt="the run button" width="24" border="1" height="23" />. </li>
<li> A 'Run Script' window appears. Click ‘OK’.</li>
</ol>
<p> You will see the same statements printed again in the Interactive Window. Clearing the Interactive Window between running scripts to make it easier to identify new output. To do so, click inside the Interactive Window to give it focus. Then select all the contents (<strong>Ctrl</strong> + <strong>a</strong>) and delete them. PythonWin allows you to open multiple script windows, so you can view more than one script at a time, but it only opens one Interactive Window. <br />
          To open and close the Interactive Window, click on the button that looks like a Python prompt <img src="../images/interactiveButton.png" alt="prompt" width="26" height="26" border="1" />. </p>
<p>Table 2.1 summarizes the actions described in this example. </p>
<table bgcolor="#EEEEEE" border="0" width="779">
<tbody>
<tr>
<td scope="row"><strong>Table 2.1</strong>: Buttons, keyboard shortcuts, and menu instructions for some basic actions in PythonWin.<br />
<table width="859" border="3" bgcolor="#eeeeeee">
<tr>
<td width="195" bgcolor="#CCCCCC"><span class="style4"><strong>Action</strong></span></td>
<td width="51" bgcolor="#CCCCCC"><strong>Button</strong></td>
<td width="285" bgcolor="#CCCCCC"><span class="style4"><strong>Keyboard shortcut</strong></span></td>
<td width="296" bgcolor="#CCCCCC"><span class="style4"><strong>Menu</strong></span></td>
</tr>
<tr>
<td>Create a new script window</td>
<td><div align="center"><img src="../images/newScript.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + n</td>
<td>File &gt; New </td>
</tr>
<tr>
<td>Open a script</td>
<td><div align="center"><img src="../images/openScript.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + o</td>
<td>File &gt; Open</td>
</tr>
<tr>
<td>Save a script</td>
<td><div align="center"><img src="../images/saveScript.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + s</td>
<td>File &gt; Save</td>
</tr>
<tr>
<td>Close script</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>File &gt; Close</td>
</tr>
<tr>
<td>Run a script</td>
<td><div align="center"><img src="../images/running_man.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + r</td>
<td>File &gt; Run</td>
</tr>
<tr>
<td>Tile the windows</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>Click in Script Window, then:  Window &gt; Tile</td>
</tr>
<tr>
<td>Show line numbers</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>View &gt; Options &gt; Editor &gt; Set Line numbers &gt;= 30</td>
</tr>
<tr>
<td>Shift focus between windows</td>
<td>&nbsp;</td>
<td>Ctrl+Tab</td>
<td>&nbsp;</td>
</tr>
<tr>
<td>Open/close Interactive Window</td>
<td><div align="center"><img src="../images/interactiveButton.png" alt="inter" width="26" height="26" /></div></td>
<td>&nbsp;</td>
<td>View &gt; Interactive Window</td>
</tr>
<tr>
<td>Clear the Interactive Window</td>
<td>&nbsp;</td>
<td> Ctrl+Tab to the Interactive Window, Ctrl+a, del</td>
<td>Click in Interactive Window, Edit &gt; Select All, Edit &gt; Delete</td>
</tr>
<tr>
<td>Toggle whitespace</td>
<td>&nbsp;</td>
<td>Ctrl+W</td>
<td>View &gt; Options &gt; Tabs and whitespace &gt; check 'View whitespace'</td>
</tr>
</table>
</td>
</tr>
</tbody>
</table>
<hr />
<table width="775" border="0">
<tbody>
<tr>
<th scope="row" align="left"><strong class="head">2.3 How to pass input to a script</strong><a name="arguments" id="arguments"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<p>Now you know how to run lines of code directly in the Interactive Window and how to create
          and run Python scripts in
          PythonWin. You also need to know how to give input to a script in PythonWin. Getting input from the user enables code
          reuse without editing the code. User input called <em>arguments</em>, is given to the script in PythonWin through the 'Run Script' window.   To use arguments, type them in the  'Run Script' window text box labeled 'Arguments'. To use multiple arguments, separate them by spaces. </p>
<p>This example  runs a script 'add_version1.py'  with no arguments and then runs 'add_version2.py', which takes two arguments: <br />
</p>
<ol>
<li>In PythonWin open (<span style="font-weight: bold;">Ctrl+o</span>) 'add_version1.py', which looks like this:</li>
<table border="1" cellpadding="2" cellspacing="2" bgcolor="#ffffcc" style="text-align: left; ; height: 30px;">
<tbody>
<tr>
<td width="627" style="vertical-align: top;"><code><br />
<span class="comment"># add_version1.py</span><span class="comment">: Add two numbers.</span> <br />
                  a <span class="o">=</span> <span class="num">5</span><br />
                  b <span class="o">=</span> <span class="num">6</span><br />
<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <br />
<span class="k">print</span> <span class="s">&quot;The sum is {0}.&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="comment"> # .format(c) substitutes the value of c for {0} in the print statement.</span><br />
</code></td>
</tr>
</tbody>
</table>
<br />
<li>Run the script (<span style="font-weight: bold;">Ctrl + r &gt; OK</span>). The output in the Interactive Window should look like this:<br />
<code><br />
            &gt;&gt;&gt; The sum is 11.<br />
</code><br />
</li>
<li> 'add_version1.py' is so simple that it always adds the same two
            numbers every time it is run. 'add_version2.py' instead adds two input numbers provided by the user. Open 'add_version2.py', which looks like this:
            <table border="1" cellpadding="2" cellspacing="2" bgcolor="#ffffcc" style="text-align: left; width: 412px; height: 30px;">
<tbody>
<tr>
<td nowrap="nowrap" style="vertical-align: top;"><code><br />
<span class="comment"># add_version2.py</span><span class="comment">:  Add two numbers
                    given as arguments.</span><br />
<br />
<span class="key">import</span> sys <span class="comment"># Now the script can use the built-in Python system module.</span><br />
<br />
                    a <span class="o">=</span> int(sys.argv[<span class="num">1</span>]) <span class="comment"># sys.argv is the <em><strong>sys</strong></em>tem <em><strong>arg</strong></em>ument <em><strong>v</strong></em>ector.</span><br />
                    b <span class="o">=</span> int(sys.argv[<span class="num">2</span>]) <span class="comment"># int changes the input to an <strong>integer</strong> number.</span><br />
<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <br />
<span class="k">print</span> <span class="s">&quot;The sum is {0}.&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="comment"># .format(c) substitutes the value of c for {0} in the print statement.</span><br />
</code></td>
</tr>
</tbody>
</table>
<br />
</li>
<li>This time, we  will add the numbers 2 and 3. To run the script  with these two arguments, select <strong>Ctrl + r</strong> and in the 'Run Script' window 'Arguments' text box, place a 2
            and 3, separated by a space. <br />
<img src="../images/arguments.jpg" width="383" height="134" /></li>
<li>Click '<strong>OK</strong>'. The output in the Interactive Window should look like this:<br />
            &gt;&gt;&gt; The sum is 5. <br />
</li>
</ol>
        The beginning of 'add_version2.py' differs from 'add_version1.py' so that it can use arguments. The new lines of code in 'add_version2.py'  use  the system argument vector, <code>sys.argv</code>, to get the values of the arguments that are passed into the script.
        <code>sys.argv[1]</code> holds the first argument and <code>sys.argv[2]</code> holds the second one. We'll revisit script arguments in more depth in an upcoming chapter. For now, you know enough to run some simple examples.<br />
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><b class="head">2.4 Python components</b><a name="components" id="keyterms2"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>The  color and indentation of Python code, as it appears in an IDE, highlights code components such as comments, keywords, block structures, numbers, and strings. This special formatting, called <span style="font-style: italic;">context highlighting, </span>provides extra cues to help programmers. For example, the keyword <code>import</code> appears as bold blue in a script, but if the word is misspelled as 'improt', it will have no special formatting. The script, 'describe_fc.py', in Figure 2.2,  shows several highlighted code components. 'describe_fc.py'   prints basic information about each feature class in a workspace. To try this example, follow  steps 1-5:</p>
<ol>
<li>Preview two feature classes in C:/gispy/data/ch02, 'park.shp' and 'fires.shp' in ArcCatalog. Before moving on to step 2, click on the ch02 directory in the ArcCatalog table of contents and select F5 to refresh the view and release the locks on the feature classes.</li>
<li>Open the 'describe_fc.py' in PythonWin. </li>
<li>Launch the 'Run Script' window (<strong>Ctrl + r</strong>).</li>
<li>Type &quot;C:/gispy/data/ch02&quot; in the Arguments text box. The script uses this argument as the data workspace.</li>
<li>Click 'OK' and confirm that the output looks something like what you see in Figure 2.3. </li>
</ol>
<p>Figure 2.2 shows the script as it is displayed with the default settings in PythonWin. The italic green text, bold blue text, and indentation correspond to comments, keywords, and block structures, respectively. These components along with variables and assignment statements are discussed next. <br />
</p>
<table width="775" border="0">
<tr>
<th align="left" scope="row"><strong><span class="head">2.4.1 Comments</span></strong></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p> Text lines shown in green are <em>comments, </em> information only included for humans readers, not for the computer to interpret. Anything that follows one or more hash sign (<code>#</code>)  on a line of Python code is a comment and is ignored by the computer.   PythonWin displays comments in italicized green when the comment starts with one  hash sign and gray  when the comment starts with two or more consecutive hash signs. Comments have several uses:</p>
<ul>
<li> Provide metadata - script name, purpose, author, data, how to run it, sample input syntax, expected output. These  comments are placed at the beginning of the script (Lines 1-6 in 'describe_fc.py').<br />
<br />
</li>
<li>Outline - for the programmer to fill in the code details and for the reader to glean the overall workflow. For example, an outline for 'describe_fc.py' looks like this:<br />
<br />
<code><br />
<span class="comment"># GET the input workspace from the user. <br />
            # GET a list of the feature classes in the workspace. <br />
            # PRINT basic information about each feature class in the folder</span>.<span style="vertical-align: top;"><br />
</span></code><br />
<br />
</li>
<li>Clarify specific pieces of code - good Python code is highly readable, but sometimes comments are still helpful. Skilled Python programmers use expository commenting selectively.<br />
<br />
</li>
<li>Debug - help the programmer isolate mistakes in the code. Since comments are ignored by the computer, creating 'commented out' sections, can help to focus attention on another section of code. Comment out or uncomment multiple lines of code in PythonWin by selecting the lines and clicking <strong>Alt+3</strong>/<strong>Alt+4</strong> (or right-click and choose <strong>Source code</strong> &gt; <strong>Comment out region</strong>/<strong>Uncomment region</strong>).</li>
</ul>
<p><img src="../images/describe_fc_script.png" alt="script" border="1" usemap="#Map2MapMap" /> <strong><br />
          Figure 2.2:</strong> Python script 'describe_fc.py' as it appears in an IDE.</p>
<p><img src="../images/describe_fc_output.png" alt="output" border="1" /> <br />
<strong>Figure 2.3</strong> Output printed in the PythonWin Interactive Window when 'describe_fc.py' (Figure 2.2) runs.</p>
<table width="775" border="0">
<tr>
<th align="left" scope="row"><strong><span class="head">2.4.2 Keywords</span></strong></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p><em>Python keywords</em>, words reserved for special usage, are shown in bold blue in PythonWin. 'describe_fc.py' in Figure 2.2 uses keywords <code>import</code>, <code>print</code>, <code>for</code> and <code>in</code>. Table 2.2 gives a list of Python keywords. Python is case sensitive; keywords must be written in all lower case.</p>
<table bgcolor="#EEEEEE" border="0" width="452">
<tbody>
<tr>
<td width="446" height="221" scope="row"><p><strong>Table 2.2 </strong>Python 2.7 keywords. <br />
</p>
<table width="385" border="0" bgcolor="#eeeeeee">
<tr>
<td width="379"><pre class="key"><font>and       del       from      not       while      <br />as        elif      global    or        with       <br />assert    else      if        pass      yield      <br />break     except    import    print                <br />class     exec      in        raise                <br />continue  finally   is        return               <br />def       for       lambda    try</font></pre></td>
</tr>
</table></td>
</tr>
</tbody>
</table>
<br />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><strong><span class="head">2.4.3 Indentation</span></strong></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Indentation is meaningful in Python. Notice that lines 19-27 are indented to the same position in 'describe_fc.py.' The code in line 18, which starts with the <code>for</code> keyword,  tells Python to repeat what follows for each feature class listed in the input directory. Lines 19-27 are indented because they are the block of code that gets repeated. The Name, Data type, and so forth are printed for each feature class. The <code>for</code> keyword structure is an example of a Python <em>block structure,</em> a set of related lines of code (a block of code). Block structures will be discussed in more detail later, but for now, it's useful to have some understanding of the significance of indentation in Python. Items within a block structure are indented the same amount to indicate that they are related. The first line of code dedented (moved back a notch) after a block structure signifies the end of the block structure. 'describe_fc.py' prints 'Feature class list complete' only once, because line 28  is dedented (the opposite of indented). Python does not have mandatory statement termination keywords or characters such as 'end for' or curly brackets to end the block structure; indentation is used instead. For example, if lines 20-27 were dedented, only one feature class description would be printed, the last one in the list. Indentation and loops will be discussed in more detail in an upcoming chapter.</p>
<table width="775" border="0">
<tr>
<th align="left" scope="row"><strong><span class="head">2.4.4 Built-in functions</span></strong></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>'describe_fc.py' uses the <code>print</code> keyword to print output to the Interactive Window. This works because <code>print</code> is both a keyword and a built-in function.  A <em>function</em> is a named set of code that performs a task. A <em>built-in function</em> is a function supplied by Python. Use it by typing the name of the function and the input separated by comma, usually inside parentheses.  A code statement that uses a built-in function  has this general format:</p>
<table border="0" width="797">
<tbody>
<tr>
<th scope="row" width="791" align="left"><code>functionName(argument1, 
                argument2, argument3,...)</code></th>
</tr>
</tbody>
</table>
<br />
The built-in <code>print</code> function, discussed in more detail in Chapter 3, is an exception which does not require parentheses.  In Python 2.7, which is the version of Python currently used by ArcGIS, the parentheses are optional in print statements. In Python 3.0 and higher, they are required.<br />
<br />
        Programming documentation uses special terminology related to dealing with functions, such as 'calling functions', 'passing arguments', and 'returning values'. These terms are defined here using built-in function examples:
        <ul>
<li> A code statement that invokes a function is referred to as a <em>function call</em>. We say we are 'calling the function', because we call upon it by name to do its work.   Think of a function as if it's a  task assigned to a butler. If 
            you want him to 
            make  tea, you need to call on the butler to do so. You don't need to know any more details about how the tea is made, because he does it for you. There is no Python <code>make_tea</code> function, so we'll look at the  built-in <code>round</code> function instead. The following line of code  is a function call that calls the <code>round</code> function to round a number: <br />
<code><br />
            &gt;&gt;&gt; <span class="nb">round</span><span class="p">(</span><span class="mf">1.7</span><span class="p">)</span> <br />
            2.0</code><br /><br />
</li>
<li>Providing  input for the function is referred to as <em>passing arguments</em> into the function. When
            you call the butler to 
            make  tea, you need to tell him if you want herbal or 
            green tea or some other kind. The type of tea would be 
            provided as an <em>argument</em>. A closely related term, <em>parameters</em>, are the pieces of information that can be specified to a function. The <code>round</code> function has one required parameter, a number to be rounded. The specific values passed in when calling the function are the arguments. The number <code>1.7</code> is used as the argument in the example above.  An argument is an expression used when calling   the function. The difference between the terms 'argument' and 'parameter' is subtle and often these terms are used interchangeably.   The following line of code calls the built-in <code>min</code> function to find the minimum number. Here, we pass in three comma separated arguments. The function finds the smallest of the three values:<br />
<code><br />
            &gt;&gt;&gt;<span class="nb"> min</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span><br />
            1<br />
</code><br />
</li>
<li>Some functions come up with results from the actions they perform. Others  do some action that may make changes or print information, but don't send a result to the caller. Those that do are said to <em> return a value</em>.  When we ask our butler to do something,  he goes away and does his work. Sometimes he returns with a result—like the cup  of tea we asked for. Other times, he just performs his duty and there's no  value returned -- he dimmed the lights, if that’s what you requested, but he  doesn't bring your slippers if you only asked him to adjust the lighting. The built-in <code>round</code> function returns the rounded number and the <code>min</code> function returns the minimum value. These return values are printed in the Interactive Window, but would not be printed in a script. By contrast, the <code>help</code> function is designed to print help about an argument, but it returns nothing. The following line of code calls the built-in <code>help</code> function to print help documentation for the <code>round</code> function. The name of the function is passed as an argument:<br />
<code>
</code><p>&gt;&gt;&gt;<span class="nb"> help</span><span class="p">(</span><span class="nb">round</span><span class="p">)</span> <br />
              Help on built-in function round in module __builtin__:</p>
            round(...)<br />
            round(number[, ndigits]) -&gt; floating point number<br />
<br />
            Round a number to a given precision in decimal digits (default 0 digits).<br />
            This always returns a floating point number.  Precision may be negative.<br />


</li>
</ul>
<p>The help prints a <em>signature</em>, a template for how to use the function which lists the required and optional parameters. The first parameter of the <code>round</code> function is the number to be rounded. The second parameter, ndigits, specifies the number of digits for rounding precision. The square brackets surrounding <code>ndigits</code> mean that it is an optional argument.  The arrow pointing to 'floating point number' means that this is the type of value that is returned by the function.<br />
<br />
          Other sections of this book employ additional built-in functions (e.g., <code>enumerate</code>, <code>int</code>, <code>float</code>, <code>len</code>, <code>open</code>, <code>range</code>, <code>raw_input</code>, and <code>type</code>).      Search online with the keywords 'Python Standard Library built-in functions' for a complete list of built-in functions and their uses.<br />
</p>
<table width="775" border="0">
<tr>
<th align="left" scope="row"><strong><span class="head">2.4.5 Variables, assignment statements, and dynamic typing</span></strong></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p> We still haven't discussed the turquoise and olive colored text in 'describe_fc.py'. These represent Python number and string data types. All objects in Python have a data type. To understand data types in Python you need to be familiar with variables, assignment statements, and dynamic typing. Variables are a basic building block of computer programming.  A programming <em>variable</em>, is a name that gets assigned a value (It's like an algebra variable, except that it can be given non-numeric values as well as numeric ones). The following statement  assigns the value 145 to the variable FID:</p>
<p><code>&gt;&gt;&gt; FID <span class="o">=</span> <span class="num">145</span><br />
</code></p>
<p>This line of code is called an assignment statement. An <em>assignment statement </em>is a line of code (or statement) used to set the value of a variable. An assignment statement consists of the variable name (on the left), a value (on the right) and a single equals sign in the middle.</p>
<p><img src="../images/assignmentStatementv2.png" alt="assignment statement" width="268" height="203" border="1" /><br />
</p>
<p>To print the value of a variable inside a script, you need to use the <code>print</code> function. This works in the Interactive Window too, but it is not necessary to use the <code>print</code> function in the Interactive Window. When you type a variable name and press the 'Enter' key in the Interactive Window, Python prints its value.<br />
</p>
<p><code>&gt;&gt;&gt; inputData <span class="o">=</span> <span class="s">'trees.shp'</span><br />
          &gt;&gt;&gt; inputData<br />
          'trees.shp'<br />
</code></p>
<p>A programming variable is similar to an algebra variable, except that it can be given non-numeric values, so the data type of a variable is an important piece of information. In other programming languages, declaration statements are used to specify the type.   Python determines the data type of a variable based on the value assigned to it. This is called <em>dynamic typing. </em>You can check the data type of a variable using the built-in <code>type</code> function.  The following tells us that  <code>FID</code> is an <code>'int'</code> type variable and inputData is an <code>'str'</code> type  variable: <br />
<code><br />
          |&gt;&gt;&gt; <span class="nb">type</span><span class="p">(</span><span class="n">FID</span><span class="p">)</span><br />
          &lt;type 'int'&gt;<br />
          &gt;&gt;&gt; <span class="nb">type</span><span class="p">(</span><span class="n">inputData</span><span class="p">)</span><br />
          &lt;type 'str'&gt;<br />
</code></p>
<p><code>'int'</code> stands for integer and <code>'str'</code> stands for string, (variable types which are discussed detail in the next chapter). Due to dynamic typing, the type of a variable can  change within a script. These statements  show the type of variable <code>avg</code> changing from integer  to string:</p>
<p><code>&gt;&gt;&gt; avg <span class="o">=</span> <span class="num">92</span><br />
          &gt;&gt;&gt; <span class="nb">type</span><span class="p">(</span><span class="n">avg</span><span class="p">)</span><br />
          &lt;type 'int'&gt;<br />
          &gt;&gt;&gt; avg <span class="o">=</span> <span class="s">'A'</span> <br />
          &gt;&gt;&gt; <span class="nb">type</span><span class="p">(</span><span class="n">avg</span><span class="p">)</span><br />
&lt;type 'str'&gt;<br />
</code></p>
<p>First, Python dynamically sets the data type of  <code>avg</code> as an integer, since 92 is an integer. Python considers characters within quotes to be strings. So when <code>avg</code> is set to <code>'A'</code>, it is dynamically typed to string. Dynamic typing is agile, but beware that if you unintentionally use the same name for two variables, the first value will be overwritten by the second.<br />
</p>
<table border="0" width="775">
<tbody>
<tr>
<th scope="row" align="left" width="561"><strong><span class="head">2.4.6 Naming variables and tracebacks</span></strong></th>
<td align="right" width="204"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<p><br />
        Variable names can't start with numbers nor contain spaces. For names that are a combination of more than one word, underscores or capitalization can be used to break up the words. Capitalizing the beginning of each word is known as camel case (the capital letters stick up like the humps on a camel). This book uses a variation called lower camel case -- all lower case for the first word and capitalization for the first letter of the rest. For example, <code>inputRasterData<span style="vertical-align: top;"></span></code> is lower camel case.</p>
<p><img src="../images/lower camel case.png" alt="lower Camel Case" /></p>
<p>Variable names are case sensitive.  In the following code, Python reports <code>fid</code> as undefined, even though <code>FID</code> has a value of <code>145</code> because we assigned it earlier:<br />
<code><br />
          &gt;&gt;&gt; fid<br />
<font class="err">Traceback (most recent call last):<br />
          File &quot;&lt;interactive input&gt;&quot;, line 1, in &lt;module&gt;<br />
          NameError: name 'fid' is not defined<br />
</font>&gt;&gt;&gt; FID<br />
         145<br />
</code><br />
        When we attempt to check the value of <code>fid</code>, PythonWin prints a red error message called a <em>traceback</em>.  The traceback traces the steps back to where  the error occurred. This example was typed in the Interactive Window, so it says 'interactive input', line 1. The last line of the traceback message explains the error. Python doesn't recognize 'fid'. It was never assigned a value, so it is considered to be an undefined object. When Python encounters an undefined object, it calls this kind of error a <code>NameError</code>. </p>
<table width="779" border="3" bgcolor="#CEDAE3">
<tr>
<td width="765" height="76"><blockquote>
<p><em> Look for an explanation of the error in the last line of a traceback message.</em></p>
</blockquote></td>
</tr>
</table>
<p>Keywords cannot be used as variable names. The following code attempts to use the keyword <code><span class="key">print</span></code> as a variable name:<br />
<code><br />
&gt;&gt;&gt; <font class="key"><strong>print</strong></font> <span class="o">=</span> <span class="s">'inputData'</span><br />
<font class="err">Traceback (  File &quot;&lt;interactive input&gt;&quot;, line 1<br />
          print <span class="o">=</span> 'inputData'<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^<br />
          SyntaxError: invalid syntax</font><br />
</code><br />
        Again, a traceback error message is printed, but this time, the message indicates invalid syntax because the keyword is being used in a way that it is not designed to be used. This statement does not conform with the rules about how print statements should be formed, so it reports a <code>SyntaxError</code>. </p>
<p>Python ensures that keywords are not used as variable names by reporting an error; However, Python does not report an error if you use the name of a built-in function as variable name. Making this mistake can cause unexpected behavior. For example, in the code below, the built-in <code>min</code> function is working correctly at the outset. Then <code>min</code> is used as a variable name in the assignment statement <code><span class="nb">min </span><span class="o">=</span> <span class="num">5</span></code>. Python accepts this with no error. But this makes <code>min</code> into an integer variable instead of a built-in function, so we can no longer use it to find the minimum value:<br />
<br />
<code>&gt;&gt;&gt; <span class="nb">type</span><span class="p">(</span><span class="nb">min</span><span class="p">)</span> <br />
          &lt;type 'builtin_function_or_method'&gt;<br />
          &gt;&gt;&gt;<span class="nb"> min</span>(<span class="num">1</span>, <span class="num">2</span>, <span class="num">3</span>)<br />
1<br />
          &gt;&gt;&gt;<span class="nb"> min </span><span class="o">=</span> <span class="num">5</span> <br />
          &gt;&gt;&gt;<span class="nb"> min</span>(<span class="num">1</span>, <span class="num">2</span>, <span class="num">3</span>)<br />
<span class="err">Traceback (most recent call last):<br />
          File &quot;&lt;interactive input&gt;&quot;, line 1, in &lt;module&gt;<br />
          TypeError: 'int' object is not callable</span><br />
          &gt;&gt;&gt; <span class="nb">type</span><span class="p">(</span><span class="nb">min</span><span class="p">)</span> <br />
          &lt;type 'int'&gt;<br />
</code></p>
<p>A <code>TypeError</code> is printed the second time we try to use <code>min</code> to find the minimum. <code>min</code> is now an <code>int</code> type so it  can no longer be called as a function. To restore <code>min</code> as a built-in function, you must restart PythonWin.</p>
<table width="775" border="0">
<tr>
<th align="left" scope="row"><strong><span class="head">2.4.7 Built-in constants and exceptions</span></strong></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>In addition to built-in functions, Python has built-in constants and exceptions. No built-in names should be used as variable names in scripts to avoid losing their special functionality. Built-in constants such as, <code>None</code>, <code>True</code>, and <code>False</code>, are assigned their values as soon as Python is launched, so that  value  is available to be used anywhere in Python. The built-in constant <code>None</code>  is a null value placeholder.  The data type of <code>True</code> and False is <code>'bool'</code> for boolean. Boolean objects can either be <code>True</code> or <code>False</code> :<br />
<br /><code>
          &gt;&gt;&gt; <span class="nb">type</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span><br />
          &lt;type 'bool'&gt;<br />
          &gt;&gt;&gt;<span class="bp"> True</span><br />
          True</code><br />
<br />
          The built-in constants <code>True</code> and <code>False</code> will be used in upcoming chapters to set variables that control aspects of the geoprocessing environment. For example, the following lines of code change the environment to allow geoprocessing output to overwrite existing files:</p>
<p><code>&gt;&gt;&gt; <span class="key">import</span> arcpy<br />
          &gt;&gt;&gt; arcpy.env.overwriteOutput <span class="o">=</span> True<br />
</code></p>
<p>The built-in exceptions, such as <code>NameError</code> or <code>SyntaxError</code>, are created for reporting specific errors in the code. Built-in exceptions are  common errors that Python can identify automatically. An exception is <em>thrown</em> when one of these errors is detected. This means a traceback message is generated and the message is printed in the Interactive Window; If the erroneous code is in a script, the script will stop running at that point.</p>
<p>New programmers often encounter <code>NameError</code>, <code>SyntaxError</code>, and <code>TypeError</code> exceptions. The <code>NameError</code> usually occurs because of a spelling or capitalization mistake in the code. The <code>SyntaxError</code> can occur for many reasons, but the underlying problem is that one of the rules of properly formed Python has been violated. A <code>TypeError</code> occurs when the code attempts to use an operator differently from how it's designed. For example, code that adds an integer to a string generates a <code>TypeError</code>. </p>
<p>There are many other types of built-in exceptions. The names of these usually end 'Error'. A traceback message is printed whenever one of these exceptions is thrown. The final line of traceback error messages states the name of the exception. We'll revisit exceptions and tracebacks in upcoming chapters. </p>
<p>The built-in <code>dir</code> function can be used to print a list of all the built-ins in Python. Type the following to print the built-ins in PythonWin (there are 2 underscores on each side):<br />
<br />
<code>&gt;&gt;&gt; <span class="nb">dir</span><span class="p">(</span><span class="n">__builtins__</span><span class="p">)</span><br />
</code><br />
          The printed list looks something like this:<br />
<code><br />
          'ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 'BufferError', 'BytesWarning', 'DeprecationWarning', 'EOFError', 'Ellipsis', 'EnvironmentError', 'Exception', 'False', 'FloatingPointError', 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError', 'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 'NameError', 'None', 'NotImplemented', 'NotImplementedError', 'OSError', 'OverflowError', 'PendingDeprecationWarning', 'ReferenceError', 'RuntimeError', 'RuntimeWarning', 'StandardError', 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit', 'TabError', 'True', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning', 'ValueError', 'Warning', 'WindowsError', 'ZeroDivisionError', '__debug__', '__doc__', '__import__', '__name__', '__package__', 'abs', 'all', 'any', 'apply', 'basestring', 'bin', 'bool', 'buffer', 'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'cmp', 'coerce', 'compile', 'complex', 'copyright', 'credits', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'execfile', 'exit', 'file', 'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash', 'help', 'hex', 'id', 'input', 'int', 'intern', 'isinstance', 'issubclass', 'iter', 'len', 'license', 'list', 'locals', 'long', 'map', 'max', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'quit', 'range', 'raw_input', 'reduce', 'reload', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'unichr', 'unicode', 'vars', 'xrange', 'zip']<br />
</code></p>
<p>The  built-in constants and built-in exceptions are interspersed in the beginning of this list <code>ArithmeticError</code> through <code>__package__</code>). The built-in functions are listed next, starting with <code>abs</code>. </p>
<table width="775" border="0">
<tr>
<th align="left" scope="row"><strong><span class="head">2.4.8 Standard modules</span></strong><a name="standardModules" id="models"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>When Python is installed, a library of standard modules is automatically installed. A <em>module</em> is a Python file containing related Python code. Python's standard library covers a wide variety of functionality. Examples include math functions, file copying, unzipping files, graphical user interface, and even Internet protocols for retrieving online data. To use a module you first use the <code>import</code> keyword.  The import statement can be applied to one or more modules using the following format:</p>
<table width="759" border="0" bgcolor="#EEEEEE">
<tr>
<th width="753" height="54" scope="row"><p align="left"><code><span class="key">import </span>moduleName1, moduleName2, ...</code><br />
</p></th>
</tr>
</table>
<p>Once a module is imported, its name can be used  to invoke its functionality. For example, the following code imports the standard <code>math</code> module and then uses it to convert 180 degrees to radians:</p>
<p><code>&gt;&gt;&gt; <span class="key">import</span> math<br />
          &gt;&gt;&gt; <span class="n">math</span><span class="o">.</span><span class="n">radians</span><span class="p">(</span><span class="mi">180</span><span class="p">)</span><br />
          3.141592653589793<br />
</code></p>
<p> The online 'Python Standard Library' contains documentation of the vast set of standard modules. For now, just highlight two modules <code>sys</code> and <code>os</code>) that are used in early chapters  and introduce others as the need arises.</p>
<p>The <code>sys</code> module gives access to variables that are used by the <em>Python interpreter</em>, the program that runs Python. For example, the following code imports the <code>sys</code> module and prints <code>sys<span class="o">.</span>path</code>:<br />
<br />
<code>&gt;&gt;&gt; <span class="key">import</span> sys<br />
          &gt;&gt;&gt; sys<span class="o">.</span>path<br />
          ['C:\\gispy\\sampleScripts\ch02', u'c:\\program files (x86)\\ArcGis\\desktop10.2\\arcpy', 'C:\\Windows\\system32\\python27.zip', 'C:\\Python27\\ArcGIS10.2\\DLLs', 'C:\\Python27\\ArcGIS10.2\\lib', 'C:\\Python27\\ArcGIS10.2\\lib\\plat-win']<br />
</code></p>
<p>Notice that <code>sys<span class="o">.</span>path</code> is a list of directory paths (only a few are shown here--your list may differ). These are the locations used by the Python interpreter when  it encounters an import statement. The Python interpreter or searches within these directories for the name of the module being imported. If the module isn't found in one of these directories, the import won't succeed. <br />
</p>
<p>The following code prints the  file name of the script last run in PythonWin.<br />
<code><br />
          &gt;&gt;&gt;<span class="n">sys.argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><br />
          'C:\\gispy\\sampleScripts\\ch02\\describe_fc.py'<br />
</code></p>
<p>The<code> sys</code>  module  is used to get the workspace from user input on line 11 in Figure 2.2 (<code><span class="n">arcpy.env.workspace = sys.argv</span>[1]</code>). Chapter 7 discusses this useful <code>sys</code> module variable in more depth. <br />
</p>
<p>The  <code>os</code> module allows you to access operating   system-related methods (<code>os</code> stands for operating system). The following code uses the <code>os</code> module to print a list of the files in the 'C:/gispy/data/ch02' directory:<br />
<code><br />
          &gt;&gt;&gt; <span class="key">import</span> os<br />
          &gt;&gt;&gt;<span class="n"> os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="s">&#39;C:/gispy/data/ch02&#39;</span><span class="p">)</span><br />
          ['fires.dbf', 'fires.prj', 'fires.sbn', 'fires.sbx', 'fires.shp', 'fires.shp.xml', 'fires.shx', 'park.dbf', 'park.prj', 'park.sbn', 'park.sbx', 'park.shp', 'park.shp.xml', 'park.shx']<br />
</code></p>
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><b class="head">2.5 Key terms</b><a name="keyterms" id="keyterms"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Integrated development environment (IDE)<br />
          Python script<br />
          ArcGIS Python window<br />
          PythonWin<br />
          PythonWin Interactive Window<br />
          PythonWin script window<br />
        Python prompt (<code>&gt;&gt;&gt;</code>)<br />
        Python interpreter<br />
          Window focus<br />
          Script arguments<br />
          Context highlighting<br />
          Code comments<br />
          Hash sign<br />
          Python keywords<br />
          Variables<br />
          Assignment statement<br />
          Dynamic typing<br />
          Block structure, block of code<br />
          Dedented<br />
          Tracebacks<br />
          Built-in functions, constants, and exceptions<br />
          Function arguments<br />
          Function signatures<br />
          Function parameters<br />
          Exceptions thrown<br />
<code>True</code>, <code>False</code>, <code>None</code><br />
<code>NameError</code>, <code>SyntaxError</code>, and <code>TypeError</code><br />
          Module<br />
          Standard modules<br />
<code>math</code>, <code>sys</code>, <code>os</code>, <code>shutil</code><br />
</p>
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><b class="head">2.6 Exercises</b><a name="exercises" id="exercises"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<br />
<br />
<ol>
<li>Set up your integrated development environment (IDE) software and check the functionality as described here: </li>
<ol type="a">
<li>To install PythonWin,
              <ol>
<li>Browse 'C:\gispy\sample_scripts\ch02\programs\PythonWin'.</li>
<li>Double-click on the executable ('exe') file.</li>
<li>Launch PythonWin. A PythonWin desktop icon should be created during installation. If not, search the machine for 'PythonWin.exe' and create a shortcut to this executable. When you first launch PythonWin, it will display the 'Interactive Window' with a prompt that looks just like the one in the ArcGIS Python window: <br />
<img src="../images/launchPython.png" alt="prompt" /><br />
</li>
<li>Test PythonWin.  Type <code>import arcpy</code> in the Interactive Window and press the 'Enter' key. If no error appears, everything is working. In other words, if you see only a prompt sign on the next line (<code>&gt;&gt;&gt;</code>), then it worked.    If, instead, you see red text, this is an error message. Check your ArcGIS software version. This book is designed for ArcGIS 10.1-10.2.2, which use the 2.7 version of Python. If you are using a different version of ArcGIS, you will need to get a different PythonWin executable. Start by searching online for 'pywin32 download', then navigate to the version you need. <br />
<table width="264" bgcolor="#eeeeee">
<tr>
<td width="256">Software versions
                        <table width="232" border="1">
<tr>
<td width="109"><strong>ArcGIS version</strong></td>
<td width="107"><strong>Python version</strong></td>
</tr>
<tr>
<td>10.1, 10.2</td>
<td>2.7</td>
</tr>
<tr>
<td>10</td>
<td>2.6</td>
</tr>
<tr>
<td>9.3</td>
<td>2.5</td>
</tr>
<tr>
<td>9.2</td>
<td>2.4.1</td>
</tr>
<tr>
<td>9.1</td>
<td>2.1</td>
</tr>
</table></td>
</tr>
</table>
<br />
</li>
</ol>
</li>
<li>Install PyScripter. To install PyScripter, browse to 'C:\gispy\sample_scripts\ch02\programs\PyScripter'. Double-click on the '.exe' file. Install using the defaults. PyScripter's equivalent of PythonWin's Interactive Window is the Python Interpreter window. Confirm that it is working correctly by typing <code>import arcpy</code> in the Python Interpreter window. Press the 'Enter' key. If you see only a prompt sign on the next line (<code>&gt;&gt;&gt;</code>), then it worked. If, instead, you see red text, this is an error message.  The ArcGIS Resources Python Forum is a good place for additional trouble-shooting.<br />
<br />
</li>
</ol>
<li>Type the code statements below in the Interactive Window. Notice that the built-in type function gives two different results -- first <code>str</code> and second <code>int</code>. Which word or phrase in the 'Key terms' list at the end of this chapter explains this phenomenon?<br />
<br />
<code>&gt;&gt;&gt; month <span class="o">=</span> <span class="s">'December'</span> <br />
&gt;&gt;&gt; <span class="nb">type</span><span class="p">(</span><span class="n">month</span><span class="p">)</span><br />
&gt;&gt;&gt; month <span class="o">=</span> <span class="num">12</span><br />
&gt;&gt;&gt; <span class="nb">type</span><span class="p">(</span><span class="n">month</span><span class="p">)</span><br />
</code><br />
</li>
<li>Match each key term with the most closely related statement. There are two distracter statements that should not be used. <br />
<table width="573" border="3">
<tbody>
<tr>
<td width="252" valign="top">Key term</td>
<td width="301" valign="top">Statement</td>
</tr>
<tr>
<td valign="top"><ol>
<li>Python keyword<br />
<br />
</li>
<li>IDE<br />
<br />
</li>
<li>Hash sign<br />
<br />
</li>
<li>Tracebacks<br />
<br />
</li>
<li> Window focus<br />
<br />
</li>
<li>Script arguments<br />
<br />
</li>
<li>Context highlighting<br />
<br />
</li>
<li>Assignment statement<br />
<br />
</li>
<li> Dynamic typing<br />
<br />
</li>
<li>False<br />
<br />
</li>
<li> NameError<br />
<br />
</li>
<li>Dedented code<br />
<br />
</li>
<li>math, os, and sys<br />
</li>
</ol>
</td>
<td valign="top"><ol type="A">
<li>This is a  built-in boolean constant.<br />
<br />
</li>
<li>If this isn't in the Script Window, you might save the Interactive Window by mistake.<br />
<br />
</li>
<li>Special font formatting (such as color) based on meaning of text in the code.<br />
<br />
</li>
<li>The controversial debates surrounding Python versus Perl scripting languages.<br />
<br />
</li>
<li><code><span class="key">print</span></code> is written in bold blue because it is one of these.<br />
<br />
</li>
<li>If a variable name is misspelled, this can occur.<br />
<br />
</li>
<li>A specialized editor for developing scripts.<br />
<br />
</li>
<li>Information passed into a script by the user.<br />
<br />
</li>
<li>Automatically set the data type of a variable when a value is assigned.<br />
<br />
</li>
<li><code>x <span class="o">=</span> 5</code> is an example of one of these. <br />
<br />
</li>
<li>Messages printed when exceptions are thrown.<br />
<br />
</li>
<li>This signals the end of a related block of code.<br />
<br />
</li>
<li>The shape of a camel's back.<br />
<br />
</li>
<li>Code following this character is only meant for the human reader. <br />
<br />
</li>
<li>These are examples of Python standard modules</li>
</ol></td>
</tr>
</tbody>
</table>
<br />
</li>
<li>Type the following lines of code in the Interactive Window. Each line of code should raise a built-in exception. Report the<em> name</em> of the built-in exception that is raised
            (part a is done for you).<br />
<br />
<ol type="a">
<li><code><span class="k">class</span> <span class="err">= </span><span class="s">&#39;combustibles&#39;</span></code><br />
<br />
                SyntaxError<br />
<br />
</li>
<li><code><span class="s">'five'</span><span style="vertical-align: top;"><span class="o"> + </span></span><span class="num">6</span> </code><br />
<br />
</li>
<li><code>Min</code><br />
<br />
</li>
<li><code><span class="nb">int</span><span class="p">(</span><span class="s">&#39;five&#39;</span><span class="p">)</span></code><br />
<br />
</li>
<li><code><span class="mi">5</span><span class="o">/</span><span class="mi">0</span></code><br />
<br />
</li>
<li><code>input file <span class="o">=</span> <span class="s">'park.shp'</span></code></li>
</ol>
</li>
<br />
<li><strong>times.py</strong> Write a script named 'times.py' that finds the product of two input integers and prints the results. Start by opening 'add_version2.py', modifying the last two lines and saving the file with the name 'times.py'. An asterisk is used as the multiplication operator in Python, so you'll use <code>c <span class="o">=</span> a * b</code> to multiply. Also change the comment on line 1 to reflect the modified functionality. Run the script using two integer arguments to check that it works. The example below shows the expected behavior. Check your results against this example.<br />
<br />
            Example:<br />
            Two arguments given in the 'Run Script' window Argument text box:<br />
            2 3<br />
<br />
            Output printed in the Interactive Window:<br />
<code><br />
            &gt;&gt;&gt; The product is 6.<br />
</code></li>
</ol><a href="#top">back to top</a> <a href="#top">back to top</a> <blockquote>
<p> Interactive Window examples are given as text with Python prompts. To try the examples yourself, note that the prompt indicates that you should type what follows on that
                  line in the Interactive Window, but don't type the '&gt;&gt;&gt;' marks. </p>
</blockquote><p><strong>Listing Python scripts in ArcCatalog and Windows Explorer</strong></p>
<ol type="I">
<li>By default, ArcCatalog does not display scripts in the TOC. To change this setting, use the following steps:<br />
<ol>
<li>Customize menu &gt; ArcCatalog Options &gt; File Types tab &gt; New Type </li>
<li>Enter <em>Python</em> for Description and <em>py</em> for File extension </li>
<li> Import File Type From Registry... </li>
<li>Click 'OK' to complete the process.</li>
</ol>
<p>It may be necessary to restart ArcCatalog in order to view the python files.</p>
</li>
<li>
<p>By default, Windows users can see Python scripts in Windows Explorer, but the file extension may be hidden. If you don't
                    see the '.py' extension on Python files, change the settings under the
                    Windows Explorer tools menu. The procedure varies depending on the Windows version. For example, in Windows 7 follow these instructions:</p>
<ol>
<li> Tools &gt; FolderOptions... &gt; View. </li>
<li>Uncheck 'Hide extensions for known file types'.</li>
<li>Click 'Apply to All Folders'.<br />
<br />
</li>
</ol>
                  and in Windows 8 click View, then check 'File name extensions'. </li>
</ol><strong>Table 2.1</strong>: Buttons, keyboard shortcuts, and menu instructions for some basic actions in PythonWin.<br />
<table width="859" border="3" bgcolor="#eeeeeee">
<tr>
<td width="195" bgcolor="#CCCCCC"><span class="style4"><strong>Action</strong></span></td>
<td width="51" bgcolor="#CCCCCC"><strong>Button</strong></td>
<td width="285" bgcolor="#CCCCCC"><span class="style4"><strong>Keyboard shortcut</strong></span></td>
<td width="296" bgcolor="#CCCCCC"><span class="style4"><strong>Menu</strong></span></td>
</tr>
<tr>
<td>Create a new script window</td>
<td><div align="center"><img src="../images/newScript.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + n</td>
<td>File &gt; New </td>
</tr>
<tr>
<td>Open a script</td>
<td><div align="center"><img src="../images/openScript.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + o</td>
<td>File &gt; Open</td>
</tr>
<tr>
<td>Save a script</td>
<td><div align="center"><img src="../images/saveScript.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + s</td>
<td>File &gt; Save</td>
</tr>
<tr>
<td>Close script</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>File &gt; Close</td>
</tr>
<tr>
<td>Run a script</td>
<td><div align="center"><img src="../images/running_man.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + r</td>
<td>File &gt; Run</td>
</tr>
<tr>
<td>Tile the windows</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>Click in Script Window, then:  Window &gt; Tile</td>
</tr>
<tr>
<td>Show line numbers</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>View &gt; Options &gt; Editor &gt; Set Line numbers &gt;= 30</td>
</tr>
<tr>
<td>Shift focus between windows</td>
<td>&nbsp;</td>
<td>Ctrl+Tab</td>
<td>&nbsp;</td>
</tr>
<tr>
<td>Open/close Interactive Window</td>
<td><div align="center"><img src="../images/interactiveButton.png" alt="inter" width="26" height="26" /></div></td>
<td>&nbsp;</td>
<td>View &gt; Interactive Window</td>
</tr>
<tr>
<td>Clear the Interactive Window</td>
<td>&nbsp;</td>
<td> Ctrl+Tab to the Interactive Window, Ctrl+a, del</td>
<td>Click in Interactive Window, Edit &gt; Select All, Edit &gt; Delete</td>
</tr>
<tr>
<td>Toggle whitespace</td>
<td>&nbsp;</td>
<td>Ctrl+W</td>
<td>View &gt; Options &gt; Tabs and whitespace &gt; check 'View whitespace'</td>
</tr>
</table>
<span class="style4"><strong>Action</strong></span><strong>Button</strong><span class="style4"><strong>Keyboard shortcut</strong></span><span class="style4"><strong>Menu</strong></span>Create a new script window<div align="center"><img src="../images/newScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + nFile &gt; New Open a script<div align="center"><img src="../images/openScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + oFile &gt; OpenSave a script<div align="center"><img src="../images/saveScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + sFile &gt; SaveClose script&nbsp;&nbsp;File &gt; CloseRun a script<div align="center"><img src="../images/running_man.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + rFile &gt; RunTile the windows&nbsp;&nbsp;Click in Script Window, then:  Window &gt; TileShow line numbers&nbsp;&nbsp;View &gt; Options &gt; Editor &gt; Set Line numbers &gt;= 30Shift focus between windows&nbsp;Ctrl+Tab&nbsp;Open/close Interactive Window<div align="center"><img src="../images/interactiveButton.png" alt="inter" width="26" height="26" /></div>&nbsp;View &gt; Interactive WindowClear the Interactive Window&nbsp; Ctrl+Tab to the Interactive Window, Ctrl+a, delClick in Interactive Window, Edit &gt; Select All, Edit &gt; DeleteToggle whitespace&nbsp;Ctrl+WView &gt; Options &gt; Tabs and whitespace &gt; check 'View whitespace'<a href="#top">back to top</a> <code><br />
<span class="comment"># add_version1.py</span><span class="comment">: Add two numbers.</span> <br />
                  a <span class="o">=</span> <span class="num">5</span><br />
                  b <span class="o">=</span> <span class="num">6</span><br />
<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <br />
<span class="k">print</span> <span class="s">&quot;The sum is {0}.&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="comment"> # .format(c) substitutes the value of c for {0} in the print statement.</span><br />
</code><code><br />
<span class="comment"># add_version2.py</span><span class="comment">:  Add two numbers
                    given as arguments.</span><br />
<br />
<span class="key">import</span> sys <span class="comment"># Now the script can use the built-in Python system module.</span><br />
<br />
                    a <span class="o">=</span> int(sys.argv[<span class="num">1</span>]) <span class="comment"># sys.argv is the <em><strong>sys</strong></em>tem <em><strong>arg</strong></em>ument <em><strong>v</strong></em>ector.</span><br />
                    b <span class="o">=</span> int(sys.argv[<span class="num">2</span>]) <span class="comment"># int changes the input to an <strong>integer</strong> number.</span><br />
<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <br />
<span class="k">print</span> <span class="s">&quot;The sum is {0}.&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="comment"># .format(c) substitutes the value of c for {0} in the print statement.</span><br />
</code><a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <p><strong>Table 2.2 </strong>Python 2.7 keywords. <br />
</p>
<table width="385" border="0" bgcolor="#eeeeeee">
<tr>
<td width="379"><pre class="key"><font>and       del       from      not       while      <br />as        elif      global    or        with       <br />assert    else      if        pass      yield      <br />break     except    import    print                <br />class     exec      in        raise                <br />continue  finally   is        return               <br />def       for       lambda    try</font></pre></td>
</tr>
</table><pre class="key"><font>and       del       from      not       while      <br />as        elif      global    or        with       <br />assert    else      if        pass      yield      <br />break     except    import    print                <br />class     exec      in        raise                <br />continue  finally   is        return               <br />def       for       lambda    try</font></pre><a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <blockquote>
<p><em> Look for an explanation of the error in the last line of a traceback message.</em></p>
</blockquote><a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> Software versions
                        <table width="232" border="1">
<tr>
<td width="109"><strong>ArcGIS version</strong></td>
<td width="107"><strong>Python version</strong></td>
</tr>
<tr>
<td>10.1, 10.2</td>
<td>2.7</td>
</tr>
<tr>
<td>10</td>
<td>2.6</td>
</tr>
<tr>
<td>9.3</td>
<td>2.5</td>
</tr>
<tr>
<td>9.2</td>
<td>2.4.1</td>
</tr>
<tr>
<td>9.1</td>
<td>2.1</td>
</tr>
</table><strong>ArcGIS version</strong><strong>Python version</strong>10.1, 10.22.7102.69.32.59.22.4.19.12.1Key termStatement<ol>
<li>Python keyword<br />
<br />
</li>
<li>IDE<br />
<br />
</li>
<li>Hash sign<br />
<br />
</li>
<li>Tracebacks<br />
<br />
</li>
<li> Window focus<br />
<br />
</li>
<li>Script arguments<br />
<br />
</li>
<li>Context highlighting<br />
<br />
</li>
<li>Assignment statement<br />
<br />
</li>
<li> Dynamic typing<br />
<br />
</li>
<li>False<br />
<br />
</li>
<li> NameError<br />
<br />
</li>
<li>Dedented code<br />
<br />
</li>
<li>math, os, and sys<br />
</li>
</ol>
<ol type="A">
<li>This is a  built-in boolean constant.<br />
<br />
</li>
<li>If this isn't in the Script Window, you might save the Interactive Window by mistake.<br />
<br />
</li>
<li>Special font formatting (such as color) based on meaning of text in the code.<br />
<br />
</li>
<li>The controversial debates surrounding Python versus Perl scripting languages.<br />
<br />
</li>
<li><code><span class="key">print</span></code> is written in bold blue because it is one of these.<br />
<br />
</li>
<li>If a variable name is misspelled, this can occur.<br />
<br />
</li>
<li>A specialized editor for developing scripts.<br />
<br />
</li>
<li>Information passed into a script by the user.<br />
<br />
</li>
<li>Automatically set the data type of a variable when a value is assigned.<br />
<br />
</li>
<li><code>x <span class="o">=</span> 5</code> is an example of one of these. <br />
<br />
</li>
<li>Messages printed when exceptions are thrown.<br />
<br />
</li>
<li>This signals the end of a related block of code.<br />
<br />
</li>
<li>The shape of a camel's back.<br />
<br />
</li>
<li>Code following this character is only meant for the human reader. <br />
<br />
</li>
<li>These are examples of Python standard modules</li>
</ol><strong class="head">2.1 Where to write code </strong><a name="IDE" id="models2"></a><a href="#top">back to top</a> <span class="head">2.2 How to run code in PythonWin</span><a name="run" id="run"></a><a href="#top">back to top</a> <blockquote>
<p> Interactive Window examples are given as text with Python prompts. To try the examples yourself, note that the prompt indicates that you should type what follows on that
                  line in the Interactive Window, but don't type the '&gt;&gt;&gt;' marks. </p>
</blockquote><p><strong>Listing Python scripts in ArcCatalog and Windows Explorer</strong></p>
<ol type="I">
<li>By default, ArcCatalog does not display scripts in the TOC. To change this setting, use the following steps:<br />
<ol>
<li>Customize menu &gt; ArcCatalog Options &gt; File Types tab &gt; New Type </li>
<li>Enter <em>Python</em> for Description and <em>py</em> for File extension </li>
<li> Import File Type From Registry... </li>
<li>Click 'OK' to complete the process.</li>
</ol>
<p>It may be necessary to restart ArcCatalog in order to view the python files.</p>
</li>
<li>
<p>By default, Windows users can see Python scripts in Windows Explorer, but the file extension may be hidden. If you don't
                    see the '.py' extension on Python files, change the settings under the
                    Windows Explorer tools menu. The procedure varies depending on the Windows version. For example, in Windows 7 follow these instructions:</p>
<ol>
<li> Tools &gt; FolderOptions... &gt; View. </li>
<li>Uncheck 'Hide extensions for known file types'.</li>
<li>Click 'Apply to All Folders'.<br />
<br />
</li>
</ol>
                  and in Windows 8 click View, then check 'File name extensions'. </li>
</ol><strong>Table 2.1</strong>: Buttons, keyboard shortcuts, and menu instructions for some basic actions in PythonWin.<br />
<table width="859" border="3" bgcolor="#eeeeeee">
<tr>
<td width="195" bgcolor="#CCCCCC"><span class="style4"><strong>Action</strong></span></td>
<td width="51" bgcolor="#CCCCCC"><strong>Button</strong></td>
<td width="285" bgcolor="#CCCCCC"><span class="style4"><strong>Keyboard shortcut</strong></span></td>
<td width="296" bgcolor="#CCCCCC"><span class="style4"><strong>Menu</strong></span></td>
</tr>
<tr>
<td>Create a new script window</td>
<td><div align="center"><img src="../images/newScript.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + n</td>
<td>File &gt; New </td>
</tr>
<tr>
<td>Open a script</td>
<td><div align="center"><img src="../images/openScript.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + o</td>
<td>File &gt; Open</td>
</tr>
<tr>
<td>Save a script</td>
<td><div align="center"><img src="../images/saveScript.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + s</td>
<td>File &gt; Save</td>
</tr>
<tr>
<td>Close script</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>File &gt; Close</td>
</tr>
<tr>
<td>Run a script</td>
<td><div align="center"><img src="../images/running_man.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + r</td>
<td>File &gt; Run</td>
</tr>
<tr>
<td>Tile the windows</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>Click in Script Window, then:  Window &gt; Tile</td>
</tr>
<tr>
<td>Show line numbers</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>View &gt; Options &gt; Editor &gt; Set Line numbers &gt;= 30</td>
</tr>
<tr>
<td>Shift focus between windows</td>
<td>&nbsp;</td>
<td>Ctrl+Tab</td>
<td>&nbsp;</td>
</tr>
<tr>
<td>Open/close Interactive Window</td>
<td><div align="center"><img src="../images/interactiveButton.png" alt="inter" width="26" height="26" /></div></td>
<td>&nbsp;</td>
<td>View &gt; Interactive Window</td>
</tr>
<tr>
<td>Clear the Interactive Window</td>
<td>&nbsp;</td>
<td> Ctrl+Tab to the Interactive Window, Ctrl+a, del</td>
<td>Click in Interactive Window, Edit &gt; Select All, Edit &gt; Delete</td>
</tr>
<tr>
<td>Toggle whitespace</td>
<td>&nbsp;</td>
<td>Ctrl+W</td>
<td>View &gt; Options &gt; Tabs and whitespace &gt; check 'View whitespace'</td>
</tr>
</table>
<span class="style4"><strong>Action</strong></span><strong>Button</strong><span class="style4"><strong>Keyboard shortcut</strong></span><span class="style4"><strong>Menu</strong></span>Create a new script window<div align="center"><img src="../images/newScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + nFile &gt; New Open a script<div align="center"><img src="../images/openScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + oFile &gt; OpenSave a script<div align="center"><img src="../images/saveScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + sFile &gt; SaveClose script&nbsp;&nbsp;File &gt; CloseRun a script<div align="center"><img src="../images/running_man.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + rFile &gt; RunTile the windows&nbsp;&nbsp;Click in Script Window, then:  Window &gt; TileShow line numbers&nbsp;&nbsp;View &gt; Options &gt; Editor &gt; Set Line numbers &gt;= 30Shift focus between windows&nbsp;Ctrl+Tab&nbsp;Open/close Interactive Window<div align="center"><img src="../images/interactiveButton.png" alt="inter" width="26" height="26" /></div>&nbsp;View &gt; Interactive WindowClear the Interactive Window&nbsp; Ctrl+Tab to the Interactive Window, Ctrl+a, delClick in Interactive Window, Edit &gt; Select All, Edit &gt; DeleteToggle whitespace&nbsp;Ctrl+WView &gt; Options &gt; Tabs and whitespace &gt; check 'View whitespace'<span class="style4"><strong>Action</strong></span><strong>Button</strong><span class="style4"><strong>Keyboard shortcut</strong></span><span class="style4"><strong>Menu</strong></span>Create a new script window<div align="center"><img src="../images/newScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + nFile &gt; New Open a script<div align="center"><img src="../images/openScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + oFile &gt; OpenSave a script<div align="center"><img src="../images/saveScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + sFile &gt; SaveClose script&nbsp;&nbsp;File &gt; CloseRun a script<div align="center"><img src="../images/running_man.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + rFile &gt; RunTile the windows&nbsp;&nbsp;Click in Script Window, then:  Window &gt; TileShow line numbers&nbsp;&nbsp;View &gt; Options &gt; Editor &gt; Set Line numbers &gt;= 30Shift focus between windows&nbsp;Ctrl+Tab&nbsp;Open/close Interactive Window<div align="center"><img src="../images/interactiveButton.png" alt="inter" width="26" height="26" /></div>&nbsp;View &gt; Interactive WindowClear the Interactive Window&nbsp; Ctrl+Tab to the Interactive Window, Ctrl+a, delClick in Interactive Window, Edit &gt; Select All, Edit &gt; DeleteToggle whitespace&nbsp;Ctrl+WView &gt; Options &gt; Tabs and whitespace &gt; check 'View whitespace'<strong class="head">2.3 How to pass input to a script</strong><a name="arguments" id="arguments"></a><a href="#top">back to top</a> <code><br />
<span class="comment"># add_version1.py</span><span class="comment">: Add two numbers.</span> <br />
                  a <span class="o">=</span> <span class="num">5</span><br />
                  b <span class="o">=</span> <span class="num">6</span><br />
<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <br />
<span class="k">print</span> <span class="s">&quot;The sum is {0}.&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="comment"> # .format(c) substitutes the value of c for {0} in the print statement.</span><br />
</code><code><br />
<span class="comment"># add_version2.py</span><span class="comment">:  Add two numbers
                    given as arguments.</span><br />
<br />
<span class="key">import</span> sys <span class="comment"># Now the script can use the built-in Python system module.</span><br />
<br />
                    a <span class="o">=</span> int(sys.argv[<span class="num">1</span>]) <span class="comment"># sys.argv is the <em><strong>sys</strong></em>tem <em><strong>arg</strong></em>ument <em><strong>v</strong></em>ector.</span><br />
                    b <span class="o">=</span> int(sys.argv[<span class="num">2</span>]) <span class="comment"># int changes the input to an <strong>integer</strong> number.</span><br />
<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <br />
<span class="k">print</span> <span class="s">&quot;The sum is {0}.&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="comment"># .format(c) substitutes the value of c for {0} in the print statement.</span><br />
</code><b class="head">2.4 Python components</b><a name="components" id="keyterms2"></a><a href="#top">back to top</a> <strong><span class="head">2.4.1 Comments</span></strong><a href="#top">back to top</a> <strong><span class="head">2.4.2 Keywords</span></strong><a href="#top">back to top</a> <p><strong>Table 2.2 </strong>Python 2.7 keywords. <br />
</p>
<table width="385" border="0" bgcolor="#eeeeeee">
<tr>
<td width="379"><pre class="key"><font>and       del       from      not       while      <br />as        elif      global    or        with       <br />assert    else      if        pass      yield      <br />break     except    import    print                <br />class     exec      in        raise                <br />continue  finally   is        return               <br />def       for       lambda    try</font></pre></td>
</tr>
</table><pre class="key"><font>and       del       from      not       while      <br />as        elif      global    or        with       <br />assert    else      if        pass      yield      <br />break     except    import    print                <br />class     exec      in        raise                <br />continue  finally   is        return               <br />def       for       lambda    try</font></pre><pre class="key"><font>and       del       from      not       while      <br />as        elif      global    or        with       <br />assert    else      if        pass      yield      <br />break     except    import    print                <br />class     exec      in        raise                <br />continue  finally   is        return               <br />def       for       lambda    try</font></pre><strong><span class="head">2.4.3 Indentation</span></strong><a href="#top">back to top</a> <strong><span class="head">2.4.4 Built-in functions</span></strong><a href="#top">back to top</a> <code>functionName(argument1, 
                argument2, argument3,...)</code><strong><span class="head">2.4.5 Variables, assignment statements, and dynamic typing</span></strong><a href="#top">back to top</a> <strong><span class="head">2.4.6 Naming variables and tracebacks</span></strong><a href="#top">back to top</a> <blockquote>
<p><em> Look for an explanation of the error in the last line of a traceback message.</em></p>
</blockquote><strong><span class="head">2.4.7 Built-in constants and exceptions</span></strong><a href="#top">back to top</a> <strong><span class="head">2.4.8 Standard modules</span></strong><a name="standardModules" id="models"></a><a href="#top">back to top</a> <p align="left"><code><span class="key">import </span>moduleName1, moduleName2, ...</code><br />
</p><b class="head">2.5 Key terms</b><a name="keyterms" id="keyterms"></a><a href="#top">back to top</a> <b class="head">2.6 Exercises</b><a name="exercises" id="exercises"></a><a href="#top">back to top</a> Software versions
                        <table width="232" border="1">
<tr>
<td width="109"><strong>ArcGIS version</strong></td>
<td width="107"><strong>Python version</strong></td>
</tr>
<tr>
<td>10.1, 10.2</td>
<td>2.7</td>
</tr>
<tr>
<td>10</td>
<td>2.6</td>
</tr>
<tr>
<td>9.3</td>
<td>2.5</td>
</tr>
<tr>
<td>9.2</td>
<td>2.4.1</td>
</tr>
<tr>
<td>9.1</td>
<td>2.1</td>
</tr>
</table><strong>ArcGIS version</strong><strong>Python version</strong>10.1, 10.22.7102.69.32.59.22.4.19.12.1<strong>ArcGIS version</strong><strong>Python version</strong>10.1, 10.22.7102.69.32.59.22.4.19.12.1Key termStatement<ol>
<li>Python keyword<br />
<br />
</li>
<li>IDE<br />
<br />
</li>
<li>Hash sign<br />
<br />
</li>
<li>Tracebacks<br />
<br />
</li>
<li> Window focus<br />
<br />
</li>
<li>Script arguments<br />
<br />
</li>
<li>Context highlighting<br />
<br />
</li>
<li>Assignment statement<br />
<br />
</li>
<li> Dynamic typing<br />
<br />
</li>
<li>False<br />
<br />
</li>
<li> NameError<br />
<br />
</li>
<li>Dedented code<br />
<br />
</li>
<li>math, os, and sys<br />
</li>
</ol>
<ol type="A">
<li>This is a  built-in boolean constant.<br />
<br />
</li>
<li>If this isn't in the Script Window, you might save the Interactive Window by mistake.<br />
<br />
</li>
<li>Special font formatting (such as color) based on meaning of text in the code.<br />
<br />
</li>
<li>The controversial debates surrounding Python versus Perl scripting languages.<br />
<br />
</li>
<li><code><span class="key">print</span></code> is written in bold blue because it is one of these.<br />
<br />
</li>
<li>If a variable name is misspelled, this can occur.<br />
<br />
</li>
<li>A specialized editor for developing scripts.<br />
<br />
</li>
<li>Information passed into a script by the user.<br />
<br />
</li>
<li>Automatically set the data type of a variable when a value is assigned.<br />
<br />
</li>
<li><code>x <span class="o">=</span> 5</code> is an example of one of these. <br />
<br />
</li>
<li>Messages printed when exceptions are thrown.<br />
<br />
</li>
<li>This signals the end of a related block of code.<br />
<br />
</li>
<li>The shape of a camel's back.<br />
<br />
</li>
<li>Code following this character is only meant for the human reader. <br />
<br />
</li>
<li>These are examples of Python standard modules</li>
</ol>------------------------------------------------------------rows: 47 cols: 0<strong class="head">2.1 Where to write code </strong><a name="IDE" id="models2"></a><span class="head">2.2 How to run code in PythonWin</span><a name="run" id="run"></a><strong class="head">2.3 How to pass input to a script</strong><a name="arguments" id="arguments"></a><b class="head">2.4 Python components</b><a name="components" id="keyterms2"></a><strong><span class="head">2.4.1 Comments</span></strong><strong><span class="head">2.4.2 Keywords</span></strong><strong><span class="head">2.4.3 Indentation</span></strong><strong><span class="head">2.4.4 Built-in functions</span></strong><code>functionName(argument1, 
                argument2, argument3,...)</code><strong><span class="head">2.4.5 Variables, assignment statements, and dynamic typing</span></strong><strong><span class="head">2.4.6 Naming variables and tracebacks</span></strong><strong><span class="head">2.4.7 Built-in constants and exceptions</span></strong><strong><span class="head">2.4.8 Standard modules</span></strong><a name="standardModules" id="models"></a><p align="left"><code><span class="key">import </span>moduleName1, moduleName2, ...</code><br />
</p><b class="head">2.5 Key terms</b><a name="keyterms" id="keyterms"></a><b class="head">2.6 Exercises</b><a name="exercises" id="exercises"></a><p class="head">Chapter objectives</p>
After reading this chapter, you'll be able to do the following:
<ul>
<li>Test individual lines of code interactively in a code editor.</li>
<li>Run Python scripts in a code editor.</li>
<li>Differentiate between scripting and interactive code editor windows.</li>
<li>Pass  input to a script.</li>
<li>Match code text color with code components.</li>
<li>Define seven fundamental components of Python code.<br />
</li>
</ul>
<hr />
<span class="foo">
<span class="head">Chapter Outline</span><br /><br />
<a href="#IDE">Where to run  code</a><br />
<a href="#run">How to run code in PythonWin</a> or PyScripter<br />
<a href="#arguments">How to pass input to a script</a><br />
<a href="#components">Python components<br />
</a>&nbsp;&nbsp;&nbsp;&nbsp;Comments<br />
        &nbsp;&nbsp;&nbsp;&nbsp;Keywords<br />
&nbsp;&nbsp;&nbsp;&nbsp;Indentation<br />
&nbsp;&nbsp;&nbsp;&nbsp;Built-in funcitons<br />
&nbsp;&nbsp;&nbsp;&nbsp;Variables, assignment statements, and dynamic typing<br />
&nbsp;&nbsp;&nbsp;&nbsp;Naming variables and tracebacks<br />
&nbsp;&nbsp;&nbsp;&nbsp;Built-in constants and exceptions<br />
&nbsp;&nbsp;&nbsp;&nbsp;Standard modules<br />
Key terms<br />
<a href="#exercises">Exercises</a><br />
</span>
<hr />
<p>Before  you can create GIS Python scripts, you need to know where to write and run the code and you need a familiarity with basic programming concepts. If you're unfamiliar with Python, it will be worthwhile to take a little time to go over the basics presented in this chapter before commencing the next chapter.</p>
<hr />
<table width="775" border="0">
<tbody>
<tr>
<th scope="row" align="left"><strong class="head">2.1 Where to write code </strong><a name="IDE" id="models2"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<p>Python scripts can be written and saved in any text editor; when a file is saved with a '.py' extension, the computer interprets it as a Python script. However, an <em>integrated development environment</em> (IDE), a software application designed for computer programming, is a better choice than a general purpose text editor, because it is tailored for programming. The <em>syntax</em> of a programming language is the set of rules that define how to form code statements that the computer will be able to interpret in that language. An IDE can check code syntax, highlight special code statements, suggest ways to complete a code statement, and  provide special tools, called debuggers, to investigate errors in the code.</p>
<p>The ArcGIS Python window embedded in ArcGIS desktop applications has some IDE functionality, such as Help pages and automatic code completion. It allows the user to save code (right-click &gt; Save as) or load a saved script (right-click &gt; Load), but it is missing some of the  functionality of a stand-alone IDE. For example, it  provides no means to pass input into a script and it doesn't provide a debugger.  Stand-alone IDE's are also lightweight and allow scripts to be run and tested outside of ArcGIS software. For these reasons, we will mainly use a popular stand-alone IDE called PythonWin. </p>
<p>The PythonWin IDE provides two windows for two modes of executing code: an interactive environment and a window for scripts (Figure 2.1).  The interactive environment works like this:</p>
<p>1. The user types a line of code in the interactive window (for example, <code><span class="key">print</span> <span class="s">'Hello'</span></code>).<br />
          2. 
          The user presses 'Enter' to indicate that the line of code is complete. <br />
          3. The single line of code is run.<br />
</p>
<p>The interactive mode is a convenient way to try out small pieces of code and see the results immediately. The code written in the interactive window is not saved when the IDE is closed. Often we want to save many lines of related code for reuse, in other words, we want to save scripts. A <em>Python script</em> is a program (a set of lines of Python code) saved in a file  with the '.py' extension. A script can later be opened in an IDE and run in its entirety from there. </p>
<p><img src="../images/PythonWin_small3.png" /><br />
<strong>Figure 2.1</strong> PythonWin has two windows: one for scripts and one for interactive coding.</p>
<p>Python is installed automatically when ArcGIS is installed, but PythonWin is not. To follow along in the rest of the chapter, install  PythonWin and PyScripter based on the instructions in Exercise 1. Then launch PythonWin and locate the Python prompt, as shown below:<br />
<img src="../images/launchPython.png" /></p>
<p>PyScripter is also a good choice as a Python IDE. PyScripter's equivalent of PythonWin's Interactive Window is the Python Interpreter window. PyScripter is more complex than PythonWin, but has additional functionality, such as interactive syntax checking, window tabs, variable watch tools, and the ability to create projects. <br />
</p>
<hr />
<br />
<table width="775" border="0">
<tbody>
<tr>
<th scope="row" width="512" align="left"><span class="head">2.2 How to run code in PythonWin</span><a name="run" id="run"></a></th>
<td width="253" align="right"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<p>Once you have installed PythonWin, you'll need to understand how to use the Interactive Window and script windows.   When PythonWin is first opened, only the Interactive Window is displayed, because you're not
          editing a script yet. Python statements in the window labeled 'Interactive Window' are executed as soon as you finish typing the line of code and  press the 'Enter' key. The <code>&gt;&gt;&gt;</code> symbol in the Interactive Window is the <em>Python prompt</em>. Just like the prompt in the ArcGIS Python Window, it 
          indicates that Python is
          waiting for input. </p>
<p><img src="../images/interactive_window1.png" /> </p>
<p>Type something at the Python prompt and press the 'Enter' key. On the following line, Python displays the result. Enter <code>print &quot;GIS rules&quot;</code>  and it displays 'GIS rules'. Enter <code>1 + 1</code> and Python displays <code>2</code>. Backspace and then enter <code>3 + 4</code>. Python doesn't display <code>7</code> because there is no space between the prompt and the Python code. There must be exactly one space between the prompt and the input. This problem only occurs if you 'Backspace' too far. When you press the 'Enter' key, the cursor is automatically placed in the correct position, ready for the next command. PyScripter avoids this issue by not allowing you to remove that space after the prompt. Backspacing has no affect.</p>
<p>Instead of showing screen shots of the Interactive Window, this book usually uses text to display these interactions.  For example, the screen shot above would be replaced with this text:</p>
<p><code>&gt;&gt;&gt; <span class="key">print</span> <span class="s">&quot;GIS rules.&quot;</span><br />
          GIS rules.<br />
          &gt;&gt;&gt; <span class="num">1</span><span style="vertical-align: top;"><span class="o"> +</span></span><span class="num"> 1</span><br />
          2<br />
          &gt;&gt;&gt;<span class="num">3</span><span style="vertical-align: top;"><span class="o"> +</span></span> <span class="num">4</span><br />
          &gt;&gt;&gt;<br />
</code></p>
<table width="779" border="3" bgcolor="#CEDAE3">
<tr>
<td width="765"><blockquote>
<p> Interactive Window examples are given as text with Python prompts. To try the examples yourself, note that the prompt indicates that you should type what follows on that
                  line in the Interactive Window, but don't type the '&gt;&gt;&gt;' marks. </p>
</blockquote></td>
</tr>
</table>
<p>The interactive mode is helpful for testing small pieces of code, but ultimately you will be writing Python  scripts. Editing scripts in an IDE is similar to
          working with a text editor. You can use  buttons (or menu selections or keyboard shortcuts) for creating, saving, closing, and opening scripts. Table 2.1 shows these options. If you're unfamiliar with PythonWin, it would be useful to walk through the following example, to practice these actions. <br />
<br />
          Create a
          new blank script as follows: </p>
<ol>
<li> Choose File &gt; new or press <strong>Ctrl + n</strong> or click the new script button <img src="../images/newScript.png" alt="the run button" width="24" border="1" />.</li>
<li> Select 'Python script'.</li>
<li>Click 'OK'. </li>
</ol>
        A new blank script window with no '&gt;&gt;&gt;' prompts
        appears. Next, organize the display by tiling the windows and turning on line numbers. To tile the windows as shown in Figure 2.1, click in the script window, then select: Window menu &gt; Tile. When you have two or more windows open in PythonWin, you need to be aware of the focus. The <em>focus</em> is the active window where you've clicked the mouse most recently. If you click in the Interactive Window and tile the windows again, the Interactive Window will be stacked on top, because the 'Tile' option places the focus window on top. To display the line numbers next to the code in the script window, select the View menu &gt; Options &gt; Editor  and set 'Line numbers'  to 30. This sets the width of the line numbers margin to 30 pixels.  Next, add some content to the script, by typing the following lines of code in the new window:
        <p><code><span class="key">print</span> <span class="s">&quot;I love GIS...&quot;</span><br />
<span class="key">print</span> <span class="s">&quot;and soon I will love Python!&quot;</span>
<!--          <p>Notice that PythonWin displays print in bold blue and
 quoted text in another color. PythonWin  automatically uses
font style and color to highlight special words. This is called <span
 style="font-style: italic;">context highlighting</span>. As you work
more in Python you’ll find this is very useful. For
example, if you intended to type print and you typed pirnt instead, you
are apt to notice the error because the word is not in bold. PythonWin
colors text inside quotes to show that it is interpreted literally, not
as a variable representing some other value. <br>-->
<br />
</code><br />
          The color of the text in the script window is meaningful as we discuss in an upcoming section.   Next, save the Python script in 'C:/gispy/scratch'.  To save the script: </p>
<ol>
<li> Click File &gt; Save or press <strong>Ctrl  + s</strong> or click the save button <img src="../images/saveScript.png" alt="the run button" width="24" border="1" height="23" />.</li>
<li>A 'Save as' window appears. Browse to the 'C:\gispy\scratch' directory.</li>
<li>Set the file name to  'gisRules.py'. </li>
<li>Click 'Save'.</li>
</ol>
<p>Beware of your focus; If you select <strong>Ctrl + s</strong> while your focus is in the Interactive Window, it will  save the contents of the Interactive Window instead of your script.  Confirm that you can view the entire 'gisRules.py'  file name in the 'C:\gispy\scratch' directory in ArcCatalog and Windows Explorer.  If not, see the sidebar &quot;Listing Python scripts in ArcCatalog and Windows Explorer.&quot; </p>
<table width="779" border="3" bgcolor="#CEDAE3">
<tr>
<td width="765" height="76"><p><strong>Listing Python scripts in ArcCatalog and Windows Explorer</strong></p>
<ol type="I">
<li>By default, ArcCatalog does not display scripts in the TOC. To change this setting, use the following steps:<br />
<ol>
<li>Customize menu &gt; ArcCatalog Options &gt; File Types tab &gt; New Type </li>
<li>Enter <em>Python</em> for Description and <em>py</em> for File extension </li>
<li> Import File Type From Registry... </li>
<li>Click 'OK' to complete the process.</li>
</ol>
<p>It may be necessary to restart ArcCatalog in order to view the python files.</p>
</li>
<li>
<p>By default, Windows users can see Python scripts in Windows Explorer, but the file extension may be hidden. If you don't
                    see the '.py' extension on Python files, change the settings under the
                    Windows Explorer tools menu. The procedure varies depending on the Windows version. For example, in Windows 7 follow these instructions:</p>
<ol>
<li> Tools &gt; FolderOptions... &gt; View. </li>
<li>Uncheck 'Hide extensions for known file types'.</li>
<li>Click 'Apply to All Folders'.<br />
<br />
</li>
</ol>
                  and in Windows 8 click View, then check 'File name extensions'. </li>
</ol></td>
</tr>
</table>
<p> Back in PythonWin, run the program:</p>
<ol>
<li> Select File &gt; Run or press <strong>Ctrl  + r</strong> or click the 'Run' button <img src="../images/running_man.png" alt="the run button" width="24" border="1" height="23" />. </li>
<li> A 'Run Script' window appears. Click ‘OK’.</li>
</ol>
<p>PythonWin will run the script and you should see these results in the Interactive Window:<br />
</p>
<blockquote> <code>&gt;&gt;&gt; I love GIS...<br />
<font class="num" color="#0099ff">and soon I will love Python!</font><br />
</code></blockquote>
<p>Code from the script prints output in the Interactive Window.  PythonWin prints the first line in black and the other in blue; This text coloring is inconsequential and can be ignored. </p>
<p> With the focus in the 'gisRules.py' script window, select File &gt; Close or click the X in the upper right corner of the window to close the script. Next, we'll reopen 'gisRules.py' to demonstrate running a saved script. To open and rerun it: </p>
<ol>
<li> File &gt; Open or press <strong>Ctrl  + o</strong> or click the open file button <img src="../images/openScript.png" alt="the run button" width="24" border="1" height="23" /></li>
<li> Browse to the file, 'gisRules.py' in C:\gispy\scratch.</li>
<li> Select File &gt; Run or press <strong>Ctrl  + r</strong> or click the run button <img src="../images/running_man.png" alt="the run button" width="24" border="1" height="23" />. </li>
<li> A 'Run Script' window appears. Click ‘OK’.</li>
</ol>
<p> You will see the same statements printed again in the Interactive Window. Clearing the Interactive Window between running scripts to make it easier to identify new output. To do so, click inside the Interactive Window to give it focus. Then select all the contents (<strong>Ctrl</strong> + <strong>a</strong>) and delete them. PythonWin allows you to open multiple script windows, so you can view more than one script at a time, but it only opens one Interactive Window. <br />
          To open and close the Interactive Window, click on the button that looks like a Python prompt <img src="../images/interactiveButton.png" alt="prompt" width="26" height="26" border="1" />. </p>
<p>Table 2.1 summarizes the actions described in this example. </p>
<table bgcolor="#EEEEEE" border="0" width="779">
<tbody>
<tr>
<td scope="row"><strong>Table 2.1</strong>: Buttons, keyboard shortcuts, and menu instructions for some basic actions in PythonWin.<br />
<table width="859" border="3" bgcolor="#eeeeeee">
<tr>
<td width="195" bgcolor="#CCCCCC"><span class="style4"><strong>Action</strong></span></td>
<td width="51" bgcolor="#CCCCCC"><strong>Button</strong></td>
<td width="285" bgcolor="#CCCCCC"><span class="style4"><strong>Keyboard shortcut</strong></span></td>
<td width="296" bgcolor="#CCCCCC"><span class="style4"><strong>Menu</strong></span></td>
</tr>
<tr>
<td>Create a new script window</td>
<td><div align="center"><img src="../images/newScript.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + n</td>
<td>File &gt; New </td>
</tr>
<tr>
<td>Open a script</td>
<td><div align="center"><img src="../images/openScript.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + o</td>
<td>File &gt; Open</td>
</tr>
<tr>
<td>Save a script</td>
<td><div align="center"><img src="../images/saveScript.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + s</td>
<td>File &gt; Save</td>
</tr>
<tr>
<td>Close script</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>File &gt; Close</td>
</tr>
<tr>
<td>Run a script</td>
<td><div align="center"><img src="../images/running_man.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + r</td>
<td>File &gt; Run</td>
</tr>
<tr>
<td>Tile the windows</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>Click in Script Window, then:  Window &gt; Tile</td>
</tr>
<tr>
<td>Show line numbers</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>View &gt; Options &gt; Editor &gt; Set Line numbers &gt;= 30</td>
</tr>
<tr>
<td>Shift focus between windows</td>
<td>&nbsp;</td>
<td>Ctrl+Tab</td>
<td>&nbsp;</td>
</tr>
<tr>
<td>Open/close Interactive Window</td>
<td><div align="center"><img src="../images/interactiveButton.png" alt="inter" width="26" height="26" /></div></td>
<td>&nbsp;</td>
<td>View &gt; Interactive Window</td>
</tr>
<tr>
<td>Clear the Interactive Window</td>
<td>&nbsp;</td>
<td> Ctrl+Tab to the Interactive Window, Ctrl+a, del</td>
<td>Click in Interactive Window, Edit &gt; Select All, Edit &gt; Delete</td>
</tr>
<tr>
<td>Toggle whitespace</td>
<td>&nbsp;</td>
<td>Ctrl+W</td>
<td>View &gt; Options &gt; Tabs and whitespace &gt; check 'View whitespace'</td>
</tr>
</table>
</td>
</tr>
</tbody>
</table>
<hr />
<table width="775" border="0">
<tbody>
<tr>
<th scope="row" align="left"><strong class="head">2.3 How to pass input to a script</strong><a name="arguments" id="arguments"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<p>Now you know how to run lines of code directly in the Interactive Window and how to create
          and run Python scripts in
          PythonWin. You also need to know how to give input to a script in PythonWin. Getting input from the user enables code
          reuse without editing the code. User input called <em>arguments</em>, is given to the script in PythonWin through the 'Run Script' window.   To use arguments, type them in the  'Run Script' window text box labeled 'Arguments'. To use multiple arguments, separate them by spaces. </p>
<p>This example  runs a script 'add_version1.py'  with no arguments and then runs 'add_version2.py', which takes two arguments: <br />
</p>
<ol>
<li>In PythonWin open (<span style="font-weight: bold;">Ctrl+o</span>) 'add_version1.py', which looks like this:</li>
<table border="1" cellpadding="2" cellspacing="2" bgcolor="#ffffcc" style="text-align: left; ; height: 30px;">
<tbody>
<tr>
<td width="627" style="vertical-align: top;"><code><br />
<span class="comment"># add_version1.py</span><span class="comment">: Add two numbers.</span> <br />
                  a <span class="o">=</span> <span class="num">5</span><br />
                  b <span class="o">=</span> <span class="num">6</span><br />
<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <br />
<span class="k">print</span> <span class="s">&quot;The sum is {0}.&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="comment"> # .format(c) substitutes the value of c for {0} in the print statement.</span><br />
</code></td>
</tr>
</tbody>
</table>
<br />
<li>Run the script (<span style="font-weight: bold;">Ctrl + r &gt; OK</span>). The output in the Interactive Window should look like this:<br />
<code><br />
            &gt;&gt;&gt; The sum is 11.<br />
</code><br />
</li>
<li> 'add_version1.py' is so simple that it always adds the same two
            numbers every time it is run. 'add_version2.py' instead adds two input numbers provided by the user. Open 'add_version2.py', which looks like this:
            <table border="1" cellpadding="2" cellspacing="2" bgcolor="#ffffcc" style="text-align: left; width: 412px; height: 30px;">
<tbody>
<tr>
<td nowrap="nowrap" style="vertical-align: top;"><code><br />
<span class="comment"># add_version2.py</span><span class="comment">:  Add two numbers
                    given as arguments.</span><br />
<br />
<span class="key">import</span> sys <span class="comment"># Now the script can use the built-in Python system module.</span><br />
<br />
                    a <span class="o">=</span> int(sys.argv[<span class="num">1</span>]) <span class="comment"># sys.argv is the <em><strong>sys</strong></em>tem <em><strong>arg</strong></em>ument <em><strong>v</strong></em>ector.</span><br />
                    b <span class="o">=</span> int(sys.argv[<span class="num">2</span>]) <span class="comment"># int changes the input to an <strong>integer</strong> number.</span><br />
<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <br />
<span class="k">print</span> <span class="s">&quot;The sum is {0}.&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="comment"># .format(c) substitutes the value of c for {0} in the print statement.</span><br />
</code></td>
</tr>
</tbody>
</table>
<br />
</li>
<li>This time, we  will add the numbers 2 and 3. To run the script  with these two arguments, select <strong>Ctrl + r</strong> and in the 'Run Script' window 'Arguments' text box, place a 2
            and 3, separated by a space. <br />
<img src="../images/arguments.jpg" width="383" height="134" /></li>
<li>Click '<strong>OK</strong>'. The output in the Interactive Window should look like this:<br />
            &gt;&gt;&gt; The sum is 5. <br />
</li>
</ol>
        The beginning of 'add_version2.py' differs from 'add_version1.py' so that it can use arguments. The new lines of code in 'add_version2.py'  use  the system argument vector, <code>sys.argv</code>, to get the values of the arguments that are passed into the script.
        <code>sys.argv[1]</code> holds the first argument and <code>sys.argv[2]</code> holds the second one. We'll revisit script arguments in more depth in an upcoming chapter. For now, you know enough to run some simple examples.<br />
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><b class="head">2.4 Python components</b><a name="components" id="keyterms2"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>The  color and indentation of Python code, as it appears in an IDE, highlights code components such as comments, keywords, block structures, numbers, and strings. This special formatting, called <span style="font-style: italic;">context highlighting, </span>provides extra cues to help programmers. For example, the keyword <code>import</code> appears as bold blue in a script, but if the word is misspelled as 'improt', it will have no special formatting. The script, 'describe_fc.py', in Figure 2.2,  shows several highlighted code components. 'describe_fc.py'   prints basic information about each feature class in a workspace. To try this example, follow  steps 1-5:</p>
<ol>
<li>Preview two feature classes in C:/gispy/data/ch02, 'park.shp' and 'fires.shp' in ArcCatalog. Before moving on to step 2, click on the ch02 directory in the ArcCatalog table of contents and select F5 to refresh the view and release the locks on the feature classes.</li>
<li>Open the 'describe_fc.py' in PythonWin. </li>
<li>Launch the 'Run Script' window (<strong>Ctrl + r</strong>).</li>
<li>Type &quot;C:/gispy/data/ch02&quot; in the Arguments text box. The script uses this argument as the data workspace.</li>
<li>Click 'OK' and confirm that the output looks something like what you see in Figure 2.3. </li>
</ol>
<p>Figure 2.2 shows the script as it is displayed with the default settings in PythonWin. The italic green text, bold blue text, and indentation correspond to comments, keywords, and block structures, respectively. These components along with variables and assignment statements are discussed next. <br />
</p>
<table width="775" border="0">
<tr>
<th align="left" scope="row"><strong><span class="head">2.4.1 Comments</span></strong></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p> Text lines shown in green are <em>comments, </em> information only included for humans readers, not for the computer to interpret. Anything that follows one or more hash sign (<code>#</code>)  on a line of Python code is a comment and is ignored by the computer.   PythonWin displays comments in italicized green when the comment starts with one  hash sign and gray  when the comment starts with two or more consecutive hash signs. Comments have several uses:</p>
<ul>
<li> Provide metadata - script name, purpose, author, data, how to run it, sample input syntax, expected output. These  comments are placed at the beginning of the script (Lines 1-6 in 'describe_fc.py').<br />
<br />
</li>
<li>Outline - for the programmer to fill in the code details and for the reader to glean the overall workflow. For example, an outline for 'describe_fc.py' looks like this:<br />
<br />
<code><br />
<span class="comment"># GET the input workspace from the user. <br />
            # GET a list of the feature classes in the workspace. <br />
            # PRINT basic information about each feature class in the folder</span>.<span style="vertical-align: top;"><br />
</span></code><br />
<br />
</li>
<li>Clarify specific pieces of code - good Python code is highly readable, but sometimes comments are still helpful. Skilled Python programmers use expository commenting selectively.<br />
<br />
</li>
<li>Debug - help the programmer isolate mistakes in the code. Since comments are ignored by the computer, creating 'commented out' sections, can help to focus attention on another section of code. Comment out or uncomment multiple lines of code in PythonWin by selecting the lines and clicking <strong>Alt+3</strong>/<strong>Alt+4</strong> (or right-click and choose <strong>Source code</strong> &gt; <strong>Comment out region</strong>/<strong>Uncomment region</strong>).</li>
</ul>
<p><img src="../images/describe_fc_script.png" alt="script" border="1" usemap="#Map2MapMap" /> <strong><br />
          Figure 2.2:</strong> Python script 'describe_fc.py' as it appears in an IDE.</p>
<p><img src="../images/describe_fc_output.png" alt="output" border="1" /> <br />
<strong>Figure 2.3</strong> Output printed in the PythonWin Interactive Window when 'describe_fc.py' (Figure 2.2) runs.</p>
<table width="775" border="0">
<tr>
<th align="left" scope="row"><strong><span class="head">2.4.2 Keywords</span></strong></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p><em>Python keywords</em>, words reserved for special usage, are shown in bold blue in PythonWin. 'describe_fc.py' in Figure 2.2 uses keywords <code>import</code>, <code>print</code>, <code>for</code> and <code>in</code>. Table 2.2 gives a list of Python keywords. Python is case sensitive; keywords must be written in all lower case.</p>
<table bgcolor="#EEEEEE" border="0" width="452">
<tbody>
<tr>
<td width="446" height="221" scope="row"><p><strong>Table 2.2 </strong>Python 2.7 keywords. <br />
</p>
<table width="385" border="0" bgcolor="#eeeeeee">
<tr>
<td width="379"><pre class="key"><font>and       del       from      not       while      <br />as        elif      global    or        with       <br />assert    else      if        pass      yield      <br />break     except    import    print                <br />class     exec      in        raise                <br />continue  finally   is        return               <br />def       for       lambda    try</font></pre></td>
</tr>
</table></td>
</tr>
</tbody>
</table>
<br />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><strong><span class="head">2.4.3 Indentation</span></strong></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Indentation is meaningful in Python. Notice that lines 19-27 are indented to the same position in 'describe_fc.py.' The code in line 18, which starts with the <code>for</code> keyword,  tells Python to repeat what follows for each feature class listed in the input directory. Lines 19-27 are indented because they are the block of code that gets repeated. The Name, Data type, and so forth are printed for each feature class. The <code>for</code> keyword structure is an example of a Python <em>block structure,</em> a set of related lines of code (a block of code). Block structures will be discussed in more detail later, but for now, it's useful to have some understanding of the significance of indentation in Python. Items within a block structure are indented the same amount to indicate that they are related. The first line of code dedented (moved back a notch) after a block structure signifies the end of the block structure. 'describe_fc.py' prints 'Feature class list complete' only once, because line 28  is dedented (the opposite of indented). Python does not have mandatory statement termination keywords or characters such as 'end for' or curly brackets to end the block structure; indentation is used instead. For example, if lines 20-27 were dedented, only one feature class description would be printed, the last one in the list. Indentation and loops will be discussed in more detail in an upcoming chapter.</p>
<table width="775" border="0">
<tr>
<th align="left" scope="row"><strong><span class="head">2.4.4 Built-in functions</span></strong></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>'describe_fc.py' uses the <code>print</code> keyword to print output to the Interactive Window. This works because <code>print</code> is both a keyword and a built-in function.  A <em>function</em> is a named set of code that performs a task. A <em>built-in function</em> is a function supplied by Python. Use it by typing the name of the function and the input separated by comma, usually inside parentheses.  A code statement that uses a built-in function  has this general format:</p>
<table border="0" width="797">
<tbody>
<tr>
<th scope="row" width="791" align="left"><code>functionName(argument1, 
                argument2, argument3,...)</code></th>
</tr>
</tbody>
</table>
<br />
The built-in <code>print</code> function, discussed in more detail in Chapter 3, is an exception which does not require parentheses.  In Python 2.7, which is the version of Python currently used by ArcGIS, the parentheses are optional in print statements. In Python 3.0 and higher, they are required.<br />
<br />
        Programming documentation uses special terminology related to dealing with functions, such as 'calling functions', 'passing arguments', and 'returning values'. These terms are defined here using built-in function examples:
        <ul>
<li> A code statement that invokes a function is referred to as a <em>function call</em>. We say we are 'calling the function', because we call upon it by name to do its work.   Think of a function as if it's a  task assigned to a butler. If 
            you want him to 
            make  tea, you need to call on the butler to do so. You don't need to know any more details about how the tea is made, because he does it for you. There is no Python <code>make_tea</code> function, so we'll look at the  built-in <code>round</code> function instead. The following line of code  is a function call that calls the <code>round</code> function to round a number: <br />
<code><br />
            &gt;&gt;&gt; <span class="nb">round</span><span class="p">(</span><span class="mf">1.7</span><span class="p">)</span> <br />
            2.0</code><br /><br />
</li>
<li>Providing  input for the function is referred to as <em>passing arguments</em> into the function. When
            you call the butler to 
            make  tea, you need to tell him if you want herbal or 
            green tea or some other kind. The type of tea would be 
            provided as an <em>argument</em>. A closely related term, <em>parameters</em>, are the pieces of information that can be specified to a function. The <code>round</code> function has one required parameter, a number to be rounded. The specific values passed in when calling the function are the arguments. The number <code>1.7</code> is used as the argument in the example above.  An argument is an expression used when calling   the function. The difference between the terms 'argument' and 'parameter' is subtle and often these terms are used interchangeably.   The following line of code calls the built-in <code>min</code> function to find the minimum number. Here, we pass in three comma separated arguments. The function finds the smallest of the three values:<br />
<code><br />
            &gt;&gt;&gt;<span class="nb"> min</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span><br />
            1<br />
</code><br />
</li>
<li>Some functions come up with results from the actions they perform. Others  do some action that may make changes or print information, but don't send a result to the caller. Those that do are said to <em> return a value</em>.  When we ask our butler to do something,  he goes away and does his work. Sometimes he returns with a result—like the cup  of tea we asked for. Other times, he just performs his duty and there's no  value returned -- he dimmed the lights, if that’s what you requested, but he  doesn't bring your slippers if you only asked him to adjust the lighting. The built-in <code>round</code> function returns the rounded number and the <code>min</code> function returns the minimum value. These return values are printed in the Interactive Window, but would not be printed in a script. By contrast, the <code>help</code> function is designed to print help about an argument, but it returns nothing. The following line of code calls the built-in <code>help</code> function to print help documentation for the <code>round</code> function. The name of the function is passed as an argument:<br />
<code>
</code><p>&gt;&gt;&gt;<span class="nb"> help</span><span class="p">(</span><span class="nb">round</span><span class="p">)</span> <br />
              Help on built-in function round in module __builtin__:</p>
            round(...)<br />
            round(number[, ndigits]) -&gt; floating point number<br />
<br />
            Round a number to a given precision in decimal digits (default 0 digits).<br />
            This always returns a floating point number.  Precision may be negative.<br />


</li>
</ul>
<p>The help prints a <em>signature</em>, a template for how to use the function which lists the required and optional parameters. The first parameter of the <code>round</code> function is the number to be rounded. The second parameter, ndigits, specifies the number of digits for rounding precision. The square brackets surrounding <code>ndigits</code> mean that it is an optional argument.  The arrow pointing to 'floating point number' means that this is the type of value that is returned by the function.<br />
<br />
          Other sections of this book employ additional built-in functions (e.g., <code>enumerate</code>, <code>int</code>, <code>float</code>, <code>len</code>, <code>open</code>, <code>range</code>, <code>raw_input</code>, and <code>type</code>).      Search online with the keywords 'Python Standard Library built-in functions' for a complete list of built-in functions and their uses.<br />
</p>
<table width="775" border="0">
<tr>
<th align="left" scope="row"><strong><span class="head">2.4.5 Variables, assignment statements, and dynamic typing</span></strong></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p> We still haven't discussed the turquoise and olive colored text in 'describe_fc.py'. These represent Python number and string data types. All objects in Python have a data type. To understand data types in Python you need to be familiar with variables, assignment statements, and dynamic typing. Variables are a basic building block of computer programming.  A programming <em>variable</em>, is a name that gets assigned a value (It's like an algebra variable, except that it can be given non-numeric values as well as numeric ones). The following statement  assigns the value 145 to the variable FID:</p>
<p><code>&gt;&gt;&gt; FID <span class="o">=</span> <span class="num">145</span><br />
</code></p>
<p>This line of code is called an assignment statement. An <em>assignment statement </em>is a line of code (or statement) used to set the value of a variable. An assignment statement consists of the variable name (on the left), a value (on the right) and a single equals sign in the middle.</p>
<p><img src="../images/assignmentStatementv2.png" alt="assignment statement" width="268" height="203" border="1" /><br />
</p>
<p>To print the value of a variable inside a script, you need to use the <code>print</code> function. This works in the Interactive Window too, but it is not necessary to use the <code>print</code> function in the Interactive Window. When you type a variable name and press the 'Enter' key in the Interactive Window, Python prints its value.<br />
</p>
<p><code>&gt;&gt;&gt; inputData <span class="o">=</span> <span class="s">'trees.shp'</span><br />
          &gt;&gt;&gt; inputData<br />
          'trees.shp'<br />
</code></p>
<p>A programming variable is similar to an algebra variable, except that it can be given non-numeric values, so the data type of a variable is an important piece of information. In other programming languages, declaration statements are used to specify the type.   Python determines the data type of a variable based on the value assigned to it. This is called <em>dynamic typing. </em>You can check the data type of a variable using the built-in <code>type</code> function.  The following tells us that  <code>FID</code> is an <code>'int'</code> type variable and inputData is an <code>'str'</code> type  variable: <br />
<code><br />
          |&gt;&gt;&gt; <span class="nb">type</span><span class="p">(</span><span class="n">FID</span><span class="p">)</span><br />
          &lt;type 'int'&gt;<br />
          &gt;&gt;&gt; <span class="nb">type</span><span class="p">(</span><span class="n">inputData</span><span class="p">)</span><br />
          &lt;type 'str'&gt;<br />
</code></p>
<p><code>'int'</code> stands for integer and <code>'str'</code> stands for string, (variable types which are discussed detail in the next chapter). Due to dynamic typing, the type of a variable can  change within a script. These statements  show the type of variable <code>avg</code> changing from integer  to string:</p>
<p><code>&gt;&gt;&gt; avg <span class="o">=</span> <span class="num">92</span><br />
          &gt;&gt;&gt; <span class="nb">type</span><span class="p">(</span><span class="n">avg</span><span class="p">)</span><br />
          &lt;type 'int'&gt;<br />
          &gt;&gt;&gt; avg <span class="o">=</span> <span class="s">'A'</span> <br />
          &gt;&gt;&gt; <span class="nb">type</span><span class="p">(</span><span class="n">avg</span><span class="p">)</span><br />
&lt;type 'str'&gt;<br />
</code></p>
<p>First, Python dynamically sets the data type of  <code>avg</code> as an integer, since 92 is an integer. Python considers characters within quotes to be strings. So when <code>avg</code> is set to <code>'A'</code>, it is dynamically typed to string. Dynamic typing is agile, but beware that if you unintentionally use the same name for two variables, the first value will be overwritten by the second.<br />
</p>
<table border="0" width="775">
<tbody>
<tr>
<th scope="row" align="left" width="561"><strong><span class="head">2.4.6 Naming variables and tracebacks</span></strong></th>
<td align="right" width="204"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<p><br />
        Variable names can't start with numbers nor contain spaces. For names that are a combination of more than one word, underscores or capitalization can be used to break up the words. Capitalizing the beginning of each word is known as camel case (the capital letters stick up like the humps on a camel). This book uses a variation called lower camel case -- all lower case for the first word and capitalization for the first letter of the rest. For example, <code>inputRasterData<span style="vertical-align: top;"></span></code> is lower camel case.</p>
<p><img src="../images/lower camel case.png" alt="lower Camel Case" /></p>
<p>Variable names are case sensitive.  In the following code, Python reports <code>fid</code> as undefined, even though <code>FID</code> has a value of <code>145</code> because we assigned it earlier:<br />
<code><br />
          &gt;&gt;&gt; fid<br />
<font class="err">Traceback (most recent call last):<br />
          File &quot;&lt;interactive input&gt;&quot;, line 1, in &lt;module&gt;<br />
          NameError: name 'fid' is not defined<br />
</font>&gt;&gt;&gt; FID<br />
         145<br />
</code><br />
        When we attempt to check the value of <code>fid</code>, PythonWin prints a red error message called a <em>traceback</em>.  The traceback traces the steps back to where  the error occurred. This example was typed in the Interactive Window, so it says 'interactive input', line 1. The last line of the traceback message explains the error. Python doesn't recognize 'fid'. It was never assigned a value, so it is considered to be an undefined object. When Python encounters an undefined object, it calls this kind of error a <code>NameError</code>. </p>
<table width="779" border="3" bgcolor="#CEDAE3">
<tr>
<td width="765" height="76"><blockquote>
<p><em> Look for an explanation of the error in the last line of a traceback message.</em></p>
</blockquote></td>
</tr>
</table>
<p>Keywords cannot be used as variable names. The following code attempts to use the keyword <code><span class="key">print</span></code> as a variable name:<br />
<code><br />
&gt;&gt;&gt; <font class="key"><strong>print</strong></font> <span class="o">=</span> <span class="s">'inputData'</span><br />
<font class="err">Traceback (  File &quot;&lt;interactive input&gt;&quot;, line 1<br />
          print <span class="o">=</span> 'inputData'<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^<br />
          SyntaxError: invalid syntax</font><br />
</code><br />
        Again, a traceback error message is printed, but this time, the message indicates invalid syntax because the keyword is being used in a way that it is not designed to be used. This statement does not conform with the rules about how print statements should be formed, so it reports a <code>SyntaxError</code>. </p>
<p>Python ensures that keywords are not used as variable names by reporting an error; However, Python does not report an error if you use the name of a built-in function as variable name. Making this mistake can cause unexpected behavior. For example, in the code below, the built-in <code>min</code> function is working correctly at the outset. Then <code>min</code> is used as a variable name in the assignment statement <code><span class="nb">min </span><span class="o">=</span> <span class="num">5</span></code>. Python accepts this with no error. But this makes <code>min</code> into an integer variable instead of a built-in function, so we can no longer use it to find the minimum value:<br />
<br />
<code>&gt;&gt;&gt; <span class="nb">type</span><span class="p">(</span><span class="nb">min</span><span class="p">)</span> <br />
          &lt;type 'builtin_function_or_method'&gt;<br />
          &gt;&gt;&gt;<span class="nb"> min</span>(<span class="num">1</span>, <span class="num">2</span>, <span class="num">3</span>)<br />
1<br />
          &gt;&gt;&gt;<span class="nb"> min </span><span class="o">=</span> <span class="num">5</span> <br />
          &gt;&gt;&gt;<span class="nb"> min</span>(<span class="num">1</span>, <span class="num">2</span>, <span class="num">3</span>)<br />
<span class="err">Traceback (most recent call last):<br />
          File &quot;&lt;interactive input&gt;&quot;, line 1, in &lt;module&gt;<br />
          TypeError: 'int' object is not callable</span><br />
          &gt;&gt;&gt; <span class="nb">type</span><span class="p">(</span><span class="nb">min</span><span class="p">)</span> <br />
          &lt;type 'int'&gt;<br />
</code></p>
<p>A <code>TypeError</code> is printed the second time we try to use <code>min</code> to find the minimum. <code>min</code> is now an <code>int</code> type so it  can no longer be called as a function. To restore <code>min</code> as a built-in function, you must restart PythonWin.</p>
<table width="775" border="0">
<tr>
<th align="left" scope="row"><strong><span class="head">2.4.7 Built-in constants and exceptions</span></strong></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>In addition to built-in functions, Python has built-in constants and exceptions. No built-in names should be used as variable names in scripts to avoid losing their special functionality. Built-in constants such as, <code>None</code>, <code>True</code>, and <code>False</code>, are assigned their values as soon as Python is launched, so that  value  is available to be used anywhere in Python. The built-in constant <code>None</code>  is a null value placeholder.  The data type of <code>True</code> and False is <code>'bool'</code> for boolean. Boolean objects can either be <code>True</code> or <code>False</code> :<br />
<br /><code>
          &gt;&gt;&gt; <span class="nb">type</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span><br />
          &lt;type 'bool'&gt;<br />
          &gt;&gt;&gt;<span class="bp"> True</span><br />
          True</code><br />
<br />
          The built-in constants <code>True</code> and <code>False</code> will be used in upcoming chapters to set variables that control aspects of the geoprocessing environment. For example, the following lines of code change the environment to allow geoprocessing output to overwrite existing files:</p>
<p><code>&gt;&gt;&gt; <span class="key">import</span> arcpy<br />
          &gt;&gt;&gt; arcpy.env.overwriteOutput <span class="o">=</span> True<br />
</code></p>
<p>The built-in exceptions, such as <code>NameError</code> or <code>SyntaxError</code>, are created for reporting specific errors in the code. Built-in exceptions are  common errors that Python can identify automatically. An exception is <em>thrown</em> when one of these errors is detected. This means a traceback message is generated and the message is printed in the Interactive Window; If the erroneous code is in a script, the script will stop running at that point.</p>
<p>New programmers often encounter <code>NameError</code>, <code>SyntaxError</code>, and <code>TypeError</code> exceptions. The <code>NameError</code> usually occurs because of a spelling or capitalization mistake in the code. The <code>SyntaxError</code> can occur for many reasons, but the underlying problem is that one of the rules of properly formed Python has been violated. A <code>TypeError</code> occurs when the code attempts to use an operator differently from how it's designed. For example, code that adds an integer to a string generates a <code>TypeError</code>. </p>
<p>There are many other types of built-in exceptions. The names of these usually end 'Error'. A traceback message is printed whenever one of these exceptions is thrown. The final line of traceback error messages states the name of the exception. We'll revisit exceptions and tracebacks in upcoming chapters. </p>
<p>The built-in <code>dir</code> function can be used to print a list of all the built-ins in Python. Type the following to print the built-ins in PythonWin (there are 2 underscores on each side):<br />
<br />
<code>&gt;&gt;&gt; <span class="nb">dir</span><span class="p">(</span><span class="n">__builtins__</span><span class="p">)</span><br />
</code><br />
          The printed list looks something like this:<br />
<code><br />
          'ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 'BufferError', 'BytesWarning', 'DeprecationWarning', 'EOFError', 'Ellipsis', 'EnvironmentError', 'Exception', 'False', 'FloatingPointError', 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError', 'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 'NameError', 'None', 'NotImplemented', 'NotImplementedError', 'OSError', 'OverflowError', 'PendingDeprecationWarning', 'ReferenceError', 'RuntimeError', 'RuntimeWarning', 'StandardError', 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit', 'TabError', 'True', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning', 'ValueError', 'Warning', 'WindowsError', 'ZeroDivisionError', '__debug__', '__doc__', '__import__', '__name__', '__package__', 'abs', 'all', 'any', 'apply', 'basestring', 'bin', 'bool', 'buffer', 'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'cmp', 'coerce', 'compile', 'complex', 'copyright', 'credits', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'execfile', 'exit', 'file', 'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash', 'help', 'hex', 'id', 'input', 'int', 'intern', 'isinstance', 'issubclass', 'iter', 'len', 'license', 'list', 'locals', 'long', 'map', 'max', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'quit', 'range', 'raw_input', 'reduce', 'reload', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'unichr', 'unicode', 'vars', 'xrange', 'zip']<br />
</code></p>
<p>The  built-in constants and built-in exceptions are interspersed in the beginning of this list <code>ArithmeticError</code> through <code>__package__</code>). The built-in functions are listed next, starting with <code>abs</code>. </p>
<table width="775" border="0">
<tr>
<th align="left" scope="row"><strong><span class="head">2.4.8 Standard modules</span></strong><a name="standardModules" id="models"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>When Python is installed, a library of standard modules is automatically installed. A <em>module</em> is a Python file containing related Python code. Python's standard library covers a wide variety of functionality. Examples include math functions, file copying, unzipping files, graphical user interface, and even Internet protocols for retrieving online data. To use a module you first use the <code>import</code> keyword.  The import statement can be applied to one or more modules using the following format:</p>
<table width="759" border="0" bgcolor="#EEEEEE">
<tr>
<th width="753" height="54" scope="row"><p align="left"><code><span class="key">import </span>moduleName1, moduleName2, ...</code><br />
</p></th>
</tr>
</table>
<p>Once a module is imported, its name can be used  to invoke its functionality. For example, the following code imports the standard <code>math</code> module and then uses it to convert 180 degrees to radians:</p>
<p><code>&gt;&gt;&gt; <span class="key">import</span> math<br />
          &gt;&gt;&gt; <span class="n">math</span><span class="o">.</span><span class="n">radians</span><span class="p">(</span><span class="mi">180</span><span class="p">)</span><br />
          3.141592653589793<br />
</code></p>
<p> The online 'Python Standard Library' contains documentation of the vast set of standard modules. For now, just highlight two modules <code>sys</code> and <code>os</code>) that are used in early chapters  and introduce others as the need arises.</p>
<p>The <code>sys</code> module gives access to variables that are used by the <em>Python interpreter</em>, the program that runs Python. For example, the following code imports the <code>sys</code> module and prints <code>sys<span class="o">.</span>path</code>:<br />
<br />
<code>&gt;&gt;&gt; <span class="key">import</span> sys<br />
          &gt;&gt;&gt; sys<span class="o">.</span>path<br />
          ['C:\\gispy\\sampleScripts\ch02', u'c:\\program files (x86)\\ArcGis\\desktop10.2\\arcpy', 'C:\\Windows\\system32\\python27.zip', 'C:\\Python27\\ArcGIS10.2\\DLLs', 'C:\\Python27\\ArcGIS10.2\\lib', 'C:\\Python27\\ArcGIS10.2\\lib\\plat-win']<br />
</code></p>
<p>Notice that <code>sys<span class="o">.</span>path</code> is a list of directory paths (only a few are shown here--your list may differ). These are the locations used by the Python interpreter when  it encounters an import statement. The Python interpreter or searches within these directories for the name of the module being imported. If the module isn't found in one of these directories, the import won't succeed. <br />
</p>
<p>The following code prints the  file name of the script last run in PythonWin.<br />
<code><br />
          &gt;&gt;&gt;<span class="n">sys.argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><br />
          'C:\\gispy\\sampleScripts\\ch02\\describe_fc.py'<br />
</code></p>
<p>The<code> sys</code>  module  is used to get the workspace from user input on line 11 in Figure 2.2 (<code><span class="n">arcpy.env.workspace = sys.argv</span>[1]</code>). Chapter 7 discusses this useful <code>sys</code> module variable in more depth. <br />
</p>
<p>The  <code>os</code> module allows you to access operating   system-related methods (<code>os</code> stands for operating system). The following code uses the <code>os</code> module to print a list of the files in the 'C:/gispy/data/ch02' directory:<br />
<code><br />
          &gt;&gt;&gt; <span class="key">import</span> os<br />
          &gt;&gt;&gt;<span class="n"> os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="s">&#39;C:/gispy/data/ch02&#39;</span><span class="p">)</span><br />
          ['fires.dbf', 'fires.prj', 'fires.sbn', 'fires.sbx', 'fires.shp', 'fires.shp.xml', 'fires.shx', 'park.dbf', 'park.prj', 'park.sbn', 'park.sbx', 'park.shp', 'park.shp.xml', 'park.shx']<br />
</code></p>
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><b class="head">2.5 Key terms</b><a name="keyterms" id="keyterms"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Integrated development environment (IDE)<br />
          Python script<br />
          ArcGIS Python window<br />
          PythonWin<br />
          PythonWin Interactive Window<br />
          PythonWin script window<br />
        Python prompt (<code>&gt;&gt;&gt;</code>)<br />
        Python interpreter<br />
          Window focus<br />
          Script arguments<br />
          Context highlighting<br />
          Code comments<br />
          Hash sign<br />
          Python keywords<br />
          Variables<br />
          Assignment statement<br />
          Dynamic typing<br />
          Block structure, block of code<br />
          Dedented<br />
          Tracebacks<br />
          Built-in functions, constants, and exceptions<br />
          Function arguments<br />
          Function signatures<br />
          Function parameters<br />
          Exceptions thrown<br />
<code>True</code>, <code>False</code>, <code>None</code><br />
<code>NameError</code>, <code>SyntaxError</code>, and <code>TypeError</code><br />
          Module<br />
          Standard modules<br />
<code>math</code>, <code>sys</code>, <code>os</code>, <code>shutil</code><br />
</p>
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><b class="head">2.6 Exercises</b><a name="exercises" id="exercises"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<br />
<br />
<ol>
<li>Set up your integrated development environment (IDE) software and check the functionality as described here: </li>
<ol type="a">
<li>To install PythonWin,
              <ol>
<li>Browse 'C:\gispy\sample_scripts\ch02\programs\PythonWin'.</li>
<li>Double-click on the executable ('exe') file.</li>
<li>Launch PythonWin. A PythonWin desktop icon should be created during installation. If not, search the machine for 'PythonWin.exe' and create a shortcut to this executable. When you first launch PythonWin, it will display the 'Interactive Window' with a prompt that looks just like the one in the ArcGIS Python window: <br />
<img src="../images/launchPython.png" alt="prompt" /><br />
</li>
<li>Test PythonWin.  Type <code>import arcpy</code> in the Interactive Window and press the 'Enter' key. If no error appears, everything is working. In other words, if you see only a prompt sign on the next line (<code>&gt;&gt;&gt;</code>), then it worked.    If, instead, you see red text, this is an error message. Check your ArcGIS software version. This book is designed for ArcGIS 10.1-10.2.2, which use the 2.7 version of Python. If you are using a different version of ArcGIS, you will need to get a different PythonWin executable. Start by searching online for 'pywin32 download', then navigate to the version you need. <br />
<table width="264" bgcolor="#eeeeee">
<tr>
<td width="256">Software versions
                        <table width="232" border="1">
<tr>
<td width="109"><strong>ArcGIS version</strong></td>
<td width="107"><strong>Python version</strong></td>
</tr>
<tr>
<td>10.1, 10.2</td>
<td>2.7</td>
</tr>
<tr>
<td>10</td>
<td>2.6</td>
</tr>
<tr>
<td>9.3</td>
<td>2.5</td>
</tr>
<tr>
<td>9.2</td>
<td>2.4.1</td>
</tr>
<tr>
<td>9.1</td>
<td>2.1</td>
</tr>
</table></td>
</tr>
</table>
<br />
</li>
</ol>
</li>
<li>Install PyScripter. To install PyScripter, browse to 'C:\gispy\sample_scripts\ch02\programs\PyScripter'. Double-click on the '.exe' file. Install using the defaults. PyScripter's equivalent of PythonWin's Interactive Window is the Python Interpreter window. Confirm that it is working correctly by typing <code>import arcpy</code> in the Python Interpreter window. Press the 'Enter' key. If you see only a prompt sign on the next line (<code>&gt;&gt;&gt;</code>), then it worked. If, instead, you see red text, this is an error message.  The ArcGIS Resources Python Forum is a good place for additional trouble-shooting.<br />
<br />
</li>
</ol>
<li>Type the code statements below in the Interactive Window. Notice that the built-in type function gives two different results -- first <code>str</code> and second <code>int</code>. Which word or phrase in the 'Key terms' list at the end of this chapter explains this phenomenon?<br />
<br />
<code>&gt;&gt;&gt; month <span class="o">=</span> <span class="s">'December'</span> <br />
&gt;&gt;&gt; <span class="nb">type</span><span class="p">(</span><span class="n">month</span><span class="p">)</span><br />
&gt;&gt;&gt; month <span class="o">=</span> <span class="num">12</span><br />
&gt;&gt;&gt; <span class="nb">type</span><span class="p">(</span><span class="n">month</span><span class="p">)</span><br />
</code><br />
</li>
<li>Match each key term with the most closely related statement. There are two distracter statements that should not be used. <br />
<table width="573" border="3">
<tbody>
<tr>
<td width="252" valign="top">Key term</td>
<td width="301" valign="top">Statement</td>
</tr>
<tr>
<td valign="top"><ol>
<li>Python keyword<br />
<br />
</li>
<li>IDE<br />
<br />
</li>
<li>Hash sign<br />
<br />
</li>
<li>Tracebacks<br />
<br />
</li>
<li> Window focus<br />
<br />
</li>
<li>Script arguments<br />
<br />
</li>
<li>Context highlighting<br />
<br />
</li>
<li>Assignment statement<br />
<br />
</li>
<li> Dynamic typing<br />
<br />
</li>
<li>False<br />
<br />
</li>
<li> NameError<br />
<br />
</li>
<li>Dedented code<br />
<br />
</li>
<li>math, os, and sys<br />
</li>
</ol>
</td>
<td valign="top"><ol type="A">
<li>This is a  built-in boolean constant.<br />
<br />
</li>
<li>If this isn't in the Script Window, you might save the Interactive Window by mistake.<br />
<br />
</li>
<li>Special font formatting (such as color) based on meaning of text in the code.<br />
<br />
</li>
<li>The controversial debates surrounding Python versus Perl scripting languages.<br />
<br />
</li>
<li><code><span class="key">print</span></code> is written in bold blue because it is one of these.<br />
<br />
</li>
<li>If a variable name is misspelled, this can occur.<br />
<br />
</li>
<li>A specialized editor for developing scripts.<br />
<br />
</li>
<li>Information passed into a script by the user.<br />
<br />
</li>
<li>Automatically set the data type of a variable when a value is assigned.<br />
<br />
</li>
<li><code>x <span class="o">=</span> 5</code> is an example of one of these. <br />
<br />
</li>
<li>Messages printed when exceptions are thrown.<br />
<br />
</li>
<li>This signals the end of a related block of code.<br />
<br />
</li>
<li>The shape of a camel's back.<br />
<br />
</li>
<li>Code following this character is only meant for the human reader. <br />
<br />
</li>
<li>These are examples of Python standard modules</li>
</ol></td>
</tr>
</tbody>
</table>
<br />
</li>
<li>Type the following lines of code in the Interactive Window. Each line of code should raise a built-in exception. Report the<em> name</em> of the built-in exception that is raised
            (part a is done for you).<br />
<br />
<ol type="a">
<li><code><span class="k">class</span> <span class="err">= </span><span class="s">&#39;combustibles&#39;</span></code><br />
<br />
                SyntaxError<br />
<br />
</li>
<li><code><span class="s">'five'</span><span style="vertical-align: top;"><span class="o"> + </span></span><span class="num">6</span> </code><br />
<br />
</li>
<li><code>Min</code><br />
<br />
</li>
<li><code><span class="nb">int</span><span class="p">(</span><span class="s">&#39;five&#39;</span><span class="p">)</span></code><br />
<br />
</li>
<li><code><span class="mi">5</span><span class="o">/</span><span class="mi">0</span></code><br />
<br />
</li>
<li><code>input file <span class="o">=</span> <span class="s">'park.shp'</span></code></li>
</ol>
</li>
<br />
<li><strong>times.py</strong> Write a script named 'times.py' that finds the product of two input integers and prints the results. Start by opening 'add_version2.py', modifying the last two lines and saving the file with the name 'times.py'. An asterisk is used as the multiplication operator in Python, so you'll use <code>c <span class="o">=</span> a * b</code> to multiply. Also change the comment on line 1 to reflect the modified functionality. Run the script using two integer arguments to check that it works. The example below shows the expected behavior. Check your results against this example.<br />
<br />
            Example:<br />
            Two arguments given in the 'Run Script' window Argument text box:<br />
            2 3<br />
<br />
            Output printed in the Interactive Window:<br />
<code><br />
            &gt;&gt;&gt; The product is 6.<br />
</code></li>
</ol><a href="#top">back to top</a> <a href="#top">back to top</a> <blockquote>
<p> Interactive Window examples are given as text with Python prompts. To try the examples yourself, note that the prompt indicates that you should type what follows on that
                  line in the Interactive Window, but don't type the '&gt;&gt;&gt;' marks. </p>
</blockquote><p><strong>Listing Python scripts in ArcCatalog and Windows Explorer</strong></p>
<ol type="I">
<li>By default, ArcCatalog does not display scripts in the TOC. To change this setting, use the following steps:<br />
<ol>
<li>Customize menu &gt; ArcCatalog Options &gt; File Types tab &gt; New Type </li>
<li>Enter <em>Python</em> for Description and <em>py</em> for File extension </li>
<li> Import File Type From Registry... </li>
<li>Click 'OK' to complete the process.</li>
</ol>
<p>It may be necessary to restart ArcCatalog in order to view the python files.</p>
</li>
<li>
<p>By default, Windows users can see Python scripts in Windows Explorer, but the file extension may be hidden. If you don't
                    see the '.py' extension on Python files, change the settings under the
                    Windows Explorer tools menu. The procedure varies depending on the Windows version. For example, in Windows 7 follow these instructions:</p>
<ol>
<li> Tools &gt; FolderOptions... &gt; View. </li>
<li>Uncheck 'Hide extensions for known file types'.</li>
<li>Click 'Apply to All Folders'.<br />
<br />
</li>
</ol>
                  and in Windows 8 click View, then check 'File name extensions'. </li>
</ol><strong>Table 2.1</strong>: Buttons, keyboard shortcuts, and menu instructions for some basic actions in PythonWin.<br />
<table width="859" border="3" bgcolor="#eeeeeee">
<tr>
<td width="195" bgcolor="#CCCCCC"><span class="style4"><strong>Action</strong></span></td>
<td width="51" bgcolor="#CCCCCC"><strong>Button</strong></td>
<td width="285" bgcolor="#CCCCCC"><span class="style4"><strong>Keyboard shortcut</strong></span></td>
<td width="296" bgcolor="#CCCCCC"><span class="style4"><strong>Menu</strong></span></td>
</tr>
<tr>
<td>Create a new script window</td>
<td><div align="center"><img src="../images/newScript.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + n</td>
<td>File &gt; New </td>
</tr>
<tr>
<td>Open a script</td>
<td><div align="center"><img src="../images/openScript.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + o</td>
<td>File &gt; Open</td>
</tr>
<tr>
<td>Save a script</td>
<td><div align="center"><img src="../images/saveScript.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + s</td>
<td>File &gt; Save</td>
</tr>
<tr>
<td>Close script</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>File &gt; Close</td>
</tr>
<tr>
<td>Run a script</td>
<td><div align="center"><img src="../images/running_man.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + r</td>
<td>File &gt; Run</td>
</tr>
<tr>
<td>Tile the windows</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>Click in Script Window, then:  Window &gt; Tile</td>
</tr>
<tr>
<td>Show line numbers</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>View &gt; Options &gt; Editor &gt; Set Line numbers &gt;= 30</td>
</tr>
<tr>
<td>Shift focus between windows</td>
<td>&nbsp;</td>
<td>Ctrl+Tab</td>
<td>&nbsp;</td>
</tr>
<tr>
<td>Open/close Interactive Window</td>
<td><div align="center"><img src="../images/interactiveButton.png" alt="inter" width="26" height="26" /></div></td>
<td>&nbsp;</td>
<td>View &gt; Interactive Window</td>
</tr>
<tr>
<td>Clear the Interactive Window</td>
<td>&nbsp;</td>
<td> Ctrl+Tab to the Interactive Window, Ctrl+a, del</td>
<td>Click in Interactive Window, Edit &gt; Select All, Edit &gt; Delete</td>
</tr>
<tr>
<td>Toggle whitespace</td>
<td>&nbsp;</td>
<td>Ctrl+W</td>
<td>View &gt; Options &gt; Tabs and whitespace &gt; check 'View whitespace'</td>
</tr>
</table>
<span class="style4"><strong>Action</strong></span><strong>Button</strong><span class="style4"><strong>Keyboard shortcut</strong></span><span class="style4"><strong>Menu</strong></span>Create a new script window<div align="center"><img src="../images/newScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + nFile &gt; New Open a script<div align="center"><img src="../images/openScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + oFile &gt; OpenSave a script<div align="center"><img src="../images/saveScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + sFile &gt; SaveClose script&nbsp;&nbsp;File &gt; CloseRun a script<div align="center"><img src="../images/running_man.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + rFile &gt; RunTile the windows&nbsp;&nbsp;Click in Script Window, then:  Window &gt; TileShow line numbers&nbsp;&nbsp;View &gt; Options &gt; Editor &gt; Set Line numbers &gt;= 30Shift focus between windows&nbsp;Ctrl+Tab&nbsp;Open/close Interactive Window<div align="center"><img src="../images/interactiveButton.png" alt="inter" width="26" height="26" /></div>&nbsp;View &gt; Interactive WindowClear the Interactive Window&nbsp; Ctrl+Tab to the Interactive Window, Ctrl+a, delClick in Interactive Window, Edit &gt; Select All, Edit &gt; DeleteToggle whitespace&nbsp;Ctrl+WView &gt; Options &gt; Tabs and whitespace &gt; check 'View whitespace'<a href="#top">back to top</a> <code><br />
<span class="comment"># add_version1.py</span><span class="comment">: Add two numbers.</span> <br />
                  a <span class="o">=</span> <span class="num">5</span><br />
                  b <span class="o">=</span> <span class="num">6</span><br />
<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <br />
<span class="k">print</span> <span class="s">&quot;The sum is {0}.&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="comment"> # .format(c) substitutes the value of c for {0} in the print statement.</span><br />
</code><code><br />
<span class="comment"># add_version2.py</span><span class="comment">:  Add two numbers
                    given as arguments.</span><br />
<br />
<span class="key">import</span> sys <span class="comment"># Now the script can use the built-in Python system module.</span><br />
<br />
                    a <span class="o">=</span> int(sys.argv[<span class="num">1</span>]) <span class="comment"># sys.argv is the <em><strong>sys</strong></em>tem <em><strong>arg</strong></em>ument <em><strong>v</strong></em>ector.</span><br />
                    b <span class="o">=</span> int(sys.argv[<span class="num">2</span>]) <span class="comment"># int changes the input to an <strong>integer</strong> number.</span><br />
<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <br />
<span class="k">print</span> <span class="s">&quot;The sum is {0}.&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="comment"># .format(c) substitutes the value of c for {0} in the print statement.</span><br />
</code><a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <p><strong>Table 2.2 </strong>Python 2.7 keywords. <br />
</p>
<table width="385" border="0" bgcolor="#eeeeeee">
<tr>
<td width="379"><pre class="key"><font>and       del       from      not       while      <br />as        elif      global    or        with       <br />assert    else      if        pass      yield      <br />break     except    import    print                <br />class     exec      in        raise                <br />continue  finally   is        return               <br />def       for       lambda    try</font></pre></td>
</tr>
</table><pre class="key"><font>and       del       from      not       while      <br />as        elif      global    or        with       <br />assert    else      if        pass      yield      <br />break     except    import    print                <br />class     exec      in        raise                <br />continue  finally   is        return               <br />def       for       lambda    try</font></pre><a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <blockquote>
<p><em> Look for an explanation of the error in the last line of a traceback message.</em></p>
</blockquote><a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> Software versions
                        <table width="232" border="1">
<tr>
<td width="109"><strong>ArcGIS version</strong></td>
<td width="107"><strong>Python version</strong></td>
</tr>
<tr>
<td>10.1, 10.2</td>
<td>2.7</td>
</tr>
<tr>
<td>10</td>
<td>2.6</td>
</tr>
<tr>
<td>9.3</td>
<td>2.5</td>
</tr>
<tr>
<td>9.2</td>
<td>2.4.1</td>
</tr>
<tr>
<td>9.1</td>
<td>2.1</td>
</tr>
</table><strong>ArcGIS version</strong><strong>Python version</strong>10.1, 10.22.7102.69.32.59.22.4.19.12.1Key termStatement<ol>
<li>Python keyword<br />
<br />
</li>
<li>IDE<br />
<br />
</li>
<li>Hash sign<br />
<br />
</li>
<li>Tracebacks<br />
<br />
</li>
<li> Window focus<br />
<br />
</li>
<li>Script arguments<br />
<br />
</li>
<li>Context highlighting<br />
<br />
</li>
<li>Assignment statement<br />
<br />
</li>
<li> Dynamic typing<br />
<br />
</li>
<li>False<br />
<br />
</li>
<li> NameError<br />
<br />
</li>
<li>Dedented code<br />
<br />
</li>
<li>math, os, and sys<br />
</li>
</ol>
<ol type="A">
<li>This is a  built-in boolean constant.<br />
<br />
</li>
<li>If this isn't in the Script Window, you might save the Interactive Window by mistake.<br />
<br />
</li>
<li>Special font formatting (such as color) based on meaning of text in the code.<br />
<br />
</li>
<li>The controversial debates surrounding Python versus Perl scripting languages.<br />
<br />
</li>
<li><code><span class="key">print</span></code> is written in bold blue because it is one of these.<br />
<br />
</li>
<li>If a variable name is misspelled, this can occur.<br />
<br />
</li>
<li>A specialized editor for developing scripts.<br />
<br />
</li>
<li>Information passed into a script by the user.<br />
<br />
</li>
<li>Automatically set the data type of a variable when a value is assigned.<br />
<br />
</li>
<li><code>x <span class="o">=</span> 5</code> is an example of one of these. <br />
<br />
</li>
<li>Messages printed when exceptions are thrown.<br />
<br />
</li>
<li>This signals the end of a related block of code.<br />
<br />
</li>
<li>The shape of a camel's back.<br />
<br />
</li>
<li>Code following this character is only meant for the human reader. <br />
<br />
</li>
<li>These are examples of Python standard modules</li>
</ol><strong class="head">2.1 Where to write code </strong><a name="IDE" id="models2"></a><a href="#top">back to top</a> <span class="head">2.2 How to run code in PythonWin</span><a name="run" id="run"></a><a href="#top">back to top</a> <blockquote>
<p> Interactive Window examples are given as text with Python prompts. To try the examples yourself, note that the prompt indicates that you should type what follows on that
                  line in the Interactive Window, but don't type the '&gt;&gt;&gt;' marks. </p>
</blockquote><p><strong>Listing Python scripts in ArcCatalog and Windows Explorer</strong></p>
<ol type="I">
<li>By default, ArcCatalog does not display scripts in the TOC. To change this setting, use the following steps:<br />
<ol>
<li>Customize menu &gt; ArcCatalog Options &gt; File Types tab &gt; New Type </li>
<li>Enter <em>Python</em> for Description and <em>py</em> for File extension </li>
<li> Import File Type From Registry... </li>
<li>Click 'OK' to complete the process.</li>
</ol>
<p>It may be necessary to restart ArcCatalog in order to view the python files.</p>
</li>
<li>
<p>By default, Windows users can see Python scripts in Windows Explorer, but the file extension may be hidden. If you don't
                    see the '.py' extension on Python files, change the settings under the
                    Windows Explorer tools menu. The procedure varies depending on the Windows version. For example, in Windows 7 follow these instructions:</p>
<ol>
<li> Tools &gt; FolderOptions... &gt; View. </li>
<li>Uncheck 'Hide extensions for known file types'.</li>
<li>Click 'Apply to All Folders'.<br />
<br />
</li>
</ol>
                  and in Windows 8 click View, then check 'File name extensions'. </li>
</ol><strong>Table 2.1</strong>: Buttons, keyboard shortcuts, and menu instructions for some basic actions in PythonWin.<br />
<table width="859" border="3" bgcolor="#eeeeeee">
<tr>
<td width="195" bgcolor="#CCCCCC"><span class="style4"><strong>Action</strong></span></td>
<td width="51" bgcolor="#CCCCCC"><strong>Button</strong></td>
<td width="285" bgcolor="#CCCCCC"><span class="style4"><strong>Keyboard shortcut</strong></span></td>
<td width="296" bgcolor="#CCCCCC"><span class="style4"><strong>Menu</strong></span></td>
</tr>
<tr>
<td>Create a new script window</td>
<td><div align="center"><img src="../images/newScript.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + n</td>
<td>File &gt; New </td>
</tr>
<tr>
<td>Open a script</td>
<td><div align="center"><img src="../images/openScript.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + o</td>
<td>File &gt; Open</td>
</tr>
<tr>
<td>Save a script</td>
<td><div align="center"><img src="../images/saveScript.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + s</td>
<td>File &gt; Save</td>
</tr>
<tr>
<td>Close script</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>File &gt; Close</td>
</tr>
<tr>
<td>Run a script</td>
<td><div align="center"><img src="../images/running_man.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + r</td>
<td>File &gt; Run</td>
</tr>
<tr>
<td>Tile the windows</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>Click in Script Window, then:  Window &gt; Tile</td>
</tr>
<tr>
<td>Show line numbers</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>View &gt; Options &gt; Editor &gt; Set Line numbers &gt;= 30</td>
</tr>
<tr>
<td>Shift focus between windows</td>
<td>&nbsp;</td>
<td>Ctrl+Tab</td>
<td>&nbsp;</td>
</tr>
<tr>
<td>Open/close Interactive Window</td>
<td><div align="center"><img src="../images/interactiveButton.png" alt="inter" width="26" height="26" /></div></td>
<td>&nbsp;</td>
<td>View &gt; Interactive Window</td>
</tr>
<tr>
<td>Clear the Interactive Window</td>
<td>&nbsp;</td>
<td> Ctrl+Tab to the Interactive Window, Ctrl+a, del</td>
<td>Click in Interactive Window, Edit &gt; Select All, Edit &gt; Delete</td>
</tr>
<tr>
<td>Toggle whitespace</td>
<td>&nbsp;</td>
<td>Ctrl+W</td>
<td>View &gt; Options &gt; Tabs and whitespace &gt; check 'View whitespace'</td>
</tr>
</table>
<span class="style4"><strong>Action</strong></span><strong>Button</strong><span class="style4"><strong>Keyboard shortcut</strong></span><span class="style4"><strong>Menu</strong></span>Create a new script window<div align="center"><img src="../images/newScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + nFile &gt; New Open a script<div align="center"><img src="../images/openScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + oFile &gt; OpenSave a script<div align="center"><img src="../images/saveScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + sFile &gt; SaveClose script&nbsp;&nbsp;File &gt; CloseRun a script<div align="center"><img src="../images/running_man.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + rFile &gt; RunTile the windows&nbsp;&nbsp;Click in Script Window, then:  Window &gt; TileShow line numbers&nbsp;&nbsp;View &gt; Options &gt; Editor &gt; Set Line numbers &gt;= 30Shift focus between windows&nbsp;Ctrl+Tab&nbsp;Open/close Interactive Window<div align="center"><img src="../images/interactiveButton.png" alt="inter" width="26" height="26" /></div>&nbsp;View &gt; Interactive WindowClear the Interactive Window&nbsp; Ctrl+Tab to the Interactive Window, Ctrl+a, delClick in Interactive Window, Edit &gt; Select All, Edit &gt; DeleteToggle whitespace&nbsp;Ctrl+WView &gt; Options &gt; Tabs and whitespace &gt; check 'View whitespace'<span class="style4"><strong>Action</strong></span><strong>Button</strong><span class="style4"><strong>Keyboard shortcut</strong></span><span class="style4"><strong>Menu</strong></span>Create a new script window<div align="center"><img src="../images/newScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + nFile &gt; New Open a script<div align="center"><img src="../images/openScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + oFile &gt; OpenSave a script<div align="center"><img src="../images/saveScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + sFile &gt; SaveClose script&nbsp;&nbsp;File &gt; CloseRun a script<div align="center"><img src="../images/running_man.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + rFile &gt; RunTile the windows&nbsp;&nbsp;Click in Script Window, then:  Window &gt; TileShow line numbers&nbsp;&nbsp;View &gt; Options &gt; Editor &gt; Set Line numbers &gt;= 30Shift focus between windows&nbsp;Ctrl+Tab&nbsp;Open/close Interactive Window<div align="center"><img src="../images/interactiveButton.png" alt="inter" width="26" height="26" /></div>&nbsp;View &gt; Interactive WindowClear the Interactive Window&nbsp; Ctrl+Tab to the Interactive Window, Ctrl+a, delClick in Interactive Window, Edit &gt; Select All, Edit &gt; DeleteToggle whitespace&nbsp;Ctrl+WView &gt; Options &gt; Tabs and whitespace &gt; check 'View whitespace'<strong class="head">2.3 How to pass input to a script</strong><a name="arguments" id="arguments"></a><a href="#top">back to top</a> <code><br />
<span class="comment"># add_version1.py</span><span class="comment">: Add two numbers.</span> <br />
                  a <span class="o">=</span> <span class="num">5</span><br />
                  b <span class="o">=</span> <span class="num">6</span><br />
<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <br />
<span class="k">print</span> <span class="s">&quot;The sum is {0}.&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="comment"> # .format(c) substitutes the value of c for {0} in the print statement.</span><br />
</code><code><br />
<span class="comment"># add_version2.py</span><span class="comment">:  Add two numbers
                    given as arguments.</span><br />
<br />
<span class="key">import</span> sys <span class="comment"># Now the script can use the built-in Python system module.</span><br />
<br />
                    a <span class="o">=</span> int(sys.argv[<span class="num">1</span>]) <span class="comment"># sys.argv is the <em><strong>sys</strong></em>tem <em><strong>arg</strong></em>ument <em><strong>v</strong></em>ector.</span><br />
                    b <span class="o">=</span> int(sys.argv[<span class="num">2</span>]) <span class="comment"># int changes the input to an <strong>integer</strong> number.</span><br />
<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <br />
<span class="k">print</span> <span class="s">&quot;The sum is {0}.&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="comment"># .format(c) substitutes the value of c for {0} in the print statement.</span><br />
</code><b class="head">2.4 Python components</b><a name="components" id="keyterms2"></a><a href="#top">back to top</a> <strong><span class="head">2.4.1 Comments</span></strong><a href="#top">back to top</a> <strong><span class="head">2.4.2 Keywords</span></strong><a href="#top">back to top</a> <p><strong>Table 2.2 </strong>Python 2.7 keywords. <br />
</p>
<table width="385" border="0" bgcolor="#eeeeeee">
<tr>
<td width="379"><pre class="key"><font>and       del       from      not       while      <br />as        elif      global    or        with       <br />assert    else      if        pass      yield      <br />break     except    import    print                <br />class     exec      in        raise                <br />continue  finally   is        return               <br />def       for       lambda    try</font></pre></td>
</tr>
</table><pre class="key"><font>and       del       from      not       while      <br />as        elif      global    or        with       <br />assert    else      if        pass      yield      <br />break     except    import    print                <br />class     exec      in        raise                <br />continue  finally   is        return               <br />def       for       lambda    try</font></pre><pre class="key"><font>and       del       from      not       while      <br />as        elif      global    or        with       <br />assert    else      if        pass      yield      <br />break     except    import    print                <br />class     exec      in        raise                <br />continue  finally   is        return               <br />def       for       lambda    try</font></pre><strong><span class="head">2.4.3 Indentation</span></strong><a href="#top">back to top</a> <strong><span class="head">2.4.4 Built-in functions</span></strong><a href="#top">back to top</a> <code>functionName(argument1, 
                argument2, argument3,...)</code><strong><span class="head">2.4.5 Variables, assignment statements, and dynamic typing</span></strong><a href="#top">back to top</a> <strong><span class="head">2.4.6 Naming variables and tracebacks</span></strong><a href="#top">back to top</a> <blockquote>
<p><em> Look for an explanation of the error in the last line of a traceback message.</em></p>
</blockquote><strong><span class="head">2.4.7 Built-in constants and exceptions</span></strong><a href="#top">back to top</a> <strong><span class="head">2.4.8 Standard modules</span></strong><a name="standardModules" id="models"></a><a href="#top">back to top</a> <p align="left"><code><span class="key">import </span>moduleName1, moduleName2, ...</code><br />
</p><b class="head">2.5 Key terms</b><a name="keyterms" id="keyterms"></a><a href="#top">back to top</a> <b class="head">2.6 Exercises</b><a name="exercises" id="exercises"></a><a href="#top">back to top</a> Software versions
                        <table width="232" border="1">
<tr>
<td width="109"><strong>ArcGIS version</strong></td>
<td width="107"><strong>Python version</strong></td>
</tr>
<tr>
<td>10.1, 10.2</td>
<td>2.7</td>
</tr>
<tr>
<td>10</td>
<td>2.6</td>
</tr>
<tr>
<td>9.3</td>
<td>2.5</td>
</tr>
<tr>
<td>9.2</td>
<td>2.4.1</td>
</tr>
<tr>
<td>9.1</td>
<td>2.1</td>
</tr>
</table><strong>ArcGIS version</strong><strong>Python version</strong>10.1, 10.22.7102.69.32.59.22.4.19.12.1<strong>ArcGIS version</strong><strong>Python version</strong>10.1, 10.22.7102.69.32.59.22.4.19.12.1Key termStatement<ol>
<li>Python keyword<br />
<br />
</li>
<li>IDE<br />
<br />
</li>
<li>Hash sign<br />
<br />
</li>
<li>Tracebacks<br />
<br />
</li>
<li> Window focus<br />
<br />
</li>
<li>Script arguments<br />
<br />
</li>
<li>Context highlighting<br />
<br />
</li>
<li>Assignment statement<br />
<br />
</li>
<li> Dynamic typing<br />
<br />
</li>
<li>False<br />
<br />
</li>
<li> NameError<br />
<br />
</li>
<li>Dedented code<br />
<br />
</li>
<li>math, os, and sys<br />
</li>
</ol>
<ol type="A">
<li>This is a  built-in boolean constant.<br />
<br />
</li>
<li>If this isn't in the Script Window, you might save the Interactive Window by mistake.<br />
<br />
</li>
<li>Special font formatting (such as color) based on meaning of text in the code.<br />
<br />
</li>
<li>The controversial debates surrounding Python versus Perl scripting languages.<br />
<br />
</li>
<li><code><span class="key">print</span></code> is written in bold blue because it is one of these.<br />
<br />
</li>
<li>If a variable name is misspelled, this can occur.<br />
<br />
</li>
<li>A specialized editor for developing scripts.<br />
<br />
</li>
<li>Information passed into a script by the user.<br />
<br />
</li>
<li>Automatically set the data type of a variable when a value is assigned.<br />
<br />
</li>
<li><code>x <span class="o">=</span> 5</code> is an example of one of these. <br />
<br />
</li>
<li>Messages printed when exceptions are thrown.<br />
<br />
</li>
<li>This signals the end of a related block of code.<br />
<br />
</li>
<li>The shape of a camel's back.<br />
<br />
</li>
<li>Code following this character is only meant for the human reader. <br />
<br />
</li>
<li>These are examples of Python standard modules</li>
</ol>------------------------------------------------------------rows: 13 cols: 4<strong>Table 2.1</strong>: Buttons, keyboard shortcuts, and menu instructions for some basic actions in PythonWin.<br />
<table width="859" border="3" bgcolor="#eeeeeee">
<tr>
<td width="195" bgcolor="#CCCCCC"><span class="style4"><strong>Action</strong></span></td>
<td width="51" bgcolor="#CCCCCC"><strong>Button</strong></td>
<td width="285" bgcolor="#CCCCCC"><span class="style4"><strong>Keyboard shortcut</strong></span></td>
<td width="296" bgcolor="#CCCCCC"><span class="style4"><strong>Menu</strong></span></td>
</tr>
<tr>
<td>Create a new script window</td>
<td><div align="center"><img src="../images/newScript.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + n</td>
<td>File &gt; New </td>
</tr>
<tr>
<td>Open a script</td>
<td><div align="center"><img src="../images/openScript.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + o</td>
<td>File &gt; Open</td>
</tr>
<tr>
<td>Save a script</td>
<td><div align="center"><img src="../images/saveScript.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + s</td>
<td>File &gt; Save</td>
</tr>
<tr>
<td>Close script</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>File &gt; Close</td>
</tr>
<tr>
<td>Run a script</td>
<td><div align="center"><img src="../images/running_man.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + r</td>
<td>File &gt; Run</td>
</tr>
<tr>
<td>Tile the windows</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>Click in Script Window, then:  Window &gt; Tile</td>
</tr>
<tr>
<td>Show line numbers</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>View &gt; Options &gt; Editor &gt; Set Line numbers &gt;= 30</td>
</tr>
<tr>
<td>Shift focus between windows</td>
<td>&nbsp;</td>
<td>Ctrl+Tab</td>
<td>&nbsp;</td>
</tr>
<tr>
<td>Open/close Interactive Window</td>
<td><div align="center"><img src="../images/interactiveButton.png" alt="inter" width="26" height="26" /></div></td>
<td>&nbsp;</td>
<td>View &gt; Interactive Window</td>
</tr>
<tr>
<td>Clear the Interactive Window</td>
<td>&nbsp;</td>
<td> Ctrl+Tab to the Interactive Window, Ctrl+a, del</td>
<td>Click in Interactive Window, Edit &gt; Select All, Edit &gt; Delete</td>
</tr>
<tr>
<td>Toggle whitespace</td>
<td>&nbsp;</td>
<td>Ctrl+W</td>
<td>View &gt; Options &gt; Tabs and whitespace &gt; check 'View whitespace'</td>
</tr>
</table>
<span class="style4"><strong>Action</strong></span><strong>Button</strong><span class="style4"><strong>Keyboard shortcut</strong></span><span class="style4"><strong>Menu</strong></span>Create a new script window<div align="center"><img src="../images/newScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + nFile &gt; New Open a script<div align="center"><img src="../images/openScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + oFile &gt; OpenSave a script<div align="center"><img src="../images/saveScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + sFile &gt; SaveClose script&nbsp;&nbsp;File &gt; CloseRun a script<div align="center"><img src="../images/running_man.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + rFile &gt; RunTile the windows&nbsp;&nbsp;Click in Script Window, then:  Window &gt; TileShow line numbers&nbsp;&nbsp;View &gt; Options &gt; Editor &gt; Set Line numbers &gt;= 30Shift focus between windows&nbsp;Ctrl+Tab&nbsp;Open/close Interactive Window<div align="center"><img src="../images/interactiveButton.png" alt="inter" width="26" height="26" /></div>&nbsp;View &gt; Interactive WindowClear the Interactive Window&nbsp; Ctrl+Tab to the Interactive Window, Ctrl+a, delClick in Interactive Window, Edit &gt; Select All, Edit &gt; DeleteToggle whitespace&nbsp;Ctrl+WView &gt; Options &gt; Tabs and whitespace &gt; check 'View whitespace'<span class="style4"><strong>Action</strong></span><strong>Button</strong><span class="style4"><strong>Keyboard shortcut</strong></span><span class="style4"><strong>Menu</strong></span>Create a new script window<div align="center"><img src="../images/newScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + nFile &gt; New Open a script<div align="center"><img src="../images/openScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + oFile &gt; OpenSave a script<div align="center"><img src="../images/saveScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + sFile &gt; SaveClose script&nbsp;&nbsp;File &gt; CloseRun a script<div align="center"><img src="../images/running_man.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + rFile &gt; RunTile the windows&nbsp;&nbsp;Click in Script Window, then:  Window &gt; TileShow line numbers&nbsp;&nbsp;View &gt; Options &gt; Editor &gt; Set Line numbers &gt;= 30Shift focus between windows&nbsp;Ctrl+Tab&nbsp;Open/close Interactive Window<div align="center"><img src="../images/interactiveButton.png" alt="inter" width="26" height="26" /></div>&nbsp;View &gt; Interactive WindowClear the Interactive Window&nbsp; Ctrl+Tab to the Interactive Window, Ctrl+a, delClick in Interactive Window, Edit &gt; Select All, Edit &gt; DeleteToggle whitespace&nbsp;Ctrl+WView &gt; Options &gt; Tabs and whitespace &gt; check 'View whitespace'------------------------------------------------------------rows: 13 cols: 4<strong>Table 2.1</strong>: Buttons, keyboard shortcuts, and menu instructions for some basic actions in PythonWin.<br />
<table width="859" border="3" bgcolor="#eeeeeee">
<tr>
<td width="195" bgcolor="#CCCCCC"><span class="style4"><strong>Action</strong></span></td>
<td width="51" bgcolor="#CCCCCC"><strong>Button</strong></td>
<td width="285" bgcolor="#CCCCCC"><span class="style4"><strong>Keyboard shortcut</strong></span></td>
<td width="296" bgcolor="#CCCCCC"><span class="style4"><strong>Menu</strong></span></td>
</tr>
<tr>
<td>Create a new script window</td>
<td><div align="center"><img src="../images/newScript.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + n</td>
<td>File &gt; New </td>
</tr>
<tr>
<td>Open a script</td>
<td><div align="center"><img src="../images/openScript.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + o</td>
<td>File &gt; Open</td>
</tr>
<tr>
<td>Save a script</td>
<td><div align="center"><img src="../images/saveScript.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + s</td>
<td>File &gt; Save</td>
</tr>
<tr>
<td>Close script</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>File &gt; Close</td>
</tr>
<tr>
<td>Run a script</td>
<td><div align="center"><img src="../images/running_man.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + r</td>
<td>File &gt; Run</td>
</tr>
<tr>
<td>Tile the windows</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>Click in Script Window, then:  Window &gt; Tile</td>
</tr>
<tr>
<td>Show line numbers</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>View &gt; Options &gt; Editor &gt; Set Line numbers &gt;= 30</td>
</tr>
<tr>
<td>Shift focus between windows</td>
<td>&nbsp;</td>
<td>Ctrl+Tab</td>
<td>&nbsp;</td>
</tr>
<tr>
<td>Open/close Interactive Window</td>
<td><div align="center"><img src="../images/interactiveButton.png" alt="inter" width="26" height="26" /></div></td>
<td>&nbsp;</td>
<td>View &gt; Interactive Window</td>
</tr>
<tr>
<td>Clear the Interactive Window</td>
<td>&nbsp;</td>
<td> Ctrl+Tab to the Interactive Window, Ctrl+a, del</td>
<td>Click in Interactive Window, Edit &gt; Select All, Edit &gt; Delete</td>
</tr>
<tr>
<td>Toggle whitespace</td>
<td>&nbsp;</td>
<td>Ctrl+W</td>
<td>View &gt; Options &gt; Tabs and whitespace &gt; check 'View whitespace'</td>
</tr>
</table>
<span class="style4"><strong>Action</strong></span><strong>Button</strong><span class="style4"><strong>Keyboard shortcut</strong></span><span class="style4"><strong>Menu</strong></span>Create a new script window<div align="center"><img src="../images/newScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + nFile &gt; New Open a script<div align="center"><img src="../images/openScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + oFile &gt; OpenSave a script<div align="center"><img src="../images/saveScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + sFile &gt; SaveClose script&nbsp;&nbsp;File &gt; CloseRun a script<div align="center"><img src="../images/running_man.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + rFile &gt; RunTile the windows&nbsp;&nbsp;Click in Script Window, then:  Window &gt; TileShow line numbers&nbsp;&nbsp;View &gt; Options &gt; Editor &gt; Set Line numbers &gt;= 30Shift focus between windows&nbsp;Ctrl+Tab&nbsp;Open/close Interactive Window<div align="center"><img src="../images/interactiveButton.png" alt="inter" width="26" height="26" /></div>&nbsp;View &gt; Interactive WindowClear the Interactive Window&nbsp; Ctrl+Tab to the Interactive Window, Ctrl+a, delClick in Interactive Window, Edit &gt; Select All, Edit &gt; DeleteToggle whitespace&nbsp;Ctrl+WView &gt; Options &gt; Tabs and whitespace &gt; check 'View whitespace'<span class="style4"><strong>Action</strong></span><strong>Button</strong><span class="style4"><strong>Keyboard shortcut</strong></span><span class="style4"><strong>Menu</strong></span>Create a new script window<div align="center"><img src="../images/newScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + nFile &gt; New Open a script<div align="center"><img src="../images/openScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + oFile &gt; OpenSave a script<div align="center"><img src="../images/saveScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + sFile &gt; SaveClose script&nbsp;&nbsp;File &gt; CloseRun a script<div align="center"><img src="../images/running_man.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + rFile &gt; RunTile the windows&nbsp;&nbsp;Click in Script Window, then:  Window &gt; TileShow line numbers&nbsp;&nbsp;View &gt; Options &gt; Editor &gt; Set Line numbers &gt;= 30Shift focus between windows&nbsp;Ctrl+Tab&nbsp;Open/close Interactive Window<div align="center"><img src="../images/interactiveButton.png" alt="inter" width="26" height="26" /></div>&nbsp;View &gt; Interactive WindowClear the Interactive Window&nbsp; Ctrl+Tab to the Interactive Window, Ctrl+a, delClick in Interactive Window, Edit &gt; Select All, Edit &gt; DeleteToggle whitespace&nbsp;Ctrl+WView &gt; Options &gt; Tabs and whitespace &gt; check 'View whitespace'------------------------------------------------------------rows: 13 cols: 4<strong>Table 2.1</strong>: Buttons, keyboard shortcuts, and menu instructions for some basic actions in PythonWin.<br />
<table width="859" border="3" bgcolor="#eeeeeee">
<tr>
<td width="195" bgcolor="#CCCCCC"><span class="style4"><strong>Action</strong></span></td>
<td width="51" bgcolor="#CCCCCC"><strong>Button</strong></td>
<td width="285" bgcolor="#CCCCCC"><span class="style4"><strong>Keyboard shortcut</strong></span></td>
<td width="296" bgcolor="#CCCCCC"><span class="style4"><strong>Menu</strong></span></td>
</tr>
<tr>
<td>Create a new script window</td>
<td><div align="center"><img src="../images/newScript.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + n</td>
<td>File &gt; New </td>
</tr>
<tr>
<td>Open a script</td>
<td><div align="center"><img src="../images/openScript.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + o</td>
<td>File &gt; Open</td>
</tr>
<tr>
<td>Save a script</td>
<td><div align="center"><img src="../images/saveScript.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + s</td>
<td>File &gt; Save</td>
</tr>
<tr>
<td>Close script</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>File &gt; Close</td>
</tr>
<tr>
<td>Run a script</td>
<td><div align="center"><img src="../images/running_man.png" alt="the run button" width="24" border="1" height="23" /></div></td>
<td>Ctrl + r</td>
<td>File &gt; Run</td>
</tr>
<tr>
<td>Tile the windows</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>Click in Script Window, then:  Window &gt; Tile</td>
</tr>
<tr>
<td>Show line numbers</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>View &gt; Options &gt; Editor &gt; Set Line numbers &gt;= 30</td>
</tr>
<tr>
<td>Shift focus between windows</td>
<td>&nbsp;</td>
<td>Ctrl+Tab</td>
<td>&nbsp;</td>
</tr>
<tr>
<td>Open/close Interactive Window</td>
<td><div align="center"><img src="../images/interactiveButton.png" alt="inter" width="26" height="26" /></div></td>
<td>&nbsp;</td>
<td>View &gt; Interactive Window</td>
</tr>
<tr>
<td>Clear the Interactive Window</td>
<td>&nbsp;</td>
<td> Ctrl+Tab to the Interactive Window, Ctrl+a, del</td>
<td>Click in Interactive Window, Edit &gt; Select All, Edit &gt; Delete</td>
</tr>
<tr>
<td>Toggle whitespace</td>
<td>&nbsp;</td>
<td>Ctrl+W</td>
<td>View &gt; Options &gt; Tabs and whitespace &gt; check 'View whitespace'</td>
</tr>
</table>
<span class="style4"><strong>Action</strong></span><strong>Button</strong><span class="style4"><strong>Keyboard shortcut</strong></span><span class="style4"><strong>Menu</strong></span>Create a new script window<div align="center"><img src="../images/newScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + nFile &gt; New Open a script<div align="center"><img src="../images/openScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + oFile &gt; OpenSave a script<div align="center"><img src="../images/saveScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + sFile &gt; SaveClose script&nbsp;&nbsp;File &gt; CloseRun a script<div align="center"><img src="../images/running_man.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + rFile &gt; RunTile the windows&nbsp;&nbsp;Click in Script Window, then:  Window &gt; TileShow line numbers&nbsp;&nbsp;View &gt; Options &gt; Editor &gt; Set Line numbers &gt;= 30Shift focus between windows&nbsp;Ctrl+Tab&nbsp;Open/close Interactive Window<div align="center"><img src="../images/interactiveButton.png" alt="inter" width="26" height="26" /></div>&nbsp;View &gt; Interactive WindowClear the Interactive Window&nbsp; Ctrl+Tab to the Interactive Window, Ctrl+a, delClick in Interactive Window, Edit &gt; Select All, Edit &gt; DeleteToggle whitespace&nbsp;Ctrl+WView &gt; Options &gt; Tabs and whitespace &gt; check 'View whitespace'<span class="style4"><strong>Action</strong></span><strong>Button</strong><span class="style4"><strong>Keyboard shortcut</strong></span><span class="style4"><strong>Menu</strong></span>Create a new script window<div align="center"><img src="../images/newScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + nFile &gt; New Open a script<div align="center"><img src="../images/openScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + oFile &gt; OpenSave a script<div align="center"><img src="../images/saveScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + sFile &gt; SaveClose script&nbsp;&nbsp;File &gt; CloseRun a script<div align="center"><img src="../images/running_man.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + rFile &gt; RunTile the windows&nbsp;&nbsp;Click in Script Window, then:  Window &gt; TileShow line numbers&nbsp;&nbsp;View &gt; Options &gt; Editor &gt; Set Line numbers &gt;= 30Shift focus between windows&nbsp;Ctrl+Tab&nbsp;Open/close Interactive Window<div align="center"><img src="../images/interactiveButton.png" alt="inter" width="26" height="26" /></div>&nbsp;View &gt; Interactive WindowClear the Interactive Window&nbsp; Ctrl+Tab to the Interactive Window, Ctrl+a, delClick in Interactive Window, Edit &gt; Select All, Edit &gt; DeleteToggle whitespace&nbsp;Ctrl+WView &gt; Options &gt; Tabs and whitespace &gt; check 'View whitespace'------------------------------------------------------------rows: 12 cols: 4<span class="style4"><strong>Action</strong></span><strong>Button</strong><span class="style4"><strong>Keyboard shortcut</strong></span><span class="style4"><strong>Menu</strong></span>Create a new script window<div align="center"><img src="../images/newScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + nFile &gt; New Open a script<div align="center"><img src="../images/openScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + oFile &gt; OpenSave a script<div align="center"><img src="../images/saveScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + sFile &gt; SaveClose script&nbsp;&nbsp;File &gt; CloseRun a script<div align="center"><img src="../images/running_man.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + rFile &gt; RunTile the windows&nbsp;&nbsp;Click in Script Window, then:  Window &gt; TileShow line numbers&nbsp;&nbsp;View &gt; Options &gt; Editor &gt; Set Line numbers &gt;= 30Shift focus between windows&nbsp;Ctrl+Tab&nbsp;Open/close Interactive Window<div align="center"><img src="../images/interactiveButton.png" alt="inter" width="26" height="26" /></div>&nbsp;View &gt; Interactive WindowClear the Interactive Window&nbsp; Ctrl+Tab to the Interactive Window, Ctrl+a, delClick in Interactive Window, Edit &gt; Select All, Edit &gt; DeleteToggle whitespace&nbsp;Ctrl+WView &gt; Options &gt; Tabs and whitespace &gt; check 'View whitespace'------------------------------------------------------------rows: 12 cols: 4<span class="style4"><strong>Action</strong></span><strong>Button</strong><span class="style4"><strong>Keyboard shortcut</strong></span><span class="style4"><strong>Menu</strong></span>Create a new script window<div align="center"><img src="../images/newScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + nFile &gt; New Open a script<div align="center"><img src="../images/openScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + oFile &gt; OpenSave a script<div align="center"><img src="../images/saveScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + sFile &gt; SaveClose script&nbsp;&nbsp;File &gt; CloseRun a script<div align="center"><img src="../images/running_man.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + rFile &gt; RunTile the windows&nbsp;&nbsp;Click in Script Window, then:  Window &gt; TileShow line numbers&nbsp;&nbsp;View &gt; Options &gt; Editor &gt; Set Line numbers &gt;= 30Shift focus between windows&nbsp;Ctrl+Tab&nbsp;Open/close Interactive Window<div align="center"><img src="../images/interactiveButton.png" alt="inter" width="26" height="26" /></div>&nbsp;View &gt; Interactive WindowClear the Interactive Window&nbsp; Ctrl+Tab to the Interactive Window, Ctrl+a, delClick in Interactive Window, Edit &gt; Select All, Edit &gt; DeleteToggle whitespace&nbsp;Ctrl+WView &gt; Options &gt; Tabs and whitespace &gt; check 'View whitespace'------------------------------------------------------------rows: 12 cols: 4<span class="style4"><strong>Action</strong></span><strong>Button</strong><span class="style4"><strong>Keyboard shortcut</strong></span><span class="style4"><strong>Menu</strong></span>Create a new script window<div align="center"><img src="../images/newScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + nFile &gt; New Open a script<div align="center"><img src="../images/openScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + oFile &gt; OpenSave a script<div align="center"><img src="../images/saveScript.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + sFile &gt; SaveClose script&nbsp;&nbsp;File &gt; CloseRun a script<div align="center"><img src="../images/running_man.png" alt="the run button" width="24" border="1" height="23" /></div>Ctrl + rFile &gt; RunTile the windows&nbsp;&nbsp;Click in Script Window, then:  Window &gt; TileShow line numbers&nbsp;&nbsp;View &gt; Options &gt; Editor &gt; Set Line numbers &gt;= 30Shift focus between windows&nbsp;Ctrl+Tab&nbsp;Open/close Interactive Window<div align="center"><img src="../images/interactiveButton.png" alt="inter" width="26" height="26" /></div>&nbsp;View &gt; Interactive WindowClear the Interactive Window&nbsp; Ctrl+Tab to the Interactive Window, Ctrl+a, delClick in Interactive Window, Edit &gt; Select All, Edit &gt; DeleteToggle whitespace&nbsp;Ctrl+WView &gt; Options &gt; Tabs and whitespace &gt; check 'View whitespace'------------------------------------------------------------rows: 2 cols: 1<p><strong>Table 2.2 </strong>Python 2.7 keywords. <br />
</p>
<table width="385" border="0" bgcolor="#eeeeeee">
<tr>
<td width="379"><pre class="key"><font>and       del       from      not       while      <br />as        elif      global    or        with       <br />assert    else      if        pass      yield      <br />break     except    import    print                <br />class     exec      in        raise                <br />continue  finally   is        return               <br />def       for       lambda    try</font></pre></td>
</tr>
</table><pre class="key"><font>and       del       from      not       while      <br />as        elif      global    or        with       <br />assert    else      if        pass      yield      <br />break     except    import    print                <br />class     exec      in        raise                <br />continue  finally   is        return               <br />def       for       lambda    try</font></pre><pre class="key"><font>and       del       from      not       while      <br />as        elif      global    or        with       <br />assert    else      if        pass      yield      <br />break     except    import    print                <br />class     exec      in        raise                <br />continue  finally   is        return               <br />def       for       lambda    try</font></pre>------------------------------------------------------------rows: 2 cols: 1<p><strong>Table 2.2 </strong>Python 2.7 keywords. <br />
</p>
<table width="385" border="0" bgcolor="#eeeeeee">
<tr>
<td width="379"><pre class="key"><font>and       del       from      not       while      <br />as        elif      global    or        with       <br />assert    else      if        pass      yield      <br />break     except    import    print                <br />class     exec      in        raise                <br />continue  finally   is        return               <br />def       for       lambda    try</font></pre></td>
</tr>
</table><pre class="key"><font>and       del       from      not       while      <br />as        elif      global    or        with       <br />assert    else      if        pass      yield      <br />break     except    import    print                <br />class     exec      in        raise                <br />continue  finally   is        return               <br />def       for       lambda    try</font></pre><pre class="key"><font>and       del       from      not       while      <br />as        elif      global    or        with       <br />assert    else      if        pass      yield      <br />break     except    import    print                <br />class     exec      in        raise                <br />continue  finally   is        return               <br />def       for       lambda    try</font></pre>------------------------------------------------------------rows: 2 cols: 1<p><strong>Table 2.2 </strong>Python 2.7 keywords. <br />
</p>
<table width="385" border="0" bgcolor="#eeeeeee">
<tr>
<td width="379"><pre class="key"><font>and       del       from      not       while      <br />as        elif      global    or        with       <br />assert    else      if        pass      yield      <br />break     except    import    print                <br />class     exec      in        raise                <br />continue  finally   is        return               <br />def       for       lambda    try</font></pre></td>
</tr>
</table><pre class="key"><font>and       del       from      not       while      <br />as        elif      global    or        with       <br />assert    else      if        pass      yield      <br />break     except    import    print                <br />class     exec      in        raise                <br />continue  finally   is        return               <br />def       for       lambda    try</font></pre><pre class="key"><font>and       del       from      not       while      <br />as        elif      global    or        with       <br />assert    else      if        pass      yield      <br />break     except    import    print                <br />class     exec      in        raise                <br />continue  finally   is        return               <br />def       for       lambda    try</font></pre>------------------------------------------------------------rows: 7 cols: 2Software versions
                        <table width="232" border="1">
<tr>
<td width="109"><strong>ArcGIS version</strong></td>
<td width="107"><strong>Python version</strong></td>
</tr>
<tr>
<td>10.1, 10.2</td>
<td>2.7</td>
</tr>
<tr>
<td>10</td>
<td>2.6</td>
</tr>
<tr>
<td>9.3</td>
<td>2.5</td>
</tr>
<tr>
<td>9.2</td>
<td>2.4.1</td>
</tr>
<tr>
<td>9.1</td>
<td>2.1</td>
</tr>
</table><strong>ArcGIS version</strong><strong>Python version</strong>10.1, 10.22.7102.69.32.59.22.4.19.12.1<strong>ArcGIS version</strong><strong>Python version</strong>10.1, 10.22.7102.69.32.59.22.4.19.12.1------------------------------------------------------------rows: 7 cols: 2Software versions
                        <table width="232" border="1">
<tr>
<td width="109"><strong>ArcGIS version</strong></td>
<td width="107"><strong>Python version</strong></td>
</tr>
<tr>
<td>10.1, 10.2</td>
<td>2.7</td>
</tr>
<tr>
<td>10</td>
<td>2.6</td>
</tr>
<tr>
<td>9.3</td>
<td>2.5</td>
</tr>
<tr>
<td>9.2</td>
<td>2.4.1</td>
</tr>
<tr>
<td>9.1</td>
<td>2.1</td>
</tr>
</table><strong>ArcGIS version</strong><strong>Python version</strong>10.1, 10.22.7102.69.32.59.22.4.19.12.1<strong>ArcGIS version</strong><strong>Python version</strong>10.1, 10.22.7102.69.32.59.22.4.19.12.1------------------------------------------------------------rows: 6 cols: 2<strong>ArcGIS version</strong><strong>Python version</strong>10.1, 10.22.7102.69.32.59.22.4.19.12.1------------------------------------------------------------rows: 6 cols: 2<strong>ArcGIS version</strong><strong>Python version</strong>10.1, 10.22.7102.69.32.59.22.4.19.12.1------------------------------------------------------------rows: 2 cols: 2Key termStatement<ol>
<li>Python keyword<br />
<br />
</li>
<li>IDE<br />
<br />
</li>
<li>Hash sign<br />
<br />
</li>
<li>Tracebacks<br />
<br />
</li>
<li> Window focus<br />
<br />
</li>
<li>Script arguments<br />
<br />
</li>
<li>Context highlighting<br />
<br />
</li>
<li>Assignment statement<br />
<br />
</li>
<li> Dynamic typing<br />
<br />
</li>
<li>False<br />
<br />
</li>
<li> NameError<br />
<br />
</li>
<li>Dedented code<br />
<br />
</li>
<li>math, os, and sys<br />
</li>
</ol>
<ol type="A">
<li>This is a  built-in boolean constant.<br />
<br />
</li>
<li>If this isn't in the Script Window, you might save the Interactive Window by mistake.<br />
<br />
</li>
<li>Special font formatting (such as color) based on meaning of text in the code.<br />
<br />
</li>
<li>The controversial debates surrounding Python versus Perl scripting languages.<br />
<br />
</li>
<li><code><span class="key">print</span></code> is written in bold blue because it is one of these.<br />
<br />
</li>
<li>If a variable name is misspelled, this can occur.<br />
<br />
</li>
<li>A specialized editor for developing scripts.<br />
<br />
</li>
<li>Information passed into a script by the user.<br />
<br />
</li>
<li>Automatically set the data type of a variable when a value is assigned.<br />
<br />
</li>
<li><code>x <span class="o">=</span> 5</code> is an example of one of these. <br />
<br />
</li>
<li>Messages printed when exceptions are thrown.<br />
<br />
</li>
<li>This signals the end of a related block of code.<br />
<br />
</li>
<li>The shape of a camel's back.<br />
<br />
</li>
<li>Code following this character is only meant for the human reader. <br />
<br />
</li>
<li>These are examples of Python standard modules</li>
</ol>------------------------------------------------------------rows: 2 cols: 2Key termStatement<ol>
<li>Python keyword<br />
<br />
</li>
<li>IDE<br />
<br />
</li>
<li>Hash sign<br />
<br />
</li>
<li>Tracebacks<br />
<br />
</li>
<li> Window focus<br />
<br />
</li>
<li>Script arguments<br />
<br />
</li>
<li>Context highlighting<br />
<br />
</li>
<li>Assignment statement<br />
<br />
</li>
<li> Dynamic typing<br />
<br />
</li>
<li>False<br />
<br />
</li>
<li> NameError<br />
<br />
</li>
<li>Dedented code<br />
<br />
</li>
<li>math, os, and sys<br />
</li>
</ol>
<ol type="A">
<li>This is a  built-in boolean constant.<br />
<br />
</li>
<li>If this isn't in the Script Window, you might save the Interactive Window by mistake.<br />
<br />
</li>
<li>Special font formatting (such as color) based on meaning of text in the code.<br />
<br />
</li>
<li>The controversial debates surrounding Python versus Perl scripting languages.<br />
<br />
</li>
<li><code><span class="key">print</span></code> is written in bold blue because it is one of these.<br />
<br />
</li>
<li>If a variable name is misspelled, this can occur.<br />
<br />
</li>
<li>A specialized editor for developing scripts.<br />
<br />
</li>
<li>Information passed into a script by the user.<br />
<br />
</li>
<li>Automatically set the data type of a variable when a value is assigned.<br />
<br />
</li>
<li><code>x <span class="o">=</span> 5</code> is an example of one of these. <br />
<br />
</li>
<li>Messages printed when exceptions are thrown.<br />
<br />
</li>
<li>This signals the end of a related block of code.<br />
<br />
</li>
<li>The shape of a camel's back.<br />
<br />
</li>
<li>Code following this character is only meant for the human reader. <br />
<br />
</li>
<li>These are examples of Python standard modules</li>
</ol>------------------------------Ch02.html processed++++++++
K:/www/outputPagesCh02.html written
Ch03.html STARTED++++++++
------------------------------rows: 41 cols: 2<span class="head">3.1 Numbers</span> <a name="nums" id="introduction2"></a>OperationOperatorExample<span class="head">3.2 What is a string?</span> <a name="strings" id="strings"></a><span class="head">3.3 Things you need to do to strings (a.k.a. string operations)</span> <a name="operations" id="operations"></a><span class="head">3.3.1 Indexing into strings</span> <a name="index" id="operations3"></a>variableName[index_number]<span class="head">3.3.2 Slice strings</span> <a name="operations" id="operations2"></a><strong><span class="head">3.3.3 Concatenate strings</span></strong><strong><span class="head">3.3.4 Check for substring membership</span></strong><span class="head">3.4 More things with strings (a.k.a. string methods)</span> <a name="methods" id="methods"></a><strong><code>object.method(argument1, argument2, argument3,...)</code></strong><code><strong>variableName <span class="o">=</span> object.method(argument1, argument2, argument3,...)</strong></code><span class="head">3.5 File paths and raw strings</span> <a name="escape" id="escape"></a>White space escape sequences<span class="head">3.6 Unicode strings</span> <a name="escape" id="escape2"></a><span class="head">3.7 Printing Strings and Numbers</span> <a name="printing" id="printing"></a><b class="head">3.8 Key terms</b><a name="keyterms" id="keyterms2"></a><span class="head">3.9 Exercises</span> <a name="exercises" id="exercises"></a><span class="head">Chapter objectives</span>
<br />
<br />
        After reading this chapter, you'll be able to do the following:
        <ul>
<li>Perform mathematical operations on numeric data types.</li>
<li>Differentiate between integers and floating point number division.</li>
<li>Determine the data type of a variable. </li>
<li>Index into, slice, and concatenate strings.</li>
<li>Find the length of a string and check if a substring is in a string.</li>
<li>Replace substrings, modify text case in strings, split strings, and join items into a single string. </li>
<li>Differentiate between string variables and string literals.</li>
<li>Locate online help for the specialized functions associated with strings.</li>
<li>Create strings that represent the location of data.</li>
<li>Format strings and numbers for printing.</li>
</ul>
<hr />
<p class="foo">
<span class="head">Chapter Outline</span><br />
<br />
<a href="#nums">Numbers</a><br />
<a href="#strings">What is a string?</a><br />
<a href="#operations">Things you need to do to strings (a.k.a. string operations)</a><br />
  &nbsp;&nbsp;&nbsp;&nbsp;Index into strings<br />
  &nbsp;&nbsp;&nbsp;&nbsp;Slice strings<br />
  &nbsp;&nbsp;&nbsp;&nbsp;Concatenate strings<br />
  &nbsp;&nbsp;&nbsp;&nbsp;Check for substring membership<br />
<a href="#methods">More things with strings (a.k.a. string methods) </a><br />
<a href="#escape">File paths and raw strings</a><br />
          Unicode strings<br />
<a href="#printing">Printing strings and numbers<br />
</a>Key terms<br />
<a href="#exercises">Exercises</a> </p>
<span class="foo">
<hr />
</span>
<p>Chapter 2 alluded to all Python objects having a data type.   Built-in Python data types, such as integers, string, booleans, and others, are building blocks for GIS scripts. Chapters 3 and 4 introduce essential  built-in data types  that will appear  frequently in our GIS Python--scripts, numbers, strings, lists, and tuples.  Through these data type examples, this chapter also introduces  some concepts about objects that are used throughout Python:</p>
<ul>
<li>Python objects made up of a sequence of items  share a set of operations, though the operations may act differently depending on the object data type.</li>
<li>Python objects have functions called 'methods' associated with them. The methods are specialized for each  data type.</li>
<li> Python objects use object-oriented syntax referred to as 'dot notation.' </li>
</ul>
<p>Basic data types, operations, methods and dot notation appear in all of the geoprocessing script examples in the upcoming chapters. As you read this chapter, it may help to attend to these commonalities across data types. In this way, not only will these data types  already be familiar when they appear in the ArcGIS Python scripts, the concepts will already be familiar when they are extended to specialized ArcGIS Python objects.</p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">3.1 Numbers</span> <a name="nums" id="introduction2"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Python has four numeric data types: int, long, float, and complex. Examples in this book mainly use <code>int</code> (signed integers) and <code>float</code> (floating point numbers). With dynamic typing, the variable type is decided by the assignment statement which gives it a value. Float  values have a decimal point; Integer values don't.  In the following example, the variable <code>x</code> is an integer and <code>y</code> is a float:</p>
<code></code><p>
          &gt;&gt;&gt; x <span class="o">=</span> <span class="mi">2</span><br />
          &gt;&gt;&gt; y <span class="o">=</span> <span class="mi">2.0</span><br />
          &gt;&gt;&gt; type(x)<br />
          &lt;type 'int'&gt;<br />
          &gt;&gt;&gt; type(y)<br />
          &lt;type 'float'&gt;<br />
</p>
<p>By default, PythonWin uses turquoise to display numeric values (as well as output in the Interactive Window). Python uses <strong>+</strong>, <strong>-</strong>, <strong>*</strong>, **, and <strong>/</strong> for addition, subtraction,  multiplication, exponentiation, and division as shown in Table 3.1. Mathematical order of operations is preserved. <code><span class="mi">2</span> <span class="o">+ </span><span class="mi">3 </span><span class="o">*</span><span class="mi"> 4</span> </code> gives 14 not 20, though <code><span class="mi">2</span> <span class="o">+ </span>(<span class="mi">3 </span><span class="o">*</span><span class="mi"> 4</span>) </code> is a clearer way to write it.  Be aware that Python integer division and floating point division give different results. If both division operands are integers, the  result will be<em> integer division</em> with the fractional part truncated; in other words, it always  rounds down. If at least one of the operands are float, the result  retains much more precision. </p>
<code></code><p>
          &gt;&gt;&gt; <span class="mi">8</span> /<span class="mi"> 3</span><br />
          2<br />
          &gt;&gt;&gt; <span class="mi">8.0</span> /<span class="mi"> 3</span> <br />
          2.6666666666666665<br />
</p>
<p>In Python versions 3.0 and higher, this behavior is changed so that 8/3 gives the same result as 8.0/3.</p>
<table width="600" border="0" bgcolor="#eeeeeee">
<tr>
<td><strong>Table 3.1: </strong>Numerical operators.
              <table width="453" border="1" cellpadding="5">
<tr>
<th width="86" scope="row">Operation</th>
<th width="131" align="center">Operator</th>
<th width="190">Example</th>
</tr>
<tr>
<td scope="row">Addition</td>
<td align="center"><code>+</code></td>
<td><code><span class="mi">7</span> <span class="o">+</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">9</span></code></td>
</tr>
<tr>
<td scope="row">Subtraction</td>
<td align="center"><code>-</code></td>
<td><code><span class="mi">7</span> <span class="o">-</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">5</span> </code></td>
</tr>
<tr>
<td height="29" scope="row">Multiplication</td>
<td align="center"><code>*</code></td>
<td><code><span class="mi">7</span> <span class="o">*</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">14</span> </code></td>
</tr>
<tr>
<td scope="row"><p>Division</p></td>
<td align="center"><code>/</code></td>
<td><code><span class="mi">7</span> / <span class="mi">2</span> <span class="o">=</span><span class="mi"> 3</span> </code><code></code></td>
</tr>
<tr>
<td scope="row">Exponentiation</td>
<td align="center"><code>**</code><code></code></td>
<td><code><span class="mi">7</span><span class="o">*</span><span class="o">*</span><span class="mi">2</span><span class="o"> =</span> <span class="mi">9</span> </code></td>
</tr>
<tr>
<td scope="row">Modulus division </td>
<td align="center"><code>%</code></td>
<td><code><span class="mi">7 <span class="o">%</span></span><span class="mi"> 2 </span><span class="o">=</span> <span class="mi">1</span> </code></td>
</tr>
</table></td>
</tr>
</table>
<br />
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">3.2 What is a string?</span> <a name="strings" id="strings"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>PythonWin uses olive green text to display string literals. A <em>string literal</em> is a set of characters surrounded by quotation marks.  A variable assigned a string literal value is called a <em>string variable</em>.  The difference between these two terms is important, but both of these items are sometimes referred to simply as 'strings'. The characters inside the quotes in the string literal are interpreted literally. In GIS scripts, we use string literals for things like the name of a workspace, input file, or output file. Meanwhile, the characters that make up a string variable are simply a name for the program to use to represent its value. Variable names should not be surrounded by quotes. The operations and methods described in the next section apply to both string literals and string variables. Both are  objects of data type <code>str</code> (for string). <br />
<img src="../images/strings.png" border="1" /><br />
<br />
          The type of quotes used to create a Python string literal is flexible, as long as the opening and closing quotes match. Here are two variations: </p>
<p><code>&gt;&gt;&gt; inputData <span class="o">=</span> <span class="s">'trees.shp'</span><br />
          &gt;&gt;&gt; inputData<br />
          'trees.shp'<br />
          &gt;&gt;&gt; inputData <span class="o">=</span> <span class="s">&quot;trees.shp&quot;</span><br />
          &gt;&gt;&gt; inputData <br />
          'trees.shp'<br />
</code></p>
<p>There is a subtle difference between printing strings with and without the <code>print</code> function in the Interactive Window: The former removes the quotation marks entirely and the latter uses single quotation marks. </p>
<p><code>&gt;&gt;&gt; <span class="key">print</span> inputData<br />
          trees.shp<br />
</code><br />
          String literals in single or double quotes cannot span more than one line. A string literal with no closing quote raises a <code>SyntaxError</code> as shown in the traceback message:<br />
<code><br />
          &gt;&gt;&gt; output <span class="o">=</span> <span class="s">'a b c</span><br />
<span class="err">Traceback (  File &quot;&lt;interactive input&gt;&quot;, line 1<br />
          output <span class="o">=</span> &quot;a b c<br />
          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^<br />
          SyntaxError: EOL while scanning string literal</span><br />
</code><br />
          Triple quotes can be used to create a string that spans more than one line:<br />
<code><br />
          &gt;&gt;&gt;
          output <span class="o">=</span> <span class="s">&quot;&quot;&quot;a b c<br />
</span>... <span class="s">d e f&quot;&quot;&quot;</span><br />
<br />
          &gt;&gt;&gt; <span class="key">print</span> output<br />
          a b c<br />
          d e f<br />
</code><br />
          The triple quotes store the carriage return as part of the string. In some cases we don't want a carriage return stored in the string. For example, we might need to store a long file path name. The path won't be interpreted correctly if a carriage return is embedded in it. But very wide lines of Python code are awkward to read. As a rule of thumb, Python lines of code should be less than 100 characters wide, so the reader doesn't need to scroll right. A <em>line continuation character</em> (<code>'\'</code>), a backslash embedded in a string at the end of a line, allows a string to be written on more than one line, while preserving the single line spacing in the string literal value. In other words, though it is assigned on multiple lines, it will be printed as a single line variable. Place the character at the end of the line and the string literal can be continued on the next line, but the string value will not contain the carriage return:</p>
<p><code>&gt;&gt;&gt; output <span class="o">=</span> <span class="s">'a b c \<br />
          d e f \ <br />
          g h i'</span><br />
<br />
          &gt;&gt;&gt; <span class="key">print </span>output<br />
          a b c d e f g h i<br />
</code><br />
          Numerical characters surrounded by quotation marks are considered to be strings literals by Python. <br />
<code><br />
          &gt;&gt;&gt; FID <span class="o">=</span> <span class="mi">145</span><br />
          &gt;&gt;&gt; type(FID)<br />
          &lt;type 'int'&gt;<br />
          &gt;&gt;&gt; countyNum =<span class="s"> '145'</span><br />
          &gt;&gt;&gt; type(countyNum)<br />
          &lt;type 'str'&gt;<br />
</code></p>
<p>If the variable is a string type, you can perform string operations on it as described in the next section. </p>
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">3.3 Things you need to do to strings (a.k.a. string operations)</span> <a name="operations" id="operations"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>GIS Python programming requires frequent string manipulation. To deal with file names, field names, and so forth,  you'll need to be familiar with finding the length of a string, indexing into a string, concatenating, slicing,  and checking for a substring in a string. Examples of each operation follow.</p>
<p><strong>Find the length of string</strong></p>
<p><code>          The built-in </code><code>len</code> function  finds the length of a string literal:<br />
          &gt;&gt;&gt;<span class="nb"> len</span><span class="p">(</span><span class="s">&#39;trees.shp&#39;</span><span class="p">)</span><br />
          9<br />
</p>
<p>Or the length of the value held by a string variable:<br />
<code><br />
          &gt;&gt;&gt; data <span class="o">=</span> <span class="s">'trees.shp'</span><br />
          &gt;&gt;&gt; <span class="nb">len</span><span class="p">(</span>data<span class="p">)</span><br />
          9<br />
</code></p>
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">3.3.1 Indexing into strings</span> <a name="index" id="operations3"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>
          Each character in a string has a numbered position  called an <em>index</em>. The numbering starts with zero, in other words Python uses <em>zero-based indexing</em>. From left to right, the indices are 0, 1, 2,... and so forth. <em><br />
<br />
<img src="../images/stringIndex.png" border="1" /><br />
<br />
          Indexing</em> into a string means pointing to an individual character in a string using its index number.    To index into a string variable, use square brackets after the variable name and place an index number inside the brackets. The general format for indexing looks like this:</p>
<table width="797" border="0" bgcolor="#FFCCCC">
<tbody>
<tr>
<th scope="row" width="791">variableName[index_number]</th>
</tr>
</tbody>
</table>
<p>This example assigns a value to a string variable and then indexes the first character in the string value:<br />
</p>
<p><code>&gt;&gt;&gt; fieldName <span class="o">=</span> <span class="s">'COVER'</span><br />
          &gt;&gt;&gt;<span class="n"> fieldName</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><br />
          'C'<br />
</code></p>
<p>Since indexing is zero-based, the last valid index is the length of the string minus one. Attempting to using an invalid index number results in an <code>IndexError</code>:<br />
<code><br />
          &gt;&gt;&gt; len(fieldName)<br />
          5<br />
          &gt;&gt;&gt;<span class="n"> fieldName</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><br />
<span class="err">Traceback (most recent call last):<br />
          File &quot;&lt;interactive input&gt;&quot;, line 1, in &lt;module&gt;<br />
          IndexError: string index out of range</span><br />
          &gt;&gt;&gt; <span class="n">fieldName</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><br />
          'R'<br />
</code></p>
<p>Negative indices count one-based from the right. This can be useful for getting the last character without checking the string length.<br />
<code><br />
          &gt;&gt;&gt;<span class="n"> fieldName</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><br />
          'R'<br />
</code></p>
<p>It is not  possible to change the value of an individual character of a string with indexing. Attempting to do so results in a <code>TypeError</code>, as shown in the following code:<br />
<code><br />
          &gt;&gt;&gt;<span class="n"> fieldName</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o"> =</span> <span class="s">'D'</span><br />
<span class="err">Traceback (most recent call last):<br />
          File &quot;&lt;interactive input&gt;&quot;, line 1, in &lt;module&gt;<br />
          TypeError: 'str' object does not support item assignment</span><br />
</code><br />
          This occurs because Python strings are <em>immutable</em>.        The word 'immutable' is a synonym for unchangeable. Of course, we can change the value of a string variable by assigning an entirely new string to it, as in the example below, but in this context, immutability refers to this specific quality of not being able to change individual parts of an existing object.   To change the value of <code>fieldName</code> from <code>COVER</code> to <code>DOVER</code>, you need to use the following code:<br />
<code><br />
          &gt;&gt;&gt; fieldName <span class="o">=</span> <span class="s">'DOVER'</span><br />
</code></p>
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">3.3.2 Slice strings</span> <a name="operations" id="operations2"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Indexing can be thought of as getting a substring which is only one character long. To get more than one character, use slicing instead of indexing.  Slicing gets a substring (a slice) of a string. Slicing uses square brackets with a colon inside. A number on either side of the colon indicates the starting and ending index of the desired slice. The left number is inclusive, the right is exclusive. </p>
<p> <code>&gt;&gt;&gt; fieldName <span class="o">=</span> <span class="s">'COVER'</span><br />
          &gt;&gt;&gt; fieldName[<span class="num">1</span>:<span class="num">3</span>]<br />
          'OV'<br />
</code><br />
          The letter <code>O</code> is the index 1 character in the string <code>'COVER'</code> and the letter <code>E</code> is the index 3 character, so the slice starts at the letter <code>O</code> and ends just before the letter <code>E</code>. <br />
          If the left slice number is omitted, the slice starts at the beginning of the word. If the right slice number is omitted, the slice ends at the end of the word.</p>
<p><code>&gt;&gt;&gt; fieldName[:<span class="num">3</span>]<br />
          'COV'<br />&gt;&gt;&gt; fieldName[<span class="num">1</span>:]<br />
          'OVER'<br />
</code><br />
          We often want to use the <em>base name</em> of a file, the part without the extension, to build another file name, so that we can create output names based on input names. Counting from the right with a  negative index can be used to find the base name of a file which has a three digit file extension. Omitting the left index starts from the beginning of the string. Using <code>-4</code> as the right index removes the last four characters --the three digit file extension and the period-- leaving the base name of the file. <br />
<code><br />
          &gt;&gt;&gt; inputData <span class="o">=</span> <span class="s">'trees.shp'</span><br />
          &gt;&gt;&gt; baseName <span class="o">=</span> inputData[:<span class="num">-4</span>] <span class="comment">#</span><span class="comment"> Remove the file extension and the period.</span><br />
          &gt;&gt;&gt; baseName<br />
          'trees'<br />
</code></p>
<hr /> <table width="775" border="0">
<tr>
<th align="left" scope="row"><strong><span class="head">3.3.3 Concatenate strings</span></strong></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p><em>Concatenation</em> glues together a pair of strings. You use the same sign for addition, but it acts differently for strings. The plus sign performs addition on numeric values and concatenation on strings.<br />
</p>
<p><code>&gt;&gt;&gt; <span class="num">5</span> <span class="o">+</span> <span class="num">6</span> <span class="comment"># adding two numbers together </span> <br />
          11<br />
          &gt;&gt;&gt; <span class="s">'5'</span> <span class="o">+</span><span class="s"> '6'</span> <span class="comment"># concatenating  two strings</span> <br />
          '56'<br />
<br />
          &gt;&gt;&gt; rasterName <span class="o">=</span> <span class="s">'NorthEast'</span><br />
          &gt;&gt;&gt;
          route <span class="o">=</span><span class="s"> 'ATrain'</span><br />
          &gt;&gt;&gt; 
          output <span class="o">=</span> rasterName <span class="o">+</span> route<br />
          &gt;&gt;&gt; output<br />
          'NorthEastATrain'br />
        </code></p>
<p>Both of the variables being concatenated must be string types or you'll get  a <code>TypeError</code>. For example, using the plus sign between a numeric variable and a string variable causes an error. Python doesn't know whether to perform addition or concatenation.<br />
<code><br />
          &gt;&gt;&gt; i <span class="o">=</span> <span class="num">1</span><br />
          &gt;&gt;&gt; rasterName <span class="o">=</span> <span class="s">'NorthEast'</span><br />
          &gt;&gt;&gt; output <span class="o">=</span> rasterName <span class="o">+</span> i<br />
<span class="err">Traceback (most recent call last):<br />
          File &quot;&lt;interactive input&gt;&quot;, line 1, in &lt;module&gt;<br />
          TypeError: cannot concatenate 'str' and 'int' objects</span><br />
          &gt;&gt;&gt;<br />
</code></p>
<p>The <code>TypeError</code> says  that a string cannot be concatenated with an integer object. Solve this problem by using the built-in <code>str</code> function which returns a string data type version of an input value.   Type conversion is  referred to as <em>casting</em>. To combine a string with a numeric value, cast the number to a string. Then the number is treated as a string data type for the concatenation operation: <br />
<code><br />
          &gt;&gt;&gt; i <span class="o">=</span> <span class="num">145</span><br />
          &gt;&gt;&gt; str(i)<br />
          '145'<br />
          &gt;&gt;&gt; rasterName <span class="o">=</span> <span class="s">'NorthEast'</span><br />
          &gt;&gt;&gt;<span class="n"> output</span> <span class="o">=</span> <span class="n">rasterName</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><br />
          &gt;&gt;&gt; output<br />
          'NorthEast145'<br />
</code></p>
<p>We often use concatenation with slicing to create an output name based on an input file name.</p>
<p><code>&gt;&gt;&gt; inputData <span class="o">=</span> <span class="s">'trees.shp'</span> <br />
          &gt;&gt;&gt; baseName <span class="o">=</span> inputData[:<span class="num">-4</span>] <span class="comment">#</span><span class="comment"> Remove the extension and the period.</span><br />
          &gt;&gt;&gt; baseName <br />
<span class="s">'trees'</span><br />
          &gt;&gt;&gt; outputData <span class="o">=</span> baseName <span class="o">+</span> <span class="s">'_buffer.shp'</span> <br />
          &gt;&gt;&gt; 
          outputData <br />
          'trees_buffer.shp'<br />
</code></p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><strong><span class="head">3.3.4 Check for substring membership</span></strong></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>
          The <code>in</code> keyword enables you to check if a string contains a substring.  Python literature referred to this as checking for 'membership' in a string. Suppose you want to check if a file is a buffered output or not, and you have named each output file so that the name contains the string <code>buffer</code>. </p>
<p><code>&gt;&gt;&gt; substring <span class="o">=</span> <span class="s">'buffer' </span><br />
          &gt;&gt;&gt; substring <span class="key">in </span>outputData<br />
          True<br />
          &gt;&gt;&gt; substring <span class="key">in </span>inputData<br />
          False<br />
</code></p>
<p>These string operations are powerful when combined with batch processing (discussed in an upcoming chapter). Table 3.2 summarizes these common string operations. As we'll discuss shortly, they can be applied to other data types as well. Strings and other data types that have a collection of items are referred to as <em>sequence</em> data types. The characters in the string can be thought of as a sequence of items. These operations can be applied to any of the sequence data types in Python.</p>
<table bgcolor="#EEEEEE" border="0" width="779">
<tbody>
<tr>
<td scope="row"><p><strong><br />
                  Table 3.2: </strong>Sequence Operations on Strings<strong><br />
<br />
<code>&gt;&gt;&gt; exampleString <span class="o">=</span> <span class="s">'tuzigoot'</span></code></strong></p>
<table width="732" border="3">
<tr>
<td width="130"><strong>Operation</strong></td>
<td width="260"><strong>Sample code</strong></td>
<td width="316"><strong>Return value </strong></td>
</tr>
<tr>
<td>length</td>
<td><code>len(exampleString)</code></td>
<td><p><code>8</code><br />
</p></td>
</tr>
<tr>
<td>indexing</td>
<td><code>exampleString[2]</code></td>
<td><code>'z'</code><br /></td>
</tr>
<tr>
<td>slicing</td>
<td><code>exampleString[:-4]</code></td>
<td><code>'tuzi'</code><br /></td>
</tr>
<tr>
<td>concatenation</td>
<td><code>exampleString <span class="o">+</span> exampleString</code></td>
<td><code>'tuzigoottuzigoot'</code></td>
</tr>
<tr>
<td>membership</td>
<td><code>'ample' in exampleString</code></td>
<td><p><code>False</code><br />
</p></td>
</tr>
</table></td>
</tr>
</tbody>
</table>
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">3.4 More things with strings (a.k.a. string methods)</span> <a name="methods" id="methods"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Along with the operations described above, processing GIS data often requires  additional string manipulation. For example, you may need to replace the special characters in a field name, you may need to change a file name to all lower case, or you may need to check the ending of  a file name. For operations of this sort, Python has built-in string functions called string methods. <em>String methods</em> are functions associated particularly with strings that perform actions on strings. Calling a string method has a similar format to calling a built-in function, but in calling a string method, you also have to specify the string object--  using dot notation. <em>Dot notation </em>for calling a method  uses both the object name and the method name, separated by a dot. The general format for dot notation looks like this:</p>
<table width="812" border="0" bgcolor="#FFCCCC">
<tr>
<th scope="row" align="left"><strong><code>object.method(argument1, argument2, argument3,...)</code></strong></th>
</tr>
</table>
<p>'Object' and 'method' are object-oriented programming (OOP) terms and 'dot notation' is an OOP specialized syntax. </p>
<ul>
<li> Everything in Python is an <em>object</em>. For example, numbers, strings, functions, constants, and exceptions are all object<em>s.</em> Other programming languages use this term more narrowly as data types which have associated functions, referred to as 'methods', and attributes, referred to as 'properties' in this book. In Python, most objects  do have methods and/or  properties.     As soon as a  variable is assigned a value, it is a string object which has string methods.<br />
<br />
</li>
<li> A <em>method</em> is a function that performs some action on the object.  Methods are simply functions that are referred to as 'methods' because they are performed on an object. The terms 'calling methods', 'passing arguments', and 'returning values'  apply to methods in the same way they apply to functions. The example below calls the <code>replace</code> method. The variable, <code>line</code>, is assigned a string value. Then the dot notation is used to call the string method named <code>replace</code>. This example returns the string with commas  replaced by semicolons:<br />
<br />
<code>&gt;&gt;&gt; line <span class="o">=</span> <span class="s">'238998,NPS,NERO,Northeast Region,MACCP,CAPE COD NATIONAL'</span><br />
            &gt;&gt;&gt; <span class="n">line</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span> <span class="s">&#39;,&#39;</span> <span class="p">,</span> <span class="s">&#39;;&#39;</span> <span class="p">)</span><br />
            '238998;NPS;NERO;Northeast Region;MACCP;CAPE COD NATIONAL'<br />
</code><br />
</li>
<li><em>Dot notation</em> is an object-oriented programming convention used on string objects (and other types of objects) to access methods and properties, that are specially designed to work with those objects. </li>
</ul>
<p>The image below points out the components in the <code>replace</code> method example. The dot notation links the object method to the object. The object is the variable named <code>line</code>. The method (<code>replace</code>) takes two string arguments, the string to replace (a comma) and the replacement (a semicolon).</p>
<p> <img src="../images/object.model.jpg" width="418" height="134" border="3" /></p>
<p> String methods need to be used in assignment statements. Strings are immutable, so string methods do not change the value of the string object they are called on; instead, they return the modified value. This means that the method call can be used in the right-hand side of an assignment statement to store the value in a variable. The syntax of the assignment statement looks like this:<br />
</p>
<table width="812" border="0" bgcolor="#FFCCCC">
<tr>
<th scope="row" align="left"><code><strong>variableName <span class="o">=</span> object.method(argument1, argument2, argument3,...)</strong></code></th>
</tr>
</table>
<p>For example, the <code>replace</code> call does not alter the value of the original variable. (<code>line</code>):<br />
<br />
<code>
          &gt;&gt;&gt; line <span class="o">=</span> <span class="s">'238998,NPS,NERO,Northeast Region,MACCP,CAPE COD NATIONAL'</span><br />
          &gt;&gt;&gt; <span class="n">line</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span> <span class="s">&#39;,&#39;</span> <span class="p">,</span> <span class="s">&#39;;&#39;</span> <span class="p">)</span><br />
          &gt;&gt;&gt; line<br />
          '238998,NPS,NERO,Northeast Region,MACCP,CAPE COD NATIONAL' <br />
</code> </p>
<p>An assignment statement can be used to store the return value of the method. Call the <code>replace</code> method  on the right-hand side of an assignment statement like this:<br />
<br />
<img src="../images/return_value.jpg" width="367" height="98" border="3" /></p>
<p><code>&gt;&gt;&gt; line <span class="o">=</span> <span class="s">'238998,NPS,NERO,Northeast Region,MACCP,CAPE COD NATIONAL'</span><br />
          &gt;&gt;&gt; semicolonLine <span class="o">=</span><span class="n"> line</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span> <span class="s">&#39;,&#39;</span> <span class="p">,</span> <span class="s">&#39;;&#39;</span> <span class="p">)</span><br />
          &gt;&gt;&gt; semicolonLine<br />
          '238998;NPS;NERO;Northeast Region;MACCP;CAPE COD NATIONAL'<br />
</code><br />
          To alter the original variable called 'line', use it as the variable being assigned. In other words, you can put it on both sides of the equals sign:<br />
<br />
<code>&gt;&gt;&gt; line <span class="o">=</span><span class="n"> line</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span> <span class="s">&#39;,&#39;</span> <span class="p">,</span> <span class="s">&#39;;&#39;</span> <span class="p">)</span><br />
          &gt;&gt;&gt; line<br />
          '238998;NPS;NERO;Northeast Region;MACCP;CAPE COD NATIONAL'</code><br /><br />
<!--This is an example of object-oriented programing (OOP) in Python.  To understand Python programming, you'll need to be familiar with two OOP terms:</p>
        <ul>
          <li><strong>Object</strong>. An instance of a data type is called an <em>object</em> in Python. As soon as a variable is assigned a value, it is an object.  Dot notation is object-oriented programming convention. It is used on string objects and other types of Python. <br  />
              <br  />
          </li>
          <li><strong> Method.</strong> Objects have methods associated with them. A <em>method</em> is a function that performs some action on the object.  The example above uses the 'replace' method.<br  />
            <br  />
          </li>
          <li><strong>Calling methods. </strong>We say we <em>call</em> a method on an object. A method uses a dot to connect the object to the method. <br  />
            <br  />
          </li>
          <li><strong>Passing arguments.</strong> Sometimes the method needs input or arguments, such as which character to replace. We <em>pass arguments</em> to the method to provide the method with more information about what needs to be done.  Arguments are placed inside parentheses and separated by commas.<br  />
            <br  />
          </li>
          <li><strong>Return values.</strong> Some object methods <em>return values </em>(send information back) when they are called. In our example, the original variable is not altered, so in order to use the  string with the replacements it needs to be  assigned to a variable, using an assignment statement:-->
          Not all methods require arguments; However, even when you don't pass any arguments, you must use the parentheses. For example, to change the letters of a string to all uppercase letters, use the upper method like this:        </p>
<p><code>&gt;&gt;&gt; name <span class="o">=</span> <span class="s">'Delaware Water Gap'<br />
</span>&gt;&gt;&gt; name <span class="o">=</span> name<span class="o">.</span><span class="n">upper</span><span class="p">(</span> <span class="p">)</span><br />
          &gt;&gt;&gt; print name <br />
          DELAWARE WATER GAP<br />
</code></p>
<p> The <code>split</code> and <code>join</code> methods are used in many GIS scripts. These methods involve another Python data type called a <code>list</code>. Python lists are containers for holding sets of items,  which are discussed in Chapter 4. The <code>split</code> method returns a list of the words in the string, separated by the argument. In the example below, the <code>split</code> method looks for each occurrence of the forward slash (<code>/</code>) in the string object and splits the string in those positions. The resulting list has four items, since the string  has three slashes.</p>
<p><code>&gt;&gt;&gt; path <span class="o">=</span> <span class="s">'C:/gispy/data/ch03/xy1.txt'</span><br />
          &gt;&gt;&gt; path<span class="o">.</span>split<span class="p">(</span><span class="s">&#39;/&#39;</span> <span class="p">)</span><br />
          ['C:', 'gispy', 'data', 'ch03', 'xy1.txt']<br />
</code></p>
<p>The <code>split</code> and <code>join</code> methods have inverse functionality. The <code>split</code> method takes a single string and splits it into a list of strings, based on some delimiter. The <code>join</code> method takes a list of strings and joins them with  into a single string. The string object value is placed between the items. For example, <code>elephant</code> is placed between <code>1</code>, <code>2</code>, and <code>3</code> here:<br />
<br />
<code>&gt;&gt;&gt;<span class="n"> numList</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;1&#39;</span><span class="p">,</span> <span class="s">&#39;2&#39;</span><span class="p">,</span> <span class="s">&#39;3&#39;</span><span class="p">]</span> <br />
          &gt;&gt;&gt; animal <span class="o">=</span> <span class="s">'elephant'</span><br />
          &gt;&gt;&gt; animal<span class="o">.</span>join<span class="p">(</span>numList<span class="p">)</span><br />
          '1elephant2elephant3'<br />
</code><br />
          In the following example, the <code>join</code> method is performed on a string literal object, semicolon (<code>;</code>). The method inserts semicolons between the items and returns the resulting string: <br />
<code><br />
          &gt;&gt;&gt; <span class="n">pathList</span> <span class="o">=</span><span class="p"> [</span><span class="s">&#39;C:&#39;</span><span class="p">,</span> <span class="s">&#39;gispy&#39;</span><span class="p">,</span> <span class="s">&#39;data&#39;</span><span class="p">,</span> <span class="s">&#39;ch03&#39;</span><span class="p">,</span> <span class="s">&#39;xy1.txt&#39;</span><span class="p">]</span> <br />
          &gt;&gt;&gt; <span class="s">';'</span><span class="o">.</span>join<span class="p">(</span>pathList<span class="p">)</span><br />
          'C:;gispy;data;ch03;xy1.txt'<br />
</code></p>
<p>IDEs make it easy to browse for methods of an object  by bringing up a list of choices when you type the object name followed by a dot. For example, if you create a string variable named <code>path</code> and then type <code>path</code> in the PythonWin Interactive Window, a <em>context menu</em> appears with a list of string methods. This menu of choices is referred to as a context menu because the menu choices update dynamically based on the context in which it is generated.   You can scroll  and select a method by clicking on your choice. <br />
<img src="../images/contextMenu2.png" alt="context menu" width="313" height="274" /></p>
<p> In PythonWin, context menus appear in the Interactive Window or after the code in a script has been executed (after the script has been run). In PyScripter, the context menus appear as soon as a variable has been defined within a script. If your choice doesn't appear in the context menu, check for spelling errors. Try using the context menu  to bring up the <code>endswith</code> method for a string variable in the PythonWin Interactive Window. As you start typing the method name, the list box rolls to that name and you can use the 'Tab' key to complete the selection. The <code>endswith</code> method checks if the ending matches the argument and returns <code>True</code> or <code>False</code>:</p>
<p><code>&gt;&gt;&gt; path <span class="o">=</span> <span class="s">'C:/gispy/data/ch03/xy1.txt'<br />
</span>&gt;&gt;&gt; path<span class="o">.</span>endswith<span class="p">(</span><span class="s">&#39;.shp&#39;</span><span class="p">)</span><br />
          False<br />
          &gt;&gt;&gt; path<span class="o">.</span>endswith<span class="p">(</span><span class="s">&#39;.txt&#39;</span><span class="p">)</span><br />
          True<br />
</code></p>
<p>Help documentation and a comprehensive list of string methods is available in the online. Search for the 'String Methods' section of the 'Python Library Reference'. String method names are often intuitive. Testing them in the Interactive Window helps to clarify their functionality.<br />
</p>
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">3.5 File paths and raw strings</span> <a name="escape" id="escape"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>When dealing with file paths, you will encounter strings literals containing escape sequences. <em>Escape sequences </em>are sequences of characters that have special meaning. In string literals, the backslash (<code>\</code>) is used as an <em>escape character</em> to encode special characters. The backslash acts as a line continuation character when placed at the end of a line in a string literal as described above. But when a backslash is followed immediately by a character in a string literal, the backslash along with the character that follows it are called an<em> escape sequence</em> and the backslash is interpreted as a  signal that the next character is to be given a special interpretation. For example, the string literals <code>'\n'</code> and <code>'\t'</code>  are escape sequences that encode  'new line' and 'tab'. New line and tab characters are used to control the  space around the visible characters. They are referred to as <em>whitespace characters</em>, because the characters themselves are not visible  when printed.</p>
<table border="3">
<tr bordercolor="#000000">
<th colspan="2" scope="row">White space escape sequences</th>
</tr>
<tr bordercolor="#000000">
<td width="29" scope="row"><code>\n</code></td>
<td width="122">new line </td>
</tr>
<tr bordercolor="#000000">
<td scope="row"><code>\t</code></td>
<td>tab</td>
</tr>
</table>
<p>When printed without built-in <code>print</code> function in the Interactive Window, whitespace escape sequences are printed as entered:<br />
<code><br />
          &gt;&gt;&gt; <span class="s">'X\tY\tValue\n\n16\t255\t6.3'</span><br />
          'X\tY\tValue\n\n16\t255\t6.3'<br />
</code></p>
<p> When   printed with the built-in <code>print</code> function, whitespace escape sequences are interpreted and modify the formatting: <br />
<code><br />
          &gt;&gt;&gt; <span class="key">print</span> <span class="s">'X\tY\tValue\n\n16\t255\t6.3'</span><br />
          X&nbsp;&nbsp;&nbsp; Y &nbsp;&nbsp;&nbsp;Value<br />
<br />
          16&nbsp;&nbsp;&nbsp; 255&nbsp;&nbsp;&nbsp; 6.3<br />
</code></p>
<p>The <code>strip</code> method can be used to strip unwanted leading or trailing whitespace from a string. This is often called for when processing files. The following example prints a string before and after using the <code>strip</code> method:</p>
<p><code>&gt;&gt;&gt; dataRecord <span class="o">=</span> <span class="s">' \n\t\tX\tY\tZ\tM\t'</span><br />
          &gt;&gt;&gt; print dataRecord<br />
<br />
          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X&nbsp;&nbsp;&nbsp;&nbsp;Y&nbsp;&nbsp;&nbsp;&nbsp;Z&nbsp;&nbsp;&nbsp;&nbsp;M<br />
          &gt;&gt;&gt; dataRecord <span class="o">=</span> dataRecord<span class="o">.</span>strip<span class="p">(</span> <span class="p">)</span><br />
          &gt;&gt;&gt; dataRecord<br />
</code><code><span class="n">'X\tY\tZ\tM'</span></code><br />
          &gt;&gt;&gt; <span class="key">print</span> dataRecord<br />
          X&nbsp;&nbsp;&nbsp; Y&nbsp;&nbsp;&nbsp; Z&nbsp;&nbsp;&nbsp; M<br />
          &gt;&gt;&gt;<br />
</p>
<p>Escape sequences can lead to unintended consequences with  file paths that contain backslashes. In this example, the <code>t</code> in terrain and the <code>n</code> in <code>neuse</code> are replaced by whitespace when the string is printed:<br />
<code><br />
          &gt;&gt;&gt; dataPath <span class="o">=</span> <span class="s">'C:\terrain\neuse_river'</span><br />
          &gt;&gt;&gt; dataPath<br />
          'C:\terrain\neuse_river'<br />
          &gt;&gt;&gt; <span class="key">print </span>dataPath<br />
          C:&nbsp;&nbsp;&nbsp;&nbsp;errain<br />
          euse_river<br />
</code></p>
<p>Here are three options for avoiding this problem:</p>
<ol>
<li>Use a forward slash instead of a backward slash. The forward slash is not an escape character, but is interpreted correctly as a separator in file paths. This book uses forward slashes (southwest to northeast) instead of backward slashes, as in this example:<br />
<p><code>&gt;&gt;&gt; dataPath <span class="o">=</span> <span class="s">'C:/terrain/neuse_river'<br />
</span>&gt;&gt;&gt; <span class="key">print</span> dataPath<br />
              C:/terrain/neuse_river<br />
</code></p>
</li>
<li>Double the backslashes. This works because the first slash is an escape character that tells the code to interpret the second slash literally as a slash.<br />
<br />
<code>&gt;&gt;&gt; dataPath <span class="o">=</span> <span class="s">'C:\\terrain\\neuse_river'<br />
</span>&gt;&gt;&gt; <span class="key">print</span> dataPath<br />
            C:\terrain\neuse_river<br />
</code><br />
</li>
<li>Use <em>raw strings</em>. When you first come across a string literal preceded by a lowercase <code>r</code>, you might guess that it's a typo. But in fact, placing an <code>r</code> just before a string literal creates a raw string. Python uses the raw value of a raw string. In other words, it disregards escape sequences, as in the following example:
            <p><code>&gt;&gt;&gt; 
              dataPath <span class="o">=</span> r<span class="s">'C:\terrain\neuse_river'</span><br />
              &gt;&gt;&gt; <span class="key">print</span> dataPath<br />
              C:\terrain\neuse_river<br />
</code></p>
</li>
</ol>
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">3.6 Unicode strings</span> <a name="escape" id="escape2"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>When you start using ArcGIS functionality in Chapter 6, you will begin to see a lowercase <code>u</code> preceding strings that are returned by GIS methods. The <code>u</code> stands for unicode string. A <em>unicode string</em> is a specially encoded string that can represent thousands of characters, so that non-English characters, such as the Hindi alphabet can be represented. A unicode string is created by prepending a <code>u</code> to a string literal, as shown here:<br />
<code><br />
          &gt;&gt;&gt; dataFile <span class="o">=</span> <span class="s">u'counties.shp'</span><br />
          &gt;&gt;&gt; dataFile<br />
          u'counties.shp'<br />
          &gt;&gt;&gt;<span class="nb"> type</span><span class="p">(</span><span class="n">dataFile</span><span class="p">)</span><br />
          &lt;type 'unicode'&gt;<br />
</code><br />
          The difference between <code>'str'</code> and <code>'unicode'</code> string data types in Python lies in the way that the strings are encoded. The default encoding for Python 'str' strings is based on the American Standard Code for Information Interchange (ASCII). Because ASCII encodings were  designed to encode English language characters, they can only represent hundreds of characters; whereas, the more recently developed unicode technique can encode thousands. Because of its capability to encode non-English languages,  software programs, including the ArcGIS Python interface, have begun to use unicode encodings more often. <br />
<br />
          You don't need to know exactly how unicode or ASCII strings encoding works. You just need to know that  in your GIS scripts, you can handle <code>'unicode'</code> strings just like <code>'str'</code> strings. 
          They have the same string operations and methods. The following examples demonstrate using a few string methods and operations on the unicode variable <code>dataFile</code>: <br />
<code><br />
          &gt;&gt;&gt; dataFile<span class="o">.</span>endswith<span class="p">(</span><span class="s">&#39;.shp&#39;</span> <span class="p">)</span> <span class="comment"># Does the string start with '.shp'?</span><br />
          True<br />
          &gt;&gt;&gt; dataFile<span class="o">.</span>startswith<span class="p">(</span><span class="s">&#39;co&#39;</span> <span class="p">) </span><span class="comment"># Does the string start with 'co'?</span><br />
          True<br />
          &gt;&gt;&gt; dataFile<span class="o">.</span>count<span class="p">(</span><span class="s">&#39;s&#39;</span> <span class="p">)</span> <span class="comment"># Count the number of times 's' occurs in the string.</span><br />
          2<br />
</code></p>
<p>Methods and operations that return strings output unicode when the input object is unicode:<br />
<br />
<code>
          &gt;&gt;&gt; dataFile.upper<span class="p">(</span> <span class="p">)</span> <span class="comment"># Return a string in which all the letters are capitalized.</span><br />
          u'COUNTIES.SHP'<br />
        &gt;&gt;&gt; <span class="n">dataFile</span><span class="p">[</span><span class="mi">5</span><span class="p">] </span><span class="comment"># Index the 6th character in the string.</span><br />
          u'i'<br />
          &gt;&gt;&gt; dataFile <span class="o">+</span> dataFile <span class="comment"># Concatenate two strings.</span><br />
          u'counties.shpcounties.shp'<br />
</code></p>
<p>Just as the quotation marks are not printed when you use the built-in <code>print</code> function, the unicode <code>u</code> is not printed when you use the built-in <code>print</code> function to print a unicode string:</p>
<p><code>&gt;&gt;&gt; <span class="key">print</span> dataFile<br />
          counties.shp<br />
</code></p>
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">3.7 Printing Strings and Numbers</span> <a name="printing" id="printing"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>The built-in <code>print</code> function is used all the time in scripting, so we'll show a few examples of how it can be used. As mentioned earlier, the <code>print</code> function does not use parentheses around the arguments (though this changes in Python 3.0 in which the parentheses become required). The arguments are the expressions to be printed. We often want to print multiple expressions within the same print statement and these expressions need to be linked together so that the print statement uses them all. Here we demonstrate three  approaches to linking expressions to be printed:</p>
<p><strong>Commas.</strong> When commas are placed between variables in a <code>print</code> expression, the variable values are printed separated by a space. The print statement inserts a space where each comma occurs between printed items:</p>
<p><code>&gt;&gt;&gt; dataFile <span class="o">=</span> <span class="s">'counties.shp'</span><br />
          &gt;&gt;&gt; FID <span class="o">=</span> <span class="num">862</span><br />
          &gt;&gt;&gt; <span class="key">print</span> dataFile, FID <br />
          counties.shp 862<br />
</code></p>
<p> The expression can be a combination of comma separated string literals, numbers, and variables of assorted data types:</p>
<p><code>&gt;&gt;&gt; <span class="key">print </span><span class="s">'The first FID in'</span>, dataFile, <span class="s">'is'</span>, FID, <span class="s">'!'</span><br />
          The first FID in counties.shp is 862 ! <br />
</code></p>
<p><strong>Concatenation. </strong>The spacing created by the commas may be undesirable in some situations. For example, we usually don't want a space before punctuation. Concatenation  can be used to avoid this problem, though concatenation introduces its own complications. Recall that concatenation uses a plus sign to join strings. If we replace each comma in the above expression with a plus sign we get a <code>TypeError</code> because one piece of the expression is not a string:<br />
<br />
<code>&gt;&gt;&gt; <span class="key">print </span><span class="s">'The first FID in' </span><span class="o">+</span> dataFile <span class="o">+</span> <span class="s">'is'</span> <span class="o">+</span> FID <span class="o">+</span> <span class="s">'!'</span> <br />
<span class="err">Traceback (most recent call last):<br />
          File &quot;&lt;interactive input&gt;&quot;, line 1, in ?<br />
          TypeError: cannot concatenate 'str' and 'int' objects</span><br />
</code><br />
<code>FID</code> is an integer type, so it must be cast to string. This works, but the spacing isn't correct since the plus signs are not replaced by spaces:<br />
<code><br />
          &gt;&gt;&gt; <span class="key">print </span><span class="s">'The first FID in' </span><span class="o">+</span> dataFile <span class="o">+</span> <span class="s">'is' </span><span class="o">+</span> str(FID) <span class="o">+</span> <span class="s">'!'<br />
</span>The first FID incounties.shpis862!<br />
</code><br />
          When  using concatenation statements to print strings, you may have to tailor the spacing, by adding spaces in the string literals: </p>
<p><code>&gt;&gt;&gt; <span class="key">print </span><span class="s">'The first FID in ' </span><span class="o">+</span> dataFile <span class="o">+</span> <span class="s">' is '</span> <span class="o">+</span> str(FID) <span class="o">+</span> <span class="s">'!'</span> <br />
          The first FID in counties.shp is 862!<br />
</code></p>
<p><strong>String formatting.</strong> The string <code>format</code> method provides an alternative  that uses place-holders to allow you to lay out a string with the spacing you want  and handle different variable types without casting. The <code>format</code> method is performed on a string literal object, which contains place-holders for variables and gets the variables as a list of arguments. Place-holders are inserted into string literals as numbers within curly brackets (<code>{0}</code>, <code>{1}</code>, <code>{2}</code>... and so forth). The numbers refer to the zero-based index of the arguments in the order they are listed. The string values of arguments are substituted for the place-holders. The method returns a string with these substitutions. This example calls the <code>format</code> method in a print statement:<br />
<code><br />
          &gt;&gt;&gt; </code><code><span class="n"><span class="s"><span class="key">print </span>'The first FID in {0} is {1}!'</span></span></code><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">dataFile</span><span class="p">,</span> <span class="n">FID</span> <span class="p">)</span><br />
          The first FID in counties.shp is 862! <br />
</p>
<p>The <code>format</code> method uses the dot notation:</p>
<ul>
<li><code><span class="s">'The first FID in {0} is {1}!'</span></code> is the object.</li>
<li><code>format</code> is the method.</li>
<li><code>dataFile</code> and <code>FID</code> are the arguments. The string value of <code>dataFile</code> is substituted for <code>{0}</code>. The string value of <code>FID</code> is substituted for <code>{1}</code> because dataFile appears first in the argument list and FID appears second.</li>
<li>The return value is printed.</li>
</ul>
<p>Triple quotes can be used in combination with the  <code>format</code> method to create multi-line strings:<br />
<code><br />
          &gt;&gt;&gt; </code><code><span class="n"><span class="s"><span class="key">print</span></span></span></code> <span class="s">'''X&nbsp;&nbsp;&nbsp;&nbsp;Y&nbsp;&nbsp;&nbsp;&nbsp;Value<br />
</span>...<span class="s"> -------------------<br />
</span>...<span class="s">{0}&nbsp;&nbsp;&nbsp;&nbsp;{1}&nbsp;&nbsp;&nbsp;&nbsp;{2}'''</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mf">6.3</span><span class="p">)</span><br />
          X&nbsp;&nbsp;&nbsp;&nbsp;Y&nbsp;&nbsp;&nbsp;&nbsp;Value<br />
          -------------------<br />
          16 <span class="s">&nbsp;&nbsp;&nbsp;</span>255<span class="s">&nbsp;&nbsp;&nbsp;&nbsp;</span>6.3<br />
</p>
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><b class="head">3.8 Key terms</b><a name="keyterms" id="keyterms2"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p><code>'int'</code> data type<br />
<code>'float'</code> data type<br />
          Integer division<br />
<code>'str'</code> data type<br />
          String literal <br />
          String variable <br />
          Line continuation<br />
          Zero-based indexing<br />
          Built-in <code>len</code> function<br />
          Slicing<br />
          Concatenating<br />
          Casting<br />
          The <code>in</code> keyword<br />
          Dot notation<br />
          Objects <br />
          Methods<br />
          context menus<br />
          Whitespace characters<br />
          Escape sequences <br />
          Raw strings<br />
          Unicode strings<br />
          String formatting</p>
<hr />
<table border="0" width="775">
<tbody>
<tr>
<th scope="row" align="left"><span class="head">3.9 Exercises</span> <a name="exercises" id="exercises"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<ol>
<li>The Python statements on the left use  string operations involving the variable <code>happyCow</code><em>. </em>Match the Python statement with its output.  All answers MUST BE one of the letters A through I. The string variable called <code>happyCow</code>  is assigned as follows: <br />
<code><br />
            &gt;&gt;&gt;
            happyCow <span class="o">=</span><span class="s"> 'meadows.shp'</span><br />
</code><br />
<br />
<table width="675" border="3">
<tr>
<td width="388">Python statement </td>
<td width="267">Output (notice there are 9 letters) </td>
</tr>
<tr>
<td><ol>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span></code> <br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">5</span><span class="p">]</span> <span class="o">+</span> <span class="n">happyCow</span><span class="p">[</span><span class="o">-</span><span class="mi">4</span><span class="p">:]</span></code> <br />
<br />
</li>
<li><code><span class="nb">len</span><span class="p">(</span><span class="n">happyCow</span><span class="p">)</span></code> <br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">5</span><span class="p">]</span></code><br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="o">-</span><span class="mi">4</span><span class="p">:]</span> </code><br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[:</span><span class="mi">5</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="n">happyCow</span> <span class="ow">in</span> <span class="s">&quot;5meadows.shp&quot;</span></code><br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;W&#39;</span> <span class="ow">in</span> <span class="n">happyCow</span></code><br />
</li>
</ol></td>
<td><br />
<ol type="A">
<li><code><span class="ne">IndexError</span></code><br />
<br />
</li>
<li><code><span class="s">&#39;meado.shp&#39;</span></code> </li>
<br />
<li><code><span class="s">&#39;meado&#39;</span></code><br />
<br />
</li>
<li><code>True</code><br />
<br />
</li>
<li><code>False</code><br />
<br />
</li>
<li><code><span class="mi">11</span></code><br />
<br />
</li>
<li><code><span class="s">&#39;w&#39;</span></code><br />
<br />
</li>
<li><code><span class="s">&#39;.shp&#39;</span></code><br />
<br />
</li>
<li><code><span class="s">&#39;m&#39;</span></code></li>
</ol>
<br />
<br /> </td>
</tr>
</table>
<br />
<br />
</li>
<li>These Python statements use string methods  and operations involving the variable <code>LCS_ID</code><em>. </em>Determine if each  Python statement is true or false. The string variable called <code>LCS_ID</code> is assigned as follows:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <code>LCS_ID <span class="o">=</span> <span class="s">'0017238'</span></code><br />
<br />
<ol type="a">
<li><code><span class="s">'17'</span> <span class="ow">in</span> <span class="n">LCS_ID</span></code> </li>
<li><code><span class="n">LCS_ID</span><span class="o">.</span><span class="n">isdigit</span><span class="p">(</span> <span class="p">)</span></code> </li>
<li><code><span class="n">LCS_ID</span><span class="o">.</span><span class="n">lstrip</span><span class="p">(</span><span class="s">'0'</span><span class="p">)</span> <span class="o">==</span> <span class="s">'17238'</span> </code></li>
<li><code><span class="n">LCS_ID</span><span class="o">.</span><span class="n">zfill</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="o">==</span> <span class="s">'10101010' </span> </code></li>
<li><code><span class="n">LCS_ID</span> <span class="o">+</span> <span class="s">'10'</span> <span class="o">==</span> <span class="mi">17248</span> </code></li>
<li><code><span class="n">LCS_ID</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">==</span> <span class="s">'3'</span> </code></li>
<li><code><span class="nb">len</span><span class="p">(</span><span class="n">LCS_ID</span><span class="p">)</span> <span class="o">==</span> <span class="mi">7</span> </code></li>
<li><code><span class="n">LCS_ID</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">7</span><span class="p">]</span> <span class="o">==</span> <span class="s">'0017238'</span> </code></li>
<li><code><span class="nb">int</span><span class="p">(</span><span class="n">LCS_ID</span><span class="p">)</span> <span class="o">+</span> <span class="mi">10</span> <span class="o">==</span> <span class="mi">17248</span> </code></li>
<li><code><span class="n">LCS_ID</span> <span class="o">!=</span> <span class="mi">17238</span> </code><br />
</li>
</ol>
<br />
</li>
<li>The Python statements on the left use string methods    and operations involving the variable <code>state</code><em>. </em>Match the Python statement with its output. All answers MUST BE one of the letters A through L. The string variable called <code>state</code> is assigned as follows: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>state <span class="o">=</span> <span class="s">'missiSSippi'</span></code><br />
<br />
<table width="713" border="3">
<tr>
<td width="392">Python statement </td>
<td width="301">Output</td>
</tr>
<tr>
<td><ol>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="s">&quot;i&quot;</span><span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">capitalize</span><span class="p">(</span> <span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">&quot;ippi&quot;</span><span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&quot;i&quot;</span><span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">state</span><span class="p">,</span><span class="n">state</span><span class="p">])</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;ss&quot;</span><span class="p">,</span><span class="s">&quot;RR&quot;</span><span class="p">)</span></code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;i&#39;</span><span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">upper</span><span class="p">( )</span></code><br />
<br />
</li>
<li> <code><span class="n">state</span><span class="p">[</span><span class="mi">7</span><span class="p">:]</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">1</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;Miss&#39;</span> <span class="ow">in</span> <span class="n">state</span> </code></li>
</ol></td>
<td><ol type="A">
<li><code><span class="s">&#39;Mississippi&#39;</span></code><br />
<br />
</li>
<li><code><span class="s">'miRRiRRippi&#39;</span> </code><br />
<br />
</li>
<li><code><span class="p">[</span><span class="s">&#39;m&#39;</span><span class="p">,</span> <span class="s">&#39;ss&#39;</span><span class="p">,</span> <span class="s">&#39;SS&#39;</span><span class="p">,</span> <span class="s">&#39;pp&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;m&#39;</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;MISSISSIPPI&#39;</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;missiSSippi;missiSSippi&#39;</span> </code><br />
<br />
</li>
<li><code><span class="bp"></span>True</code><br />
<br />
</li>
<li><code><span class="s">&#39;i&#39;</span> </code><br />
<br />
</li>
<li><code><span class="mi">4</span> </code><br />
<br />
</li>
<li><code><span class="mi">1</span> </code><br />
<br />
</li>
<li><code><span class="bp">False</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;ippi&#39;</span></code></li>
</ol></td>
</tr>
</table>
<br />
<br />
</li>
<li>Test your understanding of this chapter's 'Key terms' by matching the Python statement with a term or phrase that describes it. These four variables used in the matching have been assigned as follows:<br />
            &nbsp;<code><br />
            &gt;&gt;&gt;<span class="n"> dataDir</span> <span class="o">=</span> <span class="s">&quot;C:/data&quot; </span><br />
            &gt;&gt;&gt;<span class="n"> data</span> <span class="o">=</span> <span class="s">&quot;bird_sightings&quot;</span> <br />
            &gt;&gt;&gt;<span class="n"> count</span> <span class="o">=</span> <span class="mi">500</span> <br />
            &gt;&gt;&gt; <span class="n">n</span> <span class="o">=</span> <span class="mi">3</span> <br />
</code><br />
<table width="634" border="3">
<tr>
<td width="328">Python statement </td>
<td width="286">Output</td>
</tr>
<tr>
<td><ol>
<li><code>count/n</code><br />
<br />
</li>
<li><code>&quot;nest&quot;</code><br />
<br />
</li>
<li><code> r&quot;count\n&quot;</code><br />
<br />
</li>
<li><code>u&quot;hatchling&quot;</code><br />
<br />
</li>
<li><code>len(data)</code><br />
<br />
</li>
<li><code>str(count)</code><br />
<br />
</li>
<li><code>dataDir + &quot;/&quot;+ data</code><br />
<br />
</li>
<li><class><code>data[0:n] </code><br />
<br />
</class></li>
<li><code>data[n]</code><br />
<br />
</li>
<li><code>"bird" in data</code><br />
<br />
</li>
<li><code>"{0} records".format(count)</code><br />
<br />
</li>
<li><code>data.split("_")</code><br />
<br />
</li>
<li><code>"Bird data \
Wing span"</code><br />
</li>
</ol></td>
<td><ol type="A">
<li>Casting<br />
<br />
</li>
<li>Indexing<br />
<br />
</li>
<li>Slicing<br />
<br />
</li>
<li>Finding the length of a string<br />
<br />
</li>
<li>Concatenating<br />
<br />
</li>
<li>Line continuation<br />
<br />
</li>
<li>String literal<br />
<br />
</li>
<li>String method that is the inverse of the <code>join</code> method.<br />
<br />
</li>
<li>Escape sequence<br />
<br />
</li>
<li>Integer division<br />
<br />
</li>
<li>Raw string<br />
<br />
</li>
<li>Unicode string<br />
<br />
</li>
<li>String formatting</li>
</ol></td>
</tr>
</table>
<br />
</li>
<li><strong>printPractice.py</strong> Modify sample script 'printPractice.py', so that it prints the same statement four times, but using 4 distinct techniques--hard-coding, commas, concatenation, and string formatting. The hard-coding is already done. The other three techniques have been started  but they contain mistakes. These techniques should each use all three of the provided variables. Once the mistakes have been corrected, run the script to make sure that it prints the statement identically four times:<br />
<br />
<code>
            There are 12 traffic lights within the 5 mile buffer and 20 intersections.<br />
            There are 12 traffic lights within the 5 mile buffer and 20 intersections.<br />
            There are 12 traffic lights within the 5 mile buffer and 20 intersections.<br />
            There are 12 traffic lights within the 5 mile buffer and 20 intersections.<br />
</code><br />
</li>
<li>This problem deals with date time stamps that have the form MM/DD/YYYY
            HH:MM:SSxM (where xM
            is AM for morning and PM otherwise). Part (a) creates a date-time variable which is used in all other parts. Solutions should work for other values of this variable. Write one or more lines of code to achieve the outcome described in each part. 
            <ol type="a">
<li>Use an assignment statement to set a variable named <code>dt</code> to '07/28/2055 05:25:33PM'.</li>
<li>Use the <code>in</code> keyword in a code statement to  print true if the value of <code>dt</code> is in the morning (and false otherwise). </li>
<li>Use slicing to extract the month from <code>dt</code>.</li>
<li>Use the <code>split</code> method twice and then use indexing to extract the hour from <code>dt</code>.</li>
<li>Use the <code>split</code> method twice and then use indexing to extract the year from <code>dt</code>.<br />
<br />
</li>
</ol>
</li>
<li>Write one or more lines of code to achieve the outcome described in each part. <br />
<ol type="a">
<li>Often geoprocessing involves sorting data files based on their names. For example, you may want to move all the files from Region 1to separate directory. Write a line of code to check if a variable named <code>filename</code> contains a substring that matches the value of a variable named <code>code</code>. The examples below show how the line of code could be used.<br />
<code><br />
&gt;&gt;&gt; <span class="c"># Sample input 1: </span> <br />
&gt;&gt;&gt; <span class="n">filename</span> <span class="o">=</span> <span class="s">&quot;Forest361Region1_rec.shp&quot;</span><br />
&gt;&gt;&gt; <span class="n">code</span> <span class="o">=</span> <span class="s">&quot;Region1&quot;</span> <br />
&gt;&gt;&gt; <span class="c"># Insert line of code here.</span> <br />
True<br />
&gt;&gt;&gt; <span class="c"># Sample input 2:</span> <br />
&gt;&gt;&gt; <span class="n">filename</span> <span class="o">=</span> <span class="s">&quot;Marsh12Region4.shp&quot;</span> <br />
&gt;&gt;&gt; <span class="n">code</span> <span class="o">=</span> <span class="s">&quot;Region1&quot;</span> <br />
&gt;&gt;&gt; <span class="c"># Insert line of code here.</span> <br />
False<br />
</code><br />
</li>
<li>Write a line of code to using the <code>rstrip</code> method and an assignment statement to remove the trailing whitespace from the string variable named <code>data</code>. The variable  contains a line of tab delimited North Carolina county forestry data.
                The example below shows how the line of code could be used.
                <p><code>&gt;&gt;&gt; <span class="comment"># Sample input: </span><br />
                  &gt;&gt;&gt;  
                  data <span class="o">=</span> <span class="s">&quot;               Site:\tNortheast Prong\tDARE\t01\t\n\n&quot;</span><br />
                  &gt;&gt;&gt; data<br />
</code><code><span class="n">' Site:\tNortheast Prong\tDARE\t01\t\n\n'</span></code><br />
                  &gt;&gt;&gt; <span class="comment"># Insert line of code here.</span><span class="num"></span><br />
                  &gt;&gt;&gt; data<br />
<code><span class="n">&quot;               Site:\tNortheast Prong\tDARE\t01&quot;</span></code><br />
</p>
</li>
<li>
<p>Suppose that we are editing data and saving the results in another file. We want to append the string <code>'_edited'</code> to the input base name to create the output name. For example, if the input file name is named  <code>'countiesNC.txt'</code>,  the output file should be <span class="n">named <code>'countiesNC_edited.txt'</code>. If the input file is named <code><span class="n">'</span>riversWVA.txt'</code>,  the output file  should be named <code><span class="n">'</span>riversWVA_edited.txt'</code>, and so forth. Write a line of code  that uses slicing, concatenation, and a variable named <code>input</code> to assign a value to a variable named <code>output</code>. The example below shows how the line of code could be used.<br />
<br />
<code>&gt;&gt;&gt;<span class="comment"># Sample input:</span><br />
  &gt;&gt;&gt; inputName <span class="o">=</span><span class="s"> 'counties.shp'</span><br />
  &gt;&gt;&gt; <span class="comment"># Insert line of code here.</span><span class="num"></span><br />
  &gt;&gt;&gt; <span class="key">print</span> outputName<br />
</code><code><span class="n">counties_edited.shp</span></code><br />
</span></p>
</li>
<li>
<p>Write a line of code  using the string <code>format</code> method to print the desired output. Pass the given variables as arguments. The output from the print statements should appear exactly as shown on the last line.<br />
<code><br />
&gt;&gt;&gt; traffic_lights_count <span class="o">=</span> <span class="mi">12</span><br />
&gt;&gt;&gt; buffer_dist <span class="o">=</span> <span class="mi">5</span><br />
&gt;&gt;&gt; intersection_count <span class="o">=</span> <span class="mi">20</span><br />
&gt;&gt;&gt; <span class="comment"># Insert line of code here.</span></code><code><span class="n"><br />
                  There are 12 traffic lights within the 5 buffer and 20 intersections.</span></code><br />
</p>
</li>
<li>Write a line of code  using the string <code>format</code> method to print the desired output. Pass the given variables as arguments. The output from the print statements should appear exactly as shown on the last line.
                <code></code><p>
                  &gt;&gt;&gt; buffer_input <span class="o">=</span> <span class="s">'crime_sites'</span><br />
                  &gt;&gt;&gt; num <span class="o">=</span> <span class="mi">32</span><br />
                  &gt;&gt;&gt; <span class="comment"># Insert line of code here.</span><br />
<code><span class="n">crime_sites.shp has been successfully buffered. Results were saved in C:/bufferOut32.shp</span></code><br />
</p>
</li>
</ol>
</li>
</ol><a href="#top">back to top</a> <strong>Table 3.1: </strong>Numerical operators.
              <table width="453" border="1" cellpadding="5">
<tr>
<th width="86" scope="row">Operation</th>
<th width="131" align="center">Operator</th>
<th width="190">Example</th>
</tr>
<tr>
<td scope="row">Addition</td>
<td align="center"><code>+</code></td>
<td><code><span class="mi">7</span> <span class="o">+</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">9</span></code></td>
</tr>
<tr>
<td scope="row">Subtraction</td>
<td align="center"><code>-</code></td>
<td><code><span class="mi">7</span> <span class="o">-</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">5</span> </code></td>
</tr>
<tr>
<td height="29" scope="row">Multiplication</td>
<td align="center"><code>*</code></td>
<td><code><span class="mi">7</span> <span class="o">*</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">14</span> </code></td>
</tr>
<tr>
<td scope="row"><p>Division</p></td>
<td align="center"><code>/</code></td>
<td><code><span class="mi">7</span> / <span class="mi">2</span> <span class="o">=</span><span class="mi"> 3</span> </code><code></code></td>
</tr>
<tr>
<td scope="row">Exponentiation</td>
<td align="center"><code>**</code><code></code></td>
<td><code><span class="mi">7</span><span class="o">*</span><span class="o">*</span><span class="mi">2</span><span class="o"> =</span> <span class="mi">9</span> </code></td>
</tr>
<tr>
<td scope="row">Modulus division </td>
<td align="center"><code>%</code></td>
<td><code><span class="mi">7 <span class="o">%</span></span><span class="mi"> 2 </span><span class="o">=</span> <span class="mi">1</span> </code></td>
</tr>
</table>Addition<code>+</code><code><span class="mi">7</span> <span class="o">+</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">9</span></code>Subtraction<code>-</code><code><span class="mi">7</span> <span class="o">-</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">5</span> </code>Multiplication<code>*</code><code><span class="mi">7</span> <span class="o">*</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">14</span> </code><p>Division</p><code>/</code><code><span class="mi">7</span> / <span class="mi">2</span> <span class="o">=</span><span class="mi"> 3</span> </code><code></code>Exponentiation<code>**</code><code></code><code><span class="mi">7</span><span class="o">*</span><span class="o">*</span><span class="mi">2</span><span class="o"> =</span> <span class="mi">9</span> </code>Modulus division <code>%</code><code><span class="mi">7 <span class="o">%</span></span><span class="mi"> 2 </span><span class="o">=</span> <span class="mi">1</span> </code><a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <p><strong><br />
                  Table 3.2: </strong>Sequence Operations on Strings<strong><br />
<br />
<code>&gt;&gt;&gt; exampleString <span class="o">=</span> <span class="s">'tuzigoot'</span></code></strong></p>
<table width="732" border="3">
<tr>
<td width="130"><strong>Operation</strong></td>
<td width="260"><strong>Sample code</strong></td>
<td width="316"><strong>Return value </strong></td>
</tr>
<tr>
<td>length</td>
<td><code>len(exampleString)</code></td>
<td><p><code>8</code><br />
</p></td>
</tr>
<tr>
<td>indexing</td>
<td><code>exampleString[2]</code></td>
<td><code>'z'</code><br /></td>
</tr>
<tr>
<td>slicing</td>
<td><code>exampleString[:-4]</code></td>
<td><code>'tuzi'</code><br /></td>
</tr>
<tr>
<td>concatenation</td>
<td><code>exampleString <span class="o">+</span> exampleString</code></td>
<td><code>'tuzigoottuzigoot'</code></td>
</tr>
<tr>
<td>membership</td>
<td><code>'ample' in exampleString</code></td>
<td><p><code>False</code><br />
</p></td>
</tr>
</table><strong>Operation</strong><strong>Sample code</strong><strong>Return value </strong>length<code>len(exampleString)</code><p><code>8</code><br />
</p>indexing<code>exampleString[2]</code><code>'z'</code><br />slicing<code>exampleString[:-4]</code><code>'tuzi'</code><br />concatenation<code>exampleString <span class="o">+</span> exampleString</code><code>'tuzigoottuzigoot'</code>membership<code>'ample' in exampleString</code><p><code>False</code><br />
</p><a href="#top">back to top</a> <a href="#top">back to top</a> <code>\n</code>new line <code>\t</code>tab<a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> Python statement Output (notice there are 9 letters) <ol>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span></code> <br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">5</span><span class="p">]</span> <span class="o">+</span> <span class="n">happyCow</span><span class="p">[</span><span class="o">-</span><span class="mi">4</span><span class="p">:]</span></code> <br />
<br />
</li>
<li><code><span class="nb">len</span><span class="p">(</span><span class="n">happyCow</span><span class="p">)</span></code> <br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">5</span><span class="p">]</span></code><br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="o">-</span><span class="mi">4</span><span class="p">:]</span> </code><br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[:</span><span class="mi">5</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="n">happyCow</span> <span class="ow">in</span> <span class="s">&quot;5meadows.shp&quot;</span></code><br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;W&#39;</span> <span class="ow">in</span> <span class="n">happyCow</span></code><br />
</li>
</ol><br />
<ol type="A">
<li><code><span class="ne">IndexError</span></code><br />
<br />
</li>
<li><code><span class="s">&#39;meado.shp&#39;</span></code> </li>
<br />
<li><code><span class="s">&#39;meado&#39;</span></code><br />
<br />
</li>
<li><code>True</code><br />
<br />
</li>
<li><code>False</code><br />
<br />
</li>
<li><code><span class="mi">11</span></code><br />
<br />
</li>
<li><code><span class="s">&#39;w&#39;</span></code><br />
<br />
</li>
<li><code><span class="s">&#39;.shp&#39;</span></code><br />
<br />
</li>
<li><code><span class="s">&#39;m&#39;</span></code></li>
</ol>
<br />
<br /> Python statement Output<ol>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="s">&quot;i&quot;</span><span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">capitalize</span><span class="p">(</span> <span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">&quot;ippi&quot;</span><span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&quot;i&quot;</span><span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">state</span><span class="p">,</span><span class="n">state</span><span class="p">])</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;ss&quot;</span><span class="p">,</span><span class="s">&quot;RR&quot;</span><span class="p">)</span></code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;i&#39;</span><span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">upper</span><span class="p">( )</span></code><br />
<br />
</li>
<li> <code><span class="n">state</span><span class="p">[</span><span class="mi">7</span><span class="p">:]</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">1</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;Miss&#39;</span> <span class="ow">in</span> <span class="n">state</span> </code></li>
</ol><ol type="A">
<li><code><span class="s">&#39;Mississippi&#39;</span></code><br />
<br />
</li>
<li><code><span class="s">'miRRiRRippi&#39;</span> </code><br />
<br />
</li>
<li><code><span class="p">[</span><span class="s">&#39;m&#39;</span><span class="p">,</span> <span class="s">&#39;ss&#39;</span><span class="p">,</span> <span class="s">&#39;SS&#39;</span><span class="p">,</span> <span class="s">&#39;pp&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;m&#39;</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;MISSISSIPPI&#39;</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;missiSSippi;missiSSippi&#39;</span> </code><br />
<br />
</li>
<li><code><span class="bp"></span>True</code><br />
<br />
</li>
<li><code><span class="s">&#39;i&#39;</span> </code><br />
<br />
</li>
<li><code><span class="mi">4</span> </code><br />
<br />
</li>
<li><code><span class="mi">1</span> </code><br />
<br />
</li>
<li><code><span class="bp">False</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;ippi&#39;</span></code></li>
</ol>Python statement Output<ol>
<li><code>count/n</code><br />
<br />
</li>
<li><code>&quot;nest&quot;</code><br />
<br />
</li>
<li><code> r&quot;count\n&quot;</code><br />
<br />
</li>
<li><code>u&quot;hatchling&quot;</code><br />
<br />
</li>
<li><code>len(data)</code><br />
<br />
</li>
<li><code>str(count)</code><br />
<br />
</li>
<li><code>dataDir + &quot;/&quot;+ data</code><br />
<br />
</li>
<li><class><code>data[0:n] </code><br />
<br />
</class></li>
<li><code>data[n]</code><br />
<br />
</li>
<li><code>"bird" in data</code><br />
<br />
</li>
<li><code>"{0} records".format(count)</code><br />
<br />
</li>
<li><code>data.split("_")</code><br />
<br />
</li>
<li><code>"Bird data \
Wing span"</code><br />
</li>
</ol><ol type="A">
<li>Casting<br />
<br />
</li>
<li>Indexing<br />
<br />
</li>
<li>Slicing<br />
<br />
</li>
<li>Finding the length of a string<br />
<br />
</li>
<li>Concatenating<br />
<br />
</li>
<li>Line continuation<br />
<br />
</li>
<li>String literal<br />
<br />
</li>
<li>String method that is the inverse of the <code>join</code> method.<br />
<br />
</li>
<li>Escape sequence<br />
<br />
</li>
<li>Integer division<br />
<br />
</li>
<li>Raw string<br />
<br />
</li>
<li>Unicode string<br />
<br />
</li>
<li>String formatting</li>
</ol><span class="head">3.1 Numbers</span> <a name="nums" id="introduction2"></a><a href="#top">back to top</a> OperationOperatorExample<strong>Table 3.1: </strong>Numerical operators.
              <table width="453" border="1" cellpadding="5">
<tr>
<th width="86" scope="row">Operation</th>
<th width="131" align="center">Operator</th>
<th width="190">Example</th>
</tr>
<tr>
<td scope="row">Addition</td>
<td align="center"><code>+</code></td>
<td><code><span class="mi">7</span> <span class="o">+</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">9</span></code></td>
</tr>
<tr>
<td scope="row">Subtraction</td>
<td align="center"><code>-</code></td>
<td><code><span class="mi">7</span> <span class="o">-</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">5</span> </code></td>
</tr>
<tr>
<td height="29" scope="row">Multiplication</td>
<td align="center"><code>*</code></td>
<td><code><span class="mi">7</span> <span class="o">*</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">14</span> </code></td>
</tr>
<tr>
<td scope="row"><p>Division</p></td>
<td align="center"><code>/</code></td>
<td><code><span class="mi">7</span> / <span class="mi">2</span> <span class="o">=</span><span class="mi"> 3</span> </code><code></code></td>
</tr>
<tr>
<td scope="row">Exponentiation</td>
<td align="center"><code>**</code><code></code></td>
<td><code><span class="mi">7</span><span class="o">*</span><span class="o">*</span><span class="mi">2</span><span class="o"> =</span> <span class="mi">9</span> </code></td>
</tr>
<tr>
<td scope="row">Modulus division </td>
<td align="center"><code>%</code></td>
<td><code><span class="mi">7 <span class="o">%</span></span><span class="mi"> 2 </span><span class="o">=</span> <span class="mi">1</span> </code></td>
</tr>
</table>Addition<code>+</code><code><span class="mi">7</span> <span class="o">+</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">9</span></code>Subtraction<code>-</code><code><span class="mi">7</span> <span class="o">-</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">5</span> </code>Multiplication<code>*</code><code><span class="mi">7</span> <span class="o">*</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">14</span> </code><p>Division</p><code>/</code><code><span class="mi">7</span> / <span class="mi">2</span> <span class="o">=</span><span class="mi"> 3</span> </code><code></code>Exponentiation<code>**</code><code></code><code><span class="mi">7</span><span class="o">*</span><span class="o">*</span><span class="mi">2</span><span class="o"> =</span> <span class="mi">9</span> </code>Modulus division <code>%</code><code><span class="mi">7 <span class="o">%</span></span><span class="mi"> 2 </span><span class="o">=</span> <span class="mi">1</span> </code>OperationOperatorExampleAddition<code>+</code><code><span class="mi">7</span> <span class="o">+</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">9</span></code>Subtraction<code>-</code><code><span class="mi">7</span> <span class="o">-</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">5</span> </code>Multiplication<code>*</code><code><span class="mi">7</span> <span class="o">*</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">14</span> </code><p>Division</p><code>/</code><code><span class="mi">7</span> / <span class="mi">2</span> <span class="o">=</span><span class="mi"> 3</span> </code><code></code>Exponentiation<code>**</code><code></code><code><span class="mi">7</span><span class="o">*</span><span class="o">*</span><span class="mi">2</span><span class="o"> =</span> <span class="mi">9</span> </code>Modulus division <code>%</code><code><span class="mi">7 <span class="o">%</span></span><span class="mi"> 2 </span><span class="o">=</span> <span class="mi">1</span> </code><span class="head">3.2 What is a string?</span> <a name="strings" id="strings"></a><a href="#top">back to top</a> <span class="head">3.3 Things you need to do to strings (a.k.a. string operations)</span> <a name="operations" id="operations"></a><a href="#top">back to top</a> <span class="head">3.3.1 Indexing into strings</span> <a name="index" id="operations3"></a><a href="#top">back to top</a> variableName[index_number]<span class="head">3.3.2 Slice strings</span> <a name="operations" id="operations2"></a><a href="#top">back to top</a> <strong><span class="head">3.3.3 Concatenate strings</span></strong><a href="#top">back to top</a> <strong><span class="head">3.3.4 Check for substring membership</span></strong><a href="#top">back to top</a> <p><strong><br />
                  Table 3.2: </strong>Sequence Operations on Strings<strong><br />
<br />
<code>&gt;&gt;&gt; exampleString <span class="o">=</span> <span class="s">'tuzigoot'</span></code></strong></p>
<table width="732" border="3">
<tr>
<td width="130"><strong>Operation</strong></td>
<td width="260"><strong>Sample code</strong></td>
<td width="316"><strong>Return value </strong></td>
</tr>
<tr>
<td>length</td>
<td><code>len(exampleString)</code></td>
<td><p><code>8</code><br />
</p></td>
</tr>
<tr>
<td>indexing</td>
<td><code>exampleString[2]</code></td>
<td><code>'z'</code><br /></td>
</tr>
<tr>
<td>slicing</td>
<td><code>exampleString[:-4]</code></td>
<td><code>'tuzi'</code><br /></td>
</tr>
<tr>
<td>concatenation</td>
<td><code>exampleString <span class="o">+</span> exampleString</code></td>
<td><code>'tuzigoottuzigoot'</code></td>
</tr>
<tr>
<td>membership</td>
<td><code>'ample' in exampleString</code></td>
<td><p><code>False</code><br />
</p></td>
</tr>
</table><strong>Operation</strong><strong>Sample code</strong><strong>Return value </strong>length<code>len(exampleString)</code><p><code>8</code><br />
</p>indexing<code>exampleString[2]</code><code>'z'</code><br />slicing<code>exampleString[:-4]</code><code>'tuzi'</code><br />concatenation<code>exampleString <span class="o">+</span> exampleString</code><code>'tuzigoottuzigoot'</code>membership<code>'ample' in exampleString</code><p><code>False</code><br />
</p><strong>Operation</strong><strong>Sample code</strong><strong>Return value </strong>length<code>len(exampleString)</code><p><code>8</code><br />
</p>indexing<code>exampleString[2]</code><code>'z'</code><br />slicing<code>exampleString[:-4]</code><code>'tuzi'</code><br />concatenation<code>exampleString <span class="o">+</span> exampleString</code><code>'tuzigoottuzigoot'</code>membership<code>'ample' in exampleString</code><p><code>False</code><br />
</p><span class="head">3.4 More things with strings (a.k.a. string methods)</span> <a name="methods" id="methods"></a><a href="#top">back to top</a> <strong><code>object.method(argument1, argument2, argument3,...)</code></strong><code><strong>variableName <span class="o">=</span> object.method(argument1, argument2, argument3,...)</strong></code><span class="head">3.5 File paths and raw strings</span> <a name="escape" id="escape"></a><a href="#top">back to top</a> White space escape sequences<code>\n</code>new line <code>\t</code>tab<span class="head">3.6 Unicode strings</span> <a name="escape" id="escape2"></a><a href="#top">back to top</a> <span class="head">3.7 Printing Strings and Numbers</span> <a name="printing" id="printing"></a><a href="#top">back to top</a> <b class="head">3.8 Key terms</b><a name="keyterms" id="keyterms2"></a><a href="#top">back to top</a> <span class="head">3.9 Exercises</span> <a name="exercises" id="exercises"></a><a href="#top">back to top</a> Python statement Output (notice there are 9 letters) <ol>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span></code> <br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">5</span><span class="p">]</span> <span class="o">+</span> <span class="n">happyCow</span><span class="p">[</span><span class="o">-</span><span class="mi">4</span><span class="p">:]</span></code> <br />
<br />
</li>
<li><code><span class="nb">len</span><span class="p">(</span><span class="n">happyCow</span><span class="p">)</span></code> <br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">5</span><span class="p">]</span></code><br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="o">-</span><span class="mi">4</span><span class="p">:]</span> </code><br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[:</span><span class="mi">5</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="n">happyCow</span> <span class="ow">in</span> <span class="s">&quot;5meadows.shp&quot;</span></code><br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;W&#39;</span> <span class="ow">in</span> <span class="n">happyCow</span></code><br />
</li>
</ol><br />
<ol type="A">
<li><code><span class="ne">IndexError</span></code><br />
<br />
</li>
<li><code><span class="s">&#39;meado.shp&#39;</span></code> </li>
<br />
<li><code><span class="s">&#39;meado&#39;</span></code><br />
<br />
</li>
<li><code>True</code><br />
<br />
</li>
<li><code>False</code><br />
<br />
</li>
<li><code><span class="mi">11</span></code><br />
<br />
</li>
<li><code><span class="s">&#39;w&#39;</span></code><br />
<br />
</li>
<li><code><span class="s">&#39;.shp&#39;</span></code><br />
<br />
</li>
<li><code><span class="s">&#39;m&#39;</span></code></li>
</ol>
<br />
<br /> Python statement Output<ol>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="s">&quot;i&quot;</span><span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">capitalize</span><span class="p">(</span> <span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">&quot;ippi&quot;</span><span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&quot;i&quot;</span><span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">state</span><span class="p">,</span><span class="n">state</span><span class="p">])</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;ss&quot;</span><span class="p">,</span><span class="s">&quot;RR&quot;</span><span class="p">)</span></code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;i&#39;</span><span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">upper</span><span class="p">( )</span></code><br />
<br />
</li>
<li> <code><span class="n">state</span><span class="p">[</span><span class="mi">7</span><span class="p">:]</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">1</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;Miss&#39;</span> <span class="ow">in</span> <span class="n">state</span> </code></li>
</ol><ol type="A">
<li><code><span class="s">&#39;Mississippi&#39;</span></code><br />
<br />
</li>
<li><code><span class="s">'miRRiRRippi&#39;</span> </code><br />
<br />
</li>
<li><code><span class="p">[</span><span class="s">&#39;m&#39;</span><span class="p">,</span> <span class="s">&#39;ss&#39;</span><span class="p">,</span> <span class="s">&#39;SS&#39;</span><span class="p">,</span> <span class="s">&#39;pp&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;m&#39;</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;MISSISSIPPI&#39;</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;missiSSippi;missiSSippi&#39;</span> </code><br />
<br />
</li>
<li><code><span class="bp"></span>True</code><br />
<br />
</li>
<li><code><span class="s">&#39;i&#39;</span> </code><br />
<br />
</li>
<li><code><span class="mi">4</span> </code><br />
<br />
</li>
<li><code><span class="mi">1</span> </code><br />
<br />
</li>
<li><code><span class="bp">False</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;ippi&#39;</span></code></li>
</ol>Python statement Output<ol>
<li><code>count/n</code><br />
<br />
</li>
<li><code>&quot;nest&quot;</code><br />
<br />
</li>
<li><code> r&quot;count\n&quot;</code><br />
<br />
</li>
<li><code>u&quot;hatchling&quot;</code><br />
<br />
</li>
<li><code>len(data)</code><br />
<br />
</li>
<li><code>str(count)</code><br />
<br />
</li>
<li><code>dataDir + &quot;/&quot;+ data</code><br />
<br />
</li>
<li><class><code>data[0:n] </code><br />
<br />
</class></li>
<li><code>data[n]</code><br />
<br />
</li>
<li><code>"bird" in data</code><br />
<br />
</li>
<li><code>"{0} records".format(count)</code><br />
<br />
</li>
<li><code>data.split("_")</code><br />
<br />
</li>
<li><code>"Bird data \
Wing span"</code><br />
</li>
</ol><ol type="A">
<li>Casting<br />
<br />
</li>
<li>Indexing<br />
<br />
</li>
<li>Slicing<br />
<br />
</li>
<li>Finding the length of a string<br />
<br />
</li>
<li>Concatenating<br />
<br />
</li>
<li>Line continuation<br />
<br />
</li>
<li>String literal<br />
<br />
</li>
<li>String method that is the inverse of the <code>join</code> method.<br />
<br />
</li>
<li>Escape sequence<br />
<br />
</li>
<li>Integer division<br />
<br />
</li>
<li>Raw string<br />
<br />
</li>
<li>Unicode string<br />
<br />
</li>
<li>String formatting</li>
</ol>------------------------------------------------------------rows: 41 cols: 2<span class="head">3.1 Numbers</span> <a name="nums" id="introduction2"></a>OperationOperatorExample<span class="head">3.2 What is a string?</span> <a name="strings" id="strings"></a><span class="head">3.3 Things you need to do to strings (a.k.a. string operations)</span> <a name="operations" id="operations"></a><span class="head">3.3.1 Indexing into strings</span> <a name="index" id="operations3"></a>variableName[index_number]<span class="head">3.3.2 Slice strings</span> <a name="operations" id="operations2"></a><strong><span class="head">3.3.3 Concatenate strings</span></strong><strong><span class="head">3.3.4 Check for substring membership</span></strong><span class="head">3.4 More things with strings (a.k.a. string methods)</span> <a name="methods" id="methods"></a><strong><code>object.method(argument1, argument2, argument3,...)</code></strong><code><strong>variableName <span class="o">=</span> object.method(argument1, argument2, argument3,...)</strong></code><span class="head">3.5 File paths and raw strings</span> <a name="escape" id="escape"></a>White space escape sequences<span class="head">3.6 Unicode strings</span> <a name="escape" id="escape2"></a><span class="head">3.7 Printing Strings and Numbers</span> <a name="printing" id="printing"></a><b class="head">3.8 Key terms</b><a name="keyterms" id="keyterms2"></a><span class="head">3.9 Exercises</span> <a name="exercises" id="exercises"></a><span class="head">Chapter objectives</span>
<br />
<br />
        After reading this chapter, you'll be able to do the following:
        <ul>
<li>Perform mathematical operations on numeric data types.</li>
<li>Differentiate between integers and floating point number division.</li>
<li>Determine the data type of a variable. </li>
<li>Index into, slice, and concatenate strings.</li>
<li>Find the length of a string and check if a substring is in a string.</li>
<li>Replace substrings, modify text case in strings, split strings, and join items into a single string. </li>
<li>Differentiate between string variables and string literals.</li>
<li>Locate online help for the specialized functions associated with strings.</li>
<li>Create strings that represent the location of data.</li>
<li>Format strings and numbers for printing.</li>
</ul>
<hr />
<p class="foo">
<span class="head">Chapter Outline</span><br />
<br />
<a href="#nums">Numbers</a><br />
<a href="#strings">What is a string?</a><br />
<a href="#operations">Things you need to do to strings (a.k.a. string operations)</a><br />
  &nbsp;&nbsp;&nbsp;&nbsp;Index into strings<br />
  &nbsp;&nbsp;&nbsp;&nbsp;Slice strings<br />
  &nbsp;&nbsp;&nbsp;&nbsp;Concatenate strings<br />
  &nbsp;&nbsp;&nbsp;&nbsp;Check for substring membership<br />
<a href="#methods">More things with strings (a.k.a. string methods) </a><br />
<a href="#escape">File paths and raw strings</a><br />
          Unicode strings<br />
<a href="#printing">Printing strings and numbers<br />
</a>Key terms<br />
<a href="#exercises">Exercises</a> </p>
<span class="foo">
<hr />
</span>
<p>Chapter 2 alluded to all Python objects having a data type.   Built-in Python data types, such as integers, string, booleans, and others, are building blocks for GIS scripts. Chapters 3 and 4 introduce essential  built-in data types  that will appear  frequently in our GIS Python--scripts, numbers, strings, lists, and tuples.  Through these data type examples, this chapter also introduces  some concepts about objects that are used throughout Python:</p>
<ul>
<li>Python objects made up of a sequence of items  share a set of operations, though the operations may act differently depending on the object data type.</li>
<li>Python objects have functions called 'methods' associated with them. The methods are specialized for each  data type.</li>
<li> Python objects use object-oriented syntax referred to as 'dot notation.' </li>
</ul>
<p>Basic data types, operations, methods and dot notation appear in all of the geoprocessing script examples in the upcoming chapters. As you read this chapter, it may help to attend to these commonalities across data types. In this way, not only will these data types  already be familiar when they appear in the ArcGIS Python scripts, the concepts will already be familiar when they are extended to specialized ArcGIS Python objects.</p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">3.1 Numbers</span> <a name="nums" id="introduction2"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Python has four numeric data types: int, long, float, and complex. Examples in this book mainly use <code>int</code> (signed integers) and <code>float</code> (floating point numbers). With dynamic typing, the variable type is decided by the assignment statement which gives it a value. Float  values have a decimal point; Integer values don't.  In the following example, the variable <code>x</code> is an integer and <code>y</code> is a float:</p>
<code></code><p>
          &gt;&gt;&gt; x <span class="o">=</span> <span class="mi">2</span><br />
          &gt;&gt;&gt; y <span class="o">=</span> <span class="mi">2.0</span><br />
          &gt;&gt;&gt; type(x)<br />
          &lt;type 'int'&gt;<br />
          &gt;&gt;&gt; type(y)<br />
          &lt;type 'float'&gt;<br />
</p>
<p>By default, PythonWin uses turquoise to display numeric values (as well as output in the Interactive Window). Python uses <strong>+</strong>, <strong>-</strong>, <strong>*</strong>, **, and <strong>/</strong> for addition, subtraction,  multiplication, exponentiation, and division as shown in Table 3.1. Mathematical order of operations is preserved. <code><span class="mi">2</span> <span class="o">+ </span><span class="mi">3 </span><span class="o">*</span><span class="mi"> 4</span> </code> gives 14 not 20, though <code><span class="mi">2</span> <span class="o">+ </span>(<span class="mi">3 </span><span class="o">*</span><span class="mi"> 4</span>) </code> is a clearer way to write it.  Be aware that Python integer division and floating point division give different results. If both division operands are integers, the  result will be<em> integer division</em> with the fractional part truncated; in other words, it always  rounds down. If at least one of the operands are float, the result  retains much more precision. </p>
<code></code><p>
          &gt;&gt;&gt; <span class="mi">8</span> /<span class="mi"> 3</span><br />
          2<br />
          &gt;&gt;&gt; <span class="mi">8.0</span> /<span class="mi"> 3</span> <br />
          2.6666666666666665<br />
</p>
<p>In Python versions 3.0 and higher, this behavior is changed so that 8/3 gives the same result as 8.0/3.</p>
<table width="600" border="0" bgcolor="#eeeeeee">
<tr>
<td><strong>Table 3.1: </strong>Numerical operators.
              <table width="453" border="1" cellpadding="5">
<tr>
<th width="86" scope="row">Operation</th>
<th width="131" align="center">Operator</th>
<th width="190">Example</th>
</tr>
<tr>
<td scope="row">Addition</td>
<td align="center"><code>+</code></td>
<td><code><span class="mi">7</span> <span class="o">+</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">9</span></code></td>
</tr>
<tr>
<td scope="row">Subtraction</td>
<td align="center"><code>-</code></td>
<td><code><span class="mi">7</span> <span class="o">-</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">5</span> </code></td>
</tr>
<tr>
<td height="29" scope="row">Multiplication</td>
<td align="center"><code>*</code></td>
<td><code><span class="mi">7</span> <span class="o">*</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">14</span> </code></td>
</tr>
<tr>
<td scope="row"><p>Division</p></td>
<td align="center"><code>/</code></td>
<td><code><span class="mi">7</span> / <span class="mi">2</span> <span class="o">=</span><span class="mi"> 3</span> </code><code></code></td>
</tr>
<tr>
<td scope="row">Exponentiation</td>
<td align="center"><code>**</code><code></code></td>
<td><code><span class="mi">7</span><span class="o">*</span><span class="o">*</span><span class="mi">2</span><span class="o"> =</span> <span class="mi">9</span> </code></td>
</tr>
<tr>
<td scope="row">Modulus division </td>
<td align="center"><code>%</code></td>
<td><code><span class="mi">7 <span class="o">%</span></span><span class="mi"> 2 </span><span class="o">=</span> <span class="mi">1</span> </code></td>
</tr>
</table></td>
</tr>
</table>
<br />
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">3.2 What is a string?</span> <a name="strings" id="strings"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>PythonWin uses olive green text to display string literals. A <em>string literal</em> is a set of characters surrounded by quotation marks.  A variable assigned a string literal value is called a <em>string variable</em>.  The difference between these two terms is important, but both of these items are sometimes referred to simply as 'strings'. The characters inside the quotes in the string literal are interpreted literally. In GIS scripts, we use string literals for things like the name of a workspace, input file, or output file. Meanwhile, the characters that make up a string variable are simply a name for the program to use to represent its value. Variable names should not be surrounded by quotes. The operations and methods described in the next section apply to both string literals and string variables. Both are  objects of data type <code>str</code> (for string). <br />
<img src="../images/strings.png" border="1" /><br />
<br />
          The type of quotes used to create a Python string literal is flexible, as long as the opening and closing quotes match. Here are two variations: </p>
<p><code>&gt;&gt;&gt; inputData <span class="o">=</span> <span class="s">'trees.shp'</span><br />
          &gt;&gt;&gt; inputData<br />
          'trees.shp'<br />
          &gt;&gt;&gt; inputData <span class="o">=</span> <span class="s">&quot;trees.shp&quot;</span><br />
          &gt;&gt;&gt; inputData <br />
          'trees.shp'<br />
</code></p>
<p>There is a subtle difference between printing strings with and without the <code>print</code> function in the Interactive Window: The former removes the quotation marks entirely and the latter uses single quotation marks. </p>
<p><code>&gt;&gt;&gt; <span class="key">print</span> inputData<br />
          trees.shp<br />
</code><br />
          String literals in single or double quotes cannot span more than one line. A string literal with no closing quote raises a <code>SyntaxError</code> as shown in the traceback message:<br />
<code><br />
          &gt;&gt;&gt; output <span class="o">=</span> <span class="s">'a b c</span><br />
<span class="err">Traceback (  File &quot;&lt;interactive input&gt;&quot;, line 1<br />
          output <span class="o">=</span> &quot;a b c<br />
          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^<br />
          SyntaxError: EOL while scanning string literal</span><br />
</code><br />
          Triple quotes can be used to create a string that spans more than one line:<br />
<code><br />
          &gt;&gt;&gt;
          output <span class="o">=</span> <span class="s">&quot;&quot;&quot;a b c<br />
</span>... <span class="s">d e f&quot;&quot;&quot;</span><br />
<br />
          &gt;&gt;&gt; <span class="key">print</span> output<br />
          a b c<br />
          d e f<br />
</code><br />
          The triple quotes store the carriage return as part of the string. In some cases we don't want a carriage return stored in the string. For example, we might need to store a long file path name. The path won't be interpreted correctly if a carriage return is embedded in it. But very wide lines of Python code are awkward to read. As a rule of thumb, Python lines of code should be less than 100 characters wide, so the reader doesn't need to scroll right. A <em>line continuation character</em> (<code>'\'</code>), a backslash embedded in a string at the end of a line, allows a string to be written on more than one line, while preserving the single line spacing in the string literal value. In other words, though it is assigned on multiple lines, it will be printed as a single line variable. Place the character at the end of the line and the string literal can be continued on the next line, but the string value will not contain the carriage return:</p>
<p><code>&gt;&gt;&gt; output <span class="o">=</span> <span class="s">'a b c \<br />
          d e f \ <br />
          g h i'</span><br />
<br />
          &gt;&gt;&gt; <span class="key">print </span>output<br />
          a b c d e f g h i<br />
</code><br />
          Numerical characters surrounded by quotation marks are considered to be strings literals by Python. <br />
<code><br />
          &gt;&gt;&gt; FID <span class="o">=</span> <span class="mi">145</span><br />
          &gt;&gt;&gt; type(FID)<br />
          &lt;type 'int'&gt;<br />
          &gt;&gt;&gt; countyNum =<span class="s"> '145'</span><br />
          &gt;&gt;&gt; type(countyNum)<br />
          &lt;type 'str'&gt;<br />
</code></p>
<p>If the variable is a string type, you can perform string operations on it as described in the next section. </p>
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">3.3 Things you need to do to strings (a.k.a. string operations)</span> <a name="operations" id="operations"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>GIS Python programming requires frequent string manipulation. To deal with file names, field names, and so forth,  you'll need to be familiar with finding the length of a string, indexing into a string, concatenating, slicing,  and checking for a substring in a string. Examples of each operation follow.</p>
<p><strong>Find the length of string</strong></p>
<p><code>          The built-in </code><code>len</code> function  finds the length of a string literal:<br />
          &gt;&gt;&gt;<span class="nb"> len</span><span class="p">(</span><span class="s">&#39;trees.shp&#39;</span><span class="p">)</span><br />
          9<br />
</p>
<p>Or the length of the value held by a string variable:<br />
<code><br />
          &gt;&gt;&gt; data <span class="o">=</span> <span class="s">'trees.shp'</span><br />
          &gt;&gt;&gt; <span class="nb">len</span><span class="p">(</span>data<span class="p">)</span><br />
          9<br />
</code></p>
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">3.3.1 Indexing into strings</span> <a name="index" id="operations3"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>
          Each character in a string has a numbered position  called an <em>index</em>. The numbering starts with zero, in other words Python uses <em>zero-based indexing</em>. From left to right, the indices are 0, 1, 2,... and so forth. <em><br />
<br />
<img src="../images/stringIndex.png" border="1" /><br />
<br />
          Indexing</em> into a string means pointing to an individual character in a string using its index number.    To index into a string variable, use square brackets after the variable name and place an index number inside the brackets. The general format for indexing looks like this:</p>
<table width="797" border="0" bgcolor="#FFCCCC">
<tbody>
<tr>
<th scope="row" width="791">variableName[index_number]</th>
</tr>
</tbody>
</table>
<p>This example assigns a value to a string variable and then indexes the first character in the string value:<br />
</p>
<p><code>&gt;&gt;&gt; fieldName <span class="o">=</span> <span class="s">'COVER'</span><br />
          &gt;&gt;&gt;<span class="n"> fieldName</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><br />
          'C'<br />
</code></p>
<p>Since indexing is zero-based, the last valid index is the length of the string minus one. Attempting to using an invalid index number results in an <code>IndexError</code>:<br />
<code><br />
          &gt;&gt;&gt; len(fieldName)<br />
          5<br />
          &gt;&gt;&gt;<span class="n"> fieldName</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><br />
<span class="err">Traceback (most recent call last):<br />
          File &quot;&lt;interactive input&gt;&quot;, line 1, in &lt;module&gt;<br />
          IndexError: string index out of range</span><br />
          &gt;&gt;&gt; <span class="n">fieldName</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><br />
          'R'<br />
</code></p>
<p>Negative indices count one-based from the right. This can be useful for getting the last character without checking the string length.<br />
<code><br />
          &gt;&gt;&gt;<span class="n"> fieldName</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><br />
          'R'<br />
</code></p>
<p>It is not  possible to change the value of an individual character of a string with indexing. Attempting to do so results in a <code>TypeError</code>, as shown in the following code:<br />
<code><br />
          &gt;&gt;&gt;<span class="n"> fieldName</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o"> =</span> <span class="s">'D'</span><br />
<span class="err">Traceback (most recent call last):<br />
          File &quot;&lt;interactive input&gt;&quot;, line 1, in &lt;module&gt;<br />
          TypeError: 'str' object does not support item assignment</span><br />
</code><br />
          This occurs because Python strings are <em>immutable</em>.        The word 'immutable' is a synonym for unchangeable. Of course, we can change the value of a string variable by assigning an entirely new string to it, as in the example below, but in this context, immutability refers to this specific quality of not being able to change individual parts of an existing object.   To change the value of <code>fieldName</code> from <code>COVER</code> to <code>DOVER</code>, you need to use the following code:<br />
<code><br />
          &gt;&gt;&gt; fieldName <span class="o">=</span> <span class="s">'DOVER'</span><br />
</code></p>
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">3.3.2 Slice strings</span> <a name="operations" id="operations2"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Indexing can be thought of as getting a substring which is only one character long. To get more than one character, use slicing instead of indexing.  Slicing gets a substring (a slice) of a string. Slicing uses square brackets with a colon inside. A number on either side of the colon indicates the starting and ending index of the desired slice. The left number is inclusive, the right is exclusive. </p>
<p> <code>&gt;&gt;&gt; fieldName <span class="o">=</span> <span class="s">'COVER'</span><br />
          &gt;&gt;&gt; fieldName[<span class="num">1</span>:<span class="num">3</span>]<br />
          'OV'<br />
</code><br />
          The letter <code>O</code> is the index 1 character in the string <code>'COVER'</code> and the letter <code>E</code> is the index 3 character, so the slice starts at the letter <code>O</code> and ends just before the letter <code>E</code>. <br />
          If the left slice number is omitted, the slice starts at the beginning of the word. If the right slice number is omitted, the slice ends at the end of the word.</p>
<p><code>&gt;&gt;&gt; fieldName[:<span class="num">3</span>]<br />
          'COV'<br />&gt;&gt;&gt; fieldName[<span class="num">1</span>:]<br />
          'OVER'<br />
</code><br />
          We often want to use the <em>base name</em> of a file, the part without the extension, to build another file name, so that we can create output names based on input names. Counting from the right with a  negative index can be used to find the base name of a file which has a three digit file extension. Omitting the left index starts from the beginning of the string. Using <code>-4</code> as the right index removes the last four characters --the three digit file extension and the period-- leaving the base name of the file. <br />
<code><br />
          &gt;&gt;&gt; inputData <span class="o">=</span> <span class="s">'trees.shp'</span><br />
          &gt;&gt;&gt; baseName <span class="o">=</span> inputData[:<span class="num">-4</span>] <span class="comment">#</span><span class="comment"> Remove the file extension and the period.</span><br />
          &gt;&gt;&gt; baseName<br />
          'trees'<br />
</code></p>
<hr /> <table width="775" border="0">
<tr>
<th align="left" scope="row"><strong><span class="head">3.3.3 Concatenate strings</span></strong></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p><em>Concatenation</em> glues together a pair of strings. You use the same sign for addition, but it acts differently for strings. The plus sign performs addition on numeric values and concatenation on strings.<br />
</p>
<p><code>&gt;&gt;&gt; <span class="num">5</span> <span class="o">+</span> <span class="num">6</span> <span class="comment"># adding two numbers together </span> <br />
          11<br />
          &gt;&gt;&gt; <span class="s">'5'</span> <span class="o">+</span><span class="s"> '6'</span> <span class="comment"># concatenating  two strings</span> <br />
          '56'<br />
<br />
          &gt;&gt;&gt; rasterName <span class="o">=</span> <span class="s">'NorthEast'</span><br />
          &gt;&gt;&gt;
          route <span class="o">=</span><span class="s"> 'ATrain'</span><br />
          &gt;&gt;&gt; 
          output <span class="o">=</span> rasterName <span class="o">+</span> route<br />
          &gt;&gt;&gt; output<br />
          'NorthEastATrain'br />
        </code></p>
<p>Both of the variables being concatenated must be string types or you'll get  a <code>TypeError</code>. For example, using the plus sign between a numeric variable and a string variable causes an error. Python doesn't know whether to perform addition or concatenation.<br />
<code><br />
          &gt;&gt;&gt; i <span class="o">=</span> <span class="num">1</span><br />
          &gt;&gt;&gt; rasterName <span class="o">=</span> <span class="s">'NorthEast'</span><br />
          &gt;&gt;&gt; output <span class="o">=</span> rasterName <span class="o">+</span> i<br />
<span class="err">Traceback (most recent call last):<br />
          File &quot;&lt;interactive input&gt;&quot;, line 1, in &lt;module&gt;<br />
          TypeError: cannot concatenate 'str' and 'int' objects</span><br />
          &gt;&gt;&gt;<br />
</code></p>
<p>The <code>TypeError</code> says  that a string cannot be concatenated with an integer object. Solve this problem by using the built-in <code>str</code> function which returns a string data type version of an input value.   Type conversion is  referred to as <em>casting</em>. To combine a string with a numeric value, cast the number to a string. Then the number is treated as a string data type for the concatenation operation: <br />
<code><br />
          &gt;&gt;&gt; i <span class="o">=</span> <span class="num">145</span><br />
          &gt;&gt;&gt; str(i)<br />
          '145'<br />
          &gt;&gt;&gt; rasterName <span class="o">=</span> <span class="s">'NorthEast'</span><br />
          &gt;&gt;&gt;<span class="n"> output</span> <span class="o">=</span> <span class="n">rasterName</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><br />
          &gt;&gt;&gt; output<br />
          'NorthEast145'<br />
</code></p>
<p>We often use concatenation with slicing to create an output name based on an input file name.</p>
<p><code>&gt;&gt;&gt; inputData <span class="o">=</span> <span class="s">'trees.shp'</span> <br />
          &gt;&gt;&gt; baseName <span class="o">=</span> inputData[:<span class="num">-4</span>] <span class="comment">#</span><span class="comment"> Remove the extension and the period.</span><br />
          &gt;&gt;&gt; baseName <br />
<span class="s">'trees'</span><br />
          &gt;&gt;&gt; outputData <span class="o">=</span> baseName <span class="o">+</span> <span class="s">'_buffer.shp'</span> <br />
          &gt;&gt;&gt; 
          outputData <br />
          'trees_buffer.shp'<br />
</code></p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><strong><span class="head">3.3.4 Check for substring membership</span></strong></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>
          The <code>in</code> keyword enables you to check if a string contains a substring.  Python literature referred to this as checking for 'membership' in a string. Suppose you want to check if a file is a buffered output or not, and you have named each output file so that the name contains the string <code>buffer</code>. </p>
<p><code>&gt;&gt;&gt; substring <span class="o">=</span> <span class="s">'buffer' </span><br />
          &gt;&gt;&gt; substring <span class="key">in </span>outputData<br />
          True<br />
          &gt;&gt;&gt; substring <span class="key">in </span>inputData<br />
          False<br />
</code></p>
<p>These string operations are powerful when combined with batch processing (discussed in an upcoming chapter). Table 3.2 summarizes these common string operations. As we'll discuss shortly, they can be applied to other data types as well. Strings and other data types that have a collection of items are referred to as <em>sequence</em> data types. The characters in the string can be thought of as a sequence of items. These operations can be applied to any of the sequence data types in Python.</p>
<table bgcolor="#EEEEEE" border="0" width="779">
<tbody>
<tr>
<td scope="row"><p><strong><br />
                  Table 3.2: </strong>Sequence Operations on Strings<strong><br />
<br />
<code>&gt;&gt;&gt; exampleString <span class="o">=</span> <span class="s">'tuzigoot'</span></code></strong></p>
<table width="732" border="3">
<tr>
<td width="130"><strong>Operation</strong></td>
<td width="260"><strong>Sample code</strong></td>
<td width="316"><strong>Return value </strong></td>
</tr>
<tr>
<td>length</td>
<td><code>len(exampleString)</code></td>
<td><p><code>8</code><br />
</p></td>
</tr>
<tr>
<td>indexing</td>
<td><code>exampleString[2]</code></td>
<td><code>'z'</code><br /></td>
</tr>
<tr>
<td>slicing</td>
<td><code>exampleString[:-4]</code></td>
<td><code>'tuzi'</code><br /></td>
</tr>
<tr>
<td>concatenation</td>
<td><code>exampleString <span class="o">+</span> exampleString</code></td>
<td><code>'tuzigoottuzigoot'</code></td>
</tr>
<tr>
<td>membership</td>
<td><code>'ample' in exampleString</code></td>
<td><p><code>False</code><br />
</p></td>
</tr>
</table></td>
</tr>
</tbody>
</table>
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">3.4 More things with strings (a.k.a. string methods)</span> <a name="methods" id="methods"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Along with the operations described above, processing GIS data often requires  additional string manipulation. For example, you may need to replace the special characters in a field name, you may need to change a file name to all lower case, or you may need to check the ending of  a file name. For operations of this sort, Python has built-in string functions called string methods. <em>String methods</em> are functions associated particularly with strings that perform actions on strings. Calling a string method has a similar format to calling a built-in function, but in calling a string method, you also have to specify the string object--  using dot notation. <em>Dot notation </em>for calling a method  uses both the object name and the method name, separated by a dot. The general format for dot notation looks like this:</p>
<table width="812" border="0" bgcolor="#FFCCCC">
<tr>
<th scope="row" align="left"><strong><code>object.method(argument1, argument2, argument3,...)</code></strong></th>
</tr>
</table>
<p>'Object' and 'method' are object-oriented programming (OOP) terms and 'dot notation' is an OOP specialized syntax. </p>
<ul>
<li> Everything in Python is an <em>object</em>. For example, numbers, strings, functions, constants, and exceptions are all object<em>s.</em> Other programming languages use this term more narrowly as data types which have associated functions, referred to as 'methods', and attributes, referred to as 'properties' in this book. In Python, most objects  do have methods and/or  properties.     As soon as a  variable is assigned a value, it is a string object which has string methods.<br />
<br />
</li>
<li> A <em>method</em> is a function that performs some action on the object.  Methods are simply functions that are referred to as 'methods' because they are performed on an object. The terms 'calling methods', 'passing arguments', and 'returning values'  apply to methods in the same way they apply to functions. The example below calls the <code>replace</code> method. The variable, <code>line</code>, is assigned a string value. Then the dot notation is used to call the string method named <code>replace</code>. This example returns the string with commas  replaced by semicolons:<br />
<br />
<code>&gt;&gt;&gt; line <span class="o">=</span> <span class="s">'238998,NPS,NERO,Northeast Region,MACCP,CAPE COD NATIONAL'</span><br />
            &gt;&gt;&gt; <span class="n">line</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span> <span class="s">&#39;,&#39;</span> <span class="p">,</span> <span class="s">&#39;;&#39;</span> <span class="p">)</span><br />
            '238998;NPS;NERO;Northeast Region;MACCP;CAPE COD NATIONAL'<br />
</code><br />
</li>
<li><em>Dot notation</em> is an object-oriented programming convention used on string objects (and other types of objects) to access methods and properties, that are specially designed to work with those objects. </li>
</ul>
<p>The image below points out the components in the <code>replace</code> method example. The dot notation links the object method to the object. The object is the variable named <code>line</code>. The method (<code>replace</code>) takes two string arguments, the string to replace (a comma) and the replacement (a semicolon).</p>
<p> <img src="../images/object.model.jpg" width="418" height="134" border="3" /></p>
<p> String methods need to be used in assignment statements. Strings are immutable, so string methods do not change the value of the string object they are called on; instead, they return the modified value. This means that the method call can be used in the right-hand side of an assignment statement to store the value in a variable. The syntax of the assignment statement looks like this:<br />
</p>
<table width="812" border="0" bgcolor="#FFCCCC">
<tr>
<th scope="row" align="left"><code><strong>variableName <span class="o">=</span> object.method(argument1, argument2, argument3,...)</strong></code></th>
</tr>
</table>
<p>For example, the <code>replace</code> call does not alter the value of the original variable. (<code>line</code>):<br />
<br />
<code>
          &gt;&gt;&gt; line <span class="o">=</span> <span class="s">'238998,NPS,NERO,Northeast Region,MACCP,CAPE COD NATIONAL'</span><br />
          &gt;&gt;&gt; <span class="n">line</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span> <span class="s">&#39;,&#39;</span> <span class="p">,</span> <span class="s">&#39;;&#39;</span> <span class="p">)</span><br />
          &gt;&gt;&gt; line<br />
          '238998,NPS,NERO,Northeast Region,MACCP,CAPE COD NATIONAL' <br />
</code> </p>
<p>An assignment statement can be used to store the return value of the method. Call the <code>replace</code> method  on the right-hand side of an assignment statement like this:<br />
<br />
<img src="../images/return_value.jpg" width="367" height="98" border="3" /></p>
<p><code>&gt;&gt;&gt; line <span class="o">=</span> <span class="s">'238998,NPS,NERO,Northeast Region,MACCP,CAPE COD NATIONAL'</span><br />
          &gt;&gt;&gt; semicolonLine <span class="o">=</span><span class="n"> line</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span> <span class="s">&#39;,&#39;</span> <span class="p">,</span> <span class="s">&#39;;&#39;</span> <span class="p">)</span><br />
          &gt;&gt;&gt; semicolonLine<br />
          '238998;NPS;NERO;Northeast Region;MACCP;CAPE COD NATIONAL'<br />
</code><br />
          To alter the original variable called 'line', use it as the variable being assigned. In other words, you can put it on both sides of the equals sign:<br />
<br />
<code>&gt;&gt;&gt; line <span class="o">=</span><span class="n"> line</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span> <span class="s">&#39;,&#39;</span> <span class="p">,</span> <span class="s">&#39;;&#39;</span> <span class="p">)</span><br />
          &gt;&gt;&gt; line<br />
          '238998;NPS;NERO;Northeast Region;MACCP;CAPE COD NATIONAL'</code><br /><br />
<!--This is an example of object-oriented programing (OOP) in Python.  To understand Python programming, you'll need to be familiar with two OOP terms:</p>
        <ul>
          <li><strong>Object</strong>. An instance of a data type is called an <em>object</em> in Python. As soon as a variable is assigned a value, it is an object.  Dot notation is object-oriented programming convention. It is used on string objects and other types of Python. <br  />
              <br  />
          </li>
          <li><strong> Method.</strong> Objects have methods associated with them. A <em>method</em> is a function that performs some action on the object.  The example above uses the 'replace' method.<br  />
            <br  />
          </li>
          <li><strong>Calling methods. </strong>We say we <em>call</em> a method on an object. A method uses a dot to connect the object to the method. <br  />
            <br  />
          </li>
          <li><strong>Passing arguments.</strong> Sometimes the method needs input or arguments, such as which character to replace. We <em>pass arguments</em> to the method to provide the method with more information about what needs to be done.  Arguments are placed inside parentheses and separated by commas.<br  />
            <br  />
          </li>
          <li><strong>Return values.</strong> Some object methods <em>return values </em>(send information back) when they are called. In our example, the original variable is not altered, so in order to use the  string with the replacements it needs to be  assigned to a variable, using an assignment statement:-->
          Not all methods require arguments; However, even when you don't pass any arguments, you must use the parentheses. For example, to change the letters of a string to all uppercase letters, use the upper method like this:        </p>
<p><code>&gt;&gt;&gt; name <span class="o">=</span> <span class="s">'Delaware Water Gap'<br />
</span>&gt;&gt;&gt; name <span class="o">=</span> name<span class="o">.</span><span class="n">upper</span><span class="p">(</span> <span class="p">)</span><br />
          &gt;&gt;&gt; print name <br />
          DELAWARE WATER GAP<br />
</code></p>
<p> The <code>split</code> and <code>join</code> methods are used in many GIS scripts. These methods involve another Python data type called a <code>list</code>. Python lists are containers for holding sets of items,  which are discussed in Chapter 4. The <code>split</code> method returns a list of the words in the string, separated by the argument. In the example below, the <code>split</code> method looks for each occurrence of the forward slash (<code>/</code>) in the string object and splits the string in those positions. The resulting list has four items, since the string  has three slashes.</p>
<p><code>&gt;&gt;&gt; path <span class="o">=</span> <span class="s">'C:/gispy/data/ch03/xy1.txt'</span><br />
          &gt;&gt;&gt; path<span class="o">.</span>split<span class="p">(</span><span class="s">&#39;/&#39;</span> <span class="p">)</span><br />
          ['C:', 'gispy', 'data', 'ch03', 'xy1.txt']<br />
</code></p>
<p>The <code>split</code> and <code>join</code> methods have inverse functionality. The <code>split</code> method takes a single string and splits it into a list of strings, based on some delimiter. The <code>join</code> method takes a list of strings and joins them with  into a single string. The string object value is placed between the items. For example, <code>elephant</code> is placed between <code>1</code>, <code>2</code>, and <code>3</code> here:<br />
<br />
<code>&gt;&gt;&gt;<span class="n"> numList</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;1&#39;</span><span class="p">,</span> <span class="s">&#39;2&#39;</span><span class="p">,</span> <span class="s">&#39;3&#39;</span><span class="p">]</span> <br />
          &gt;&gt;&gt; animal <span class="o">=</span> <span class="s">'elephant'</span><br />
          &gt;&gt;&gt; animal<span class="o">.</span>join<span class="p">(</span>numList<span class="p">)</span><br />
          '1elephant2elephant3'<br />
</code><br />
          In the following example, the <code>join</code> method is performed on a string literal object, semicolon (<code>;</code>). The method inserts semicolons between the items and returns the resulting string: <br />
<code><br />
          &gt;&gt;&gt; <span class="n">pathList</span> <span class="o">=</span><span class="p"> [</span><span class="s">&#39;C:&#39;</span><span class="p">,</span> <span class="s">&#39;gispy&#39;</span><span class="p">,</span> <span class="s">&#39;data&#39;</span><span class="p">,</span> <span class="s">&#39;ch03&#39;</span><span class="p">,</span> <span class="s">&#39;xy1.txt&#39;</span><span class="p">]</span> <br />
          &gt;&gt;&gt; <span class="s">';'</span><span class="o">.</span>join<span class="p">(</span>pathList<span class="p">)</span><br />
          'C:;gispy;data;ch03;xy1.txt'<br />
</code></p>
<p>IDEs make it easy to browse for methods of an object  by bringing up a list of choices when you type the object name followed by a dot. For example, if you create a string variable named <code>path</code> and then type <code>path</code> in the PythonWin Interactive Window, a <em>context menu</em> appears with a list of string methods. This menu of choices is referred to as a context menu because the menu choices update dynamically based on the context in which it is generated.   You can scroll  and select a method by clicking on your choice. <br />
<img src="../images/contextMenu2.png" alt="context menu" width="313" height="274" /></p>
<p> In PythonWin, context menus appear in the Interactive Window or after the code in a script has been executed (after the script has been run). In PyScripter, the context menus appear as soon as a variable has been defined within a script. If your choice doesn't appear in the context menu, check for spelling errors. Try using the context menu  to bring up the <code>endswith</code> method for a string variable in the PythonWin Interactive Window. As you start typing the method name, the list box rolls to that name and you can use the 'Tab' key to complete the selection. The <code>endswith</code> method checks if the ending matches the argument and returns <code>True</code> or <code>False</code>:</p>
<p><code>&gt;&gt;&gt; path <span class="o">=</span> <span class="s">'C:/gispy/data/ch03/xy1.txt'<br />
</span>&gt;&gt;&gt; path<span class="o">.</span>endswith<span class="p">(</span><span class="s">&#39;.shp&#39;</span><span class="p">)</span><br />
          False<br />
          &gt;&gt;&gt; path<span class="o">.</span>endswith<span class="p">(</span><span class="s">&#39;.txt&#39;</span><span class="p">)</span><br />
          True<br />
</code></p>
<p>Help documentation and a comprehensive list of string methods is available in the online. Search for the 'String Methods' section of the 'Python Library Reference'. String method names are often intuitive. Testing them in the Interactive Window helps to clarify their functionality.<br />
</p>
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">3.5 File paths and raw strings</span> <a name="escape" id="escape"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>When dealing with file paths, you will encounter strings literals containing escape sequences. <em>Escape sequences </em>are sequences of characters that have special meaning. In string literals, the backslash (<code>\</code>) is used as an <em>escape character</em> to encode special characters. The backslash acts as a line continuation character when placed at the end of a line in a string literal as described above. But when a backslash is followed immediately by a character in a string literal, the backslash along with the character that follows it are called an<em> escape sequence</em> and the backslash is interpreted as a  signal that the next character is to be given a special interpretation. For example, the string literals <code>'\n'</code> and <code>'\t'</code>  are escape sequences that encode  'new line' and 'tab'. New line and tab characters are used to control the  space around the visible characters. They are referred to as <em>whitespace characters</em>, because the characters themselves are not visible  when printed.</p>
<table border="3">
<tr bordercolor="#000000">
<th colspan="2" scope="row">White space escape sequences</th>
</tr>
<tr bordercolor="#000000">
<td width="29" scope="row"><code>\n</code></td>
<td width="122">new line </td>
</tr>
<tr bordercolor="#000000">
<td scope="row"><code>\t</code></td>
<td>tab</td>
</tr>
</table>
<p>When printed without built-in <code>print</code> function in the Interactive Window, whitespace escape sequences are printed as entered:<br />
<code><br />
          &gt;&gt;&gt; <span class="s">'X\tY\tValue\n\n16\t255\t6.3'</span><br />
          'X\tY\tValue\n\n16\t255\t6.3'<br />
</code></p>
<p> When   printed with the built-in <code>print</code> function, whitespace escape sequences are interpreted and modify the formatting: <br />
<code><br />
          &gt;&gt;&gt; <span class="key">print</span> <span class="s">'X\tY\tValue\n\n16\t255\t6.3'</span><br />
          X&nbsp;&nbsp;&nbsp; Y &nbsp;&nbsp;&nbsp;Value<br />
<br />
          16&nbsp;&nbsp;&nbsp; 255&nbsp;&nbsp;&nbsp; 6.3<br />
</code></p>
<p>The <code>strip</code> method can be used to strip unwanted leading or trailing whitespace from a string. This is often called for when processing files. The following example prints a string before and after using the <code>strip</code> method:</p>
<p><code>&gt;&gt;&gt; dataRecord <span class="o">=</span> <span class="s">' \n\t\tX\tY\tZ\tM\t'</span><br />
          &gt;&gt;&gt; print dataRecord<br />
<br />
          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X&nbsp;&nbsp;&nbsp;&nbsp;Y&nbsp;&nbsp;&nbsp;&nbsp;Z&nbsp;&nbsp;&nbsp;&nbsp;M<br />
          &gt;&gt;&gt; dataRecord <span class="o">=</span> dataRecord<span class="o">.</span>strip<span class="p">(</span> <span class="p">)</span><br />
          &gt;&gt;&gt; dataRecord<br />
</code><code><span class="n">'X\tY\tZ\tM'</span></code><br />
          &gt;&gt;&gt; <span class="key">print</span> dataRecord<br />
          X&nbsp;&nbsp;&nbsp; Y&nbsp;&nbsp;&nbsp; Z&nbsp;&nbsp;&nbsp; M<br />
          &gt;&gt;&gt;<br />
</p>
<p>Escape sequences can lead to unintended consequences with  file paths that contain backslashes. In this example, the <code>t</code> in terrain and the <code>n</code> in <code>neuse</code> are replaced by whitespace when the string is printed:<br />
<code><br />
          &gt;&gt;&gt; dataPath <span class="o">=</span> <span class="s">'C:\terrain\neuse_river'</span><br />
          &gt;&gt;&gt; dataPath<br />
          'C:\terrain\neuse_river'<br />
          &gt;&gt;&gt; <span class="key">print </span>dataPath<br />
          C:&nbsp;&nbsp;&nbsp;&nbsp;errain<br />
          euse_river<br />
</code></p>
<p>Here are three options for avoiding this problem:</p>
<ol>
<li>Use a forward slash instead of a backward slash. The forward slash is not an escape character, but is interpreted correctly as a separator in file paths. This book uses forward slashes (southwest to northeast) instead of backward slashes, as in this example:<br />
<p><code>&gt;&gt;&gt; dataPath <span class="o">=</span> <span class="s">'C:/terrain/neuse_river'<br />
</span>&gt;&gt;&gt; <span class="key">print</span> dataPath<br />
              C:/terrain/neuse_river<br />
</code></p>
</li>
<li>Double the backslashes. This works because the first slash is an escape character that tells the code to interpret the second slash literally as a slash.<br />
<br />
<code>&gt;&gt;&gt; dataPath <span class="o">=</span> <span class="s">'C:\\terrain\\neuse_river'<br />
</span>&gt;&gt;&gt; <span class="key">print</span> dataPath<br />
            C:\terrain\neuse_river<br />
</code><br />
</li>
<li>Use <em>raw strings</em>. When you first come across a string literal preceded by a lowercase <code>r</code>, you might guess that it's a typo. But in fact, placing an <code>r</code> just before a string literal creates a raw string. Python uses the raw value of a raw string. In other words, it disregards escape sequences, as in the following example:
            <p><code>&gt;&gt;&gt; 
              dataPath <span class="o">=</span> r<span class="s">'C:\terrain\neuse_river'</span><br />
              &gt;&gt;&gt; <span class="key">print</span> dataPath<br />
              C:\terrain\neuse_river<br />
</code></p>
</li>
</ol>
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">3.6 Unicode strings</span> <a name="escape" id="escape2"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>When you start using ArcGIS functionality in Chapter 6, you will begin to see a lowercase <code>u</code> preceding strings that are returned by GIS methods. The <code>u</code> stands for unicode string. A <em>unicode string</em> is a specially encoded string that can represent thousands of characters, so that non-English characters, such as the Hindi alphabet can be represented. A unicode string is created by prepending a <code>u</code> to a string literal, as shown here:<br />
<code><br />
          &gt;&gt;&gt; dataFile <span class="o">=</span> <span class="s">u'counties.shp'</span><br />
          &gt;&gt;&gt; dataFile<br />
          u'counties.shp'<br />
          &gt;&gt;&gt;<span class="nb"> type</span><span class="p">(</span><span class="n">dataFile</span><span class="p">)</span><br />
          &lt;type 'unicode'&gt;<br />
</code><br />
          The difference between <code>'str'</code> and <code>'unicode'</code> string data types in Python lies in the way that the strings are encoded. The default encoding for Python 'str' strings is based on the American Standard Code for Information Interchange (ASCII). Because ASCII encodings were  designed to encode English language characters, they can only represent hundreds of characters; whereas, the more recently developed unicode technique can encode thousands. Because of its capability to encode non-English languages,  software programs, including the ArcGIS Python interface, have begun to use unicode encodings more often. <br />
<br />
          You don't need to know exactly how unicode or ASCII strings encoding works. You just need to know that  in your GIS scripts, you can handle <code>'unicode'</code> strings just like <code>'str'</code> strings. 
          They have the same string operations and methods. The following examples demonstrate using a few string methods and operations on the unicode variable <code>dataFile</code>: <br />
<code><br />
          &gt;&gt;&gt; dataFile<span class="o">.</span>endswith<span class="p">(</span><span class="s">&#39;.shp&#39;</span> <span class="p">)</span> <span class="comment"># Does the string start with '.shp'?</span><br />
          True<br />
          &gt;&gt;&gt; dataFile<span class="o">.</span>startswith<span class="p">(</span><span class="s">&#39;co&#39;</span> <span class="p">) </span><span class="comment"># Does the string start with 'co'?</span><br />
          True<br />
          &gt;&gt;&gt; dataFile<span class="o">.</span>count<span class="p">(</span><span class="s">&#39;s&#39;</span> <span class="p">)</span> <span class="comment"># Count the number of times 's' occurs in the string.</span><br />
          2<br />
</code></p>
<p>Methods and operations that return strings output unicode when the input object is unicode:<br />
<br />
<code>
          &gt;&gt;&gt; dataFile.upper<span class="p">(</span> <span class="p">)</span> <span class="comment"># Return a string in which all the letters are capitalized.</span><br />
          u'COUNTIES.SHP'<br />
        &gt;&gt;&gt; <span class="n">dataFile</span><span class="p">[</span><span class="mi">5</span><span class="p">] </span><span class="comment"># Index the 6th character in the string.</span><br />
          u'i'<br />
          &gt;&gt;&gt; dataFile <span class="o">+</span> dataFile <span class="comment"># Concatenate two strings.</span><br />
          u'counties.shpcounties.shp'<br />
</code></p>
<p>Just as the quotation marks are not printed when you use the built-in <code>print</code> function, the unicode <code>u</code> is not printed when you use the built-in <code>print</code> function to print a unicode string:</p>
<p><code>&gt;&gt;&gt; <span class="key">print</span> dataFile<br />
          counties.shp<br />
</code></p>
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">3.7 Printing Strings and Numbers</span> <a name="printing" id="printing"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>The built-in <code>print</code> function is used all the time in scripting, so we'll show a few examples of how it can be used. As mentioned earlier, the <code>print</code> function does not use parentheses around the arguments (though this changes in Python 3.0 in which the parentheses become required). The arguments are the expressions to be printed. We often want to print multiple expressions within the same print statement and these expressions need to be linked together so that the print statement uses them all. Here we demonstrate three  approaches to linking expressions to be printed:</p>
<p><strong>Commas.</strong> When commas are placed between variables in a <code>print</code> expression, the variable values are printed separated by a space. The print statement inserts a space where each comma occurs between printed items:</p>
<p><code>&gt;&gt;&gt; dataFile <span class="o">=</span> <span class="s">'counties.shp'</span><br />
          &gt;&gt;&gt; FID <span class="o">=</span> <span class="num">862</span><br />
          &gt;&gt;&gt; <span class="key">print</span> dataFile, FID <br />
          counties.shp 862<br />
</code></p>
<p> The expression can be a combination of comma separated string literals, numbers, and variables of assorted data types:</p>
<p><code>&gt;&gt;&gt; <span class="key">print </span><span class="s">'The first FID in'</span>, dataFile, <span class="s">'is'</span>, FID, <span class="s">'!'</span><br />
          The first FID in counties.shp is 862 ! <br />
</code></p>
<p><strong>Concatenation. </strong>The spacing created by the commas may be undesirable in some situations. For example, we usually don't want a space before punctuation. Concatenation  can be used to avoid this problem, though concatenation introduces its own complications. Recall that concatenation uses a plus sign to join strings. If we replace each comma in the above expression with a plus sign we get a <code>TypeError</code> because one piece of the expression is not a string:<br />
<br />
<code>&gt;&gt;&gt; <span class="key">print </span><span class="s">'The first FID in' </span><span class="o">+</span> dataFile <span class="o">+</span> <span class="s">'is'</span> <span class="o">+</span> FID <span class="o">+</span> <span class="s">'!'</span> <br />
<span class="err">Traceback (most recent call last):<br />
          File &quot;&lt;interactive input&gt;&quot;, line 1, in ?<br />
          TypeError: cannot concatenate 'str' and 'int' objects</span><br />
</code><br />
<code>FID</code> is an integer type, so it must be cast to string. This works, but the spacing isn't correct since the plus signs are not replaced by spaces:<br />
<code><br />
          &gt;&gt;&gt; <span class="key">print </span><span class="s">'The first FID in' </span><span class="o">+</span> dataFile <span class="o">+</span> <span class="s">'is' </span><span class="o">+</span> str(FID) <span class="o">+</span> <span class="s">'!'<br />
</span>The first FID incounties.shpis862!<br />
</code><br />
          When  using concatenation statements to print strings, you may have to tailor the spacing, by adding spaces in the string literals: </p>
<p><code>&gt;&gt;&gt; <span class="key">print </span><span class="s">'The first FID in ' </span><span class="o">+</span> dataFile <span class="o">+</span> <span class="s">' is '</span> <span class="o">+</span> str(FID) <span class="o">+</span> <span class="s">'!'</span> <br />
          The first FID in counties.shp is 862!<br />
</code></p>
<p><strong>String formatting.</strong> The string <code>format</code> method provides an alternative  that uses place-holders to allow you to lay out a string with the spacing you want  and handle different variable types without casting. The <code>format</code> method is performed on a string literal object, which contains place-holders for variables and gets the variables as a list of arguments. Place-holders are inserted into string literals as numbers within curly brackets (<code>{0}</code>, <code>{1}</code>, <code>{2}</code>... and so forth). The numbers refer to the zero-based index of the arguments in the order they are listed. The string values of arguments are substituted for the place-holders. The method returns a string with these substitutions. This example calls the <code>format</code> method in a print statement:<br />
<code><br />
          &gt;&gt;&gt; </code><code><span class="n"><span class="s"><span class="key">print </span>'The first FID in {0} is {1}!'</span></span></code><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">dataFile</span><span class="p">,</span> <span class="n">FID</span> <span class="p">)</span><br />
          The first FID in counties.shp is 862! <br />
</p>
<p>The <code>format</code> method uses the dot notation:</p>
<ul>
<li><code><span class="s">'The first FID in {0} is {1}!'</span></code> is the object.</li>
<li><code>format</code> is the method.</li>
<li><code>dataFile</code> and <code>FID</code> are the arguments. The string value of <code>dataFile</code> is substituted for <code>{0}</code>. The string value of <code>FID</code> is substituted for <code>{1}</code> because dataFile appears first in the argument list and FID appears second.</li>
<li>The return value is printed.</li>
</ul>
<p>Triple quotes can be used in combination with the  <code>format</code> method to create multi-line strings:<br />
<code><br />
          &gt;&gt;&gt; </code><code><span class="n"><span class="s"><span class="key">print</span></span></span></code> <span class="s">'''X&nbsp;&nbsp;&nbsp;&nbsp;Y&nbsp;&nbsp;&nbsp;&nbsp;Value<br />
</span>...<span class="s"> -------------------<br />
</span>...<span class="s">{0}&nbsp;&nbsp;&nbsp;&nbsp;{1}&nbsp;&nbsp;&nbsp;&nbsp;{2}'''</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mf">6.3</span><span class="p">)</span><br />
          X&nbsp;&nbsp;&nbsp;&nbsp;Y&nbsp;&nbsp;&nbsp;&nbsp;Value<br />
          -------------------<br />
          16 <span class="s">&nbsp;&nbsp;&nbsp;</span>255<span class="s">&nbsp;&nbsp;&nbsp;&nbsp;</span>6.3<br />
</p>
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><b class="head">3.8 Key terms</b><a name="keyterms" id="keyterms2"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p><code>'int'</code> data type<br />
<code>'float'</code> data type<br />
          Integer division<br />
<code>'str'</code> data type<br />
          String literal <br />
          String variable <br />
          Line continuation<br />
          Zero-based indexing<br />
          Built-in <code>len</code> function<br />
          Slicing<br />
          Concatenating<br />
          Casting<br />
          The <code>in</code> keyword<br />
          Dot notation<br />
          Objects <br />
          Methods<br />
          context menus<br />
          Whitespace characters<br />
          Escape sequences <br />
          Raw strings<br />
          Unicode strings<br />
          String formatting</p>
<hr />
<table border="0" width="775">
<tbody>
<tr>
<th scope="row" align="left"><span class="head">3.9 Exercises</span> <a name="exercises" id="exercises"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<ol>
<li>The Python statements on the left use  string operations involving the variable <code>happyCow</code><em>. </em>Match the Python statement with its output.  All answers MUST BE one of the letters A through I. The string variable called <code>happyCow</code>  is assigned as follows: <br />
<code><br />
            &gt;&gt;&gt;
            happyCow <span class="o">=</span><span class="s"> 'meadows.shp'</span><br />
</code><br />
<br />
<table width="675" border="3">
<tr>
<td width="388">Python statement </td>
<td width="267">Output (notice there are 9 letters) </td>
</tr>
<tr>
<td><ol>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span></code> <br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">5</span><span class="p">]</span> <span class="o">+</span> <span class="n">happyCow</span><span class="p">[</span><span class="o">-</span><span class="mi">4</span><span class="p">:]</span></code> <br />
<br />
</li>
<li><code><span class="nb">len</span><span class="p">(</span><span class="n">happyCow</span><span class="p">)</span></code> <br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">5</span><span class="p">]</span></code><br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="o">-</span><span class="mi">4</span><span class="p">:]</span> </code><br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[:</span><span class="mi">5</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="n">happyCow</span> <span class="ow">in</span> <span class="s">&quot;5meadows.shp&quot;</span></code><br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;W&#39;</span> <span class="ow">in</span> <span class="n">happyCow</span></code><br />
</li>
</ol></td>
<td><br />
<ol type="A">
<li><code><span class="ne">IndexError</span></code><br />
<br />
</li>
<li><code><span class="s">&#39;meado.shp&#39;</span></code> </li>
<br />
<li><code><span class="s">&#39;meado&#39;</span></code><br />
<br />
</li>
<li><code>True</code><br />
<br />
</li>
<li><code>False</code><br />
<br />
</li>
<li><code><span class="mi">11</span></code><br />
<br />
</li>
<li><code><span class="s">&#39;w&#39;</span></code><br />
<br />
</li>
<li><code><span class="s">&#39;.shp&#39;</span></code><br />
<br />
</li>
<li><code><span class="s">&#39;m&#39;</span></code></li>
</ol>
<br />
<br /> </td>
</tr>
</table>
<br />
<br />
</li>
<li>These Python statements use string methods  and operations involving the variable <code>LCS_ID</code><em>. </em>Determine if each  Python statement is true or false. The string variable called <code>LCS_ID</code> is assigned as follows:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <code>LCS_ID <span class="o">=</span> <span class="s">'0017238'</span></code><br />
<br />
<ol type="a">
<li><code><span class="s">'17'</span> <span class="ow">in</span> <span class="n">LCS_ID</span></code> </li>
<li><code><span class="n">LCS_ID</span><span class="o">.</span><span class="n">isdigit</span><span class="p">(</span> <span class="p">)</span></code> </li>
<li><code><span class="n">LCS_ID</span><span class="o">.</span><span class="n">lstrip</span><span class="p">(</span><span class="s">'0'</span><span class="p">)</span> <span class="o">==</span> <span class="s">'17238'</span> </code></li>
<li><code><span class="n">LCS_ID</span><span class="o">.</span><span class="n">zfill</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="o">==</span> <span class="s">'10101010' </span> </code></li>
<li><code><span class="n">LCS_ID</span> <span class="o">+</span> <span class="s">'10'</span> <span class="o">==</span> <span class="mi">17248</span> </code></li>
<li><code><span class="n">LCS_ID</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">==</span> <span class="s">'3'</span> </code></li>
<li><code><span class="nb">len</span><span class="p">(</span><span class="n">LCS_ID</span><span class="p">)</span> <span class="o">==</span> <span class="mi">7</span> </code></li>
<li><code><span class="n">LCS_ID</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">7</span><span class="p">]</span> <span class="o">==</span> <span class="s">'0017238'</span> </code></li>
<li><code><span class="nb">int</span><span class="p">(</span><span class="n">LCS_ID</span><span class="p">)</span> <span class="o">+</span> <span class="mi">10</span> <span class="o">==</span> <span class="mi">17248</span> </code></li>
<li><code><span class="n">LCS_ID</span> <span class="o">!=</span> <span class="mi">17238</span> </code><br />
</li>
</ol>
<br />
</li>
<li>The Python statements on the left use string methods    and operations involving the variable <code>state</code><em>. </em>Match the Python statement with its output. All answers MUST BE one of the letters A through L. The string variable called <code>state</code> is assigned as follows: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>state <span class="o">=</span> <span class="s">'missiSSippi'</span></code><br />
<br />
<table width="713" border="3">
<tr>
<td width="392">Python statement </td>
<td width="301">Output</td>
</tr>
<tr>
<td><ol>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="s">&quot;i&quot;</span><span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">capitalize</span><span class="p">(</span> <span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">&quot;ippi&quot;</span><span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&quot;i&quot;</span><span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">state</span><span class="p">,</span><span class="n">state</span><span class="p">])</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;ss&quot;</span><span class="p">,</span><span class="s">&quot;RR&quot;</span><span class="p">)</span></code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;i&#39;</span><span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">upper</span><span class="p">( )</span></code><br />
<br />
</li>
<li> <code><span class="n">state</span><span class="p">[</span><span class="mi">7</span><span class="p">:]</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">1</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;Miss&#39;</span> <span class="ow">in</span> <span class="n">state</span> </code></li>
</ol></td>
<td><ol type="A">
<li><code><span class="s">&#39;Mississippi&#39;</span></code><br />
<br />
</li>
<li><code><span class="s">'miRRiRRippi&#39;</span> </code><br />
<br />
</li>
<li><code><span class="p">[</span><span class="s">&#39;m&#39;</span><span class="p">,</span> <span class="s">&#39;ss&#39;</span><span class="p">,</span> <span class="s">&#39;SS&#39;</span><span class="p">,</span> <span class="s">&#39;pp&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;m&#39;</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;MISSISSIPPI&#39;</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;missiSSippi;missiSSippi&#39;</span> </code><br />
<br />
</li>
<li><code><span class="bp"></span>True</code><br />
<br />
</li>
<li><code><span class="s">&#39;i&#39;</span> </code><br />
<br />
</li>
<li><code><span class="mi">4</span> </code><br />
<br />
</li>
<li><code><span class="mi">1</span> </code><br />
<br />
</li>
<li><code><span class="bp">False</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;ippi&#39;</span></code></li>
</ol></td>
</tr>
</table>
<br />
<br />
</li>
<li>Test your understanding of this chapter's 'Key terms' by matching the Python statement with a term or phrase that describes it. These four variables used in the matching have been assigned as follows:<br />
            &nbsp;<code><br />
            &gt;&gt;&gt;<span class="n"> dataDir</span> <span class="o">=</span> <span class="s">&quot;C:/data&quot; </span><br />
            &gt;&gt;&gt;<span class="n"> data</span> <span class="o">=</span> <span class="s">&quot;bird_sightings&quot;</span> <br />
            &gt;&gt;&gt;<span class="n"> count</span> <span class="o">=</span> <span class="mi">500</span> <br />
            &gt;&gt;&gt; <span class="n">n</span> <span class="o">=</span> <span class="mi">3</span> <br />
</code><br />
<table width="634" border="3">
<tr>
<td width="328">Python statement </td>
<td width="286">Output</td>
</tr>
<tr>
<td><ol>
<li><code>count/n</code><br />
<br />
</li>
<li><code>&quot;nest&quot;</code><br />
<br />
</li>
<li><code> r&quot;count\n&quot;</code><br />
<br />
</li>
<li><code>u&quot;hatchling&quot;</code><br />
<br />
</li>
<li><code>len(data)</code><br />
<br />
</li>
<li><code>str(count)</code><br />
<br />
</li>
<li><code>dataDir + &quot;/&quot;+ data</code><br />
<br />
</li>
<li><class><code>data[0:n] </code><br />
<br />
</class></li>
<li><code>data[n]</code><br />
<br />
</li>
<li><code>"bird" in data</code><br />
<br />
</li>
<li><code>"{0} records".format(count)</code><br />
<br />
</li>
<li><code>data.split("_")</code><br />
<br />
</li>
<li><code>"Bird data \
Wing span"</code><br />
</li>
</ol></td>
<td><ol type="A">
<li>Casting<br />
<br />
</li>
<li>Indexing<br />
<br />
</li>
<li>Slicing<br />
<br />
</li>
<li>Finding the length of a string<br />
<br />
</li>
<li>Concatenating<br />
<br />
</li>
<li>Line continuation<br />
<br />
</li>
<li>String literal<br />
<br />
</li>
<li>String method that is the inverse of the <code>join</code> method.<br />
<br />
</li>
<li>Escape sequence<br />
<br />
</li>
<li>Integer division<br />
<br />
</li>
<li>Raw string<br />
<br />
</li>
<li>Unicode string<br />
<br />
</li>
<li>String formatting</li>
</ol></td>
</tr>
</table>
<br />
</li>
<li><strong>printPractice.py</strong> Modify sample script 'printPractice.py', so that it prints the same statement four times, but using 4 distinct techniques--hard-coding, commas, concatenation, and string formatting. The hard-coding is already done. The other three techniques have been started  but they contain mistakes. These techniques should each use all three of the provided variables. Once the mistakes have been corrected, run the script to make sure that it prints the statement identically four times:<br />
<br />
<code>
            There are 12 traffic lights within the 5 mile buffer and 20 intersections.<br />
            There are 12 traffic lights within the 5 mile buffer and 20 intersections.<br />
            There are 12 traffic lights within the 5 mile buffer and 20 intersections.<br />
            There are 12 traffic lights within the 5 mile buffer and 20 intersections.<br />
</code><br />
</li>
<li>This problem deals with date time stamps that have the form MM/DD/YYYY
            HH:MM:SSxM (where xM
            is AM for morning and PM otherwise). Part (a) creates a date-time variable which is used in all other parts. Solutions should work for other values of this variable. Write one or more lines of code to achieve the outcome described in each part. 
            <ol type="a">
<li>Use an assignment statement to set a variable named <code>dt</code> to '07/28/2055 05:25:33PM'.</li>
<li>Use the <code>in</code> keyword in a code statement to  print true if the value of <code>dt</code> is in the morning (and false otherwise). </li>
<li>Use slicing to extract the month from <code>dt</code>.</li>
<li>Use the <code>split</code> method twice and then use indexing to extract the hour from <code>dt</code>.</li>
<li>Use the <code>split</code> method twice and then use indexing to extract the year from <code>dt</code>.<br />
<br />
</li>
</ol>
</li>
<li>Write one or more lines of code to achieve the outcome described in each part. <br />
<ol type="a">
<li>Often geoprocessing involves sorting data files based on their names. For example, you may want to move all the files from Region 1to separate directory. Write a line of code to check if a variable named <code>filename</code> contains a substring that matches the value of a variable named <code>code</code>. The examples below show how the line of code could be used.<br />
<code><br />
&gt;&gt;&gt; <span class="c"># Sample input 1: </span> <br />
&gt;&gt;&gt; <span class="n">filename</span> <span class="o">=</span> <span class="s">&quot;Forest361Region1_rec.shp&quot;</span><br />
&gt;&gt;&gt; <span class="n">code</span> <span class="o">=</span> <span class="s">&quot;Region1&quot;</span> <br />
&gt;&gt;&gt; <span class="c"># Insert line of code here.</span> <br />
True<br />
&gt;&gt;&gt; <span class="c"># Sample input 2:</span> <br />
&gt;&gt;&gt; <span class="n">filename</span> <span class="o">=</span> <span class="s">&quot;Marsh12Region4.shp&quot;</span> <br />
&gt;&gt;&gt; <span class="n">code</span> <span class="o">=</span> <span class="s">&quot;Region1&quot;</span> <br />
&gt;&gt;&gt; <span class="c"># Insert line of code here.</span> <br />
False<br />
</code><br />
</li>
<li>Write a line of code to using the <code>rstrip</code> method and an assignment statement to remove the trailing whitespace from the string variable named <code>data</code>. The variable  contains a line of tab delimited North Carolina county forestry data.
                The example below shows how the line of code could be used.
                <p><code>&gt;&gt;&gt; <span class="comment"># Sample input: </span><br />
                  &gt;&gt;&gt;  
                  data <span class="o">=</span> <span class="s">&quot;               Site:\tNortheast Prong\tDARE\t01\t\n\n&quot;</span><br />
                  &gt;&gt;&gt; data<br />
</code><code><span class="n">' Site:\tNortheast Prong\tDARE\t01\t\n\n'</span></code><br />
                  &gt;&gt;&gt; <span class="comment"># Insert line of code here.</span><span class="num"></span><br />
                  &gt;&gt;&gt; data<br />
<code><span class="n">&quot;               Site:\tNortheast Prong\tDARE\t01&quot;</span></code><br />
</p>
</li>
<li>
<p>Suppose that we are editing data and saving the results in another file. We want to append the string <code>'_edited'</code> to the input base name to create the output name. For example, if the input file name is named  <code>'countiesNC.txt'</code>,  the output file should be <span class="n">named <code>'countiesNC_edited.txt'</code>. If the input file is named <code><span class="n">'</span>riversWVA.txt'</code>,  the output file  should be named <code><span class="n">'</span>riversWVA_edited.txt'</code>, and so forth. Write a line of code  that uses slicing, concatenation, and a variable named <code>input</code> to assign a value to a variable named <code>output</code>. The example below shows how the line of code could be used.<br />
<br />
<code>&gt;&gt;&gt;<span class="comment"># Sample input:</span><br />
  &gt;&gt;&gt; inputName <span class="o">=</span><span class="s"> 'counties.shp'</span><br />
  &gt;&gt;&gt; <span class="comment"># Insert line of code here.</span><span class="num"></span><br />
  &gt;&gt;&gt; <span class="key">print</span> outputName<br />
</code><code><span class="n">counties_edited.shp</span></code><br />
</span></p>
</li>
<li>
<p>Write a line of code  using the string <code>format</code> method to print the desired output. Pass the given variables as arguments. The output from the print statements should appear exactly as shown on the last line.<br />
<code><br />
&gt;&gt;&gt; traffic_lights_count <span class="o">=</span> <span class="mi">12</span><br />
&gt;&gt;&gt; buffer_dist <span class="o">=</span> <span class="mi">5</span><br />
&gt;&gt;&gt; intersection_count <span class="o">=</span> <span class="mi">20</span><br />
&gt;&gt;&gt; <span class="comment"># Insert line of code here.</span></code><code><span class="n"><br />
                  There are 12 traffic lights within the 5 buffer and 20 intersections.</span></code><br />
</p>
</li>
<li>Write a line of code  using the string <code>format</code> method to print the desired output. Pass the given variables as arguments. The output from the print statements should appear exactly as shown on the last line.
                <code></code><p>
                  &gt;&gt;&gt; buffer_input <span class="o">=</span> <span class="s">'crime_sites'</span><br />
                  &gt;&gt;&gt; num <span class="o">=</span> <span class="mi">32</span><br />
                  &gt;&gt;&gt; <span class="comment"># Insert line of code here.</span><br />
<code><span class="n">crime_sites.shp has been successfully buffered. Results were saved in C:/bufferOut32.shp</span></code><br />
</p>
</li>
</ol>
</li>
</ol><a href="#top">back to top</a> <strong>Table 3.1: </strong>Numerical operators.
              <table width="453" border="1" cellpadding="5">
<tr>
<th width="86" scope="row">Operation</th>
<th width="131" align="center">Operator</th>
<th width="190">Example</th>
</tr>
<tr>
<td scope="row">Addition</td>
<td align="center"><code>+</code></td>
<td><code><span class="mi">7</span> <span class="o">+</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">9</span></code></td>
</tr>
<tr>
<td scope="row">Subtraction</td>
<td align="center"><code>-</code></td>
<td><code><span class="mi">7</span> <span class="o">-</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">5</span> </code></td>
</tr>
<tr>
<td height="29" scope="row">Multiplication</td>
<td align="center"><code>*</code></td>
<td><code><span class="mi">7</span> <span class="o">*</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">14</span> </code></td>
</tr>
<tr>
<td scope="row"><p>Division</p></td>
<td align="center"><code>/</code></td>
<td><code><span class="mi">7</span> / <span class="mi">2</span> <span class="o">=</span><span class="mi"> 3</span> </code><code></code></td>
</tr>
<tr>
<td scope="row">Exponentiation</td>
<td align="center"><code>**</code><code></code></td>
<td><code><span class="mi">7</span><span class="o">*</span><span class="o">*</span><span class="mi">2</span><span class="o"> =</span> <span class="mi">9</span> </code></td>
</tr>
<tr>
<td scope="row">Modulus division </td>
<td align="center"><code>%</code></td>
<td><code><span class="mi">7 <span class="o">%</span></span><span class="mi"> 2 </span><span class="o">=</span> <span class="mi">1</span> </code></td>
</tr>
</table>Addition<code>+</code><code><span class="mi">7</span> <span class="o">+</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">9</span></code>Subtraction<code>-</code><code><span class="mi">7</span> <span class="o">-</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">5</span> </code>Multiplication<code>*</code><code><span class="mi">7</span> <span class="o">*</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">14</span> </code><p>Division</p><code>/</code><code><span class="mi">7</span> / <span class="mi">2</span> <span class="o">=</span><span class="mi"> 3</span> </code><code></code>Exponentiation<code>**</code><code></code><code><span class="mi">7</span><span class="o">*</span><span class="o">*</span><span class="mi">2</span><span class="o"> =</span> <span class="mi">9</span> </code>Modulus division <code>%</code><code><span class="mi">7 <span class="o">%</span></span><span class="mi"> 2 </span><span class="o">=</span> <span class="mi">1</span> </code><a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <p><strong><br />
                  Table 3.2: </strong>Sequence Operations on Strings<strong><br />
<br />
<code>&gt;&gt;&gt; exampleString <span class="o">=</span> <span class="s">'tuzigoot'</span></code></strong></p>
<table width="732" border="3">
<tr>
<td width="130"><strong>Operation</strong></td>
<td width="260"><strong>Sample code</strong></td>
<td width="316"><strong>Return value </strong></td>
</tr>
<tr>
<td>length</td>
<td><code>len(exampleString)</code></td>
<td><p><code>8</code><br />
</p></td>
</tr>
<tr>
<td>indexing</td>
<td><code>exampleString[2]</code></td>
<td><code>'z'</code><br /></td>
</tr>
<tr>
<td>slicing</td>
<td><code>exampleString[:-4]</code></td>
<td><code>'tuzi'</code><br /></td>
</tr>
<tr>
<td>concatenation</td>
<td><code>exampleString <span class="o">+</span> exampleString</code></td>
<td><code>'tuzigoottuzigoot'</code></td>
</tr>
<tr>
<td>membership</td>
<td><code>'ample' in exampleString</code></td>
<td><p><code>False</code><br />
</p></td>
</tr>
</table><strong>Operation</strong><strong>Sample code</strong><strong>Return value </strong>length<code>len(exampleString)</code><p><code>8</code><br />
</p>indexing<code>exampleString[2]</code><code>'z'</code><br />slicing<code>exampleString[:-4]</code><code>'tuzi'</code><br />concatenation<code>exampleString <span class="o">+</span> exampleString</code><code>'tuzigoottuzigoot'</code>membership<code>'ample' in exampleString</code><p><code>False</code><br />
</p><a href="#top">back to top</a> <a href="#top">back to top</a> <code>\n</code>new line <code>\t</code>tab<a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> Python statement Output (notice there are 9 letters) <ol>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span></code> <br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">5</span><span class="p">]</span> <span class="o">+</span> <span class="n">happyCow</span><span class="p">[</span><span class="o">-</span><span class="mi">4</span><span class="p">:]</span></code> <br />
<br />
</li>
<li><code><span class="nb">len</span><span class="p">(</span><span class="n">happyCow</span><span class="p">)</span></code> <br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">5</span><span class="p">]</span></code><br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="o">-</span><span class="mi">4</span><span class="p">:]</span> </code><br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[:</span><span class="mi">5</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="n">happyCow</span> <span class="ow">in</span> <span class="s">&quot;5meadows.shp&quot;</span></code><br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;W&#39;</span> <span class="ow">in</span> <span class="n">happyCow</span></code><br />
</li>
</ol><br />
<ol type="A">
<li><code><span class="ne">IndexError</span></code><br />
<br />
</li>
<li><code><span class="s">&#39;meado.shp&#39;</span></code> </li>
<br />
<li><code><span class="s">&#39;meado&#39;</span></code><br />
<br />
</li>
<li><code>True</code><br />
<br />
</li>
<li><code>False</code><br />
<br />
</li>
<li><code><span class="mi">11</span></code><br />
<br />
</li>
<li><code><span class="s">&#39;w&#39;</span></code><br />
<br />
</li>
<li><code><span class="s">&#39;.shp&#39;</span></code><br />
<br />
</li>
<li><code><span class="s">&#39;m&#39;</span></code></li>
</ol>
<br />
<br /> Python statement Output<ol>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="s">&quot;i&quot;</span><span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">capitalize</span><span class="p">(</span> <span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">&quot;ippi&quot;</span><span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&quot;i&quot;</span><span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">state</span><span class="p">,</span><span class="n">state</span><span class="p">])</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;ss&quot;</span><span class="p">,</span><span class="s">&quot;RR&quot;</span><span class="p">)</span></code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;i&#39;</span><span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">upper</span><span class="p">( )</span></code><br />
<br />
</li>
<li> <code><span class="n">state</span><span class="p">[</span><span class="mi">7</span><span class="p">:]</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">1</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;Miss&#39;</span> <span class="ow">in</span> <span class="n">state</span> </code></li>
</ol><ol type="A">
<li><code><span class="s">&#39;Mississippi&#39;</span></code><br />
<br />
</li>
<li><code><span class="s">'miRRiRRippi&#39;</span> </code><br />
<br />
</li>
<li><code><span class="p">[</span><span class="s">&#39;m&#39;</span><span class="p">,</span> <span class="s">&#39;ss&#39;</span><span class="p">,</span> <span class="s">&#39;SS&#39;</span><span class="p">,</span> <span class="s">&#39;pp&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;m&#39;</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;MISSISSIPPI&#39;</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;missiSSippi;missiSSippi&#39;</span> </code><br />
<br />
</li>
<li><code><span class="bp"></span>True</code><br />
<br />
</li>
<li><code><span class="s">&#39;i&#39;</span> </code><br />
<br />
</li>
<li><code><span class="mi">4</span> </code><br />
<br />
</li>
<li><code><span class="mi">1</span> </code><br />
<br />
</li>
<li><code><span class="bp">False</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;ippi&#39;</span></code></li>
</ol>Python statement Output<ol>
<li><code>count/n</code><br />
<br />
</li>
<li><code>&quot;nest&quot;</code><br />
<br />
</li>
<li><code> r&quot;count\n&quot;</code><br />
<br />
</li>
<li><code>u&quot;hatchling&quot;</code><br />
<br />
</li>
<li><code>len(data)</code><br />
<br />
</li>
<li><code>str(count)</code><br />
<br />
</li>
<li><code>dataDir + &quot;/&quot;+ data</code><br />
<br />
</li>
<li><class><code>data[0:n] </code><br />
<br />
</class></li>
<li><code>data[n]</code><br />
<br />
</li>
<li><code>"bird" in data</code><br />
<br />
</li>
<li><code>"{0} records".format(count)</code><br />
<br />
</li>
<li><code>data.split("_")</code><br />
<br />
</li>
<li><code>"Bird data \
Wing span"</code><br />
</li>
</ol><ol type="A">
<li>Casting<br />
<br />
</li>
<li>Indexing<br />
<br />
</li>
<li>Slicing<br />
<br />
</li>
<li>Finding the length of a string<br />
<br />
</li>
<li>Concatenating<br />
<br />
</li>
<li>Line continuation<br />
<br />
</li>
<li>String literal<br />
<br />
</li>
<li>String method that is the inverse of the <code>join</code> method.<br />
<br />
</li>
<li>Escape sequence<br />
<br />
</li>
<li>Integer division<br />
<br />
</li>
<li>Raw string<br />
<br />
</li>
<li>Unicode string<br />
<br />
</li>
<li>String formatting</li>
</ol><span class="head">3.1 Numbers</span> <a name="nums" id="introduction2"></a><a href="#top">back to top</a> OperationOperatorExample<strong>Table 3.1: </strong>Numerical operators.
              <table width="453" border="1" cellpadding="5">
<tr>
<th width="86" scope="row">Operation</th>
<th width="131" align="center">Operator</th>
<th width="190">Example</th>
</tr>
<tr>
<td scope="row">Addition</td>
<td align="center"><code>+</code></td>
<td><code><span class="mi">7</span> <span class="o">+</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">9</span></code></td>
</tr>
<tr>
<td scope="row">Subtraction</td>
<td align="center"><code>-</code></td>
<td><code><span class="mi">7</span> <span class="o">-</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">5</span> </code></td>
</tr>
<tr>
<td height="29" scope="row">Multiplication</td>
<td align="center"><code>*</code></td>
<td><code><span class="mi">7</span> <span class="o">*</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">14</span> </code></td>
</tr>
<tr>
<td scope="row"><p>Division</p></td>
<td align="center"><code>/</code></td>
<td><code><span class="mi">7</span> / <span class="mi">2</span> <span class="o">=</span><span class="mi"> 3</span> </code><code></code></td>
</tr>
<tr>
<td scope="row">Exponentiation</td>
<td align="center"><code>**</code><code></code></td>
<td><code><span class="mi">7</span><span class="o">*</span><span class="o">*</span><span class="mi">2</span><span class="o"> =</span> <span class="mi">9</span> </code></td>
</tr>
<tr>
<td scope="row">Modulus division </td>
<td align="center"><code>%</code></td>
<td><code><span class="mi">7 <span class="o">%</span></span><span class="mi"> 2 </span><span class="o">=</span> <span class="mi">1</span> </code></td>
</tr>
</table>Addition<code>+</code><code><span class="mi">7</span> <span class="o">+</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">9</span></code>Subtraction<code>-</code><code><span class="mi">7</span> <span class="o">-</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">5</span> </code>Multiplication<code>*</code><code><span class="mi">7</span> <span class="o">*</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">14</span> </code><p>Division</p><code>/</code><code><span class="mi">7</span> / <span class="mi">2</span> <span class="o">=</span><span class="mi"> 3</span> </code><code></code>Exponentiation<code>**</code><code></code><code><span class="mi">7</span><span class="o">*</span><span class="o">*</span><span class="mi">2</span><span class="o"> =</span> <span class="mi">9</span> </code>Modulus division <code>%</code><code><span class="mi">7 <span class="o">%</span></span><span class="mi"> 2 </span><span class="o">=</span> <span class="mi">1</span> </code>OperationOperatorExampleAddition<code>+</code><code><span class="mi">7</span> <span class="o">+</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">9</span></code>Subtraction<code>-</code><code><span class="mi">7</span> <span class="o">-</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">5</span> </code>Multiplication<code>*</code><code><span class="mi">7</span> <span class="o">*</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">14</span> </code><p>Division</p><code>/</code><code><span class="mi">7</span> / <span class="mi">2</span> <span class="o">=</span><span class="mi"> 3</span> </code><code></code>Exponentiation<code>**</code><code></code><code><span class="mi">7</span><span class="o">*</span><span class="o">*</span><span class="mi">2</span><span class="o"> =</span> <span class="mi">9</span> </code>Modulus division <code>%</code><code><span class="mi">7 <span class="o">%</span></span><span class="mi"> 2 </span><span class="o">=</span> <span class="mi">1</span> </code><span class="head">3.2 What is a string?</span> <a name="strings" id="strings"></a><a href="#top">back to top</a> <span class="head">3.3 Things you need to do to strings (a.k.a. string operations)</span> <a name="operations" id="operations"></a><a href="#top">back to top</a> <span class="head">3.3.1 Indexing into strings</span> <a name="index" id="operations3"></a><a href="#top">back to top</a> variableName[index_number]<span class="head">3.3.2 Slice strings</span> <a name="operations" id="operations2"></a><a href="#top">back to top</a> <strong><span class="head">3.3.3 Concatenate strings</span></strong><a href="#top">back to top</a> <strong><span class="head">3.3.4 Check for substring membership</span></strong><a href="#top">back to top</a> <p><strong><br />
                  Table 3.2: </strong>Sequence Operations on Strings<strong><br />
<br />
<code>&gt;&gt;&gt; exampleString <span class="o">=</span> <span class="s">'tuzigoot'</span></code></strong></p>
<table width="732" border="3">
<tr>
<td width="130"><strong>Operation</strong></td>
<td width="260"><strong>Sample code</strong></td>
<td width="316"><strong>Return value </strong></td>
</tr>
<tr>
<td>length</td>
<td><code>len(exampleString)</code></td>
<td><p><code>8</code><br />
</p></td>
</tr>
<tr>
<td>indexing</td>
<td><code>exampleString[2]</code></td>
<td><code>'z'</code><br /></td>
</tr>
<tr>
<td>slicing</td>
<td><code>exampleString[:-4]</code></td>
<td><code>'tuzi'</code><br /></td>
</tr>
<tr>
<td>concatenation</td>
<td><code>exampleString <span class="o">+</span> exampleString</code></td>
<td><code>'tuzigoottuzigoot'</code></td>
</tr>
<tr>
<td>membership</td>
<td><code>'ample' in exampleString</code></td>
<td><p><code>False</code><br />
</p></td>
</tr>
</table><strong>Operation</strong><strong>Sample code</strong><strong>Return value </strong>length<code>len(exampleString)</code><p><code>8</code><br />
</p>indexing<code>exampleString[2]</code><code>'z'</code><br />slicing<code>exampleString[:-4]</code><code>'tuzi'</code><br />concatenation<code>exampleString <span class="o">+</span> exampleString</code><code>'tuzigoottuzigoot'</code>membership<code>'ample' in exampleString</code><p><code>False</code><br />
</p><strong>Operation</strong><strong>Sample code</strong><strong>Return value </strong>length<code>len(exampleString)</code><p><code>8</code><br />
</p>indexing<code>exampleString[2]</code><code>'z'</code><br />slicing<code>exampleString[:-4]</code><code>'tuzi'</code><br />concatenation<code>exampleString <span class="o">+</span> exampleString</code><code>'tuzigoottuzigoot'</code>membership<code>'ample' in exampleString</code><p><code>False</code><br />
</p><span class="head">3.4 More things with strings (a.k.a. string methods)</span> <a name="methods" id="methods"></a><a href="#top">back to top</a> <strong><code>object.method(argument1, argument2, argument3,...)</code></strong><code><strong>variableName <span class="o">=</span> object.method(argument1, argument2, argument3,...)</strong></code><span class="head">3.5 File paths and raw strings</span> <a name="escape" id="escape"></a><a href="#top">back to top</a> White space escape sequences<code>\n</code>new line <code>\t</code>tab<span class="head">3.6 Unicode strings</span> <a name="escape" id="escape2"></a><a href="#top">back to top</a> <span class="head">3.7 Printing Strings and Numbers</span> <a name="printing" id="printing"></a><a href="#top">back to top</a> <b class="head">3.8 Key terms</b><a name="keyterms" id="keyterms2"></a><a href="#top">back to top</a> <span class="head">3.9 Exercises</span> <a name="exercises" id="exercises"></a><a href="#top">back to top</a> Python statement Output (notice there are 9 letters) <ol>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span></code> <br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">5</span><span class="p">]</span> <span class="o">+</span> <span class="n">happyCow</span><span class="p">[</span><span class="o">-</span><span class="mi">4</span><span class="p">:]</span></code> <br />
<br />
</li>
<li><code><span class="nb">len</span><span class="p">(</span><span class="n">happyCow</span><span class="p">)</span></code> <br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">5</span><span class="p">]</span></code><br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="o">-</span><span class="mi">4</span><span class="p">:]</span> </code><br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[:</span><span class="mi">5</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="n">happyCow</span> <span class="ow">in</span> <span class="s">&quot;5meadows.shp&quot;</span></code><br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;W&#39;</span> <span class="ow">in</span> <span class="n">happyCow</span></code><br />
</li>
</ol><br />
<ol type="A">
<li><code><span class="ne">IndexError</span></code><br />
<br />
</li>
<li><code><span class="s">&#39;meado.shp&#39;</span></code> </li>
<br />
<li><code><span class="s">&#39;meado&#39;</span></code><br />
<br />
</li>
<li><code>True</code><br />
<br />
</li>
<li><code>False</code><br />
<br />
</li>
<li><code><span class="mi">11</span></code><br />
<br />
</li>
<li><code><span class="s">&#39;w&#39;</span></code><br />
<br />
</li>
<li><code><span class="s">&#39;.shp&#39;</span></code><br />
<br />
</li>
<li><code><span class="s">&#39;m&#39;</span></code></li>
</ol>
<br />
<br /> Python statement Output<ol>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="s">&quot;i&quot;</span><span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">capitalize</span><span class="p">(</span> <span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">&quot;ippi&quot;</span><span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&quot;i&quot;</span><span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">state</span><span class="p">,</span><span class="n">state</span><span class="p">])</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;ss&quot;</span><span class="p">,</span><span class="s">&quot;RR&quot;</span><span class="p">)</span></code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;i&#39;</span><span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">upper</span><span class="p">( )</span></code><br />
<br />
</li>
<li> <code><span class="n">state</span><span class="p">[</span><span class="mi">7</span><span class="p">:]</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">1</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;Miss&#39;</span> <span class="ow">in</span> <span class="n">state</span> </code></li>
</ol><ol type="A">
<li><code><span class="s">&#39;Mississippi&#39;</span></code><br />
<br />
</li>
<li><code><span class="s">'miRRiRRippi&#39;</span> </code><br />
<br />
</li>
<li><code><span class="p">[</span><span class="s">&#39;m&#39;</span><span class="p">,</span> <span class="s">&#39;ss&#39;</span><span class="p">,</span> <span class="s">&#39;SS&#39;</span><span class="p">,</span> <span class="s">&#39;pp&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;m&#39;</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;MISSISSIPPI&#39;</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;missiSSippi;missiSSippi&#39;</span> </code><br />
<br />
</li>
<li><code><span class="bp"></span>True</code><br />
<br />
</li>
<li><code><span class="s">&#39;i&#39;</span> </code><br />
<br />
</li>
<li><code><span class="mi">4</span> </code><br />
<br />
</li>
<li><code><span class="mi">1</span> </code><br />
<br />
</li>
<li><code><span class="bp">False</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;ippi&#39;</span></code></li>
</ol>Python statement Output<ol>
<li><code>count/n</code><br />
<br />
</li>
<li><code>&quot;nest&quot;</code><br />
<br />
</li>
<li><code> r&quot;count\n&quot;</code><br />
<br />
</li>
<li><code>u&quot;hatchling&quot;</code><br />
<br />
</li>
<li><code>len(data)</code><br />
<br />
</li>
<li><code>str(count)</code><br />
<br />
</li>
<li><code>dataDir + &quot;/&quot;+ data</code><br />
<br />
</li>
<li><class><code>data[0:n] </code><br />
<br />
</class></li>
<li><code>data[n]</code><br />
<br />
</li>
<li><code>"bird" in data</code><br />
<br />
</li>
<li><code>"{0} records".format(count)</code><br />
<br />
</li>
<li><code>data.split("_")</code><br />
<br />
</li>
<li><code>"Bird data \
Wing span"</code><br />
</li>
</ol><ol type="A">
<li>Casting<br />
<br />
</li>
<li>Indexing<br />
<br />
</li>
<li>Slicing<br />
<br />
</li>
<li>Finding the length of a string<br />
<br />
</li>
<li>Concatenating<br />
<br />
</li>
<li>Line continuation<br />
<br />
</li>
<li>String literal<br />
<br />
</li>
<li>String method that is the inverse of the <code>join</code> method.<br />
<br />
</li>
<li>Escape sequence<br />
<br />
</li>
<li>Integer division<br />
<br />
</li>
<li>Raw string<br />
<br />
</li>
<li>Unicode string<br />
<br />
</li>
<li>String formatting</li>
</ol>------------------------------------------------------------rows: 41 cols: 2<span class="head">3.1 Numbers</span> <a name="nums" id="introduction2"></a>OperationOperatorExample<span class="head">3.2 What is a string?</span> <a name="strings" id="strings"></a><span class="head">3.3 Things you need to do to strings (a.k.a. string operations)</span> <a name="operations" id="operations"></a><span class="head">3.3.1 Indexing into strings</span> <a name="index" id="operations3"></a>variableName[index_number]<span class="head">3.3.2 Slice strings</span> <a name="operations" id="operations2"></a><strong><span class="head">3.3.3 Concatenate strings</span></strong><strong><span class="head">3.3.4 Check for substring membership</span></strong><span class="head">3.4 More things with strings (a.k.a. string methods)</span> <a name="methods" id="methods"></a><strong><code>object.method(argument1, argument2, argument3,...)</code></strong><code><strong>variableName <span class="o">=</span> object.method(argument1, argument2, argument3,...)</strong></code><span class="head">3.5 File paths and raw strings</span> <a name="escape" id="escape"></a>White space escape sequences<span class="head">3.6 Unicode strings</span> <a name="escape" id="escape2"></a><span class="head">3.7 Printing Strings and Numbers</span> <a name="printing" id="printing"></a><b class="head">3.8 Key terms</b><a name="keyterms" id="keyterms2"></a><span class="head">3.9 Exercises</span> <a name="exercises" id="exercises"></a><span class="head">Chapter objectives</span>
<br />
<br />
        After reading this chapter, you'll be able to do the following:
        <ul>
<li>Perform mathematical operations on numeric data types.</li>
<li>Differentiate between integers and floating point number division.</li>
<li>Determine the data type of a variable. </li>
<li>Index into, slice, and concatenate strings.</li>
<li>Find the length of a string and check if a substring is in a string.</li>
<li>Replace substrings, modify text case in strings, split strings, and join items into a single string. </li>
<li>Differentiate between string variables and string literals.</li>
<li>Locate online help for the specialized functions associated with strings.</li>
<li>Create strings that represent the location of data.</li>
<li>Format strings and numbers for printing.</li>
</ul>
<hr />
<p class="foo">
<span class="head">Chapter Outline</span><br />
<br />
<a href="#nums">Numbers</a><br />
<a href="#strings">What is a string?</a><br />
<a href="#operations">Things you need to do to strings (a.k.a. string operations)</a><br />
  &nbsp;&nbsp;&nbsp;&nbsp;Index into strings<br />
  &nbsp;&nbsp;&nbsp;&nbsp;Slice strings<br />
  &nbsp;&nbsp;&nbsp;&nbsp;Concatenate strings<br />
  &nbsp;&nbsp;&nbsp;&nbsp;Check for substring membership<br />
<a href="#methods">More things with strings (a.k.a. string methods) </a><br />
<a href="#escape">File paths and raw strings</a><br />
          Unicode strings<br />
<a href="#printing">Printing strings and numbers<br />
</a>Key terms<br />
<a href="#exercises">Exercises</a> </p>
<span class="foo">
<hr />
</span>
<p>Chapter 2 alluded to all Python objects having a data type.   Built-in Python data types, such as integers, string, booleans, and others, are building blocks for GIS scripts. Chapters 3 and 4 introduce essential  built-in data types  that will appear  frequently in our GIS Python--scripts, numbers, strings, lists, and tuples.  Through these data type examples, this chapter also introduces  some concepts about objects that are used throughout Python:</p>
<ul>
<li>Python objects made up of a sequence of items  share a set of operations, though the operations may act differently depending on the object data type.</li>
<li>Python objects have functions called 'methods' associated with them. The methods are specialized for each  data type.</li>
<li> Python objects use object-oriented syntax referred to as 'dot notation.' </li>
</ul>
<p>Basic data types, operations, methods and dot notation appear in all of the geoprocessing script examples in the upcoming chapters. As you read this chapter, it may help to attend to these commonalities across data types. In this way, not only will these data types  already be familiar when they appear in the ArcGIS Python scripts, the concepts will already be familiar when they are extended to specialized ArcGIS Python objects.</p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">3.1 Numbers</span> <a name="nums" id="introduction2"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Python has four numeric data types: int, long, float, and complex. Examples in this book mainly use <code>int</code> (signed integers) and <code>float</code> (floating point numbers). With dynamic typing, the variable type is decided by the assignment statement which gives it a value. Float  values have a decimal point; Integer values don't.  In the following example, the variable <code>x</code> is an integer and <code>y</code> is a float:</p>
<code></code><p>
          &gt;&gt;&gt; x <span class="o">=</span> <span class="mi">2</span><br />
          &gt;&gt;&gt; y <span class="o">=</span> <span class="mi">2.0</span><br />
          &gt;&gt;&gt; type(x)<br />
          &lt;type 'int'&gt;<br />
          &gt;&gt;&gt; type(y)<br />
          &lt;type 'float'&gt;<br />
</p>
<p>By default, PythonWin uses turquoise to display numeric values (as well as output in the Interactive Window). Python uses <strong>+</strong>, <strong>-</strong>, <strong>*</strong>, **, and <strong>/</strong> for addition, subtraction,  multiplication, exponentiation, and division as shown in Table 3.1. Mathematical order of operations is preserved. <code><span class="mi">2</span> <span class="o">+ </span><span class="mi">3 </span><span class="o">*</span><span class="mi"> 4</span> </code> gives 14 not 20, though <code><span class="mi">2</span> <span class="o">+ </span>(<span class="mi">3 </span><span class="o">*</span><span class="mi"> 4</span>) </code> is a clearer way to write it.  Be aware that Python integer division and floating point division give different results. If both division operands are integers, the  result will be<em> integer division</em> with the fractional part truncated; in other words, it always  rounds down. If at least one of the operands are float, the result  retains much more precision. </p>
<code></code><p>
          &gt;&gt;&gt; <span class="mi">8</span> /<span class="mi"> 3</span><br />
          2<br />
          &gt;&gt;&gt; <span class="mi">8.0</span> /<span class="mi"> 3</span> <br />
          2.6666666666666665<br />
</p>
<p>In Python versions 3.0 and higher, this behavior is changed so that 8/3 gives the same result as 8.0/3.</p>
<table width="600" border="0" bgcolor="#eeeeeee">
<tr>
<td><strong>Table 3.1: </strong>Numerical operators.
              <table width="453" border="1" cellpadding="5">
<tr>
<th width="86" scope="row">Operation</th>
<th width="131" align="center">Operator</th>
<th width="190">Example</th>
</tr>
<tr>
<td scope="row">Addition</td>
<td align="center"><code>+</code></td>
<td><code><span class="mi">7</span> <span class="o">+</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">9</span></code></td>
</tr>
<tr>
<td scope="row">Subtraction</td>
<td align="center"><code>-</code></td>
<td><code><span class="mi">7</span> <span class="o">-</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">5</span> </code></td>
</tr>
<tr>
<td height="29" scope="row">Multiplication</td>
<td align="center"><code>*</code></td>
<td><code><span class="mi">7</span> <span class="o">*</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">14</span> </code></td>
</tr>
<tr>
<td scope="row"><p>Division</p></td>
<td align="center"><code>/</code></td>
<td><code><span class="mi">7</span> / <span class="mi">2</span> <span class="o">=</span><span class="mi"> 3</span> </code><code></code></td>
</tr>
<tr>
<td scope="row">Exponentiation</td>
<td align="center"><code>**</code><code></code></td>
<td><code><span class="mi">7</span><span class="o">*</span><span class="o">*</span><span class="mi">2</span><span class="o"> =</span> <span class="mi">9</span> </code></td>
</tr>
<tr>
<td scope="row">Modulus division </td>
<td align="center"><code>%</code></td>
<td><code><span class="mi">7 <span class="o">%</span></span><span class="mi"> 2 </span><span class="o">=</span> <span class="mi">1</span> </code></td>
</tr>
</table></td>
</tr>
</table>
<br />
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">3.2 What is a string?</span> <a name="strings" id="strings"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>PythonWin uses olive green text to display string literals. A <em>string literal</em> is a set of characters surrounded by quotation marks.  A variable assigned a string literal value is called a <em>string variable</em>.  The difference between these two terms is important, but both of these items are sometimes referred to simply as 'strings'. The characters inside the quotes in the string literal are interpreted literally. In GIS scripts, we use string literals for things like the name of a workspace, input file, or output file. Meanwhile, the characters that make up a string variable are simply a name for the program to use to represent its value. Variable names should not be surrounded by quotes. The operations and methods described in the next section apply to both string literals and string variables. Both are  objects of data type <code>str</code> (for string). <br />
<img src="../images/strings.png" border="1" /><br />
<br />
          The type of quotes used to create a Python string literal is flexible, as long as the opening and closing quotes match. Here are two variations: </p>
<p><code>&gt;&gt;&gt; inputData <span class="o">=</span> <span class="s">'trees.shp'</span><br />
          &gt;&gt;&gt; inputData<br />
          'trees.shp'<br />
          &gt;&gt;&gt; inputData <span class="o">=</span> <span class="s">&quot;trees.shp&quot;</span><br />
          &gt;&gt;&gt; inputData <br />
          'trees.shp'<br />
</code></p>
<p>There is a subtle difference between printing strings with and without the <code>print</code> function in the Interactive Window: The former removes the quotation marks entirely and the latter uses single quotation marks. </p>
<p><code>&gt;&gt;&gt; <span class="key">print</span> inputData<br />
          trees.shp<br />
</code><br />
          String literals in single or double quotes cannot span more than one line. A string literal with no closing quote raises a <code>SyntaxError</code> as shown in the traceback message:<br />
<code><br />
          &gt;&gt;&gt; output <span class="o">=</span> <span class="s">'a b c</span><br />
<span class="err">Traceback (  File &quot;&lt;interactive input&gt;&quot;, line 1<br />
          output <span class="o">=</span> &quot;a b c<br />
          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^<br />
          SyntaxError: EOL while scanning string literal</span><br />
</code><br />
          Triple quotes can be used to create a string that spans more than one line:<br />
<code><br />
          &gt;&gt;&gt;
          output <span class="o">=</span> <span class="s">&quot;&quot;&quot;a b c<br />
</span>... <span class="s">d e f&quot;&quot;&quot;</span><br />
<br />
          &gt;&gt;&gt; <span class="key">print</span> output<br />
          a b c<br />
          d e f<br />
</code><br />
          The triple quotes store the carriage return as part of the string. In some cases we don't want a carriage return stored in the string. For example, we might need to store a long file path name. The path won't be interpreted correctly if a carriage return is embedded in it. But very wide lines of Python code are awkward to read. As a rule of thumb, Python lines of code should be less than 100 characters wide, so the reader doesn't need to scroll right. A <em>line continuation character</em> (<code>'\'</code>), a backslash embedded in a string at the end of a line, allows a string to be written on more than one line, while preserving the single line spacing in the string literal value. In other words, though it is assigned on multiple lines, it will be printed as a single line variable. Place the character at the end of the line and the string literal can be continued on the next line, but the string value will not contain the carriage return:</p>
<p><code>&gt;&gt;&gt; output <span class="o">=</span> <span class="s">'a b c \<br />
          d e f \ <br />
          g h i'</span><br />
<br />
          &gt;&gt;&gt; <span class="key">print </span>output<br />
          a b c d e f g h i<br />
</code><br />
          Numerical characters surrounded by quotation marks are considered to be strings literals by Python. <br />
<code><br />
          &gt;&gt;&gt; FID <span class="o">=</span> <span class="mi">145</span><br />
          &gt;&gt;&gt; type(FID)<br />
          &lt;type 'int'&gt;<br />
          &gt;&gt;&gt; countyNum =<span class="s"> '145'</span><br />
          &gt;&gt;&gt; type(countyNum)<br />
          &lt;type 'str'&gt;<br />
</code></p>
<p>If the variable is a string type, you can perform string operations on it as described in the next section. </p>
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">3.3 Things you need to do to strings (a.k.a. string operations)</span> <a name="operations" id="operations"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>GIS Python programming requires frequent string manipulation. To deal with file names, field names, and so forth,  you'll need to be familiar with finding the length of a string, indexing into a string, concatenating, slicing,  and checking for a substring in a string. Examples of each operation follow.</p>
<p><strong>Find the length of string</strong></p>
<p><code>          The built-in </code><code>len</code> function  finds the length of a string literal:<br />
          &gt;&gt;&gt;<span class="nb"> len</span><span class="p">(</span><span class="s">&#39;trees.shp&#39;</span><span class="p">)</span><br />
          9<br />
</p>
<p>Or the length of the value held by a string variable:<br />
<code><br />
          &gt;&gt;&gt; data <span class="o">=</span> <span class="s">'trees.shp'</span><br />
          &gt;&gt;&gt; <span class="nb">len</span><span class="p">(</span>data<span class="p">)</span><br />
          9<br />
</code></p>
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">3.3.1 Indexing into strings</span> <a name="index" id="operations3"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>
          Each character in a string has a numbered position  called an <em>index</em>. The numbering starts with zero, in other words Python uses <em>zero-based indexing</em>. From left to right, the indices are 0, 1, 2,... and so forth. <em><br />
<br />
<img src="../images/stringIndex.png" border="1" /><br />
<br />
          Indexing</em> into a string means pointing to an individual character in a string using its index number.    To index into a string variable, use square brackets after the variable name and place an index number inside the brackets. The general format for indexing looks like this:</p>
<table width="797" border="0" bgcolor="#FFCCCC">
<tbody>
<tr>
<th scope="row" width="791">variableName[index_number]</th>
</tr>
</tbody>
</table>
<p>This example assigns a value to a string variable and then indexes the first character in the string value:<br />
</p>
<p><code>&gt;&gt;&gt; fieldName <span class="o">=</span> <span class="s">'COVER'</span><br />
          &gt;&gt;&gt;<span class="n"> fieldName</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><br />
          'C'<br />
</code></p>
<p>Since indexing is zero-based, the last valid index is the length of the string minus one. Attempting to using an invalid index number results in an <code>IndexError</code>:<br />
<code><br />
          &gt;&gt;&gt; len(fieldName)<br />
          5<br />
          &gt;&gt;&gt;<span class="n"> fieldName</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><br />
<span class="err">Traceback (most recent call last):<br />
          File &quot;&lt;interactive input&gt;&quot;, line 1, in &lt;module&gt;<br />
          IndexError: string index out of range</span><br />
          &gt;&gt;&gt; <span class="n">fieldName</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><br />
          'R'<br />
</code></p>
<p>Negative indices count one-based from the right. This can be useful for getting the last character without checking the string length.<br />
<code><br />
          &gt;&gt;&gt;<span class="n"> fieldName</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><br />
          'R'<br />
</code></p>
<p>It is not  possible to change the value of an individual character of a string with indexing. Attempting to do so results in a <code>TypeError</code>, as shown in the following code:<br />
<code><br />
          &gt;&gt;&gt;<span class="n"> fieldName</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o"> =</span> <span class="s">'D'</span><br />
<span class="err">Traceback (most recent call last):<br />
          File &quot;&lt;interactive input&gt;&quot;, line 1, in &lt;module&gt;<br />
          TypeError: 'str' object does not support item assignment</span><br />
</code><br />
          This occurs because Python strings are <em>immutable</em>.        The word 'immutable' is a synonym for unchangeable. Of course, we can change the value of a string variable by assigning an entirely new string to it, as in the example below, but in this context, immutability refers to this specific quality of not being able to change individual parts of an existing object.   To change the value of <code>fieldName</code> from <code>COVER</code> to <code>DOVER</code>, you need to use the following code:<br />
<code><br />
          &gt;&gt;&gt; fieldName <span class="o">=</span> <span class="s">'DOVER'</span><br />
</code></p>
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">3.3.2 Slice strings</span> <a name="operations" id="operations2"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Indexing can be thought of as getting a substring which is only one character long. To get more than one character, use slicing instead of indexing.  Slicing gets a substring (a slice) of a string. Slicing uses square brackets with a colon inside. A number on either side of the colon indicates the starting and ending index of the desired slice. The left number is inclusive, the right is exclusive. </p>
<p> <code>&gt;&gt;&gt; fieldName <span class="o">=</span> <span class="s">'COVER'</span><br />
          &gt;&gt;&gt; fieldName[<span class="num">1</span>:<span class="num">3</span>]<br />
          'OV'<br />
</code><br />
          The letter <code>O</code> is the index 1 character in the string <code>'COVER'</code> and the letter <code>E</code> is the index 3 character, so the slice starts at the letter <code>O</code> and ends just before the letter <code>E</code>. <br />
          If the left slice number is omitted, the slice starts at the beginning of the word. If the right slice number is omitted, the slice ends at the end of the word.</p>
<p><code>&gt;&gt;&gt; fieldName[:<span class="num">3</span>]<br />
          'COV'<br />&gt;&gt;&gt; fieldName[<span class="num">1</span>:]<br />
          'OVER'<br />
</code><br />
          We often want to use the <em>base name</em> of a file, the part without the extension, to build another file name, so that we can create output names based on input names. Counting from the right with a  negative index can be used to find the base name of a file which has a three digit file extension. Omitting the left index starts from the beginning of the string. Using <code>-4</code> as the right index removes the last four characters --the three digit file extension and the period-- leaving the base name of the file. <br />
<code><br />
          &gt;&gt;&gt; inputData <span class="o">=</span> <span class="s">'trees.shp'</span><br />
          &gt;&gt;&gt; baseName <span class="o">=</span> inputData[:<span class="num">-4</span>] <span class="comment">#</span><span class="comment"> Remove the file extension and the period.</span><br />
          &gt;&gt;&gt; baseName<br />
          'trees'<br />
</code></p>
<hr /> <table width="775" border="0">
<tr>
<th align="left" scope="row"><strong><span class="head">3.3.3 Concatenate strings</span></strong></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p><em>Concatenation</em> glues together a pair of strings. You use the same sign for addition, but it acts differently for strings. The plus sign performs addition on numeric values and concatenation on strings.<br />
</p>
<p><code>&gt;&gt;&gt; <span class="num">5</span> <span class="o">+</span> <span class="num">6</span> <span class="comment"># adding two numbers together </span> <br />
          11<br />
          &gt;&gt;&gt; <span class="s">'5'</span> <span class="o">+</span><span class="s"> '6'</span> <span class="comment"># concatenating  two strings</span> <br />
          '56'<br />
<br />
          &gt;&gt;&gt; rasterName <span class="o">=</span> <span class="s">'NorthEast'</span><br />
          &gt;&gt;&gt;
          route <span class="o">=</span><span class="s"> 'ATrain'</span><br />
          &gt;&gt;&gt; 
          output <span class="o">=</span> rasterName <span class="o">+</span> route<br />
          &gt;&gt;&gt; output<br />
          'NorthEastATrain'br />
        </code></p>
<p>Both of the variables being concatenated must be string types or you'll get  a <code>TypeError</code>. For example, using the plus sign between a numeric variable and a string variable causes an error. Python doesn't know whether to perform addition or concatenation.<br />
<code><br />
          &gt;&gt;&gt; i <span class="o">=</span> <span class="num">1</span><br />
          &gt;&gt;&gt; rasterName <span class="o">=</span> <span class="s">'NorthEast'</span><br />
          &gt;&gt;&gt; output <span class="o">=</span> rasterName <span class="o">+</span> i<br />
<span class="err">Traceback (most recent call last):<br />
          File &quot;&lt;interactive input&gt;&quot;, line 1, in &lt;module&gt;<br />
          TypeError: cannot concatenate 'str' and 'int' objects</span><br />
          &gt;&gt;&gt;<br />
</code></p>
<p>The <code>TypeError</code> says  that a string cannot be concatenated with an integer object. Solve this problem by using the built-in <code>str</code> function which returns a string data type version of an input value.   Type conversion is  referred to as <em>casting</em>. To combine a string with a numeric value, cast the number to a string. Then the number is treated as a string data type for the concatenation operation: <br />
<code><br />
          &gt;&gt;&gt; i <span class="o">=</span> <span class="num">145</span><br />
          &gt;&gt;&gt; str(i)<br />
          '145'<br />
          &gt;&gt;&gt; rasterName <span class="o">=</span> <span class="s">'NorthEast'</span><br />
          &gt;&gt;&gt;<span class="n"> output</span> <span class="o">=</span> <span class="n">rasterName</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><br />
          &gt;&gt;&gt; output<br />
          'NorthEast145'<br />
</code></p>
<p>We often use concatenation with slicing to create an output name based on an input file name.</p>
<p><code>&gt;&gt;&gt; inputData <span class="o">=</span> <span class="s">'trees.shp'</span> <br />
          &gt;&gt;&gt; baseName <span class="o">=</span> inputData[:<span class="num">-4</span>] <span class="comment">#</span><span class="comment"> Remove the extension and the period.</span><br />
          &gt;&gt;&gt; baseName <br />
<span class="s">'trees'</span><br />
          &gt;&gt;&gt; outputData <span class="o">=</span> baseName <span class="o">+</span> <span class="s">'_buffer.shp'</span> <br />
          &gt;&gt;&gt; 
          outputData <br />
          'trees_buffer.shp'<br />
</code></p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><strong><span class="head">3.3.4 Check for substring membership</span></strong></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>
          The <code>in</code> keyword enables you to check if a string contains a substring.  Python literature referred to this as checking for 'membership' in a string. Suppose you want to check if a file is a buffered output or not, and you have named each output file so that the name contains the string <code>buffer</code>. </p>
<p><code>&gt;&gt;&gt; substring <span class="o">=</span> <span class="s">'buffer' </span><br />
          &gt;&gt;&gt; substring <span class="key">in </span>outputData<br />
          True<br />
          &gt;&gt;&gt; substring <span class="key">in </span>inputData<br />
          False<br />
</code></p>
<p>These string operations are powerful when combined with batch processing (discussed in an upcoming chapter). Table 3.2 summarizes these common string operations. As we'll discuss shortly, they can be applied to other data types as well. Strings and other data types that have a collection of items are referred to as <em>sequence</em> data types. The characters in the string can be thought of as a sequence of items. These operations can be applied to any of the sequence data types in Python.</p>
<table bgcolor="#EEEEEE" border="0" width="779">
<tbody>
<tr>
<td scope="row"><p><strong><br />
                  Table 3.2: </strong>Sequence Operations on Strings<strong><br />
<br />
<code>&gt;&gt;&gt; exampleString <span class="o">=</span> <span class="s">'tuzigoot'</span></code></strong></p>
<table width="732" border="3">
<tr>
<td width="130"><strong>Operation</strong></td>
<td width="260"><strong>Sample code</strong></td>
<td width="316"><strong>Return value </strong></td>
</tr>
<tr>
<td>length</td>
<td><code>len(exampleString)</code></td>
<td><p><code>8</code><br />
</p></td>
</tr>
<tr>
<td>indexing</td>
<td><code>exampleString[2]</code></td>
<td><code>'z'</code><br /></td>
</tr>
<tr>
<td>slicing</td>
<td><code>exampleString[:-4]</code></td>
<td><code>'tuzi'</code><br /></td>
</tr>
<tr>
<td>concatenation</td>
<td><code>exampleString <span class="o">+</span> exampleString</code></td>
<td><code>'tuzigoottuzigoot'</code></td>
</tr>
<tr>
<td>membership</td>
<td><code>'ample' in exampleString</code></td>
<td><p><code>False</code><br />
</p></td>
</tr>
</table></td>
</tr>
</tbody>
</table>
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">3.4 More things with strings (a.k.a. string methods)</span> <a name="methods" id="methods"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Along with the operations described above, processing GIS data often requires  additional string manipulation. For example, you may need to replace the special characters in a field name, you may need to change a file name to all lower case, or you may need to check the ending of  a file name. For operations of this sort, Python has built-in string functions called string methods. <em>String methods</em> are functions associated particularly with strings that perform actions on strings. Calling a string method has a similar format to calling a built-in function, but in calling a string method, you also have to specify the string object--  using dot notation. <em>Dot notation </em>for calling a method  uses both the object name and the method name, separated by a dot. The general format for dot notation looks like this:</p>
<table width="812" border="0" bgcolor="#FFCCCC">
<tr>
<th scope="row" align="left"><strong><code>object.method(argument1, argument2, argument3,...)</code></strong></th>
</tr>
</table>
<p>'Object' and 'method' are object-oriented programming (OOP) terms and 'dot notation' is an OOP specialized syntax. </p>
<ul>
<li> Everything in Python is an <em>object</em>. For example, numbers, strings, functions, constants, and exceptions are all object<em>s.</em> Other programming languages use this term more narrowly as data types which have associated functions, referred to as 'methods', and attributes, referred to as 'properties' in this book. In Python, most objects  do have methods and/or  properties.     As soon as a  variable is assigned a value, it is a string object which has string methods.<br />
<br />
</li>
<li> A <em>method</em> is a function that performs some action on the object.  Methods are simply functions that are referred to as 'methods' because they are performed on an object. The terms 'calling methods', 'passing arguments', and 'returning values'  apply to methods in the same way they apply to functions. The example below calls the <code>replace</code> method. The variable, <code>line</code>, is assigned a string value. Then the dot notation is used to call the string method named <code>replace</code>. This example returns the string with commas  replaced by semicolons:<br />
<br />
<code>&gt;&gt;&gt; line <span class="o">=</span> <span class="s">'238998,NPS,NERO,Northeast Region,MACCP,CAPE COD NATIONAL'</span><br />
            &gt;&gt;&gt; <span class="n">line</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span> <span class="s">&#39;,&#39;</span> <span class="p">,</span> <span class="s">&#39;;&#39;</span> <span class="p">)</span><br />
            '238998;NPS;NERO;Northeast Region;MACCP;CAPE COD NATIONAL'<br />
</code><br />
</li>
<li><em>Dot notation</em> is an object-oriented programming convention used on string objects (and other types of objects) to access methods and properties, that are specially designed to work with those objects. </li>
</ul>
<p>The image below points out the components in the <code>replace</code> method example. The dot notation links the object method to the object. The object is the variable named <code>line</code>. The method (<code>replace</code>) takes two string arguments, the string to replace (a comma) and the replacement (a semicolon).</p>
<p> <img src="../images/object.model.jpg" width="418" height="134" border="3" /></p>
<p> String methods need to be used in assignment statements. Strings are immutable, so string methods do not change the value of the string object they are called on; instead, they return the modified value. This means that the method call can be used in the right-hand side of an assignment statement to store the value in a variable. The syntax of the assignment statement looks like this:<br />
</p>
<table width="812" border="0" bgcolor="#FFCCCC">
<tr>
<th scope="row" align="left"><code><strong>variableName <span class="o">=</span> object.method(argument1, argument2, argument3,...)</strong></code></th>
</tr>
</table>
<p>For example, the <code>replace</code> call does not alter the value of the original variable. (<code>line</code>):<br />
<br />
<code>
          &gt;&gt;&gt; line <span class="o">=</span> <span class="s">'238998,NPS,NERO,Northeast Region,MACCP,CAPE COD NATIONAL'</span><br />
          &gt;&gt;&gt; <span class="n">line</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span> <span class="s">&#39;,&#39;</span> <span class="p">,</span> <span class="s">&#39;;&#39;</span> <span class="p">)</span><br />
          &gt;&gt;&gt; line<br />
          '238998,NPS,NERO,Northeast Region,MACCP,CAPE COD NATIONAL' <br />
</code> </p>
<p>An assignment statement can be used to store the return value of the method. Call the <code>replace</code> method  on the right-hand side of an assignment statement like this:<br />
<br />
<img src="../images/return_value.jpg" width="367" height="98" border="3" /></p>
<p><code>&gt;&gt;&gt; line <span class="o">=</span> <span class="s">'238998,NPS,NERO,Northeast Region,MACCP,CAPE COD NATIONAL'</span><br />
          &gt;&gt;&gt; semicolonLine <span class="o">=</span><span class="n"> line</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span> <span class="s">&#39;,&#39;</span> <span class="p">,</span> <span class="s">&#39;;&#39;</span> <span class="p">)</span><br />
          &gt;&gt;&gt; semicolonLine<br />
          '238998;NPS;NERO;Northeast Region;MACCP;CAPE COD NATIONAL'<br />
</code><br />
          To alter the original variable called 'line', use it as the variable being assigned. In other words, you can put it on both sides of the equals sign:<br />
<br />
<code>&gt;&gt;&gt; line <span class="o">=</span><span class="n"> line</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span> <span class="s">&#39;,&#39;</span> <span class="p">,</span> <span class="s">&#39;;&#39;</span> <span class="p">)</span><br />
          &gt;&gt;&gt; line<br />
          '238998;NPS;NERO;Northeast Region;MACCP;CAPE COD NATIONAL'</code><br /><br />
<!--This is an example of object-oriented programing (OOP) in Python.  To understand Python programming, you'll need to be familiar with two OOP terms:</p>
        <ul>
          <li><strong>Object</strong>. An instance of a data type is called an <em>object</em> in Python. As soon as a variable is assigned a value, it is an object.  Dot notation is object-oriented programming convention. It is used on string objects and other types of Python. <br  />
              <br  />
          </li>
          <li><strong> Method.</strong> Objects have methods associated with them. A <em>method</em> is a function that performs some action on the object.  The example above uses the 'replace' method.<br  />
            <br  />
          </li>
          <li><strong>Calling methods. </strong>We say we <em>call</em> a method on an object. A method uses a dot to connect the object to the method. <br  />
            <br  />
          </li>
          <li><strong>Passing arguments.</strong> Sometimes the method needs input or arguments, such as which character to replace. We <em>pass arguments</em> to the method to provide the method with more information about what needs to be done.  Arguments are placed inside parentheses and separated by commas.<br  />
            <br  />
          </li>
          <li><strong>Return values.</strong> Some object methods <em>return values </em>(send information back) when they are called. In our example, the original variable is not altered, so in order to use the  string with the replacements it needs to be  assigned to a variable, using an assignment statement:-->
          Not all methods require arguments; However, even when you don't pass any arguments, you must use the parentheses. For example, to change the letters of a string to all uppercase letters, use the upper method like this:        </p>
<p><code>&gt;&gt;&gt; name <span class="o">=</span> <span class="s">'Delaware Water Gap'<br />
</span>&gt;&gt;&gt; name <span class="o">=</span> name<span class="o">.</span><span class="n">upper</span><span class="p">(</span> <span class="p">)</span><br />
          &gt;&gt;&gt; print name <br />
          DELAWARE WATER GAP<br />
</code></p>
<p> The <code>split</code> and <code>join</code> methods are used in many GIS scripts. These methods involve another Python data type called a <code>list</code>. Python lists are containers for holding sets of items,  which are discussed in Chapter 4. The <code>split</code> method returns a list of the words in the string, separated by the argument. In the example below, the <code>split</code> method looks for each occurrence of the forward slash (<code>/</code>) in the string object and splits the string in those positions. The resulting list has four items, since the string  has three slashes.</p>
<p><code>&gt;&gt;&gt; path <span class="o">=</span> <span class="s">'C:/gispy/data/ch03/xy1.txt'</span><br />
          &gt;&gt;&gt; path<span class="o">.</span>split<span class="p">(</span><span class="s">&#39;/&#39;</span> <span class="p">)</span><br />
          ['C:', 'gispy', 'data', 'ch03', 'xy1.txt']<br />
</code></p>
<p>The <code>split</code> and <code>join</code> methods have inverse functionality. The <code>split</code> method takes a single string and splits it into a list of strings, based on some delimiter. The <code>join</code> method takes a list of strings and joins them with  into a single string. The string object value is placed between the items. For example, <code>elephant</code> is placed between <code>1</code>, <code>2</code>, and <code>3</code> here:<br />
<br />
<code>&gt;&gt;&gt;<span class="n"> numList</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;1&#39;</span><span class="p">,</span> <span class="s">&#39;2&#39;</span><span class="p">,</span> <span class="s">&#39;3&#39;</span><span class="p">]</span> <br />
          &gt;&gt;&gt; animal <span class="o">=</span> <span class="s">'elephant'</span><br />
          &gt;&gt;&gt; animal<span class="o">.</span>join<span class="p">(</span>numList<span class="p">)</span><br />
          '1elephant2elephant3'<br />
</code><br />
          In the following example, the <code>join</code> method is performed on a string literal object, semicolon (<code>;</code>). The method inserts semicolons between the items and returns the resulting string: <br />
<code><br />
          &gt;&gt;&gt; <span class="n">pathList</span> <span class="o">=</span><span class="p"> [</span><span class="s">&#39;C:&#39;</span><span class="p">,</span> <span class="s">&#39;gispy&#39;</span><span class="p">,</span> <span class="s">&#39;data&#39;</span><span class="p">,</span> <span class="s">&#39;ch03&#39;</span><span class="p">,</span> <span class="s">&#39;xy1.txt&#39;</span><span class="p">]</span> <br />
          &gt;&gt;&gt; <span class="s">';'</span><span class="o">.</span>join<span class="p">(</span>pathList<span class="p">)</span><br />
          'C:;gispy;data;ch03;xy1.txt'<br />
</code></p>
<p>IDEs make it easy to browse for methods of an object  by bringing up a list of choices when you type the object name followed by a dot. For example, if you create a string variable named <code>path</code> and then type <code>path</code> in the PythonWin Interactive Window, a <em>context menu</em> appears with a list of string methods. This menu of choices is referred to as a context menu because the menu choices update dynamically based on the context in which it is generated.   You can scroll  and select a method by clicking on your choice. <br />
<img src="../images/contextMenu2.png" alt="context menu" width="313" height="274" /></p>
<p> In PythonWin, context menus appear in the Interactive Window or after the code in a script has been executed (after the script has been run). In PyScripter, the context menus appear as soon as a variable has been defined within a script. If your choice doesn't appear in the context menu, check for spelling errors. Try using the context menu  to bring up the <code>endswith</code> method for a string variable in the PythonWin Interactive Window. As you start typing the method name, the list box rolls to that name and you can use the 'Tab' key to complete the selection. The <code>endswith</code> method checks if the ending matches the argument and returns <code>True</code> or <code>False</code>:</p>
<p><code>&gt;&gt;&gt; path <span class="o">=</span> <span class="s">'C:/gispy/data/ch03/xy1.txt'<br />
</span>&gt;&gt;&gt; path<span class="o">.</span>endswith<span class="p">(</span><span class="s">&#39;.shp&#39;</span><span class="p">)</span><br />
          False<br />
          &gt;&gt;&gt; path<span class="o">.</span>endswith<span class="p">(</span><span class="s">&#39;.txt&#39;</span><span class="p">)</span><br />
          True<br />
</code></p>
<p>Help documentation and a comprehensive list of string methods is available in the online. Search for the 'String Methods' section of the 'Python Library Reference'. String method names are often intuitive. Testing them in the Interactive Window helps to clarify their functionality.<br />
</p>
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">3.5 File paths and raw strings</span> <a name="escape" id="escape"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>When dealing with file paths, you will encounter strings literals containing escape sequences. <em>Escape sequences </em>are sequences of characters that have special meaning. In string literals, the backslash (<code>\</code>) is used as an <em>escape character</em> to encode special characters. The backslash acts as a line continuation character when placed at the end of a line in a string literal as described above. But when a backslash is followed immediately by a character in a string literal, the backslash along with the character that follows it are called an<em> escape sequence</em> and the backslash is interpreted as a  signal that the next character is to be given a special interpretation. For example, the string literals <code>'\n'</code> and <code>'\t'</code>  are escape sequences that encode  'new line' and 'tab'. New line and tab characters are used to control the  space around the visible characters. They are referred to as <em>whitespace characters</em>, because the characters themselves are not visible  when printed.</p>
<table border="3">
<tr bordercolor="#000000">
<th colspan="2" scope="row">White space escape sequences</th>
</tr>
<tr bordercolor="#000000">
<td width="29" scope="row"><code>\n</code></td>
<td width="122">new line </td>
</tr>
<tr bordercolor="#000000">
<td scope="row"><code>\t</code></td>
<td>tab</td>
</tr>
</table>
<p>When printed without built-in <code>print</code> function in the Interactive Window, whitespace escape sequences are printed as entered:<br />
<code><br />
          &gt;&gt;&gt; <span class="s">'X\tY\tValue\n\n16\t255\t6.3'</span><br />
          'X\tY\tValue\n\n16\t255\t6.3'<br />
</code></p>
<p> When   printed with the built-in <code>print</code> function, whitespace escape sequences are interpreted and modify the formatting: <br />
<code><br />
          &gt;&gt;&gt; <span class="key">print</span> <span class="s">'X\tY\tValue\n\n16\t255\t6.3'</span><br />
          X&nbsp;&nbsp;&nbsp; Y &nbsp;&nbsp;&nbsp;Value<br />
<br />
          16&nbsp;&nbsp;&nbsp; 255&nbsp;&nbsp;&nbsp; 6.3<br />
</code></p>
<p>The <code>strip</code> method can be used to strip unwanted leading or trailing whitespace from a string. This is often called for when processing files. The following example prints a string before and after using the <code>strip</code> method:</p>
<p><code>&gt;&gt;&gt; dataRecord <span class="o">=</span> <span class="s">' \n\t\tX\tY\tZ\tM\t'</span><br />
          &gt;&gt;&gt; print dataRecord<br />
<br />
          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X&nbsp;&nbsp;&nbsp;&nbsp;Y&nbsp;&nbsp;&nbsp;&nbsp;Z&nbsp;&nbsp;&nbsp;&nbsp;M<br />
          &gt;&gt;&gt; dataRecord <span class="o">=</span> dataRecord<span class="o">.</span>strip<span class="p">(</span> <span class="p">)</span><br />
          &gt;&gt;&gt; dataRecord<br />
</code><code><span class="n">'X\tY\tZ\tM'</span></code><br />
          &gt;&gt;&gt; <span class="key">print</span> dataRecord<br />
          X&nbsp;&nbsp;&nbsp; Y&nbsp;&nbsp;&nbsp; Z&nbsp;&nbsp;&nbsp; M<br />
          &gt;&gt;&gt;<br />
</p>
<p>Escape sequences can lead to unintended consequences with  file paths that contain backslashes. In this example, the <code>t</code> in terrain and the <code>n</code> in <code>neuse</code> are replaced by whitespace when the string is printed:<br />
<code><br />
          &gt;&gt;&gt; dataPath <span class="o">=</span> <span class="s">'C:\terrain\neuse_river'</span><br />
          &gt;&gt;&gt; dataPath<br />
          'C:\terrain\neuse_river'<br />
          &gt;&gt;&gt; <span class="key">print </span>dataPath<br />
          C:&nbsp;&nbsp;&nbsp;&nbsp;errain<br />
          euse_river<br />
</code></p>
<p>Here are three options for avoiding this problem:</p>
<ol>
<li>Use a forward slash instead of a backward slash. The forward slash is not an escape character, but is interpreted correctly as a separator in file paths. This book uses forward slashes (southwest to northeast) instead of backward slashes, as in this example:<br />
<p><code>&gt;&gt;&gt; dataPath <span class="o">=</span> <span class="s">'C:/terrain/neuse_river'<br />
</span>&gt;&gt;&gt; <span class="key">print</span> dataPath<br />
              C:/terrain/neuse_river<br />
</code></p>
</li>
<li>Double the backslashes. This works because the first slash is an escape character that tells the code to interpret the second slash literally as a slash.<br />
<br />
<code>&gt;&gt;&gt; dataPath <span class="o">=</span> <span class="s">'C:\\terrain\\neuse_river'<br />
</span>&gt;&gt;&gt; <span class="key">print</span> dataPath<br />
            C:\terrain\neuse_river<br />
</code><br />
</li>
<li>Use <em>raw strings</em>. When you first come across a string literal preceded by a lowercase <code>r</code>, you might guess that it's a typo. But in fact, placing an <code>r</code> just before a string literal creates a raw string. Python uses the raw value of a raw string. In other words, it disregards escape sequences, as in the following example:
            <p><code>&gt;&gt;&gt; 
              dataPath <span class="o">=</span> r<span class="s">'C:\terrain\neuse_river'</span><br />
              &gt;&gt;&gt; <span class="key">print</span> dataPath<br />
              C:\terrain\neuse_river<br />
</code></p>
</li>
</ol>
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">3.6 Unicode strings</span> <a name="escape" id="escape2"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>When you start using ArcGIS functionality in Chapter 6, you will begin to see a lowercase <code>u</code> preceding strings that are returned by GIS methods. The <code>u</code> stands for unicode string. A <em>unicode string</em> is a specially encoded string that can represent thousands of characters, so that non-English characters, such as the Hindi alphabet can be represented. A unicode string is created by prepending a <code>u</code> to a string literal, as shown here:<br />
<code><br />
          &gt;&gt;&gt; dataFile <span class="o">=</span> <span class="s">u'counties.shp'</span><br />
          &gt;&gt;&gt; dataFile<br />
          u'counties.shp'<br />
          &gt;&gt;&gt;<span class="nb"> type</span><span class="p">(</span><span class="n">dataFile</span><span class="p">)</span><br />
          &lt;type 'unicode'&gt;<br />
</code><br />
          The difference between <code>'str'</code> and <code>'unicode'</code> string data types in Python lies in the way that the strings are encoded. The default encoding for Python 'str' strings is based on the American Standard Code for Information Interchange (ASCII). Because ASCII encodings were  designed to encode English language characters, they can only represent hundreds of characters; whereas, the more recently developed unicode technique can encode thousands. Because of its capability to encode non-English languages,  software programs, including the ArcGIS Python interface, have begun to use unicode encodings more often. <br />
<br />
          You don't need to know exactly how unicode or ASCII strings encoding works. You just need to know that  in your GIS scripts, you can handle <code>'unicode'</code> strings just like <code>'str'</code> strings. 
          They have the same string operations and methods. The following examples demonstrate using a few string methods and operations on the unicode variable <code>dataFile</code>: <br />
<code><br />
          &gt;&gt;&gt; dataFile<span class="o">.</span>endswith<span class="p">(</span><span class="s">&#39;.shp&#39;</span> <span class="p">)</span> <span class="comment"># Does the string start with '.shp'?</span><br />
          True<br />
          &gt;&gt;&gt; dataFile<span class="o">.</span>startswith<span class="p">(</span><span class="s">&#39;co&#39;</span> <span class="p">) </span><span class="comment"># Does the string start with 'co'?</span><br />
          True<br />
          &gt;&gt;&gt; dataFile<span class="o">.</span>count<span class="p">(</span><span class="s">&#39;s&#39;</span> <span class="p">)</span> <span class="comment"># Count the number of times 's' occurs in the string.</span><br />
          2<br />
</code></p>
<p>Methods and operations that return strings output unicode when the input object is unicode:<br />
<br />
<code>
          &gt;&gt;&gt; dataFile.upper<span class="p">(</span> <span class="p">)</span> <span class="comment"># Return a string in which all the letters are capitalized.</span><br />
          u'COUNTIES.SHP'<br />
        &gt;&gt;&gt; <span class="n">dataFile</span><span class="p">[</span><span class="mi">5</span><span class="p">] </span><span class="comment"># Index the 6th character in the string.</span><br />
          u'i'<br />
          &gt;&gt;&gt; dataFile <span class="o">+</span> dataFile <span class="comment"># Concatenate two strings.</span><br />
          u'counties.shpcounties.shp'<br />
</code></p>
<p>Just as the quotation marks are not printed when you use the built-in <code>print</code> function, the unicode <code>u</code> is not printed when you use the built-in <code>print</code> function to print a unicode string:</p>
<p><code>&gt;&gt;&gt; <span class="key">print</span> dataFile<br />
          counties.shp<br />
</code></p>
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">3.7 Printing Strings and Numbers</span> <a name="printing" id="printing"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>The built-in <code>print</code> function is used all the time in scripting, so we'll show a few examples of how it can be used. As mentioned earlier, the <code>print</code> function does not use parentheses around the arguments (though this changes in Python 3.0 in which the parentheses become required). The arguments are the expressions to be printed. We often want to print multiple expressions within the same print statement and these expressions need to be linked together so that the print statement uses them all. Here we demonstrate three  approaches to linking expressions to be printed:</p>
<p><strong>Commas.</strong> When commas are placed between variables in a <code>print</code> expression, the variable values are printed separated by a space. The print statement inserts a space where each comma occurs between printed items:</p>
<p><code>&gt;&gt;&gt; dataFile <span class="o">=</span> <span class="s">'counties.shp'</span><br />
          &gt;&gt;&gt; FID <span class="o">=</span> <span class="num">862</span><br />
          &gt;&gt;&gt; <span class="key">print</span> dataFile, FID <br />
          counties.shp 862<br />
</code></p>
<p> The expression can be a combination of comma separated string literals, numbers, and variables of assorted data types:</p>
<p><code>&gt;&gt;&gt; <span class="key">print </span><span class="s">'The first FID in'</span>, dataFile, <span class="s">'is'</span>, FID, <span class="s">'!'</span><br />
          The first FID in counties.shp is 862 ! <br />
</code></p>
<p><strong>Concatenation. </strong>The spacing created by the commas may be undesirable in some situations. For example, we usually don't want a space before punctuation. Concatenation  can be used to avoid this problem, though concatenation introduces its own complications. Recall that concatenation uses a plus sign to join strings. If we replace each comma in the above expression with a plus sign we get a <code>TypeError</code> because one piece of the expression is not a string:<br />
<br />
<code>&gt;&gt;&gt; <span class="key">print </span><span class="s">'The first FID in' </span><span class="o">+</span> dataFile <span class="o">+</span> <span class="s">'is'</span> <span class="o">+</span> FID <span class="o">+</span> <span class="s">'!'</span> <br />
<span class="err">Traceback (most recent call last):<br />
          File &quot;&lt;interactive input&gt;&quot;, line 1, in ?<br />
          TypeError: cannot concatenate 'str' and 'int' objects</span><br />
</code><br />
<code>FID</code> is an integer type, so it must be cast to string. This works, but the spacing isn't correct since the plus signs are not replaced by spaces:<br />
<code><br />
          &gt;&gt;&gt; <span class="key">print </span><span class="s">'The first FID in' </span><span class="o">+</span> dataFile <span class="o">+</span> <span class="s">'is' </span><span class="o">+</span> str(FID) <span class="o">+</span> <span class="s">'!'<br />
</span>The first FID incounties.shpis862!<br />
</code><br />
          When  using concatenation statements to print strings, you may have to tailor the spacing, by adding spaces in the string literals: </p>
<p><code>&gt;&gt;&gt; <span class="key">print </span><span class="s">'The first FID in ' </span><span class="o">+</span> dataFile <span class="o">+</span> <span class="s">' is '</span> <span class="o">+</span> str(FID) <span class="o">+</span> <span class="s">'!'</span> <br />
          The first FID in counties.shp is 862!<br />
</code></p>
<p><strong>String formatting.</strong> The string <code>format</code> method provides an alternative  that uses place-holders to allow you to lay out a string with the spacing you want  and handle different variable types without casting. The <code>format</code> method is performed on a string literal object, which contains place-holders for variables and gets the variables as a list of arguments. Place-holders are inserted into string literals as numbers within curly brackets (<code>{0}</code>, <code>{1}</code>, <code>{2}</code>... and so forth). The numbers refer to the zero-based index of the arguments in the order they are listed. The string values of arguments are substituted for the place-holders. The method returns a string with these substitutions. This example calls the <code>format</code> method in a print statement:<br />
<code><br />
          &gt;&gt;&gt; </code><code><span class="n"><span class="s"><span class="key">print </span>'The first FID in {0} is {1}!'</span></span></code><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">dataFile</span><span class="p">,</span> <span class="n">FID</span> <span class="p">)</span><br />
          The first FID in counties.shp is 862! <br />
</p>
<p>The <code>format</code> method uses the dot notation:</p>
<ul>
<li><code><span class="s">'The first FID in {0} is {1}!'</span></code> is the object.</li>
<li><code>format</code> is the method.</li>
<li><code>dataFile</code> and <code>FID</code> are the arguments. The string value of <code>dataFile</code> is substituted for <code>{0}</code>. The string value of <code>FID</code> is substituted for <code>{1}</code> because dataFile appears first in the argument list and FID appears second.</li>
<li>The return value is printed.</li>
</ul>
<p>Triple quotes can be used in combination with the  <code>format</code> method to create multi-line strings:<br />
<code><br />
          &gt;&gt;&gt; </code><code><span class="n"><span class="s"><span class="key">print</span></span></span></code> <span class="s">'''X&nbsp;&nbsp;&nbsp;&nbsp;Y&nbsp;&nbsp;&nbsp;&nbsp;Value<br />
</span>...<span class="s"> -------------------<br />
</span>...<span class="s">{0}&nbsp;&nbsp;&nbsp;&nbsp;{1}&nbsp;&nbsp;&nbsp;&nbsp;{2}'''</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mf">6.3</span><span class="p">)</span><br />
          X&nbsp;&nbsp;&nbsp;&nbsp;Y&nbsp;&nbsp;&nbsp;&nbsp;Value<br />
          -------------------<br />
          16 <span class="s">&nbsp;&nbsp;&nbsp;</span>255<span class="s">&nbsp;&nbsp;&nbsp;&nbsp;</span>6.3<br />
</p>
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><b class="head">3.8 Key terms</b><a name="keyterms" id="keyterms2"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p><code>'int'</code> data type<br />
<code>'float'</code> data type<br />
          Integer division<br />
<code>'str'</code> data type<br />
          String literal <br />
          String variable <br />
          Line continuation<br />
          Zero-based indexing<br />
          Built-in <code>len</code> function<br />
          Slicing<br />
          Concatenating<br />
          Casting<br />
          The <code>in</code> keyword<br />
          Dot notation<br />
          Objects <br />
          Methods<br />
          context menus<br />
          Whitespace characters<br />
          Escape sequences <br />
          Raw strings<br />
          Unicode strings<br />
          String formatting</p>
<hr />
<table border="0" width="775">
<tbody>
<tr>
<th scope="row" align="left"><span class="head">3.9 Exercises</span> <a name="exercises" id="exercises"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<ol>
<li>The Python statements on the left use  string operations involving the variable <code>happyCow</code><em>. </em>Match the Python statement with its output.  All answers MUST BE one of the letters A through I. The string variable called <code>happyCow</code>  is assigned as follows: <br />
<code><br />
            &gt;&gt;&gt;
            happyCow <span class="o">=</span><span class="s"> 'meadows.shp'</span><br />
</code><br />
<br />
<table width="675" border="3">
<tr>
<td width="388">Python statement </td>
<td width="267">Output (notice there are 9 letters) </td>
</tr>
<tr>
<td><ol>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span></code> <br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">5</span><span class="p">]</span> <span class="o">+</span> <span class="n">happyCow</span><span class="p">[</span><span class="o">-</span><span class="mi">4</span><span class="p">:]</span></code> <br />
<br />
</li>
<li><code><span class="nb">len</span><span class="p">(</span><span class="n">happyCow</span><span class="p">)</span></code> <br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">5</span><span class="p">]</span></code><br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="o">-</span><span class="mi">4</span><span class="p">:]</span> </code><br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[:</span><span class="mi">5</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="n">happyCow</span> <span class="ow">in</span> <span class="s">&quot;5meadows.shp&quot;</span></code><br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;W&#39;</span> <span class="ow">in</span> <span class="n">happyCow</span></code><br />
</li>
</ol></td>
<td><br />
<ol type="A">
<li><code><span class="ne">IndexError</span></code><br />
<br />
</li>
<li><code><span class="s">&#39;meado.shp&#39;</span></code> </li>
<br />
<li><code><span class="s">&#39;meado&#39;</span></code><br />
<br />
</li>
<li><code>True</code><br />
<br />
</li>
<li><code>False</code><br />
<br />
</li>
<li><code><span class="mi">11</span></code><br />
<br />
</li>
<li><code><span class="s">&#39;w&#39;</span></code><br />
<br />
</li>
<li><code><span class="s">&#39;.shp&#39;</span></code><br />
<br />
</li>
<li><code><span class="s">&#39;m&#39;</span></code></li>
</ol>
<br />
<br /> </td>
</tr>
</table>
<br />
<br />
</li>
<li>These Python statements use string methods  and operations involving the variable <code>LCS_ID</code><em>. </em>Determine if each  Python statement is true or false. The string variable called <code>LCS_ID</code> is assigned as follows:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <code>LCS_ID <span class="o">=</span> <span class="s">'0017238'</span></code><br />
<br />
<ol type="a">
<li><code><span class="s">'17'</span> <span class="ow">in</span> <span class="n">LCS_ID</span></code> </li>
<li><code><span class="n">LCS_ID</span><span class="o">.</span><span class="n">isdigit</span><span class="p">(</span> <span class="p">)</span></code> </li>
<li><code><span class="n">LCS_ID</span><span class="o">.</span><span class="n">lstrip</span><span class="p">(</span><span class="s">'0'</span><span class="p">)</span> <span class="o">==</span> <span class="s">'17238'</span> </code></li>
<li><code><span class="n">LCS_ID</span><span class="o">.</span><span class="n">zfill</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="o">==</span> <span class="s">'10101010' </span> </code></li>
<li><code><span class="n">LCS_ID</span> <span class="o">+</span> <span class="s">'10'</span> <span class="o">==</span> <span class="mi">17248</span> </code></li>
<li><code><span class="n">LCS_ID</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">==</span> <span class="s">'3'</span> </code></li>
<li><code><span class="nb">len</span><span class="p">(</span><span class="n">LCS_ID</span><span class="p">)</span> <span class="o">==</span> <span class="mi">7</span> </code></li>
<li><code><span class="n">LCS_ID</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">7</span><span class="p">]</span> <span class="o">==</span> <span class="s">'0017238'</span> </code></li>
<li><code><span class="nb">int</span><span class="p">(</span><span class="n">LCS_ID</span><span class="p">)</span> <span class="o">+</span> <span class="mi">10</span> <span class="o">==</span> <span class="mi">17248</span> </code></li>
<li><code><span class="n">LCS_ID</span> <span class="o">!=</span> <span class="mi">17238</span> </code><br />
</li>
</ol>
<br />
</li>
<li>The Python statements on the left use string methods    and operations involving the variable <code>state</code><em>. </em>Match the Python statement with its output. All answers MUST BE one of the letters A through L. The string variable called <code>state</code> is assigned as follows: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>state <span class="o">=</span> <span class="s">'missiSSippi'</span></code><br />
<br />
<table width="713" border="3">
<tr>
<td width="392">Python statement </td>
<td width="301">Output</td>
</tr>
<tr>
<td><ol>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="s">&quot;i&quot;</span><span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">capitalize</span><span class="p">(</span> <span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">&quot;ippi&quot;</span><span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&quot;i&quot;</span><span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">state</span><span class="p">,</span><span class="n">state</span><span class="p">])</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;ss&quot;</span><span class="p">,</span><span class="s">&quot;RR&quot;</span><span class="p">)</span></code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;i&#39;</span><span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">upper</span><span class="p">( )</span></code><br />
<br />
</li>
<li> <code><span class="n">state</span><span class="p">[</span><span class="mi">7</span><span class="p">:]</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">1</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;Miss&#39;</span> <span class="ow">in</span> <span class="n">state</span> </code></li>
</ol></td>
<td><ol type="A">
<li><code><span class="s">&#39;Mississippi&#39;</span></code><br />
<br />
</li>
<li><code><span class="s">'miRRiRRippi&#39;</span> </code><br />
<br />
</li>
<li><code><span class="p">[</span><span class="s">&#39;m&#39;</span><span class="p">,</span> <span class="s">&#39;ss&#39;</span><span class="p">,</span> <span class="s">&#39;SS&#39;</span><span class="p">,</span> <span class="s">&#39;pp&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;m&#39;</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;MISSISSIPPI&#39;</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;missiSSippi;missiSSippi&#39;</span> </code><br />
<br />
</li>
<li><code><span class="bp"></span>True</code><br />
<br />
</li>
<li><code><span class="s">&#39;i&#39;</span> </code><br />
<br />
</li>
<li><code><span class="mi">4</span> </code><br />
<br />
</li>
<li><code><span class="mi">1</span> </code><br />
<br />
</li>
<li><code><span class="bp">False</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;ippi&#39;</span></code></li>
</ol></td>
</tr>
</table>
<br />
<br />
</li>
<li>Test your understanding of this chapter's 'Key terms' by matching the Python statement with a term or phrase that describes it. These four variables used in the matching have been assigned as follows:<br />
            &nbsp;<code><br />
            &gt;&gt;&gt;<span class="n"> dataDir</span> <span class="o">=</span> <span class="s">&quot;C:/data&quot; </span><br />
            &gt;&gt;&gt;<span class="n"> data</span> <span class="o">=</span> <span class="s">&quot;bird_sightings&quot;</span> <br />
            &gt;&gt;&gt;<span class="n"> count</span> <span class="o">=</span> <span class="mi">500</span> <br />
            &gt;&gt;&gt; <span class="n">n</span> <span class="o">=</span> <span class="mi">3</span> <br />
</code><br />
<table width="634" border="3">
<tr>
<td width="328">Python statement </td>
<td width="286">Output</td>
</tr>
<tr>
<td><ol>
<li><code>count/n</code><br />
<br />
</li>
<li><code>&quot;nest&quot;</code><br />
<br />
</li>
<li><code> r&quot;count\n&quot;</code><br />
<br />
</li>
<li><code>u&quot;hatchling&quot;</code><br />
<br />
</li>
<li><code>len(data)</code><br />
<br />
</li>
<li><code>str(count)</code><br />
<br />
</li>
<li><code>dataDir + &quot;/&quot;+ data</code><br />
<br />
</li>
<li><class><code>data[0:n] </code><br />
<br />
</class></li>
<li><code>data[n]</code><br />
<br />
</li>
<li><code>"bird" in data</code><br />
<br />
</li>
<li><code>"{0} records".format(count)</code><br />
<br />
</li>
<li><code>data.split("_")</code><br />
<br />
</li>
<li><code>"Bird data \
Wing span"</code><br />
</li>
</ol></td>
<td><ol type="A">
<li>Casting<br />
<br />
</li>
<li>Indexing<br />
<br />
</li>
<li>Slicing<br />
<br />
</li>
<li>Finding the length of a string<br />
<br />
</li>
<li>Concatenating<br />
<br />
</li>
<li>Line continuation<br />
<br />
</li>
<li>String literal<br />
<br />
</li>
<li>String method that is the inverse of the <code>join</code> method.<br />
<br />
</li>
<li>Escape sequence<br />
<br />
</li>
<li>Integer division<br />
<br />
</li>
<li>Raw string<br />
<br />
</li>
<li>Unicode string<br />
<br />
</li>
<li>String formatting</li>
</ol></td>
</tr>
</table>
<br />
</li>
<li><strong>printPractice.py</strong> Modify sample script 'printPractice.py', so that it prints the same statement four times, but using 4 distinct techniques--hard-coding, commas, concatenation, and string formatting. The hard-coding is already done. The other three techniques have been started  but they contain mistakes. These techniques should each use all three of the provided variables. Once the mistakes have been corrected, run the script to make sure that it prints the statement identically four times:<br />
<br />
<code>
            There are 12 traffic lights within the 5 mile buffer and 20 intersections.<br />
            There are 12 traffic lights within the 5 mile buffer and 20 intersections.<br />
            There are 12 traffic lights within the 5 mile buffer and 20 intersections.<br />
            There are 12 traffic lights within the 5 mile buffer and 20 intersections.<br />
</code><br />
</li>
<li>This problem deals with date time stamps that have the form MM/DD/YYYY
            HH:MM:SSxM (where xM
            is AM for morning and PM otherwise). Part (a) creates a date-time variable which is used in all other parts. Solutions should work for other values of this variable. Write one or more lines of code to achieve the outcome described in each part. 
            <ol type="a">
<li>Use an assignment statement to set a variable named <code>dt</code> to '07/28/2055 05:25:33PM'.</li>
<li>Use the <code>in</code> keyword in a code statement to  print true if the value of <code>dt</code> is in the morning (and false otherwise). </li>
<li>Use slicing to extract the month from <code>dt</code>.</li>
<li>Use the <code>split</code> method twice and then use indexing to extract the hour from <code>dt</code>.</li>
<li>Use the <code>split</code> method twice and then use indexing to extract the year from <code>dt</code>.<br />
<br />
</li>
</ol>
</li>
<li>Write one or more lines of code to achieve the outcome described in each part. <br />
<ol type="a">
<li>Often geoprocessing involves sorting data files based on their names. For example, you may want to move all the files from Region 1to separate directory. Write a line of code to check if a variable named <code>filename</code> contains a substring that matches the value of a variable named <code>code</code>. The examples below show how the line of code could be used.<br />
<code><br />
&gt;&gt;&gt; <span class="c"># Sample input 1: </span> <br />
&gt;&gt;&gt; <span class="n">filename</span> <span class="o">=</span> <span class="s">&quot;Forest361Region1_rec.shp&quot;</span><br />
&gt;&gt;&gt; <span class="n">code</span> <span class="o">=</span> <span class="s">&quot;Region1&quot;</span> <br />
&gt;&gt;&gt; <span class="c"># Insert line of code here.</span> <br />
True<br />
&gt;&gt;&gt; <span class="c"># Sample input 2:</span> <br />
&gt;&gt;&gt; <span class="n">filename</span> <span class="o">=</span> <span class="s">&quot;Marsh12Region4.shp&quot;</span> <br />
&gt;&gt;&gt; <span class="n">code</span> <span class="o">=</span> <span class="s">&quot;Region1&quot;</span> <br />
&gt;&gt;&gt; <span class="c"># Insert line of code here.</span> <br />
False<br />
</code><br />
</li>
<li>Write a line of code to using the <code>rstrip</code> method and an assignment statement to remove the trailing whitespace from the string variable named <code>data</code>. The variable  contains a line of tab delimited North Carolina county forestry data.
                The example below shows how the line of code could be used.
                <p><code>&gt;&gt;&gt; <span class="comment"># Sample input: </span><br />
                  &gt;&gt;&gt;  
                  data <span class="o">=</span> <span class="s">&quot;               Site:\tNortheast Prong\tDARE\t01\t\n\n&quot;</span><br />
                  &gt;&gt;&gt; data<br />
</code><code><span class="n">' Site:\tNortheast Prong\tDARE\t01\t\n\n'</span></code><br />
                  &gt;&gt;&gt; <span class="comment"># Insert line of code here.</span><span class="num"></span><br />
                  &gt;&gt;&gt; data<br />
<code><span class="n">&quot;               Site:\tNortheast Prong\tDARE\t01&quot;</span></code><br />
</p>
</li>
<li>
<p>Suppose that we are editing data and saving the results in another file. We want to append the string <code>'_edited'</code> to the input base name to create the output name. For example, if the input file name is named  <code>'countiesNC.txt'</code>,  the output file should be <span class="n">named <code>'countiesNC_edited.txt'</code>. If the input file is named <code><span class="n">'</span>riversWVA.txt'</code>,  the output file  should be named <code><span class="n">'</span>riversWVA_edited.txt'</code>, and so forth. Write a line of code  that uses slicing, concatenation, and a variable named <code>input</code> to assign a value to a variable named <code>output</code>. The example below shows how the line of code could be used.<br />
<br />
<code>&gt;&gt;&gt;<span class="comment"># Sample input:</span><br />
  &gt;&gt;&gt; inputName <span class="o">=</span><span class="s"> 'counties.shp'</span><br />
  &gt;&gt;&gt; <span class="comment"># Insert line of code here.</span><span class="num"></span><br />
  &gt;&gt;&gt; <span class="key">print</span> outputName<br />
</code><code><span class="n">counties_edited.shp</span></code><br />
</span></p>
</li>
<li>
<p>Write a line of code  using the string <code>format</code> method to print the desired output. Pass the given variables as arguments. The output from the print statements should appear exactly as shown on the last line.<br />
<code><br />
&gt;&gt;&gt; traffic_lights_count <span class="o">=</span> <span class="mi">12</span><br />
&gt;&gt;&gt; buffer_dist <span class="o">=</span> <span class="mi">5</span><br />
&gt;&gt;&gt; intersection_count <span class="o">=</span> <span class="mi">20</span><br />
&gt;&gt;&gt; <span class="comment"># Insert line of code here.</span></code><code><span class="n"><br />
                  There are 12 traffic lights within the 5 buffer and 20 intersections.</span></code><br />
</p>
</li>
<li>Write a line of code  using the string <code>format</code> method to print the desired output. Pass the given variables as arguments. The output from the print statements should appear exactly as shown on the last line.
                <code></code><p>
                  &gt;&gt;&gt; buffer_input <span class="o">=</span> <span class="s">'crime_sites'</span><br />
                  &gt;&gt;&gt; num <span class="o">=</span> <span class="mi">32</span><br />
                  &gt;&gt;&gt; <span class="comment"># Insert line of code here.</span><br />
<code><span class="n">crime_sites.shp has been successfully buffered. Results were saved in C:/bufferOut32.shp</span></code><br />
</p>
</li>
</ol>
</li>
</ol><a href="#top">back to top</a> <strong>Table 3.1: </strong>Numerical operators.
              <table width="453" border="1" cellpadding="5">
<tr>
<th width="86" scope="row">Operation</th>
<th width="131" align="center">Operator</th>
<th width="190">Example</th>
</tr>
<tr>
<td scope="row">Addition</td>
<td align="center"><code>+</code></td>
<td><code><span class="mi">7</span> <span class="o">+</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">9</span></code></td>
</tr>
<tr>
<td scope="row">Subtraction</td>
<td align="center"><code>-</code></td>
<td><code><span class="mi">7</span> <span class="o">-</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">5</span> </code></td>
</tr>
<tr>
<td height="29" scope="row">Multiplication</td>
<td align="center"><code>*</code></td>
<td><code><span class="mi">7</span> <span class="o">*</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">14</span> </code></td>
</tr>
<tr>
<td scope="row"><p>Division</p></td>
<td align="center"><code>/</code></td>
<td><code><span class="mi">7</span> / <span class="mi">2</span> <span class="o">=</span><span class="mi"> 3</span> </code><code></code></td>
</tr>
<tr>
<td scope="row">Exponentiation</td>
<td align="center"><code>**</code><code></code></td>
<td><code><span class="mi">7</span><span class="o">*</span><span class="o">*</span><span class="mi">2</span><span class="o"> =</span> <span class="mi">9</span> </code></td>
</tr>
<tr>
<td scope="row">Modulus division </td>
<td align="center"><code>%</code></td>
<td><code><span class="mi">7 <span class="o">%</span></span><span class="mi"> 2 </span><span class="o">=</span> <span class="mi">1</span> </code></td>
</tr>
</table>Addition<code>+</code><code><span class="mi">7</span> <span class="o">+</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">9</span></code>Subtraction<code>-</code><code><span class="mi">7</span> <span class="o">-</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">5</span> </code>Multiplication<code>*</code><code><span class="mi">7</span> <span class="o">*</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">14</span> </code><p>Division</p><code>/</code><code><span class="mi">7</span> / <span class="mi">2</span> <span class="o">=</span><span class="mi"> 3</span> </code><code></code>Exponentiation<code>**</code><code></code><code><span class="mi">7</span><span class="o">*</span><span class="o">*</span><span class="mi">2</span><span class="o"> =</span> <span class="mi">9</span> </code>Modulus division <code>%</code><code><span class="mi">7 <span class="o">%</span></span><span class="mi"> 2 </span><span class="o">=</span> <span class="mi">1</span> </code><a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <p><strong><br />
                  Table 3.2: </strong>Sequence Operations on Strings<strong><br />
<br />
<code>&gt;&gt;&gt; exampleString <span class="o">=</span> <span class="s">'tuzigoot'</span></code></strong></p>
<table width="732" border="3">
<tr>
<td width="130"><strong>Operation</strong></td>
<td width="260"><strong>Sample code</strong></td>
<td width="316"><strong>Return value </strong></td>
</tr>
<tr>
<td>length</td>
<td><code>len(exampleString)</code></td>
<td><p><code>8</code><br />
</p></td>
</tr>
<tr>
<td>indexing</td>
<td><code>exampleString[2]</code></td>
<td><code>'z'</code><br /></td>
</tr>
<tr>
<td>slicing</td>
<td><code>exampleString[:-4]</code></td>
<td><code>'tuzi'</code><br /></td>
</tr>
<tr>
<td>concatenation</td>
<td><code>exampleString <span class="o">+</span> exampleString</code></td>
<td><code>'tuzigoottuzigoot'</code></td>
</tr>
<tr>
<td>membership</td>
<td><code>'ample' in exampleString</code></td>
<td><p><code>False</code><br />
</p></td>
</tr>
</table><strong>Operation</strong><strong>Sample code</strong><strong>Return value </strong>length<code>len(exampleString)</code><p><code>8</code><br />
</p>indexing<code>exampleString[2]</code><code>'z'</code><br />slicing<code>exampleString[:-4]</code><code>'tuzi'</code><br />concatenation<code>exampleString <span class="o">+</span> exampleString</code><code>'tuzigoottuzigoot'</code>membership<code>'ample' in exampleString</code><p><code>False</code><br />
</p><a href="#top">back to top</a> <a href="#top">back to top</a> <code>\n</code>new line <code>\t</code>tab<a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> Python statement Output (notice there are 9 letters) <ol>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span></code> <br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">5</span><span class="p">]</span> <span class="o">+</span> <span class="n">happyCow</span><span class="p">[</span><span class="o">-</span><span class="mi">4</span><span class="p">:]</span></code> <br />
<br />
</li>
<li><code><span class="nb">len</span><span class="p">(</span><span class="n">happyCow</span><span class="p">)</span></code> <br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">5</span><span class="p">]</span></code><br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="o">-</span><span class="mi">4</span><span class="p">:]</span> </code><br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[:</span><span class="mi">5</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="n">happyCow</span> <span class="ow">in</span> <span class="s">&quot;5meadows.shp&quot;</span></code><br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;W&#39;</span> <span class="ow">in</span> <span class="n">happyCow</span></code><br />
</li>
</ol><br />
<ol type="A">
<li><code><span class="ne">IndexError</span></code><br />
<br />
</li>
<li><code><span class="s">&#39;meado.shp&#39;</span></code> </li>
<br />
<li><code><span class="s">&#39;meado&#39;</span></code><br />
<br />
</li>
<li><code>True</code><br />
<br />
</li>
<li><code>False</code><br />
<br />
</li>
<li><code><span class="mi">11</span></code><br />
<br />
</li>
<li><code><span class="s">&#39;w&#39;</span></code><br />
<br />
</li>
<li><code><span class="s">&#39;.shp&#39;</span></code><br />
<br />
</li>
<li><code><span class="s">&#39;m&#39;</span></code></li>
</ol>
<br />
<br /> Python statement Output<ol>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="s">&quot;i&quot;</span><span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">capitalize</span><span class="p">(</span> <span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">&quot;ippi&quot;</span><span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&quot;i&quot;</span><span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">state</span><span class="p">,</span><span class="n">state</span><span class="p">])</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;ss&quot;</span><span class="p">,</span><span class="s">&quot;RR&quot;</span><span class="p">)</span></code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;i&#39;</span><span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">upper</span><span class="p">( )</span></code><br />
<br />
</li>
<li> <code><span class="n">state</span><span class="p">[</span><span class="mi">7</span><span class="p">:]</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">1</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;Miss&#39;</span> <span class="ow">in</span> <span class="n">state</span> </code></li>
</ol><ol type="A">
<li><code><span class="s">&#39;Mississippi&#39;</span></code><br />
<br />
</li>
<li><code><span class="s">'miRRiRRippi&#39;</span> </code><br />
<br />
</li>
<li><code><span class="p">[</span><span class="s">&#39;m&#39;</span><span class="p">,</span> <span class="s">&#39;ss&#39;</span><span class="p">,</span> <span class="s">&#39;SS&#39;</span><span class="p">,</span> <span class="s">&#39;pp&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;m&#39;</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;MISSISSIPPI&#39;</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;missiSSippi;missiSSippi&#39;</span> </code><br />
<br />
</li>
<li><code><span class="bp"></span>True</code><br />
<br />
</li>
<li><code><span class="s">&#39;i&#39;</span> </code><br />
<br />
</li>
<li><code><span class="mi">4</span> </code><br />
<br />
</li>
<li><code><span class="mi">1</span> </code><br />
<br />
</li>
<li><code><span class="bp">False</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;ippi&#39;</span></code></li>
</ol>Python statement Output<ol>
<li><code>count/n</code><br />
<br />
</li>
<li><code>&quot;nest&quot;</code><br />
<br />
</li>
<li><code> r&quot;count\n&quot;</code><br />
<br />
</li>
<li><code>u&quot;hatchling&quot;</code><br />
<br />
</li>
<li><code>len(data)</code><br />
<br />
</li>
<li><code>str(count)</code><br />
<br />
</li>
<li><code>dataDir + &quot;/&quot;+ data</code><br />
<br />
</li>
<li><class><code>data[0:n] </code><br />
<br />
</class></li>
<li><code>data[n]</code><br />
<br />
</li>
<li><code>"bird" in data</code><br />
<br />
</li>
<li><code>"{0} records".format(count)</code><br />
<br />
</li>
<li><code>data.split("_")</code><br />
<br />
</li>
<li><code>"Bird data \
Wing span"</code><br />
</li>
</ol><ol type="A">
<li>Casting<br />
<br />
</li>
<li>Indexing<br />
<br />
</li>
<li>Slicing<br />
<br />
</li>
<li>Finding the length of a string<br />
<br />
</li>
<li>Concatenating<br />
<br />
</li>
<li>Line continuation<br />
<br />
</li>
<li>String literal<br />
<br />
</li>
<li>String method that is the inverse of the <code>join</code> method.<br />
<br />
</li>
<li>Escape sequence<br />
<br />
</li>
<li>Integer division<br />
<br />
</li>
<li>Raw string<br />
<br />
</li>
<li>Unicode string<br />
<br />
</li>
<li>String formatting</li>
</ol><span class="head">3.1 Numbers</span> <a name="nums" id="introduction2"></a><a href="#top">back to top</a> OperationOperatorExample<strong>Table 3.1: </strong>Numerical operators.
              <table width="453" border="1" cellpadding="5">
<tr>
<th width="86" scope="row">Operation</th>
<th width="131" align="center">Operator</th>
<th width="190">Example</th>
</tr>
<tr>
<td scope="row">Addition</td>
<td align="center"><code>+</code></td>
<td><code><span class="mi">7</span> <span class="o">+</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">9</span></code></td>
</tr>
<tr>
<td scope="row">Subtraction</td>
<td align="center"><code>-</code></td>
<td><code><span class="mi">7</span> <span class="o">-</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">5</span> </code></td>
</tr>
<tr>
<td height="29" scope="row">Multiplication</td>
<td align="center"><code>*</code></td>
<td><code><span class="mi">7</span> <span class="o">*</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">14</span> </code></td>
</tr>
<tr>
<td scope="row"><p>Division</p></td>
<td align="center"><code>/</code></td>
<td><code><span class="mi">7</span> / <span class="mi">2</span> <span class="o">=</span><span class="mi"> 3</span> </code><code></code></td>
</tr>
<tr>
<td scope="row">Exponentiation</td>
<td align="center"><code>**</code><code></code></td>
<td><code><span class="mi">7</span><span class="o">*</span><span class="o">*</span><span class="mi">2</span><span class="o"> =</span> <span class="mi">9</span> </code></td>
</tr>
<tr>
<td scope="row">Modulus division </td>
<td align="center"><code>%</code></td>
<td><code><span class="mi">7 <span class="o">%</span></span><span class="mi"> 2 </span><span class="o">=</span> <span class="mi">1</span> </code></td>
</tr>
</table>Addition<code>+</code><code><span class="mi">7</span> <span class="o">+</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">9</span></code>Subtraction<code>-</code><code><span class="mi">7</span> <span class="o">-</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">5</span> </code>Multiplication<code>*</code><code><span class="mi">7</span> <span class="o">*</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">14</span> </code><p>Division</p><code>/</code><code><span class="mi">7</span> / <span class="mi">2</span> <span class="o">=</span><span class="mi"> 3</span> </code><code></code>Exponentiation<code>**</code><code></code><code><span class="mi">7</span><span class="o">*</span><span class="o">*</span><span class="mi">2</span><span class="o"> =</span> <span class="mi">9</span> </code>Modulus division <code>%</code><code><span class="mi">7 <span class="o">%</span></span><span class="mi"> 2 </span><span class="o">=</span> <span class="mi">1</span> </code>OperationOperatorExampleAddition<code>+</code><code><span class="mi">7</span> <span class="o">+</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">9</span></code>Subtraction<code>-</code><code><span class="mi">7</span> <span class="o">-</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">5</span> </code>Multiplication<code>*</code><code><span class="mi">7</span> <span class="o">*</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">14</span> </code><p>Division</p><code>/</code><code><span class="mi">7</span> / <span class="mi">2</span> <span class="o">=</span><span class="mi"> 3</span> </code><code></code>Exponentiation<code>**</code><code></code><code><span class="mi">7</span><span class="o">*</span><span class="o">*</span><span class="mi">2</span><span class="o"> =</span> <span class="mi">9</span> </code>Modulus division <code>%</code><code><span class="mi">7 <span class="o">%</span></span><span class="mi"> 2 </span><span class="o">=</span> <span class="mi">1</span> </code><span class="head">3.2 What is a string?</span> <a name="strings" id="strings"></a><a href="#top">back to top</a> <span class="head">3.3 Things you need to do to strings (a.k.a. string operations)</span> <a name="operations" id="operations"></a><a href="#top">back to top</a> <span class="head">3.3.1 Indexing into strings</span> <a name="index" id="operations3"></a><a href="#top">back to top</a> variableName[index_number]<span class="head">3.3.2 Slice strings</span> <a name="operations" id="operations2"></a><a href="#top">back to top</a> <strong><span class="head">3.3.3 Concatenate strings</span></strong><a href="#top">back to top</a> <strong><span class="head">3.3.4 Check for substring membership</span></strong><a href="#top">back to top</a> <p><strong><br />
                  Table 3.2: </strong>Sequence Operations on Strings<strong><br />
<br />
<code>&gt;&gt;&gt; exampleString <span class="o">=</span> <span class="s">'tuzigoot'</span></code></strong></p>
<table width="732" border="3">
<tr>
<td width="130"><strong>Operation</strong></td>
<td width="260"><strong>Sample code</strong></td>
<td width="316"><strong>Return value </strong></td>
</tr>
<tr>
<td>length</td>
<td><code>len(exampleString)</code></td>
<td><p><code>8</code><br />
</p></td>
</tr>
<tr>
<td>indexing</td>
<td><code>exampleString[2]</code></td>
<td><code>'z'</code><br /></td>
</tr>
<tr>
<td>slicing</td>
<td><code>exampleString[:-4]</code></td>
<td><code>'tuzi'</code><br /></td>
</tr>
<tr>
<td>concatenation</td>
<td><code>exampleString <span class="o">+</span> exampleString</code></td>
<td><code>'tuzigoottuzigoot'</code></td>
</tr>
<tr>
<td>membership</td>
<td><code>'ample' in exampleString</code></td>
<td><p><code>False</code><br />
</p></td>
</tr>
</table><strong>Operation</strong><strong>Sample code</strong><strong>Return value </strong>length<code>len(exampleString)</code><p><code>8</code><br />
</p>indexing<code>exampleString[2]</code><code>'z'</code><br />slicing<code>exampleString[:-4]</code><code>'tuzi'</code><br />concatenation<code>exampleString <span class="o">+</span> exampleString</code><code>'tuzigoottuzigoot'</code>membership<code>'ample' in exampleString</code><p><code>False</code><br />
</p><strong>Operation</strong><strong>Sample code</strong><strong>Return value </strong>length<code>len(exampleString)</code><p><code>8</code><br />
</p>indexing<code>exampleString[2]</code><code>'z'</code><br />slicing<code>exampleString[:-4]</code><code>'tuzi'</code><br />concatenation<code>exampleString <span class="o">+</span> exampleString</code><code>'tuzigoottuzigoot'</code>membership<code>'ample' in exampleString</code><p><code>False</code><br />
</p><span class="head">3.4 More things with strings (a.k.a. string methods)</span> <a name="methods" id="methods"></a><a href="#top">back to top</a> <strong><code>object.method(argument1, argument2, argument3,...)</code></strong><code><strong>variableName <span class="o">=</span> object.method(argument1, argument2, argument3,...)</strong></code><span class="head">3.5 File paths and raw strings</span> <a name="escape" id="escape"></a><a href="#top">back to top</a> White space escape sequences<code>\n</code>new line <code>\t</code>tab<span class="head">3.6 Unicode strings</span> <a name="escape" id="escape2"></a><a href="#top">back to top</a> <span class="head">3.7 Printing Strings and Numbers</span> <a name="printing" id="printing"></a><a href="#top">back to top</a> <b class="head">3.8 Key terms</b><a name="keyterms" id="keyterms2"></a><a href="#top">back to top</a> <span class="head">3.9 Exercises</span> <a name="exercises" id="exercises"></a><a href="#top">back to top</a> Python statement Output (notice there are 9 letters) <ol>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span></code> <br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">5</span><span class="p">]</span> <span class="o">+</span> <span class="n">happyCow</span><span class="p">[</span><span class="o">-</span><span class="mi">4</span><span class="p">:]</span></code> <br />
<br />
</li>
<li><code><span class="nb">len</span><span class="p">(</span><span class="n">happyCow</span><span class="p">)</span></code> <br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">5</span><span class="p">]</span></code><br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="o">-</span><span class="mi">4</span><span class="p">:]</span> </code><br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[:</span><span class="mi">5</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="n">happyCow</span> <span class="ow">in</span> <span class="s">&quot;5meadows.shp&quot;</span></code><br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;W&#39;</span> <span class="ow">in</span> <span class="n">happyCow</span></code><br />
</li>
</ol><br />
<ol type="A">
<li><code><span class="ne">IndexError</span></code><br />
<br />
</li>
<li><code><span class="s">&#39;meado.shp&#39;</span></code> </li>
<br />
<li><code><span class="s">&#39;meado&#39;</span></code><br />
<br />
</li>
<li><code>True</code><br />
<br />
</li>
<li><code>False</code><br />
<br />
</li>
<li><code><span class="mi">11</span></code><br />
<br />
</li>
<li><code><span class="s">&#39;w&#39;</span></code><br />
<br />
</li>
<li><code><span class="s">&#39;.shp&#39;</span></code><br />
<br />
</li>
<li><code><span class="s">&#39;m&#39;</span></code></li>
</ol>
<br />
<br /> Python statement Output<ol>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="s">&quot;i&quot;</span><span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">capitalize</span><span class="p">(</span> <span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">&quot;ippi&quot;</span><span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&quot;i&quot;</span><span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">state</span><span class="p">,</span><span class="n">state</span><span class="p">])</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;ss&quot;</span><span class="p">,</span><span class="s">&quot;RR&quot;</span><span class="p">)</span></code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;i&#39;</span><span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">upper</span><span class="p">( )</span></code><br />
<br />
</li>
<li> <code><span class="n">state</span><span class="p">[</span><span class="mi">7</span><span class="p">:]</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">1</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;Miss&#39;</span> <span class="ow">in</span> <span class="n">state</span> </code></li>
</ol><ol type="A">
<li><code><span class="s">&#39;Mississippi&#39;</span></code><br />
<br />
</li>
<li><code><span class="s">'miRRiRRippi&#39;</span> </code><br />
<br />
</li>
<li><code><span class="p">[</span><span class="s">&#39;m&#39;</span><span class="p">,</span> <span class="s">&#39;ss&#39;</span><span class="p">,</span> <span class="s">&#39;SS&#39;</span><span class="p">,</span> <span class="s">&#39;pp&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;m&#39;</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;MISSISSIPPI&#39;</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;missiSSippi;missiSSippi&#39;</span> </code><br />
<br />
</li>
<li><code><span class="bp"></span>True</code><br />
<br />
</li>
<li><code><span class="s">&#39;i&#39;</span> </code><br />
<br />
</li>
<li><code><span class="mi">4</span> </code><br />
<br />
</li>
<li><code><span class="mi">1</span> </code><br />
<br />
</li>
<li><code><span class="bp">False</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;ippi&#39;</span></code></li>
</ol>Python statement Output<ol>
<li><code>count/n</code><br />
<br />
</li>
<li><code>&quot;nest&quot;</code><br />
<br />
</li>
<li><code> r&quot;count\n&quot;</code><br />
<br />
</li>
<li><code>u&quot;hatchling&quot;</code><br />
<br />
</li>
<li><code>len(data)</code><br />
<br />
</li>
<li><code>str(count)</code><br />
<br />
</li>
<li><code>dataDir + &quot;/&quot;+ data</code><br />
<br />
</li>
<li><class><code>data[0:n] </code><br />
<br />
</class></li>
<li><code>data[n]</code><br />
<br />
</li>
<li><code>"bird" in data</code><br />
<br />
</li>
<li><code>"{0} records".format(count)</code><br />
<br />
</li>
<li><code>data.split("_")</code><br />
<br />
</li>
<li><code>"Bird data \
Wing span"</code><br />
</li>
</ol><ol type="A">
<li>Casting<br />
<br />
</li>
<li>Indexing<br />
<br />
</li>
<li>Slicing<br />
<br />
</li>
<li>Finding the length of a string<br />
<br />
</li>
<li>Concatenating<br />
<br />
</li>
<li>Line continuation<br />
<br />
</li>
<li>String literal<br />
<br />
</li>
<li>String method that is the inverse of the <code>join</code> method.<br />
<br />
</li>
<li>Escape sequence<br />
<br />
</li>
<li>Integer division<br />
<br />
</li>
<li>Raw string<br />
<br />
</li>
<li>Unicode string<br />
<br />
</li>
<li>String formatting</li>
</ol>------------------------------------------------------------rows: 8 cols: 3OperationOperatorExample<strong>Table 3.1: </strong>Numerical operators.
              <table width="453" border="1" cellpadding="5">
<tr>
<th width="86" scope="row">Operation</th>
<th width="131" align="center">Operator</th>
<th width="190">Example</th>
</tr>
<tr>
<td scope="row">Addition</td>
<td align="center"><code>+</code></td>
<td><code><span class="mi">7</span> <span class="o">+</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">9</span></code></td>
</tr>
<tr>
<td scope="row">Subtraction</td>
<td align="center"><code>-</code></td>
<td><code><span class="mi">7</span> <span class="o">-</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">5</span> </code></td>
</tr>
<tr>
<td height="29" scope="row">Multiplication</td>
<td align="center"><code>*</code></td>
<td><code><span class="mi">7</span> <span class="o">*</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">14</span> </code></td>
</tr>
<tr>
<td scope="row"><p>Division</p></td>
<td align="center"><code>/</code></td>
<td><code><span class="mi">7</span> / <span class="mi">2</span> <span class="o">=</span><span class="mi"> 3</span> </code><code></code></td>
</tr>
<tr>
<td scope="row">Exponentiation</td>
<td align="center"><code>**</code><code></code></td>
<td><code><span class="mi">7</span><span class="o">*</span><span class="o">*</span><span class="mi">2</span><span class="o"> =</span> <span class="mi">9</span> </code></td>
</tr>
<tr>
<td scope="row">Modulus division </td>
<td align="center"><code>%</code></td>
<td><code><span class="mi">7 <span class="o">%</span></span><span class="mi"> 2 </span><span class="o">=</span> <span class="mi">1</span> </code></td>
</tr>
</table>Addition<code>+</code><code><span class="mi">7</span> <span class="o">+</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">9</span></code>Subtraction<code>-</code><code><span class="mi">7</span> <span class="o">-</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">5</span> </code>Multiplication<code>*</code><code><span class="mi">7</span> <span class="o">*</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">14</span> </code><p>Division</p><code>/</code><code><span class="mi">7</span> / <span class="mi">2</span> <span class="o">=</span><span class="mi"> 3</span> </code><code></code>Exponentiation<code>**</code><code></code><code><span class="mi">7</span><span class="o">*</span><span class="o">*</span><span class="mi">2</span><span class="o"> =</span> <span class="mi">9</span> </code>Modulus division <code>%</code><code><span class="mi">7 <span class="o">%</span></span><span class="mi"> 2 </span><span class="o">=</span> <span class="mi">1</span> </code>OperationOperatorExampleAddition<code>+</code><code><span class="mi">7</span> <span class="o">+</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">9</span></code>Subtraction<code>-</code><code><span class="mi">7</span> <span class="o">-</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">5</span> </code>Multiplication<code>*</code><code><span class="mi">7</span> <span class="o">*</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">14</span> </code><p>Division</p><code>/</code><code><span class="mi">7</span> / <span class="mi">2</span> <span class="o">=</span><span class="mi"> 3</span> </code><code></code>Exponentiation<code>**</code><code></code><code><span class="mi">7</span><span class="o">*</span><span class="o">*</span><span class="mi">2</span><span class="o"> =</span> <span class="mi">9</span> </code>Modulus division <code>%</code><code><span class="mi">7 <span class="o">%</span></span><span class="mi"> 2 </span><span class="o">=</span> <span class="mi">1</span> </code>------------------------------------------------------------rows: 8 cols: 3OperationOperatorExample<strong>Table 3.1: </strong>Numerical operators.
              <table width="453" border="1" cellpadding="5">
<tr>
<th width="86" scope="row">Operation</th>
<th width="131" align="center">Operator</th>
<th width="190">Example</th>
</tr>
<tr>
<td scope="row">Addition</td>
<td align="center"><code>+</code></td>
<td><code><span class="mi">7</span> <span class="o">+</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">9</span></code></td>
</tr>
<tr>
<td scope="row">Subtraction</td>
<td align="center"><code>-</code></td>
<td><code><span class="mi">7</span> <span class="o">-</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">5</span> </code></td>
</tr>
<tr>
<td height="29" scope="row">Multiplication</td>
<td align="center"><code>*</code></td>
<td><code><span class="mi">7</span> <span class="o">*</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">14</span> </code></td>
</tr>
<tr>
<td scope="row"><p>Division</p></td>
<td align="center"><code>/</code></td>
<td><code><span class="mi">7</span> / <span class="mi">2</span> <span class="o">=</span><span class="mi"> 3</span> </code><code></code></td>
</tr>
<tr>
<td scope="row">Exponentiation</td>
<td align="center"><code>**</code><code></code></td>
<td><code><span class="mi">7</span><span class="o">*</span><span class="o">*</span><span class="mi">2</span><span class="o"> =</span> <span class="mi">9</span> </code></td>
</tr>
<tr>
<td scope="row">Modulus division </td>
<td align="center"><code>%</code></td>
<td><code><span class="mi">7 <span class="o">%</span></span><span class="mi"> 2 </span><span class="o">=</span> <span class="mi">1</span> </code></td>
</tr>
</table>Addition<code>+</code><code><span class="mi">7</span> <span class="o">+</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">9</span></code>Subtraction<code>-</code><code><span class="mi">7</span> <span class="o">-</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">5</span> </code>Multiplication<code>*</code><code><span class="mi">7</span> <span class="o">*</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">14</span> </code><p>Division</p><code>/</code><code><span class="mi">7</span> / <span class="mi">2</span> <span class="o">=</span><span class="mi"> 3</span> </code><code></code>Exponentiation<code>**</code><code></code><code><span class="mi">7</span><span class="o">*</span><span class="o">*</span><span class="mi">2</span><span class="o"> =</span> <span class="mi">9</span> </code>Modulus division <code>%</code><code><span class="mi">7 <span class="o">%</span></span><span class="mi"> 2 </span><span class="o">=</span> <span class="mi">1</span> </code>OperationOperatorExampleAddition<code>+</code><code><span class="mi">7</span> <span class="o">+</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">9</span></code>Subtraction<code>-</code><code><span class="mi">7</span> <span class="o">-</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">5</span> </code>Multiplication<code>*</code><code><span class="mi">7</span> <span class="o">*</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">14</span> </code><p>Division</p><code>/</code><code><span class="mi">7</span> / <span class="mi">2</span> <span class="o">=</span><span class="mi"> 3</span> </code><code></code>Exponentiation<code>**</code><code></code><code><span class="mi">7</span><span class="o">*</span><span class="o">*</span><span class="mi">2</span><span class="o"> =</span> <span class="mi">9</span> </code>Modulus division <code>%</code><code><span class="mi">7 <span class="o">%</span></span><span class="mi"> 2 </span><span class="o">=</span> <span class="mi">1</span> </code>------------------------------------------------------------rows: 8 cols: 3OperationOperatorExample<strong>Table 3.1: </strong>Numerical operators.
              <table width="453" border="1" cellpadding="5">
<tr>
<th width="86" scope="row">Operation</th>
<th width="131" align="center">Operator</th>
<th width="190">Example</th>
</tr>
<tr>
<td scope="row">Addition</td>
<td align="center"><code>+</code></td>
<td><code><span class="mi">7</span> <span class="o">+</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">9</span></code></td>
</tr>
<tr>
<td scope="row">Subtraction</td>
<td align="center"><code>-</code></td>
<td><code><span class="mi">7</span> <span class="o">-</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">5</span> </code></td>
</tr>
<tr>
<td height="29" scope="row">Multiplication</td>
<td align="center"><code>*</code></td>
<td><code><span class="mi">7</span> <span class="o">*</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">14</span> </code></td>
</tr>
<tr>
<td scope="row"><p>Division</p></td>
<td align="center"><code>/</code></td>
<td><code><span class="mi">7</span> / <span class="mi">2</span> <span class="o">=</span><span class="mi"> 3</span> </code><code></code></td>
</tr>
<tr>
<td scope="row">Exponentiation</td>
<td align="center"><code>**</code><code></code></td>
<td><code><span class="mi">7</span><span class="o">*</span><span class="o">*</span><span class="mi">2</span><span class="o"> =</span> <span class="mi">9</span> </code></td>
</tr>
<tr>
<td scope="row">Modulus division </td>
<td align="center"><code>%</code></td>
<td><code><span class="mi">7 <span class="o">%</span></span><span class="mi"> 2 </span><span class="o">=</span> <span class="mi">1</span> </code></td>
</tr>
</table>Addition<code>+</code><code><span class="mi">7</span> <span class="o">+</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">9</span></code>Subtraction<code>-</code><code><span class="mi">7</span> <span class="o">-</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">5</span> </code>Multiplication<code>*</code><code><span class="mi">7</span> <span class="o">*</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">14</span> </code><p>Division</p><code>/</code><code><span class="mi">7</span> / <span class="mi">2</span> <span class="o">=</span><span class="mi"> 3</span> </code><code></code>Exponentiation<code>**</code><code></code><code><span class="mi">7</span><span class="o">*</span><span class="o">*</span><span class="mi">2</span><span class="o"> =</span> <span class="mi">9</span> </code>Modulus division <code>%</code><code><span class="mi">7 <span class="o">%</span></span><span class="mi"> 2 </span><span class="o">=</span> <span class="mi">1</span> </code>OperationOperatorExampleAddition<code>+</code><code><span class="mi">7</span> <span class="o">+</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">9</span></code>Subtraction<code>-</code><code><span class="mi">7</span> <span class="o">-</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">5</span> </code>Multiplication<code>*</code><code><span class="mi">7</span> <span class="o">*</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">14</span> </code><p>Division</p><code>/</code><code><span class="mi">7</span> / <span class="mi">2</span> <span class="o">=</span><span class="mi"> 3</span> </code><code></code>Exponentiation<code>**</code><code></code><code><span class="mi">7</span><span class="o">*</span><span class="o">*</span><span class="mi">2</span><span class="o"> =</span> <span class="mi">9</span> </code>Modulus division <code>%</code><code><span class="mi">7 <span class="o">%</span></span><span class="mi"> 2 </span><span class="o">=</span> <span class="mi">1</span> </code>------------------------------------------------------------rows: 7 cols: 3OperationOperatorExampleAddition<code>+</code><code><span class="mi">7</span> <span class="o">+</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">9</span></code>Subtraction<code>-</code><code><span class="mi">7</span> <span class="o">-</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">5</span> </code>Multiplication<code>*</code><code><span class="mi">7</span> <span class="o">*</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">14</span> </code><p>Division</p><code>/</code><code><span class="mi">7</span> / <span class="mi">2</span> <span class="o">=</span><span class="mi"> 3</span> </code><code></code>Exponentiation<code>**</code><code></code><code><span class="mi">7</span><span class="o">*</span><span class="o">*</span><span class="mi">2</span><span class="o"> =</span> <span class="mi">9</span> </code>Modulus division <code>%</code><code><span class="mi">7 <span class="o">%</span></span><span class="mi"> 2 </span><span class="o">=</span> <span class="mi">1</span> </code>------------------------------------------------------------rows: 7 cols: 3OperationOperatorExampleAddition<code>+</code><code><span class="mi">7</span> <span class="o">+</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">9</span></code>Subtraction<code>-</code><code><span class="mi">7</span> <span class="o">-</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">5</span> </code>Multiplication<code>*</code><code><span class="mi">7</span> <span class="o">*</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">14</span> </code><p>Division</p><code>/</code><code><span class="mi">7</span> / <span class="mi">2</span> <span class="o">=</span><span class="mi"> 3</span> </code><code></code>Exponentiation<code>**</code><code></code><code><span class="mi">7</span><span class="o">*</span><span class="o">*</span><span class="mi">2</span><span class="o"> =</span> <span class="mi">9</span> </code>Modulus division <code>%</code><code><span class="mi">7 <span class="o">%</span></span><span class="mi"> 2 </span><span class="o">=</span> <span class="mi">1</span> </code>------------------------------------------------------------rows: 7 cols: 3OperationOperatorExampleAddition<code>+</code><code><span class="mi">7</span> <span class="o">+</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">9</span></code>Subtraction<code>-</code><code><span class="mi">7</span> <span class="o">-</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">5</span> </code>Multiplication<code>*</code><code><span class="mi">7</span> <span class="o">*</span><span class="mi"> 2</span> <span class="o">=</span> <span class="mi">14</span> </code><p>Division</p><code>/</code><code><span class="mi">7</span> / <span class="mi">2</span> <span class="o">=</span><span class="mi"> 3</span> </code><code></code>Exponentiation<code>**</code><code></code><code><span class="mi">7</span><span class="o">*</span><span class="o">*</span><span class="mi">2</span><span class="o"> =</span> <span class="mi">9</span> </code>Modulus division <code>%</code><code><span class="mi">7 <span class="o">%</span></span><span class="mi"> 2 </span><span class="o">=</span> <span class="mi">1</span> </code>------------------------------------------------------------rows: 7 cols: 3<p><strong><br />
                  Table 3.2: </strong>Sequence Operations on Strings<strong><br />
<br />
<code>&gt;&gt;&gt; exampleString <span class="o">=</span> <span class="s">'tuzigoot'</span></code></strong></p>
<table width="732" border="3">
<tr>
<td width="130"><strong>Operation</strong></td>
<td width="260"><strong>Sample code</strong></td>
<td width="316"><strong>Return value </strong></td>
</tr>
<tr>
<td>length</td>
<td><code>len(exampleString)</code></td>
<td><p><code>8</code><br />
</p></td>
</tr>
<tr>
<td>indexing</td>
<td><code>exampleString[2]</code></td>
<td><code>'z'</code><br /></td>
</tr>
<tr>
<td>slicing</td>
<td><code>exampleString[:-4]</code></td>
<td><code>'tuzi'</code><br /></td>
</tr>
<tr>
<td>concatenation</td>
<td><code>exampleString <span class="o">+</span> exampleString</code></td>
<td><code>'tuzigoottuzigoot'</code></td>
</tr>
<tr>
<td>membership</td>
<td><code>'ample' in exampleString</code></td>
<td><p><code>False</code><br />
</p></td>
</tr>
</table><strong>Operation</strong><strong>Sample code</strong><strong>Return value </strong>length<code>len(exampleString)</code><p><code>8</code><br />
</p>indexing<code>exampleString[2]</code><code>'z'</code><br />slicing<code>exampleString[:-4]</code><code>'tuzi'</code><br />concatenation<code>exampleString <span class="o">+</span> exampleString</code><code>'tuzigoottuzigoot'</code>membership<code>'ample' in exampleString</code><p><code>False</code><br />
</p><strong>Operation</strong><strong>Sample code</strong><strong>Return value </strong>length<code>len(exampleString)</code><p><code>8</code><br />
</p>indexing<code>exampleString[2]</code><code>'z'</code><br />slicing<code>exampleString[:-4]</code><code>'tuzi'</code><br />concatenation<code>exampleString <span class="o">+</span> exampleString</code><code>'tuzigoottuzigoot'</code>membership<code>'ample' in exampleString</code><p><code>False</code><br />
</p>------------------------------------------------------------rows: 7 cols: 3<p><strong><br />
                  Table 3.2: </strong>Sequence Operations on Strings<strong><br />
<br />
<code>&gt;&gt;&gt; exampleString <span class="o">=</span> <span class="s">'tuzigoot'</span></code></strong></p>
<table width="732" border="3">
<tr>
<td width="130"><strong>Operation</strong></td>
<td width="260"><strong>Sample code</strong></td>
<td width="316"><strong>Return value </strong></td>
</tr>
<tr>
<td>length</td>
<td><code>len(exampleString)</code></td>
<td><p><code>8</code><br />
</p></td>
</tr>
<tr>
<td>indexing</td>
<td><code>exampleString[2]</code></td>
<td><code>'z'</code><br /></td>
</tr>
<tr>
<td>slicing</td>
<td><code>exampleString[:-4]</code></td>
<td><code>'tuzi'</code><br /></td>
</tr>
<tr>
<td>concatenation</td>
<td><code>exampleString <span class="o">+</span> exampleString</code></td>
<td><code>'tuzigoottuzigoot'</code></td>
</tr>
<tr>
<td>membership</td>
<td><code>'ample' in exampleString</code></td>
<td><p><code>False</code><br />
</p></td>
</tr>
</table><strong>Operation</strong><strong>Sample code</strong><strong>Return value </strong>length<code>len(exampleString)</code><p><code>8</code><br />
</p>indexing<code>exampleString[2]</code><code>'z'</code><br />slicing<code>exampleString[:-4]</code><code>'tuzi'</code><br />concatenation<code>exampleString <span class="o">+</span> exampleString</code><code>'tuzigoottuzigoot'</code>membership<code>'ample' in exampleString</code><p><code>False</code><br />
</p><strong>Operation</strong><strong>Sample code</strong><strong>Return value </strong>length<code>len(exampleString)</code><p><code>8</code><br />
</p>indexing<code>exampleString[2]</code><code>'z'</code><br />slicing<code>exampleString[:-4]</code><code>'tuzi'</code><br />concatenation<code>exampleString <span class="o">+</span> exampleString</code><code>'tuzigoottuzigoot'</code>membership<code>'ample' in exampleString</code><p><code>False</code><br />
</p>------------------------------------------------------------rows: 7 cols: 3<p><strong><br />
                  Table 3.2: </strong>Sequence Operations on Strings<strong><br />
<br />
<code>&gt;&gt;&gt; exampleString <span class="o">=</span> <span class="s">'tuzigoot'</span></code></strong></p>
<table width="732" border="3">
<tr>
<td width="130"><strong>Operation</strong></td>
<td width="260"><strong>Sample code</strong></td>
<td width="316"><strong>Return value </strong></td>
</tr>
<tr>
<td>length</td>
<td><code>len(exampleString)</code></td>
<td><p><code>8</code><br />
</p></td>
</tr>
<tr>
<td>indexing</td>
<td><code>exampleString[2]</code></td>
<td><code>'z'</code><br /></td>
</tr>
<tr>
<td>slicing</td>
<td><code>exampleString[:-4]</code></td>
<td><code>'tuzi'</code><br /></td>
</tr>
<tr>
<td>concatenation</td>
<td><code>exampleString <span class="o">+</span> exampleString</code></td>
<td><code>'tuzigoottuzigoot'</code></td>
</tr>
<tr>
<td>membership</td>
<td><code>'ample' in exampleString</code></td>
<td><p><code>False</code><br />
</p></td>
</tr>
</table><strong>Operation</strong><strong>Sample code</strong><strong>Return value </strong>length<code>len(exampleString)</code><p><code>8</code><br />
</p>indexing<code>exampleString[2]</code><code>'z'</code><br />slicing<code>exampleString[:-4]</code><code>'tuzi'</code><br />concatenation<code>exampleString <span class="o">+</span> exampleString</code><code>'tuzigoottuzigoot'</code>membership<code>'ample' in exampleString</code><p><code>False</code><br />
</p><strong>Operation</strong><strong>Sample code</strong><strong>Return value </strong>length<code>len(exampleString)</code><p><code>8</code><br />
</p>indexing<code>exampleString[2]</code><code>'z'</code><br />slicing<code>exampleString[:-4]</code><code>'tuzi'</code><br />concatenation<code>exampleString <span class="o">+</span> exampleString</code><code>'tuzigoottuzigoot'</code>membership<code>'ample' in exampleString</code><p><code>False</code><br />
</p>------------------------------------------------------------rows: 6 cols: 3<strong>Operation</strong><strong>Sample code</strong><strong>Return value </strong>length<code>len(exampleString)</code><p><code>8</code><br />
</p>indexing<code>exampleString[2]</code><code>'z'</code><br />slicing<code>exampleString[:-4]</code><code>'tuzi'</code><br />concatenation<code>exampleString <span class="o">+</span> exampleString</code><code>'tuzigoottuzigoot'</code>membership<code>'ample' in exampleString</code><p><code>False</code><br />
</p>------------------------------------------------------------rows: 6 cols: 3<strong>Operation</strong><strong>Sample code</strong><strong>Return value </strong>length<code>len(exampleString)</code><p><code>8</code><br />
</p>indexing<code>exampleString[2]</code><code>'z'</code><br />slicing<code>exampleString[:-4]</code><code>'tuzi'</code><br />concatenation<code>exampleString <span class="o">+</span> exampleString</code><code>'tuzigoottuzigoot'</code>membership<code>'ample' in exampleString</code><p><code>False</code><br />
</p>------------------------------------------------------------rows: 3 cols: 2White space escape sequences<code>\n</code>new line <code>\t</code>tab------------------------------------------------------------rows: 2 cols: 2Python statement Output (notice there are 9 letters) <ol>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span></code> <br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">5</span><span class="p">]</span> <span class="o">+</span> <span class="n">happyCow</span><span class="p">[</span><span class="o">-</span><span class="mi">4</span><span class="p">:]</span></code> <br />
<br />
</li>
<li><code><span class="nb">len</span><span class="p">(</span><span class="n">happyCow</span><span class="p">)</span></code> <br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">5</span><span class="p">]</span></code><br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="o">-</span><span class="mi">4</span><span class="p">:]</span> </code><br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[:</span><span class="mi">5</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="n">happyCow</span> <span class="ow">in</span> <span class="s">&quot;5meadows.shp&quot;</span></code><br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;W&#39;</span> <span class="ow">in</span> <span class="n">happyCow</span></code><br />
</li>
</ol><br />
<ol type="A">
<li><code><span class="ne">IndexError</span></code><br />
<br />
</li>
<li><code><span class="s">&#39;meado.shp&#39;</span></code> </li>
<br />
<li><code><span class="s">&#39;meado&#39;</span></code><br />
<br />
</li>
<li><code>True</code><br />
<br />
</li>
<li><code>False</code><br />
<br />
</li>
<li><code><span class="mi">11</span></code><br />
<br />
</li>
<li><code><span class="s">&#39;w&#39;</span></code><br />
<br />
</li>
<li><code><span class="s">&#39;.shp&#39;</span></code><br />
<br />
</li>
<li><code><span class="s">&#39;m&#39;</span></code></li>
</ol>
<br />
<br /> ------------------------------------------------------------rows: 2 cols: 2Python statement Output (notice there are 9 letters) <ol>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span></code> <br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">5</span><span class="p">]</span> <span class="o">+</span> <span class="n">happyCow</span><span class="p">[</span><span class="o">-</span><span class="mi">4</span><span class="p">:]</span></code> <br />
<br />
</li>
<li><code><span class="nb">len</span><span class="p">(</span><span class="n">happyCow</span><span class="p">)</span></code> <br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">5</span><span class="p">]</span></code><br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="o">-</span><span class="mi">4</span><span class="p">:]</span> </code><br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[:</span><span class="mi">5</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="n">happyCow</span> <span class="ow">in</span> <span class="s">&quot;5meadows.shp&quot;</span></code><br />
<br />
</li>
<li><code><span class="n">happyCow</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;W&#39;</span> <span class="ow">in</span> <span class="n">happyCow</span></code><br />
</li>
</ol><br />
<ol type="A">
<li><code><span class="ne">IndexError</span></code><br />
<br />
</li>
<li><code><span class="s">&#39;meado.shp&#39;</span></code> </li>
<br />
<li><code><span class="s">&#39;meado&#39;</span></code><br />
<br />
</li>
<li><code>True</code><br />
<br />
</li>
<li><code>False</code><br />
<br />
</li>
<li><code><span class="mi">11</span></code><br />
<br />
</li>
<li><code><span class="s">&#39;w&#39;</span></code><br />
<br />
</li>
<li><code><span class="s">&#39;.shp&#39;</span></code><br />
<br />
</li>
<li><code><span class="s">&#39;m&#39;</span></code></li>
</ol>
<br />
<br /> ------------------------------------------------------------rows: 2 cols: 2Python statement Output<ol>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="s">&quot;i&quot;</span><span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">capitalize</span><span class="p">(</span> <span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">&quot;ippi&quot;</span><span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&quot;i&quot;</span><span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">state</span><span class="p">,</span><span class="n">state</span><span class="p">])</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;ss&quot;</span><span class="p">,</span><span class="s">&quot;RR&quot;</span><span class="p">)</span></code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;i&#39;</span><span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">upper</span><span class="p">( )</span></code><br />
<br />
</li>
<li> <code><span class="n">state</span><span class="p">[</span><span class="mi">7</span><span class="p">:]</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">1</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;Miss&#39;</span> <span class="ow">in</span> <span class="n">state</span> </code></li>
</ol><ol type="A">
<li><code><span class="s">&#39;Mississippi&#39;</span></code><br />
<br />
</li>
<li><code><span class="s">'miRRiRRippi&#39;</span> </code><br />
<br />
</li>
<li><code><span class="p">[</span><span class="s">&#39;m&#39;</span><span class="p">,</span> <span class="s">&#39;ss&#39;</span><span class="p">,</span> <span class="s">&#39;SS&#39;</span><span class="p">,</span> <span class="s">&#39;pp&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;m&#39;</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;MISSISSIPPI&#39;</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;missiSSippi;missiSSippi&#39;</span> </code><br />
<br />
</li>
<li><code><span class="bp"></span>True</code><br />
<br />
</li>
<li><code><span class="s">&#39;i&#39;</span> </code><br />
<br />
</li>
<li><code><span class="mi">4</span> </code><br />
<br />
</li>
<li><code><span class="mi">1</span> </code><br />
<br />
</li>
<li><code><span class="bp">False</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;ippi&#39;</span></code></li>
</ol>------------------------------------------------------------rows: 2 cols: 2Python statement Output<ol>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="s">&quot;i&quot;</span><span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">capitalize</span><span class="p">(</span> <span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">&quot;ippi&quot;</span><span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&quot;i&quot;</span><span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">state</span><span class="p">,</span><span class="n">state</span><span class="p">])</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;ss&quot;</span><span class="p">,</span><span class="s">&quot;RR&quot;</span><span class="p">)</span></code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;i&#39;</span><span class="p">)</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="o">.</span><span class="n">upper</span><span class="p">( )</span></code><br />
<br />
</li>
<li> <code><span class="n">state</span><span class="p">[</span><span class="mi">7</span><span class="p">:]</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="n">state</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">1</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;Miss&#39;</span> <span class="ow">in</span> <span class="n">state</span> </code></li>
</ol><ol type="A">
<li><code><span class="s">&#39;Mississippi&#39;</span></code><br />
<br />
</li>
<li><code><span class="s">'miRRiRRippi&#39;</span> </code><br />
<br />
</li>
<li><code><span class="p">[</span><span class="s">&#39;m&#39;</span><span class="p">,</span> <span class="s">&#39;ss&#39;</span><span class="p">,</span> <span class="s">&#39;SS&#39;</span><span class="p">,</span> <span class="s">&#39;pp&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">]</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;m&#39;</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;MISSISSIPPI&#39;</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;missiSSippi;missiSSippi&#39;</span> </code><br />
<br />
</li>
<li><code><span class="bp"></span>True</code><br />
<br />
</li>
<li><code><span class="s">&#39;i&#39;</span> </code><br />
<br />
</li>
<li><code><span class="mi">4</span> </code><br />
<br />
</li>
<li><code><span class="mi">1</span> </code><br />
<br />
</li>
<li><code><span class="bp">False</span> </code><br />
<br />
</li>
<li><code><span class="s">&#39;ippi&#39;</span></code></li>
</ol>------------------------------------------------------------rows: 2 cols: 2Python statement Output<ol>
<li><code>count/n</code><br />
<br />
</li>
<li><code>&quot;nest&quot;</code><br />
<br />
</li>
<li><code> r&quot;count\n&quot;</code><br />
<br />
</li>
<li><code>u&quot;hatchling&quot;</code><br />
<br />
</li>
<li><code>len(data)</code><br />
<br />
</li>
<li><code>str(count)</code><br />
<br />
</li>
<li><code>dataDir + &quot;/&quot;+ data</code><br />
<br />
</li>
<li><class><code>data[0:n] </code><br />
<br />
</class></li>
<li><code>data[n]</code><br />
<br />
</li>
<li><code>"bird" in data</code><br />
<br />
</li>
<li><code>"{0} records".format(count)</code><br />
<br />
</li>
<li><code>data.split("_")</code><br />
<br />
</li>
<li><code>"Bird data \
Wing span"</code><br />
</li>
</ol><ol type="A">
<li>Casting<br />
<br />
</li>
<li>Indexing<br />
<br />
</li>
<li>Slicing<br />
<br />
</li>
<li>Finding the length of a string<br />
<br />
</li>
<li>Concatenating<br />
<br />
</li>
<li>Line continuation<br />
<br />
</li>
<li>String literal<br />
<br />
</li>
<li>String method that is the inverse of the <code>join</code> method.<br />
<br />
</li>
<li>Escape sequence<br />
<br />
</li>
<li>Integer division<br />
<br />
</li>
<li>Raw string<br />
<br />
</li>
<li>Unicode string<br />
<br />
</li>
<li>String formatting</li>
</ol>------------------------------------------------------------rows: 2 cols: 2Python statement Output<ol>
<li><code>count/n</code><br />
<br />
</li>
<li><code>&quot;nest&quot;</code><br />
<br />
</li>
<li><code> r&quot;count\n&quot;</code><br />
<br />
</li>
<li><code>u&quot;hatchling&quot;</code><br />
<br />
</li>
<li><code>len(data)</code><br />
<br />
</li>
<li><code>str(count)</code><br />
<br />
</li>
<li><code>dataDir + &quot;/&quot;+ data</code><br />
<br />
</li>
<li><class><code>data[0:n] </code><br />
<br />
</class></li>
<li><code>data[n]</code><br />
<br />
</li>
<li><code>"bird" in data</code><br />
<br />
</li>
<li><code>"{0} records".format(count)</code><br />
<br />
</li>
<li><code>data.split("_")</code><br />
<br />
</li>
<li><code>"Bird data \
Wing span"</code><br />
</li>
</ol><ol type="A">
<li>Casting<br />
<br />
</li>
<li>Indexing<br />
<br />
</li>
<li>Slicing<br />
<br />
</li>
<li>Finding the length of a string<br />
<br />
</li>
<li>Concatenating<br />
<br />
</li>
<li>Line continuation<br />
<br />
</li>
<li>String literal<br />
<br />
</li>
<li>String method that is the inverse of the <code>join</code> method.<br />
<br />
</li>
<li>Escape sequence<br />
<br />
</li>
<li>Integer division<br />
<br />
</li>
<li>Raw string<br />
<br />
</li>
<li>Unicode string<br />
<br />
</li>
<li>String formatting</li>
</ol>------------------------------Ch03.html processed++++++++
K:/www/outputPagesCh03.html written
Ch04.html STARTED++++++++
------------------------------rows: 26 cols: 2<span class="head">4.1 Lists</span> <a name="lists" id="lists"></a><code>listVariable = [item1, item2, item3,...]</code><strong><span class="head">4.1.1 Sequence operations on lists</span><a name="ops" id="introduction5"></a></strong><strong><span class="head">4.1.2 List methods</span></strong><code>object.method(arguments1, argument2, argument3,...)</code><strong><span class="head">4.1.3 The built-in <code>range</code> function</span><a name="range" id="range"></a></strong><span class="head">4.1.4 Copying a list</span><span class="head">4.2 Tuples</span> <a name="tuples" id="introduction2"></a><span class="head">4.3 Syntax check and tracebacks</span><a name="syntaxCheck" id="introduction3"></a><b class="head">4.4 Key terms</b><a name="keyterms" id="keyterms2"></a><p class="head">4.5 Exercises<a name="exercises" id="exercises"></a></p><span class="head">Chapter objectives</span> <br />
<br />
After reading this chapter, you'll be able to do the following:
<ul>
<li>Create Python lists.</li>
<li>Index into, slice, and concatenate lists.</li>
<li>Find the length of a list and check if an item is in a list.</li>
<li>Append items to a list. </li>
<li>Locate online help for the list methods.</li>
<li>Create a list of numbers automatically.</li>
<li>Differentiate between in-place methods and methods that return a value.</li>
<li>Create and index tuples.</li>
<li>Check script syntax.</li>
<li>Interpret traceback error messages.</li>
</ul>
<hr />
<span class="foo">
<span class="head">Chapter Outline<br />
</span>
<a href="#lists">Lists</a> <br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#ops">Sequence operations on lists</a><br />
        
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#methods">List Methods</a><br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="range">The built-in <code>range</code> function</a><br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#copying">Copying Lists</a><br />
<a href="#tuples">Tuples</a><br />
<a href="#syntaxCheck">Syntax check and tracebacks</a><br />
<a href="#keyterms">Key terms</a><br />
<a href="#exercises">Exercises</a><br />
</span>
<br />
Python has built-in data types for managing collections of items, including lists, tuples, sets, dictionaries, to name a few. This chapter mainly focuses on lists, since these are ubiquitous in Python code. Tuples are also discussed briefly as well; We'll use these in the chapter on cursors. 
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">4.1 Lists</span> <a name="lists" id="lists"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>        GIS scripting frequently involves manipulating collections of items, such as  files or data records. For example, you might have multiple tabular data files with special characters in the fields preventing direct import into ArcGIS.  A script to replace the characters can use lists to hold the  file names and  
        field names. Then the files and fields can be batch processed. Batch processing is the key capability of scripting.  This chapter presents the core list concepts for solving GIS problems like this. A Python <em>list</em> is   a data type that holds a collection of  items. The items in a list are surrounded by square brackets and separated by commas. The syntax for a list assignment statement looks like this:</p>
<table width="812" border="0" bgcolor="#ffcccc">
<tr>
<th scope="row"><code>listVariable = [item1, item2, item3,...]</code></th>
</tr>
</table>
<p>In this example, <code>fields</code> is a Python list of field names from a comma separated value ('.csv') file containing 
        wildfire data:<br />
</p>
<p><code>&gt;&gt;&gt;<span class="n"> fields</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;FireId&#39;</span><span class="p">,</span> <span class="s">&#39;Org&#39;</span><span class="p">,</span> <span class="s">&#39;Reg-State&#39;</span><span class="p">,</span> <span class="s">&#39;FireType/ProtectionType&#39;</span><span class="p">]</span><br />
        &gt;&gt;&gt; fields<br />
</code><code><span class="n">['FireId', 'Org', 'Reg-State', 
        'FireType/ProtectionType']</span></code><br />
        &gt;&gt;&gt; type(fields)<br />
<code><span class="n">&lt;type 'list'&gt;</span></code><br />
<br />
        All of the items in the <code>fields</code> list are strings, but a list can hold items  of varying data types. For example, a list can contain numbers, strings and other lists. The 'stateData' list assigned here contains a string, a list, and 
        an integer:<br />
</p>
<p><code>&gt;&gt;&gt;<span class="n"> stateData</span> <span class="o">=</span> <span class="p">[</span> <span class="s">'Florida'</span><span class="p">,</span> <span class="p">[</span><span class="s">'Alabama'</span><span class="p">,</span> <span class="s">'Georgia'</span> <span class="p">],</span> <span class="mi">18809888</span> <span class="p">]</span><br />
</code></p>
<p>This list contains both numeric and string items:<br />
</p>
<p><code>&gt;&gt;&gt;<span class="n"> exampleList</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10000</span><span class="p">,</span> <span class="s">'a'</span><span class="p">,</span> <span class="mf">1.5</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'banana'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">,</span> <span class="s">'double rainbow'</span><span class="p">]</span><br />
</code></p>
<p>You can also create an empty list by assigning empty square brackets to a variable, as in this example:<br />
</p>
<p><code>&gt;&gt;&gt;<span class="n"> dataList</span> <span class="o">=</span> <span class="p">[</span> <span class="p">]</span><br />
</code></p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><strong><span class="head">4.1.1 Sequence operations on lists</span><a name="ops" id="introduction5"></a></strong></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Lists, like strings are  one of the sequence data types in Python.  The sequence operations discussed in the context of string data types also apply to lists--the length of a list can be found, lists can be indexed, sliced, and concatenated, and you can check if an item is a member of a 
        list. Table 4.2 shows sample code and output for each of these operations. </p>
<table bgcolor="#EEEEEE" border="0" bordercolor="#ece9d8" width="779">
<tbody>
<tr>
<td scope="row"><p><strong>Table 4.2: </strong>Sequence Operations on Lists<br />
<br />
<code><br />
&gt;&gt;&gt;<span class="n"> exampleList</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10000</span><span class="p">,</span> <span class="s">'a'</span><span class="p">,</span> <span class="mf">1.5</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'banana'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">,</span> <span class="s">'double rainbow'</span><span class="p">]</span><br />
</code></p>
<table width="732" border="3">
<tr>
<td width="130"><strong>Operation</strong></td>
<td width="260"><strong>Sample code</strong></td>
<td width="316"><strong>Return value </strong></td>
</tr>
<tr>
<td>length</td>
<td><code>len(exampleList)</code></td>
<td><p><code>7</code><br />
</p></td>
</tr>
<tr>
<td>indexing</td>
<td><code>exampleList[6]</code></td>
<td><code>'double rainbow'</code></td>
</tr>
<tr>
<td>slicing</td>
<td><code>exampleList[</code><code><span class="n">2:4</span></code>]</td>
<td><code>[1.5, 'b']</code><br /></td>
</tr>
<tr>
<td>concatenation</td>
<td><code>exampleList + exampleList</code> </td>
<td><code>[10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow', 10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow']</code></td>
</tr>
<tr>
<td>membership</td>
<td><code>'prune' in exampleList </code></td>
<td><p><code>False</code><br />
</p></td>
</tr>
</table></td>
</tr>
</tbody>
</table>
<p>The operations work on list items just like they work on string characters; however, lists are mutable. This means that indexing can also be used to <em>change</em> the value of an item in the list. Recall that strings are immutable and trying to change an indexed character in a  string returns an error. In the following example, a list is created, then on the second line, an indexed list item is modified. The last line in the example shows that the first item in the list has been changed:<br />
</p>
<p><code>&gt;&gt;&gt;<span class="n"> exampleList</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10000</span><span class="p">,</span> <span class="s">'a'</span><span class="p">,</span> <span class="mf">1.5</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'banana'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">,</span> <span class="s">'double rainbow'</span><span class="p">] </span><span class="comment">#creating the list</span><br />
        &gt;&gt;&gt;<span class="n"> exampleList</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;prune&#39; </span><span class="comment"># modifying the first item in the list.</span><br />
        &gt;&gt;&gt; exampleList<br />
        ['prune', 'a', 1.5, 'b', 'banana', 'c', 'double rainbow']
      </code></p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><strong><span class="head">4.1.2 List methods</span></strong></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Also like strings, list objects have a specific set of methods associated with them including <code>append</code>, <code>extend</code>, <code>insert</code>, <code>remove</code>, <code>pop</code>, <code>index</code>, <code>count</code>, <code>sort</code>, and <code>reverse</code>.  For a complete description of each, search  Guido Van Rossum's Python
        Tutorial for the 'More on lists' section.   Like  string methods, list methods use the
        dot notation:</p>
<table width="812" border="0" bgcolor="#ffcccc">
<tr>
<th scope="row"><code>object.method(arguments1, argument2, argument3,...)</code></th>
</tr>
</table>
<p>There is one notable difference between list and string methods that relates to mutability. Many list methods are in-place methods.  <em>In-place methods</em> are those methods which change the object that calls them.  
        Whereas, other  methods do not alter the object that calls them; Instead, they return a value. In-place list methods can change the list itself. In-place list methods such as append, extend, reverse, and sort do not  use an assignment 
        statement to propagate the new list. The example below creates a  <code>fireIDs</code> list and   appends a new id to end of the list using the  <code>append</code> method with the new id as the argument: </p>
<p><code>&gt;&gt;&gt;<span class="n"> fireIDs</span> <span class="o">=</span> <span class="p">[</span> <span class="s">'238998'</span><span class="p">,</span> <span class="s">'239131'</span><span class="p">,</span> <span class="s">'239135'</span><span class="p">,</span> <span class="s">'239400'</span><span class="p">]</span> <span class="comment"># initialize the list with 4 IDs.</span><br />
        &gt;&gt;&gt; newID <span class="o">=</span> <span class="s">'239413'</span><br />
        &gt;&gt;&gt; <span class="n">fireIDs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">newID</span><span class="p">)</span> <span class="comment"># Changing the list in-place</span>.<br />
        &gt;&gt;&gt; fireIDs<br />
        ['238998', '239131', '239135', '239400', 
        '239413']<br />
        &gt;&gt;&gt;
        <span class="comment"># New value was appended to the end of the list, which now holds 5 IDs.</span><br />
</code></p>
<p>Since <code>append</code> is an in-place method, the original list is modified, in-place. In contrast, the   list method named 'count' is not an in-place method. It does not alter the list, but returns a value instead. The following example creates a  <code>fireTypes</code> list and determines the number of code 11 fires that had
      occurred, using the <code>count </code> method:<a name="range" id="introduction4"></a></p>
<p><code><span class="n">&gt;&gt;&gt; fireTypes</span> <span class="o">=</span> <span class="p">[</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">16</span> <span class="p">]</span><br />
<span class="n">&gt;&gt;&gt; countResults</span> <span class="o">=</span> <span class="n">fireTypes</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="mi">11</span><span class="p">)<br />
</span>&gt;&gt;&gt; <span class="k">print</span> <span class="n">countResults</span><br />
<span class="mi">4 </span><span class="comment"># The list contains 4 elevens.</span><br />
&gt;&gt;&gt; fireTypes <span class="comment"># Note that the list contents are unchanged</span>:<br />
</code><code><span class="n">[ 16, 13, 16, 6, 17, 16,   6,
        
        11, 11,  12,
        14,
        13,
        11, 13,
        13, 13, 11, 15,  16 ]</span></code><br />
</p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><strong><span class="head">4.1.3 The built-in <code>range</code> function</span><a name="range" id="range"></a></strong></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>The built-in <code>range</code> function is a convenient way to generate numerical lists which can be useful for  batch processing related tasks.  The <code>range</code> function takes one to three numerical arguments and returns a list of numbers. If you pass in one  numerical argument, <code>n</code>, it returns a Python list containing the integers <code>0</code> through  <code>n - 1</code>, as in the following example:<br />
<br />
<code>&gt;&gt;&gt;<span class="nb"> range</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span><br />
</code><code><span class="n">[0, 1, 2, 3, 4, 5, 6, 7, 8]</span></code><br />
</p>
<p>By using a second argument, you can modify the lower bound:<br />
<code><br />
        &gt;&gt;&gt;<span class="nb"> range</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">9</span><span class="p">)</span><br />
</code><code><span class="n">[5, 6, 7, 8]</span></code><br />
<br />
        By using a third argument, can change the step size: <br />
<code><br />
        &gt;&gt;&gt; <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><br />
</code><code><span class="n">[0, 2, 4, 6, 8]</span></code><br />
<br />
        The <code>range</code> function is used again in a later chapter to create numeric lists for looping.</p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">4.1.4 Copying a list</span></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>In-place methods like <code>reverse</code> and <code>sort</code> alter the order of the list. For example, here the <code>reverse</code> method reverses the order of the <code>fireIDs</code> list:</p>
<p><code>&gt;&gt;&gt;<span class="n"> fireIDs</span> <span class="o">=</span> <span class="p">[</span> <span class="s">&quot;238998&quot;</span><span class="p">,</span> <span class="s">&quot;239131&quot;</span><span class="p">,</span> <span class="s">&quot;239135&quot;</span><span class="p">,</span> <span class="s">&quot;239400&quot;</span><span class="p">]</span><br />
        &gt;&gt;&gt;<span class="n"> fireIDs</span><span class="o">.</span><span class="n">reverse</span><span class="p">(</span> <span class="p">)</span><br />
        &gt;&gt;&gt; fireIDs<br />
</code><code><span class="n">['239400', '239135', '239131', 
        '238998']</span></code><br />
</p>
      In some cases, it may be necessary to keep a copy of the list in its original order. Python variables can be thought of as tags attached to objects. Because of this, there are two types of copy operations for objects: shallow copies and deep copies. A <em>shallow copy</em> attaches two tags to the same list object. A <em>deep copy</em> attaches each tag to a separate list object.  The assignment statement shown in the following example doesn't work as you might intuitively expect. Python list <code>a</code> is copied to list <code>b</code> but both the lists are reversed when <code>a</code> is reversed. This is a shallow copy:<br />
<code><br />
      &gt;&gt;&gt;<span class="n"> a</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">11</span><span class="p">)</span><br />
      &gt;&gt;&gt; a<br />
</code><code><span class="n">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></code><br />
      &gt;&gt;&gt; b <span class="o">=</span> a <span class="comment"># &quot;shallow copy&quot; list a<br />
</span> &gt;&gt;&gt; <span class="key"></span>b<br />
<code><span class="n">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></code><br />
      &gt;&gt;&gt; a.reverse( ) <span class="comment"># reverse list a</span><br />
      &gt;&gt;&gt; a<br />
<code><span class="n">[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]</span></code><br />
      &gt;&gt;&gt; b<br />
<code><span class="n">[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]</span></code> <span class="comment"># list b is also reversed</span><br />
<br />
<br />
<img src="../images/lists1.png" width="318" height="135" /><br />
<br />
<p> Both tags <code>a</code> and <code>b</code> are pointing to the same object. Instead, we need to create a second object via a deep copy to retain a copy of the list in its original order. To do this we need to create a new   list and  attach the <code>b</code> tag to it. The built-in <code>list</code> function constructs a new list object based on a list given as an argument. This built-in function is used to create a deep copy in the next example. <code>list(a)</code> constructs a new <code>list</code> object and this is assigned to <code>b</code>. In the end, <code>a</code> is reversed, but <code>b</code> retains the original order:</p>
<p><code>&gt;&gt;&gt;<span class="n"> a</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">11</span><span class="p">)</span><br />
        &gt;&gt;&gt; a<br />
</code><code><span class="n">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></code><br />
        &gt;&gt;&gt;<span class="n"> b</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">a</span><span class="p">) </span><span class="comment"># &quot;deep copy&quot; list a<br />
</span> &gt;&gt;&gt; <span class="key"></span>b<br />
<code><span class="n">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></code><br />
        &gt;&gt;&gt; a.reverse( ) <span class="comment"># reverse list a</span><br />
        &gt;&gt;&gt; a<br />
<code><span class="n">[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]</span></code><br />
        &gt;&gt;&gt; b<br />
<code><span class="n">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></code> <span class="comment"># list b is not reversed</span><br />
<br />
<img src="../images/lists2.png" width="314" height="208" /><br />
</p>
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">4.2 Tuples</span> <a name="tuples" id="introduction2"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>A <em>tuple</em> is another Python data type for holding a collection of items. A tuple is a set of comma separated items, but round brackets (parentheses) are used instead of square brackets. When a tuple is printed, it is surrounded by parentheses.  
        A tuple can  be created with or without parentheses around the items: </p>
<p><code>&gt;&gt;&gt; <span class="n">t</span> <span class="o">=</span> <span class="s">&quot;abc&quot;</span><span class="p">,</span> <span class="mi">456</span><span class="p">,</span> <span class="s">&#39;wxyz&#39;</span> <br />
        &gt;&gt;&gt; <span class="nb">type</span><span class="p">(</span><span class="n">t</span><span class="p">)</span><br />
</code><code><span class="n">&lt;type 'tuple'&gt;</span></code><br />
        &gt;&gt;&gt; t<br />
<code><span class="n">('abc', 456, 'wxyz')</span></code><br />
<br />
        &gt;&gt;&gt; <span class="n">t2</span> <span class="o">=</span> <span class="p">(</span> <span class="mf">4.5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mf">0.3</span><span class="p">)</span> <br />
        &gt;&gt;&gt;<span class="nb"> type</span><span class="p">(</span><span class="n">t2</span><span class="p">)</span><br />
<code><span class="n">&lt;type 'tuple'&gt;</span></code><br />
        &gt;&gt;&gt; t2<br />
<code><span class="n">(4.5, 7, 0.3)</span></code><br />
</p>
<p>Like strings, tuples items can be indexed but they are not mutable. It is not possible to assign individual items of a tuple with indexing:<br />
<code><br />
        &gt;&gt;&gt;<span class="n"> t</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><br />
</code><code><span class="n">'abc'</span></code><br />
        &gt;&gt;&gt;<span class="n"> t</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><br />
<span class="mi">456</span><br />
        &gt;&gt;&gt; <span class="n">t2</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><br />
<span class="mi">4.5</span><br />
        &gt;&gt;&gt; <span class="n">t2</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> 5<br />
<span class="err">Traceback (most recent call last):<br />
        File &quot;&lt;interactive input&gt;&quot;, line 1, in &lt;module&gt;<br />
        TypeError: 'tuple' object does not support item assignment</span><br />
</p>
<p>Tuples are used in situations where immutability is desirable. For example, they are often used for (x,y,z) point coordinates or for holding the set of items in a data record.</p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">4.3 Syntax check and tracebacks</span><a name="syntaxCheck" id="introduction3"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Most of the  examples in the book until this point have used the Interactive Window to explain the basic Python components. In upcoming chapters we will begin to write complete scripts.  Before we do so, it will be useful to become  familiar with syntax checking in PythonWin. Chapter 2  discussed examples of errors, tracebacks, and exceptions thrown by interactive input. Now we'll compare  interactive input error handling to script window error handling.</p>
<p align="left"> The Interactive Window automatically gives you immediate feedback in the form of a traceback message when you enter code that contains a syntax error, because it evaluates (runs) the code when you enter it. For example, a traceback message is printed, because of the following code, in which the <code>print</code> keyword is misspelled as  <code>pirnt </code>:<br />
<code><br />
        &gt;&gt;&gt; pirnt test<br />
<span class="err">Traceback (  File &quot;&lt;interactive input&gt;&quot;, line 1<br />
        pirnt test<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^<br />
        SyntaxError: invalid syntax</span><br />
</code><br />
        When you enter code in a PythonWin script window, you don't automatically receive immediate feedback as you're writing, but you can trigger syntax checking when you're ready by clicking a button.  The PythonWin syntax checker is similar to a word processing spelling checker.  The 'check' button, the one with the checkmark, on the PythonWin standard toolbar checks the syntax without executing the code.  It finds syntax errors, such as incorrect indentation, misspelling of keywords, and missing punctuation. </p>
<p><img src="../images/check_pythonwin.jpg" alt="check syntax in Pythonwin" width="444" height="81" /><br />
        Figure 4.1: The 'check' button checks the syntax of the current script.</p>
<p>The feedback panel in the lower left corner of PythonWin shows the result of the check. If an error is detected, the feedback panel  says &quot;Failed to check - syntax error - invalid syntax&quot; as shown in Figure 4.1. The cursor jumps to a position  near to the first syntax error it detects in the script, usually the same line or the line following the erroneous line. To try this yourself,</p>
<ol>
<li> Create a new script with one line of code as shown in Figure 4.2. </li>
<li>The check button is disabled (grayed out <img src="../images/checkButton1.png" alt="checkbutton" />). You can't check the syntax until the script has been saved at least once. Save the script in 'C:\gispy\scratch' as script 'test.py'. </li>
<li>Click in the 'test.py' script window to make sure your window focus is there and not in the Interactive Window. </li>
<li>Now click the 'check' button <img src="../images/checkButton2.png" alt="checkbutton" />, which became enabled when the script was saved.</li>
<li> Observe the feedback panel and the cursor (see Figure 4.2).  The feedback panel says  <code>Failed to check - syntax error - invalid syntax</code> and the  cursor has jumped to the erroneous line. It can't detect exactly what's wrong, so it gives this generic message and moves the cursor near to where it detects an error.<br />
<img src="../images/syntax_error.png" alt="syntax checker" width="326" height="349" />&nbsp;&nbsp;&nbsp;&nbsp;<br />
          Figure 4.2: Syntax checker finds an error. <br />
<br />
</li>
<li>Next click the 'Run' button <img src="../images/running_man.png" alt="the run button" width="24" border="1" height="23" /> to see if it will run. The feedback shows a syntax error message --&quot;Failed to <em>run script...</em>&quot; (Figure 4.3).  If you overlook the feedback panel, it may seem  as if the program is not responding to the 'Run' button click. Check the feedback panel whenever you run a script. <br />
<img src="../images/syntax_error2.png" /><br />
          Figure 4.3: Script fails to run. <br />
<br />
</li>
<li> The script will not run until the syntax errors are repaired; Repair the syntax error--change  'pirnt' to 'print'.</li>
<li>Click the 'check' button again.</li>
<li>The feedback bar reports success: &quot;Python and TabNanny successfully checked the file&quot; (Figure 4.4). The TabNanny, specialized program for checking indentation is run as part of the syntax checking process.<br />
<img src="../images/syntax_error3.png" width="329" height="348" /><br />
          Figure 4.4: Successful syntax check.<br />
<br />
</li>
<li>A successful syntax check does not necessarily mean that the code is free of errors. Click the 'Run' button now that the syntax has been corrected. The feedback panel reports that an exception was raised. This time a traceback error is printed in the Interactive Window (Figure 4.5) because the error was only detected when the script ran, not during the syntax checking phase. <br />
<img src="../images/syntax_error4.png" /> <br />
          Figure 4.5: Exception raised. </li>
</ol>
<p> The syntax check can only detect errors that violate certain syntax rules. Some errors can only be detected when Python attempts to run the code and then an error message appears in the feedback panel when it reaches a problem. When Python tries to print <code>test</code>, it throws an exception and prints a traceback message. A script traceback differs slightly from  interactive input traceback because the message traces the origin of the error. </p>
<p>Entering the code from 'test.py' in the Interactive Window prints the following traceback:<br />
<code><br />
        &gt;&gt;&gt; <span class="key">print</span> test <br />
<span class="err">Traceback (most recent call last):<br />
        File &quot;&lt;interactive input&gt;&quot;, line 1, in &lt;module&gt;<br />
        NameError: name 'test' is not defined</span><br />
</code></p>
<p>Whereas, the traceback   message in Figure 4.5 thrown by running 'test.py' reads as follows:<br />
<code><br />
        &gt;&gt;&gt; <span class="err">Traceback (most recent call last):<br />
        File &quot;C:\Python27\ArcGIS10.1\Lib\site-packages\pythonwin\pywin\framework\scriptutils.py&quot;, line 326, in RunScript<br />
        exec codeObject in __main__.__dict__<br />
        File &quot;C:\gispy\scratch\test.py&quot;, line 1, in &lt;module&gt;<br />
        print test<br />
        NameError: name 'test' is not defined</span><br />
</code></p>
<p>In many cases, the most pertinent information appears near the end of the traceback. The last line  names the exception (<code>NameError</code>) and describes the error (name <code>test</code> is not defined). The last line of both the interactive traceback and the script window traceback are identical, but the preceding lines indicate the location of the error. In one case, this is <code>&lt;interactive input&gt;</code>. <br />
<br />
<code><span class="err">File &quot;&lt;interactive input&gt;&quot;, line 1, in &lt;module&gt;</span><br />
</code></p>
<p>In the other case, the line of code is printed beneath the location of the line of the script which caused the error (line 1 of test.py).<br />
<code><br />
<span class="err">File &quot;C:\gispy\scratch\test.py&quot;, line 1, in &lt;module&gt;<br />
        print test</span><br />
</code></p>
<p>Python keeps track of a call stack. The top of the stack has the script you've written. Next comes a script that your script has triggered to run. The traceback prints the stack, printing the line of code that was triggered and the name of the script. The bottom of the stack has the Python program that runs the scripts ('scriptutils.py'). In the case of this example, there are only two scripts in the stack--'test.py' and 'scriptutils.py'. These lines show the line of code and that was triggered in scriptutils.py:<br />
<br />
<code><span class="err">File &quot;C:\Python27\ArcGIS10.1\Lib\site-packages\pythonwin\pywin\framework\scriptutils.py&quot;, line 326, in RunScript<br />
        exec codeObject in __main__.__dict__<br />
</span></code></p>
<p>We can  ignore this part of the traceback. The only part of the stack that is interesting for our purposes is the line of code which we wrote that caused the error. This is why we focus mainly on the last few lines of the message. Traceback messages print the script line number where the error occurred. The examples in the upcoming chapters of this book usually report only a portion of tracebacks.</p>
<table width="779" border="3" bgcolor="#CEDAE3">
<tr>
<td width="765" height="76"><blockquote>
<p>To show line numbers in PythonWin: <br />
                Tools menu &gt; Options...&gt; Editor tab &gt; Set &quot;Line Numbers&quot; Margin Width  &gt;= 30 pixels.</p>
<p>To show line numbers in PyScripter:<br />
              Tools &gt; Options &gt; Editor Options &gt; Display &gt; Gutter: check 'Visible' and 'Show line numbers'.</p>
</blockquote></td>
</tr>
</table>
<p>These examples show that the Interactive Window prints a traceback message immediately when you enter erroneous code because the code is evaluated immediately; Whereas, script window code is only checked when you use the syntax check button or try to run the code.  If a syntax error is found in a script, the feedback bar reports an error and the cursor moves near to the first detected error. Some errors are not detectable by the syntax check. These errors stop the script from running and print traceback messages in the Interactive Window. The traceback, read from bottom to top, names the exception, describes the error, and prints the erroneous line and the line number in the script where it was found. In summary, checking syntax, showing line numbers, and reading tracebacks will help you build working scripts as you progress through the upcoming chapters.</p>
<table width="779" border="3" bgcolor="#CEDAE3">
<tr>
<td width="765" height="76"><blockquote>
<p>Always check the feedback panel and the Interactive Window when you run a script in PythonWin.</p>
</blockquote></td>
</tr>
</table>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><b class="head">4.4 Key terms</b><a name="keyterms" id="keyterms2"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p> <code>List </code> data type<br />
        in-place method<br />
        mutable vs. immutable<br />
        shallow copy vs. deep copy<br />
        built-in  <code>list</code> function<br />
        Sequence operations (length, indexing, concatenation, slicing, membership)<br />
        List methods<br />
        'Tuple' data type</p>
<hr />
<table width="775" border="0">
<tbody>
<tr>
<th width="684" height="28" align="left" scope="row"><p class="head">4.5 Exercises<a name="exercises" id="exercises"></a></p></th>
<td width="81" align="right"><p><a href="#top">back to top</a></p></td>
</tr>
</tbody>
</table>
<br />
<ol>
<li> Practice interpreting exceptions and diagnosing errors as you follow the given steps. Then answer the follow-up questions.
          <table border="1" cellpadding="2" cellspacing="2" bgcolor="#ffffcc" style="text-align: left; width: 412px; height: 30px;">
<tbody>
<tr>
<td nowrap="nowrap" style="vertical-align: top;"><code><br />
<span class="comment"># addWithErrors.py <br />
                  # Purpose: 
                  Demonstrate exceptions within a script<br />
                  # What the script should do when fixed:
                  add two numbers
                  given as arguments.</span><br />
<br />
<span class="key">iport</span> sys <span class="comment"># Import  sys, so that the script can use this built-in Python module.<br />
</span><br />
<span class="n">a</span> <span class="o">=</span> <span class="n">sys.argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="c"># Get the 1st argument from the user and cast it to float</span>.<br />
<span class="n">b</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys.argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="c"># Get the 2nd argument from the user and cast it to float.</span><br />
<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><br />
<span class="k">print</span> <span class="n">The</span> <span class="nb">sum</span> <span class="ow">is</span> <span class="p">{</span><span class="mi">0</span><span class="p">}</span><span class="o">.</span><span class="s">&quot;.format(c)</span><br />
</code></td>
</tr>
</tbody>
</table>
<ol type="a">
<li> Open 'addWithErrors.py' and save  it as 'addWithOutErrors.py'. This script is like 'add_version2.py' from Chapter 2, but several errors have been introduced.</li>
<li>Run the syntax check.<br />
              The feedback panel says: &quot;Failed to check - syntax error - invalid syntax&quot; and the cursor jumps to line 5. In the steps below, you'll see that there are several errors, but the code is evaluated from top to bottom, so the cursor jumps to the first error Python detects. Do you see a problem on that line?<br />
</li>
<li>The keyword 'import' is misspelled Replace 'iport' with 'import'.</li>
<li>Run the syntax check.<br />
              The feedback panel says:  <code>&quot;Failed to check - syntax error - invalid syntax&quot; </code> and now the cursor jumps to line 9. (Now line 9 is the first place an error is detected).</li>
<li>But there's nothing wrong with line 9! Can you find the error is on the previous line? The closing parenthesis is missing on line 8. The cursor jumps to line 9 because Python detected an assignment statement before the parentheses were closed. Until it reached line 9, it didn't detect that there was anything wrong.<br />
              Add ')' just before the comment on line 8. So that it looks like this:<br />
<code><span class="n">b</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys.argv</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span> <span class="comment"> # Get the ...</span> </code></li>
<li>Run the syntax check.<br />
              The feedback panel says: &quot;Failed to check - syntax error - invalid syntax&quot; and the cursor jumps to line 10. Do you see the syntax error on line 10? <br />
</li>
<li>Line 10 is missing a quotation mark on the string. Add a quotation mark (&quot;) after the <code>print</code>  keyword and the text colors change so that  they looks like this:<br />
<code><span class="k">print</span> <span class="s">&quot;The sum is {0}.&quot;</span><span class="o">.</span>format<span class="p">(</span>c<span class="p">)</span> </code></li>
<li>Run the syntax check. <br />
              The feedback panel says: &quot;Python and TabNanny successfully checked the file&quot;. All the detectable syntax errors have been corrected, so the script can be run.</li>
<li>Run the script with no arguments by clicking the 'Run' button. The following traceback message is printed:<br />
<code><span class="err"><br />
              File &quot;C:\gispy\scratch\addWithOutErrors.py&quot;, line 7, in &lt;module&gt;<br />
              a = sys.argv[1] # Get the 1st argument from the user and cast it to float.<br />
              IndexError: list index out of range</span></code><br />
</li>
<li>The traceback message says an <code>IndexError</code> occurred on line 7 of 'addWithOutErrors.py'. In this case, the traceback is generated because we didn't provide any user arguments. Index 1 is out of range, because no script arguments were used.</li>
<li>Run the code with arguments 3 and 8. The following traceback message is printed:<span class="err"><br />
              File &quot;C:\gispy\scratch\addWithOutErrors.py&quot;, line 9, in &lt;module&gt;<br />
              c = a + b<br />
              TypeError: cannot concatenate 'str' and 'int' objects</span></li>
<li>The traceback message says a <code>TypeError</code> occurred on line 9 of our script. It says it cannot concatenate a string object with an integer object. When you get a type error, it's useful to check the type of the variables using the built-in type function, to see if they are the data type that you expect them to be. Check the data types of 'a' and 'b' in the Interactive Window using the built-in <code>type</code> function:<br />
<code><br />
              &gt;&gt;&gt; <span class="nb">type</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <br />
<span class="n">&lt;type 'str'&gt;</span><br />
              &gt;&gt;&gt; <span class="nb">type</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <br />
<span class="n">&lt;type 'int'&gt;</span></code><br />
<br />
</li>
<li><code>a</code> is a string because arguments are strings unless they are cast to another type. <code>b</code> is cast to integer. Cast <code>a</code> to integer too by changing line 7 to look like this:<br />
<code><br />
<span class="n">a</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys.argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span></code><br />
<br />
</li>
<li>Run the script again. The feedback bar says &quot;Script File 'C:\gispy\scratch\addWithoutErrors.py' returned exit code 0&quot; and the following prints in the Interactive Window.<br />
<br /><code>
            &gt;&gt;&gt; The sum is 11. </code><br />
<br />
            This is good news. It means the script ran to completion without throwing any exceptions.<br />
<br />
</li>
</ol>
          Follow-up questions:<br />
<ol type="i">
<li> What does the cursor do when you use the syntax checker and a syntax error occurs? Specifically, where does it go?</li>
<br />
<li>How does PythonWin display a quotation mark that's missing its partner (the mark on the other end of the string literal)?</li>
<br />
<li>When you use your mouse to select a parenthesis that has a matching partner, how does PythonWin display the parentheses?</li>
<br />
<li>When  you use your mouse to select a parenthesis that does not have a matching partner, how does PythonWin display the parenthesis?</li>
<br />
<br />
</ol>
</li>
<li>The Python statements on the left use operations involving the list type variable <code>places</code><em>. </em>Match the Python 
          statement with its output. All answers MUST BE one of the letters A 
          through I. If you think the answer is not there, you're on the wrong 
          track! The list variable named <code>places</code> is assigned as 
          follows: <br />
<code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />
<span class="n">places</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;roads&quot;</span><span class="p">,</span> <span class="s">&quot;cities&quot;</span><span class="p">,</span> <span class="s">&quot;states&quot;</span><span class="p">]</span> <br />
</code><br />
<br />
<table width="634" border="3">
<tbody>
<tr>
<td width="301">Python statement </td>
<td width="313">Output (notice there are 9 letters) </td>
</tr>
<tr>
<td><ol>
<li><code>places[0]</code><br />
<br />
</li>
<li><code>places[0:2] + places[-3:]</code><br />
<br />
</li>
<li><code>places[0][0]</code><br />
<br />
</li>
<li><code>len(places)</code><br />
<br />
</li>
<li><code>places[0:5]</code><br />
<br />
</li>
<li><code>places[-4:]</code><br />
<br />
</li>
<li><code>places[11]</code><br />
<br />
</li>
<li><code>places[:2]</code><br />
<br />
</li>
<li><code>'towns' in places</code><br />
<br />
</li>
<li><code>places[1]</code></li>
</ol> </td>
<td><ol type="A">
<li><code>3</code><br />
<br />
</li>
<li><code>&quot;roads&quot;</code><br />
<br />
</li>
<li><code>IndexError</code><br />
<br />
</li>
<li><code>['roads', 'cities']</code><br />
<br />
</li>
<li><code>['roads', 'cities', 'states']<br />
</code><br />
</li>
<li><code>['roads', 'cities', 'roads', 'cities', 'states']</code><br />
<br />
</li>
<li><code>False</code><br />
<br />
</li>
<li><code>'r'</code><br />
<br />
</li>
<li><code>'cities'</code></li>
</ol> </td>
</tr>
</tbody>
</table>
<br />
<br />
</li>
<li>The Python statements on the left use list
          methods  and operations (and one string method) involving 
          the list type variable <code>census</code><em>. </em>Match the Python statement with the 
          resulting value of the <code>census</code> variable. Consider these as 
          individual statements, not cumulative. In other words, reset the value 
          of <code>census</code> to its original value between each command. All 
          answers MUST BE one of the letters A through G. <strong>Notice that the question
          asks for matching the Python statement with the  resulting value of the 
          <code>census</code> variable and not matching the  function with the value 
          it returns. If you think the answer is not there, you're on the wrong 
          track!</strong> <br />
          The list variable called 'census' is assigned as 
          follows: <br />
<code><br />
          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;census = 
          ['4', '3', '79', '1', '66', '9', '1']<br />
</code><br />
<table width="573" border="3">
<tbody>
<tr>
<td width="252">Python statement </td>
<td width="301">Resulting value of census (there are 
                  only 7 letters) </td>
</tr>
<tr>
<td><ol>
<li><code>len(<span class="n"> census </span>)</code></li>
<li> <code><span class="n">census</span><span class="o">.</span><span class="n">insert</span>( 0, 2)</code></li>
<li><code> <span class="n">census</span><span class="o">.</span><span class="n">append</span>( 2 )</code></li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">remove</span>('1')<span class="p"></span></code> </li>
<li><code><span class="n">census</span> <span class="o">=</span> <span class="s">&#39;0&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n"> census </span><span class="p">)</span></code></li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi"> 3</span> <span class="p">)</span></code></li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="s"> &#39;1&#39; </span><span class="p">)</span></code>r </li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span> <span class="p">)</span></code> </li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">reverse</span><span class="p">(</span> <span class="p">)</span></code> <br />
</li>
</ol> </td>
<td><ol type="A">
<li><code>[2, '4', '3', '79', '1', '66', '9', '1']</code><br />
<br />
</li>
<li><code>['1', '1', '3', '4', '66', '79', '9']</code><br />
<br />
</li>
<li><code>['4', '3', '79', '66', '9', '1']</code><br />
<br />
</li>
<li><code>['4', '3', '79', '1', '66', '9', '1']</code><br />
<br />
</li>
<li><code> '403079010660901'</code><br />
<br />
</li>
<li><code>['1', '9', '66', '1', '79', '3', '4']</code><br />
<br />
</li>
<li><code>['4', '3', '79', '1', '66', '9', '1', 2]</code><br />
</li>
</ol></td>
</tr>
</tbody>
</table>
<br />
</li>
<li>Answer these three questions related to difference between in-place methods and methods that return a value. <br />
<ol type="a">
<li>What is the value of the variable <code>census</code><em> </em>after all of these statements 
              are executed?<br />
<code><br />
              &gt;&gt;&gt; <span class="n">census</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">79</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span> <br />
              &gt;&gt;&gt; <span class="n">census</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span> <span class="p">)</span> <br />
              &gt;&gt;&gt; <span class="n">census</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span> <span class="p">)</span> <br />
              &gt;&gt;&gt; <span class="n">census</span><span class="o">.</span><span class="n">reverse</span><span class="p">(</span> <span class="p">)</span><br />
</code><br />
<ol type="i">
<li><code>[4, 3, 79, 1, 66, 9, 1]</code></li>
<li><code>[79, 66, 9, 4, 3, 1, 1]</code></li>
<li><code>[79, 66, 9, 4, 3, 1]</code></li>
<li><code>[66, 9, 4, 3, 1, 1]</code><br />
</li>
</ol>
<br />
</li>
<li>What is the value
              of the variable <code>happySheep</code> after ALL of these 
              statements are executed? Hint: if you think the correct answer is not there, 
              you're on the wrong track.<br />
<code><br />
              &gt;&gt;&gt; <span class="n">happySheep</span> <span class="o">=</span> <span class="s">&quot;knoll.shp&quot;</span> <br />
              &gt;&gt;&gt; <span class="n">happySheep</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;ll&#39;</span><span class="p">,</span> <span class="s">&#39;ck&#39;</span><span class="p">)</span> <br />
              &gt;&gt;&gt; <span class="n">happySheep</span><span class="o">.</span><span class="n">upper</span><span class="p">(</span> <span class="p">)</span><br />
              &gt;&gt;&gt; <span class="n">happySheep</span><span class="p">[:</span><span class="mi">4</span><span class="p">]<br />
</span></code> <br />
<ol type="i">
<li><code><span class="n">&quot;Knock.shp&quot;</span></code></li>
<li><code><span class="n">&quot;knoll.shp&quot;</span></code></li>
<li><code><span class="n">&quot;KNO&quot;</span></code></li>
<li><code><span class="n">&quot;KNOCK.SHP&quot;</span></code></li>
<br />
</ol>
</li>
<li>Use an example from parts a and b to explain what an in-place method does, as opposed to a method that only returns a value.<br />
<br />
</li>
</ol>
</li>
<li>Select the line or lines of code that set <code>listA</code> to <code>[0, 10, 20, 30, 40]</code>.<br />
<ol type="a">
<li><code><span class="n">listA</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span></code></li>
<li><code><span class="n">listA</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span></code></li>
<li><code><span class="n">listA </span><span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span></code></li>
<li><code><span class="n">listA</span><span class="o"> =</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">40</span><span class="p">)</span></code></li>
<li><code><span class="n">listA</span><span class="o"> =</span> <span class="nb">range</span><span class="p">(</span><span class="mi">40</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">10</span><span class="p">)</span></code></li>
<li><code><span class="n">listA</span><span class="o"> =</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">41</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span></code><br />
<br />
</li>
</ol>
</li>
<li>The Northeastern region fire data is a text file 
          containing a set of fields followed by records containing entries for 
          those fields.  The following lines of code use Python lists to store the field 
          names and the first data record: <br />
<code><br />
          &gt;&gt;&gt; fields <span class="o">=</span> <span class="p">[</span><span class="s">&quot;FireId&quot;</span><span class="p">,</span> <span class="s">&quot;Org&quot;</span><span class="p">,</span> <span class="s">&quot;Reg-State&quot;</span><span class="p">,</span> <span class="s">&quot;FireType/ProtectionType&quot;</span><span class="p">]</span> <br />
          &gt;&gt;&gt; record <span class="o">=</span> <span class="p">[</span><span class="s">&quot;238998&quot;</span><span class="p">,</span> <span class="s">&quot;NPS&quot;</span><span class="p">,</span> <span class="s">&quot;Northeast&quot;</span><span class="p">,</span> <span class="s">&quot;11&quot;</span><span class="p">]</span> <br />
</code><br />
          Select the line(s) of code that use indexing to print the value of 
          the Reg-State field in the given record. <br />
<br />
<ol type="a">
<li><code><span class="key">print</span> fields[<span class="mi">3</span>]</code></li>
<li><code><span class="key">print</span> record[<span class="mi">1</span>:<span class="mi">3</span>]</code></li>
<li><code><span class="key">print </span>record[<span class="mi">2</span>]</code></li>
<li><code><span class="key">print</span> fields + records</code></li>
<li><code><span class="key">print</span> record[-<span class="mi">2</span>]</code><br />
<br />
</li>
</ol>
</li>
<li>The following code uses list methods and operations to find the minimum value of a list.  Write a line of code that does the same thing but uses a Python built-in function (with no dot notation).
          <p><code>&gt;&gt;&gt; fireTypes <span class="o">=</span> <span class="p">[</span><span class="mi">8</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">]</span> <span class="n"><br />
            &gt;&gt;&gt; 
            fireTypes</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span> <span class="p">)</span> <span class="c"># Sort the numeric list</span> <br />
            &gt;&gt;&gt; <span class="k">print</span> <span class="n">fireTypes</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="c"># Use indexing to print the minimum</span> 2<br />
</code></p>
</li>
<li>The following Interactive Window code samples use square braces in three 
          different ways. Use chapter Key terms to describe what each code statement is doing.<br />
<br />
<ol type="a">
<li><code>
              &gt;&gt;&gt;<span class="n"> theList</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;spam&#39;</span><span class="p">,</span> <span class="s">&#39;eggs&#39;</span><span class="p">,</span> <span class="s">&#39;sausage&#39;</span><span class="p">,</span> <span class="s">&#39;bacon&#39;</span><span class="p">,</span> <span class="s">&#39;spam&#39;</span><span class="p">]</span><br />
</code><br />
</li>
<li><code>
              &gt;&gt;&gt; <span class="n">theList</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><br />
<span class="n">'eggs'</span><br />
</code><br />
</li>
<li><code>
              &gt;&gt;&gt;<span class="n"> theList</span><span class="p">[:</span><span class="mi">3</span><span class="p">]</span><br />
<span class="n">['spam', 'eggs', 'sausage']</span></code> </li>
<br />
</ol>
</li>
<li>Answer the following questions about the traceback message shown below:
          <ol type="a">
<li>What is the name of the exception</li>
<li>What is the name of the script  containing the error? </li>
<li>Which line of the script contains the error? </li>
<li>Explain why this error might have occurred.<br />
<br />
</li>
</ol>
<code><span class="err">          Traceback (most recent call last):<br />
          File &quot;C:\Python27\ArcGIS10.2\Lib\site-packages\pythonwin\pywin\framework\scriptutils.py&quot;, line 326, in RunScript<br />
          exec codeObject in __main__.__dict__<br />
          File &quot;C:\gispy\sample_scripts\ch04\County.py&quot;, line 23, in &lt;module&gt;<br />
          District = sys.argv[5]<br />
          IndexError: list index out of range</span><br />
</code><br />
</li>
<li><strong>noMoreErrors.py</strong> The sample script named 'noMoreErrors.py' currently contains 5 errors. Modify the script to remove all  errors. As you remove errors, note whether the error resulted in a feedback bar message or a traceback message and note the message. Modify the last five lines of the script to report the error messages you encountered. The first two of these have been completed for you already.When the script is repaired, the first portion of the output will look like this (and error messages for #3-5 will also be printed): <br />
<code><span class="n"><br />
          NoMoreErrors.py<br />
          b<br />
          Mucca.gdb<br />
          Dyer20<br />
          DYER<br />
          #1. FEEDBACK BAR: Failed to check - syntax error - EOL while scanning string literal<br />
          #2. TRACEBACK: IndexError: string index out of range<br />
          ...</span><br />
</code><br />
</li>
</ol><a href="#top">back to top</a> <a href="#top">back to top</a> <p><strong>Table 4.2: </strong>Sequence Operations on Lists<br />
<br />
<code><br />
&gt;&gt;&gt;<span class="n"> exampleList</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10000</span><span class="p">,</span> <span class="s">'a'</span><span class="p">,</span> <span class="mf">1.5</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'banana'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">,</span> <span class="s">'double rainbow'</span><span class="p">]</span><br />
</code></p>
<table width="732" border="3">
<tr>
<td width="130"><strong>Operation</strong></td>
<td width="260"><strong>Sample code</strong></td>
<td width="316"><strong>Return value </strong></td>
</tr>
<tr>
<td>length</td>
<td><code>len(exampleList)</code></td>
<td><p><code>7</code><br />
</p></td>
</tr>
<tr>
<td>indexing</td>
<td><code>exampleList[6]</code></td>
<td><code>'double rainbow'</code></td>
</tr>
<tr>
<td>slicing</td>
<td><code>exampleList[</code><code><span class="n">2:4</span></code>]</td>
<td><code>[1.5, 'b']</code><br /></td>
</tr>
<tr>
<td>concatenation</td>
<td><code>exampleList + exampleList</code> </td>
<td><code>[10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow', 10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow']</code></td>
</tr>
<tr>
<td>membership</td>
<td><code>'prune' in exampleList </code></td>
<td><p><code>False</code><br />
</p></td>
</tr>
</table><strong>Operation</strong><strong>Sample code</strong><strong>Return value </strong>length<code>len(exampleList)</code><p><code>7</code><br />
</p>indexing<code>exampleList[6]</code><code>'double rainbow'</code>slicing<code>exampleList[</code><code><span class="n">2:4</span></code>]<code>[1.5, 'b']</code><br />concatenation<code>exampleList + exampleList</code> <code>[10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow', 10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow']</code>membership<code>'prune' in exampleList </code><p><code>False</code><br />
</p><a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <blockquote>
<p>To show line numbers in PythonWin: <br />
                Tools menu &gt; Options...&gt; Editor tab &gt; Set &quot;Line Numbers&quot; Margin Width  &gt;= 30 pixels.</p>
<p>To show line numbers in PyScripter:<br />
              Tools &gt; Options &gt; Editor Options &gt; Display &gt; Gutter: check 'Visible' and 'Show line numbers'.</p>
</blockquote><blockquote>
<p>Always check the feedback panel and the Interactive Window when you run a script in PythonWin.</p>
</blockquote><a href="#top">back to top</a> <p><a href="#top">back to top</a></p><code><br />
<span class="comment"># addWithErrors.py <br />
                  # Purpose: 
                  Demonstrate exceptions within a script<br />
                  # What the script should do when fixed:
                  add two numbers
                  given as arguments.</span><br />
<br />
<span class="key">iport</span> sys <span class="comment"># Import  sys, so that the script can use this built-in Python module.<br />
</span><br />
<span class="n">a</span> <span class="o">=</span> <span class="n">sys.argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="c"># Get the 1st argument from the user and cast it to float</span>.<br />
<span class="n">b</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys.argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="c"># Get the 2nd argument from the user and cast it to float.</span><br />
<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><br />
<span class="k">print</span> <span class="n">The</span> <span class="nb">sum</span> <span class="ow">is</span> <span class="p">{</span><span class="mi">0</span><span class="p">}</span><span class="o">.</span><span class="s">&quot;.format(c)</span><br />
</code>Python statement Output (notice there are 9 letters) <ol>
<li><code>places[0]</code><br />
<br />
</li>
<li><code>places[0:2] + places[-3:]</code><br />
<br />
</li>
<li><code>places[0][0]</code><br />
<br />
</li>
<li><code>len(places)</code><br />
<br />
</li>
<li><code>places[0:5]</code><br />
<br />
</li>
<li><code>places[-4:]</code><br />
<br />
</li>
<li><code>places[11]</code><br />
<br />
</li>
<li><code>places[:2]</code><br />
<br />
</li>
<li><code>'towns' in places</code><br />
<br />
</li>
<li><code>places[1]</code></li>
</ol> <ol type="A">
<li><code>3</code><br />
<br />
</li>
<li><code>&quot;roads&quot;</code><br />
<br />
</li>
<li><code>IndexError</code><br />
<br />
</li>
<li><code>['roads', 'cities']</code><br />
<br />
</li>
<li><code>['roads', 'cities', 'states']<br />
</code><br />
</li>
<li><code>['roads', 'cities', 'roads', 'cities', 'states']</code><br />
<br />
</li>
<li><code>False</code><br />
<br />
</li>
<li><code>'r'</code><br />
<br />
</li>
<li><code>'cities'</code></li>
</ol> Python statement Resulting value of census (there are 
                  only 7 letters) <ol>
<li><code>len(<span class="n"> census </span>)</code></li>
<li> <code><span class="n">census</span><span class="o">.</span><span class="n">insert</span>( 0, 2)</code></li>
<li><code> <span class="n">census</span><span class="o">.</span><span class="n">append</span>( 2 )</code></li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">remove</span>('1')<span class="p"></span></code> </li>
<li><code><span class="n">census</span> <span class="o">=</span> <span class="s">&#39;0&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n"> census </span><span class="p">)</span></code></li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi"> 3</span> <span class="p">)</span></code></li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="s"> &#39;1&#39; </span><span class="p">)</span></code>r </li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span> <span class="p">)</span></code> </li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">reverse</span><span class="p">(</span> <span class="p">)</span></code> <br />
</li>
</ol> <ol type="A">
<li><code>[2, '4', '3', '79', '1', '66', '9', '1']</code><br />
<br />
</li>
<li><code>['1', '1', '3', '4', '66', '79', '9']</code><br />
<br />
</li>
<li><code>['4', '3', '79', '66', '9', '1']</code><br />
<br />
</li>
<li><code>['4', '3', '79', '1', '66', '9', '1']</code><br />
<br />
</li>
<li><code> '403079010660901'</code><br />
<br />
</li>
<li><code>['1', '9', '66', '1', '79', '3', '4']</code><br />
<br />
</li>
<li><code>['4', '3', '79', '1', '66', '9', '1', 2]</code><br />
</li>
</ol><span class="head">4.1 Lists</span> <a name="lists" id="lists"></a><a href="#top">back to top</a> <code>listVariable = [item1, item2, item3,...]</code><strong><span class="head">4.1.1 Sequence operations on lists</span><a name="ops" id="introduction5"></a></strong><a href="#top">back to top</a> <p><strong>Table 4.2: </strong>Sequence Operations on Lists<br />
<br />
<code><br />
&gt;&gt;&gt;<span class="n"> exampleList</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10000</span><span class="p">,</span> <span class="s">'a'</span><span class="p">,</span> <span class="mf">1.5</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'banana'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">,</span> <span class="s">'double rainbow'</span><span class="p">]</span><br />
</code></p>
<table width="732" border="3">
<tr>
<td width="130"><strong>Operation</strong></td>
<td width="260"><strong>Sample code</strong></td>
<td width="316"><strong>Return value </strong></td>
</tr>
<tr>
<td>length</td>
<td><code>len(exampleList)</code></td>
<td><p><code>7</code><br />
</p></td>
</tr>
<tr>
<td>indexing</td>
<td><code>exampleList[6]</code></td>
<td><code>'double rainbow'</code></td>
</tr>
<tr>
<td>slicing</td>
<td><code>exampleList[</code><code><span class="n">2:4</span></code>]</td>
<td><code>[1.5, 'b']</code><br /></td>
</tr>
<tr>
<td>concatenation</td>
<td><code>exampleList + exampleList</code> </td>
<td><code>[10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow', 10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow']</code></td>
</tr>
<tr>
<td>membership</td>
<td><code>'prune' in exampleList </code></td>
<td><p><code>False</code><br />
</p></td>
</tr>
</table><strong>Operation</strong><strong>Sample code</strong><strong>Return value </strong>length<code>len(exampleList)</code><p><code>7</code><br />
</p>indexing<code>exampleList[6]</code><code>'double rainbow'</code>slicing<code>exampleList[</code><code><span class="n">2:4</span></code>]<code>[1.5, 'b']</code><br />concatenation<code>exampleList + exampleList</code> <code>[10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow', 10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow']</code>membership<code>'prune' in exampleList </code><p><code>False</code><br />
</p><strong>Operation</strong><strong>Sample code</strong><strong>Return value </strong>length<code>len(exampleList)</code><p><code>7</code><br />
</p>indexing<code>exampleList[6]</code><code>'double rainbow'</code>slicing<code>exampleList[</code><code><span class="n">2:4</span></code>]<code>[1.5, 'b']</code><br />concatenation<code>exampleList + exampleList</code> <code>[10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow', 10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow']</code>membership<code>'prune' in exampleList </code><p><code>False</code><br />
</p><strong><span class="head">4.1.2 List methods</span></strong><a href="#top">back to top</a> <code>object.method(arguments1, argument2, argument3,...)</code><strong><span class="head">4.1.3 The built-in <code>range</code> function</span><a name="range" id="range"></a></strong><a href="#top">back to top</a> <span class="head">4.1.4 Copying a list</span><a href="#top">back to top</a> <span class="head">4.2 Tuples</span> <a name="tuples" id="introduction2"></a><a href="#top">back to top</a> <span class="head">4.3 Syntax check and tracebacks</span><a name="syntaxCheck" id="introduction3"></a><a href="#top">back to top</a> <blockquote>
<p>To show line numbers in PythonWin: <br />
                Tools menu &gt; Options...&gt; Editor tab &gt; Set &quot;Line Numbers&quot; Margin Width  &gt;= 30 pixels.</p>
<p>To show line numbers in PyScripter:<br />
              Tools &gt; Options &gt; Editor Options &gt; Display &gt; Gutter: check 'Visible' and 'Show line numbers'.</p>
</blockquote><blockquote>
<p>Always check the feedback panel and the Interactive Window when you run a script in PythonWin.</p>
</blockquote><b class="head">4.4 Key terms</b><a name="keyterms" id="keyterms2"></a><a href="#top">back to top</a> <p class="head">4.5 Exercises<a name="exercises" id="exercises"></a></p><p><a href="#top">back to top</a></p><code><br />
<span class="comment"># addWithErrors.py <br />
                  # Purpose: 
                  Demonstrate exceptions within a script<br />
                  # What the script should do when fixed:
                  add two numbers
                  given as arguments.</span><br />
<br />
<span class="key">iport</span> sys <span class="comment"># Import  sys, so that the script can use this built-in Python module.<br />
</span><br />
<span class="n">a</span> <span class="o">=</span> <span class="n">sys.argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="c"># Get the 1st argument from the user and cast it to float</span>.<br />
<span class="n">b</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys.argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="c"># Get the 2nd argument from the user and cast it to float.</span><br />
<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><br />
<span class="k">print</span> <span class="n">The</span> <span class="nb">sum</span> <span class="ow">is</span> <span class="p">{</span><span class="mi">0</span><span class="p">}</span><span class="o">.</span><span class="s">&quot;.format(c)</span><br />
</code>Python statement Output (notice there are 9 letters) <ol>
<li><code>places[0]</code><br />
<br />
</li>
<li><code>places[0:2] + places[-3:]</code><br />
<br />
</li>
<li><code>places[0][0]</code><br />
<br />
</li>
<li><code>len(places)</code><br />
<br />
</li>
<li><code>places[0:5]</code><br />
<br />
</li>
<li><code>places[-4:]</code><br />
<br />
</li>
<li><code>places[11]</code><br />
<br />
</li>
<li><code>places[:2]</code><br />
<br />
</li>
<li><code>'towns' in places</code><br />
<br />
</li>
<li><code>places[1]</code></li>
</ol> <ol type="A">
<li><code>3</code><br />
<br />
</li>
<li><code>&quot;roads&quot;</code><br />
<br />
</li>
<li><code>IndexError</code><br />
<br />
</li>
<li><code>['roads', 'cities']</code><br />
<br />
</li>
<li><code>['roads', 'cities', 'states']<br />
</code><br />
</li>
<li><code>['roads', 'cities', 'roads', 'cities', 'states']</code><br />
<br />
</li>
<li><code>False</code><br />
<br />
</li>
<li><code>'r'</code><br />
<br />
</li>
<li><code>'cities'</code></li>
</ol> Python statement Resulting value of census (there are 
                  only 7 letters) <ol>
<li><code>len(<span class="n"> census </span>)</code></li>
<li> <code><span class="n">census</span><span class="o">.</span><span class="n">insert</span>( 0, 2)</code></li>
<li><code> <span class="n">census</span><span class="o">.</span><span class="n">append</span>( 2 )</code></li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">remove</span>('1')<span class="p"></span></code> </li>
<li><code><span class="n">census</span> <span class="o">=</span> <span class="s">&#39;0&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n"> census </span><span class="p">)</span></code></li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi"> 3</span> <span class="p">)</span></code></li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="s"> &#39;1&#39; </span><span class="p">)</span></code>r </li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span> <span class="p">)</span></code> </li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">reverse</span><span class="p">(</span> <span class="p">)</span></code> <br />
</li>
</ol> <ol type="A">
<li><code>[2, '4', '3', '79', '1', '66', '9', '1']</code><br />
<br />
</li>
<li><code>['1', '1', '3', '4', '66', '79', '9']</code><br />
<br />
</li>
<li><code>['4', '3', '79', '66', '9', '1']</code><br />
<br />
</li>
<li><code>['4', '3', '79', '1', '66', '9', '1']</code><br />
<br />
</li>
<li><code> '403079010660901'</code><br />
<br />
</li>
<li><code>['1', '9', '66', '1', '79', '3', '4']</code><br />
<br />
</li>
<li><code>['4', '3', '79', '1', '66', '9', '1', 2]</code><br />
</li>
</ol>------------------------------------------------------------rows: 26 cols: 2<span class="head">4.1 Lists</span> <a name="lists" id="lists"></a><code>listVariable = [item1, item2, item3,...]</code><strong><span class="head">4.1.1 Sequence operations on lists</span><a name="ops" id="introduction5"></a></strong><strong><span class="head">4.1.2 List methods</span></strong><code>object.method(arguments1, argument2, argument3,...)</code><strong><span class="head">4.1.3 The built-in <code>range</code> function</span><a name="range" id="range"></a></strong><span class="head">4.1.4 Copying a list</span><span class="head">4.2 Tuples</span> <a name="tuples" id="introduction2"></a><span class="head">4.3 Syntax check and tracebacks</span><a name="syntaxCheck" id="introduction3"></a><b class="head">4.4 Key terms</b><a name="keyterms" id="keyterms2"></a><p class="head">4.5 Exercises<a name="exercises" id="exercises"></a></p><span class="head">Chapter objectives</span> <br />
<br />
After reading this chapter, you'll be able to do the following:
<ul>
<li>Create Python lists.</li>
<li>Index into, slice, and concatenate lists.</li>
<li>Find the length of a list and check if an item is in a list.</li>
<li>Append items to a list. </li>
<li>Locate online help for the list methods.</li>
<li>Create a list of numbers automatically.</li>
<li>Differentiate between in-place methods and methods that return a value.</li>
<li>Create and index tuples.</li>
<li>Check script syntax.</li>
<li>Interpret traceback error messages.</li>
</ul>
<hr />
<span class="foo">
<span class="head">Chapter Outline<br />
</span>
<a href="#lists">Lists</a> <br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#ops">Sequence operations on lists</a><br />
        
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#methods">List Methods</a><br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="range">The built-in <code>range</code> function</a><br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#copying">Copying Lists</a><br />
<a href="#tuples">Tuples</a><br />
<a href="#syntaxCheck">Syntax check and tracebacks</a><br />
<a href="#keyterms">Key terms</a><br />
<a href="#exercises">Exercises</a><br />
</span>
<br />
Python has built-in data types for managing collections of items, including lists, tuples, sets, dictionaries, to name a few. This chapter mainly focuses on lists, since these are ubiquitous in Python code. Tuples are also discussed briefly as well; We'll use these in the chapter on cursors. 
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">4.1 Lists</span> <a name="lists" id="lists"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>        GIS scripting frequently involves manipulating collections of items, such as  files or data records. For example, you might have multiple tabular data files with special characters in the fields preventing direct import into ArcGIS.  A script to replace the characters can use lists to hold the  file names and  
        field names. Then the files and fields can be batch processed. Batch processing is the key capability of scripting.  This chapter presents the core list concepts for solving GIS problems like this. A Python <em>list</em> is   a data type that holds a collection of  items. The items in a list are surrounded by square brackets and separated by commas. The syntax for a list assignment statement looks like this:</p>
<table width="812" border="0" bgcolor="#ffcccc">
<tr>
<th scope="row"><code>listVariable = [item1, item2, item3,...]</code></th>
</tr>
</table>
<p>In this example, <code>fields</code> is a Python list of field names from a comma separated value ('.csv') file containing 
        wildfire data:<br />
</p>
<p><code>&gt;&gt;&gt;<span class="n"> fields</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;FireId&#39;</span><span class="p">,</span> <span class="s">&#39;Org&#39;</span><span class="p">,</span> <span class="s">&#39;Reg-State&#39;</span><span class="p">,</span> <span class="s">&#39;FireType/ProtectionType&#39;</span><span class="p">]</span><br />
        &gt;&gt;&gt; fields<br />
</code><code><span class="n">['FireId', 'Org', 'Reg-State', 
        'FireType/ProtectionType']</span></code><br />
        &gt;&gt;&gt; type(fields)<br />
<code><span class="n">&lt;type 'list'&gt;</span></code><br />
<br />
        All of the items in the <code>fields</code> list are strings, but a list can hold items  of varying data types. For example, a list can contain numbers, strings and other lists. The 'stateData' list assigned here contains a string, a list, and 
        an integer:<br />
</p>
<p><code>&gt;&gt;&gt;<span class="n"> stateData</span> <span class="o">=</span> <span class="p">[</span> <span class="s">'Florida'</span><span class="p">,</span> <span class="p">[</span><span class="s">'Alabama'</span><span class="p">,</span> <span class="s">'Georgia'</span> <span class="p">],</span> <span class="mi">18809888</span> <span class="p">]</span><br />
</code></p>
<p>This list contains both numeric and string items:<br />
</p>
<p><code>&gt;&gt;&gt;<span class="n"> exampleList</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10000</span><span class="p">,</span> <span class="s">'a'</span><span class="p">,</span> <span class="mf">1.5</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'banana'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">,</span> <span class="s">'double rainbow'</span><span class="p">]</span><br />
</code></p>
<p>You can also create an empty list by assigning empty square brackets to a variable, as in this example:<br />
</p>
<p><code>&gt;&gt;&gt;<span class="n"> dataList</span> <span class="o">=</span> <span class="p">[</span> <span class="p">]</span><br />
</code></p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><strong><span class="head">4.1.1 Sequence operations on lists</span><a name="ops" id="introduction5"></a></strong></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Lists, like strings are  one of the sequence data types in Python.  The sequence operations discussed in the context of string data types also apply to lists--the length of a list can be found, lists can be indexed, sliced, and concatenated, and you can check if an item is a member of a 
        list. Table 4.2 shows sample code and output for each of these operations. </p>
<table bgcolor="#EEEEEE" border="0" bordercolor="#ece9d8" width="779">
<tbody>
<tr>
<td scope="row"><p><strong>Table 4.2: </strong>Sequence Operations on Lists<br />
<br />
<code><br />
&gt;&gt;&gt;<span class="n"> exampleList</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10000</span><span class="p">,</span> <span class="s">'a'</span><span class="p">,</span> <span class="mf">1.5</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'banana'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">,</span> <span class="s">'double rainbow'</span><span class="p">]</span><br />
</code></p>
<table width="732" border="3">
<tr>
<td width="130"><strong>Operation</strong></td>
<td width="260"><strong>Sample code</strong></td>
<td width="316"><strong>Return value </strong></td>
</tr>
<tr>
<td>length</td>
<td><code>len(exampleList)</code></td>
<td><p><code>7</code><br />
</p></td>
</tr>
<tr>
<td>indexing</td>
<td><code>exampleList[6]</code></td>
<td><code>'double rainbow'</code></td>
</tr>
<tr>
<td>slicing</td>
<td><code>exampleList[</code><code><span class="n">2:4</span></code>]</td>
<td><code>[1.5, 'b']</code><br /></td>
</tr>
<tr>
<td>concatenation</td>
<td><code>exampleList + exampleList</code> </td>
<td><code>[10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow', 10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow']</code></td>
</tr>
<tr>
<td>membership</td>
<td><code>'prune' in exampleList </code></td>
<td><p><code>False</code><br />
</p></td>
</tr>
</table></td>
</tr>
</tbody>
</table>
<p>The operations work on list items just like they work on string characters; however, lists are mutable. This means that indexing can also be used to <em>change</em> the value of an item in the list. Recall that strings are immutable and trying to change an indexed character in a  string returns an error. In the following example, a list is created, then on the second line, an indexed list item is modified. The last line in the example shows that the first item in the list has been changed:<br />
</p>
<p><code>&gt;&gt;&gt;<span class="n"> exampleList</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10000</span><span class="p">,</span> <span class="s">'a'</span><span class="p">,</span> <span class="mf">1.5</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'banana'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">,</span> <span class="s">'double rainbow'</span><span class="p">] </span><span class="comment">#creating the list</span><br />
        &gt;&gt;&gt;<span class="n"> exampleList</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;prune&#39; </span><span class="comment"># modifying the first item in the list.</span><br />
        &gt;&gt;&gt; exampleList<br />
        ['prune', 'a', 1.5, 'b', 'banana', 'c', 'double rainbow']
      </code></p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><strong><span class="head">4.1.2 List methods</span></strong></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Also like strings, list objects have a specific set of methods associated with them including <code>append</code>, <code>extend</code>, <code>insert</code>, <code>remove</code>, <code>pop</code>, <code>index</code>, <code>count</code>, <code>sort</code>, and <code>reverse</code>.  For a complete description of each, search  Guido Van Rossum's Python
        Tutorial for the 'More on lists' section.   Like  string methods, list methods use the
        dot notation:</p>
<table width="812" border="0" bgcolor="#ffcccc">
<tr>
<th scope="row"><code>object.method(arguments1, argument2, argument3,...)</code></th>
</tr>
</table>
<p>There is one notable difference between list and string methods that relates to mutability. Many list methods are in-place methods.  <em>In-place methods</em> are those methods which change the object that calls them.  
        Whereas, other  methods do not alter the object that calls them; Instead, they return a value. In-place list methods can change the list itself. In-place list methods such as append, extend, reverse, and sort do not  use an assignment 
        statement to propagate the new list. The example below creates a  <code>fireIDs</code> list and   appends a new id to end of the list using the  <code>append</code> method with the new id as the argument: </p>
<p><code>&gt;&gt;&gt;<span class="n"> fireIDs</span> <span class="o">=</span> <span class="p">[</span> <span class="s">'238998'</span><span class="p">,</span> <span class="s">'239131'</span><span class="p">,</span> <span class="s">'239135'</span><span class="p">,</span> <span class="s">'239400'</span><span class="p">]</span> <span class="comment"># initialize the list with 4 IDs.</span><br />
        &gt;&gt;&gt; newID <span class="o">=</span> <span class="s">'239413'</span><br />
        &gt;&gt;&gt; <span class="n">fireIDs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">newID</span><span class="p">)</span> <span class="comment"># Changing the list in-place</span>.<br />
        &gt;&gt;&gt; fireIDs<br />
        ['238998', '239131', '239135', '239400', 
        '239413']<br />
        &gt;&gt;&gt;
        <span class="comment"># New value was appended to the end of the list, which now holds 5 IDs.</span><br />
</code></p>
<p>Since <code>append</code> is an in-place method, the original list is modified, in-place. In contrast, the   list method named 'count' is not an in-place method. It does not alter the list, but returns a value instead. The following example creates a  <code>fireTypes</code> list and determines the number of code 11 fires that had
      occurred, using the <code>count </code> method:<a name="range" id="introduction4"></a></p>
<p><code><span class="n">&gt;&gt;&gt; fireTypes</span> <span class="o">=</span> <span class="p">[</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">16</span> <span class="p">]</span><br />
<span class="n">&gt;&gt;&gt; countResults</span> <span class="o">=</span> <span class="n">fireTypes</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="mi">11</span><span class="p">)<br />
</span>&gt;&gt;&gt; <span class="k">print</span> <span class="n">countResults</span><br />
<span class="mi">4 </span><span class="comment"># The list contains 4 elevens.</span><br />
&gt;&gt;&gt; fireTypes <span class="comment"># Note that the list contents are unchanged</span>:<br />
</code><code><span class="n">[ 16, 13, 16, 6, 17, 16,   6,
        
        11, 11,  12,
        14,
        13,
        11, 13,
        13, 13, 11, 15,  16 ]</span></code><br />
</p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><strong><span class="head">4.1.3 The built-in <code>range</code> function</span><a name="range" id="range"></a></strong></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>The built-in <code>range</code> function is a convenient way to generate numerical lists which can be useful for  batch processing related tasks.  The <code>range</code> function takes one to three numerical arguments and returns a list of numbers. If you pass in one  numerical argument, <code>n</code>, it returns a Python list containing the integers <code>0</code> through  <code>n - 1</code>, as in the following example:<br />
<br />
<code>&gt;&gt;&gt;<span class="nb"> range</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span><br />
</code><code><span class="n">[0, 1, 2, 3, 4, 5, 6, 7, 8]</span></code><br />
</p>
<p>By using a second argument, you can modify the lower bound:<br />
<code><br />
        &gt;&gt;&gt;<span class="nb"> range</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">9</span><span class="p">)</span><br />
</code><code><span class="n">[5, 6, 7, 8]</span></code><br />
<br />
        By using a third argument, can change the step size: <br />
<code><br />
        &gt;&gt;&gt; <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><br />
</code><code><span class="n">[0, 2, 4, 6, 8]</span></code><br />
<br />
        The <code>range</code> function is used again in a later chapter to create numeric lists for looping.</p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">4.1.4 Copying a list</span></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>In-place methods like <code>reverse</code> and <code>sort</code> alter the order of the list. For example, here the <code>reverse</code> method reverses the order of the <code>fireIDs</code> list:</p>
<p><code>&gt;&gt;&gt;<span class="n"> fireIDs</span> <span class="o">=</span> <span class="p">[</span> <span class="s">&quot;238998&quot;</span><span class="p">,</span> <span class="s">&quot;239131&quot;</span><span class="p">,</span> <span class="s">&quot;239135&quot;</span><span class="p">,</span> <span class="s">&quot;239400&quot;</span><span class="p">]</span><br />
        &gt;&gt;&gt;<span class="n"> fireIDs</span><span class="o">.</span><span class="n">reverse</span><span class="p">(</span> <span class="p">)</span><br />
        &gt;&gt;&gt; fireIDs<br />
</code><code><span class="n">['239400', '239135', '239131', 
        '238998']</span></code><br />
</p>
      In some cases, it may be necessary to keep a copy of the list in its original order. Python variables can be thought of as tags attached to objects. Because of this, there are two types of copy operations for objects: shallow copies and deep copies. A <em>shallow copy</em> attaches two tags to the same list object. A <em>deep copy</em> attaches each tag to a separate list object.  The assignment statement shown in the following example doesn't work as you might intuitively expect. Python list <code>a</code> is copied to list <code>b</code> but both the lists are reversed when <code>a</code> is reversed. This is a shallow copy:<br />
<code><br />
      &gt;&gt;&gt;<span class="n"> a</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">11</span><span class="p">)</span><br />
      &gt;&gt;&gt; a<br />
</code><code><span class="n">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></code><br />
      &gt;&gt;&gt; b <span class="o">=</span> a <span class="comment"># &quot;shallow copy&quot; list a<br />
</span> &gt;&gt;&gt; <span class="key"></span>b<br />
<code><span class="n">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></code><br />
      &gt;&gt;&gt; a.reverse( ) <span class="comment"># reverse list a</span><br />
      &gt;&gt;&gt; a<br />
<code><span class="n">[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]</span></code><br />
      &gt;&gt;&gt; b<br />
<code><span class="n">[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]</span></code> <span class="comment"># list b is also reversed</span><br />
<br />
<br />
<img src="../images/lists1.png" width="318" height="135" /><br />
<br />
<p> Both tags <code>a</code> and <code>b</code> are pointing to the same object. Instead, we need to create a second object via a deep copy to retain a copy of the list in its original order. To do this we need to create a new   list and  attach the <code>b</code> tag to it. The built-in <code>list</code> function constructs a new list object based on a list given as an argument. This built-in function is used to create a deep copy in the next example. <code>list(a)</code> constructs a new <code>list</code> object and this is assigned to <code>b</code>. In the end, <code>a</code> is reversed, but <code>b</code> retains the original order:</p>
<p><code>&gt;&gt;&gt;<span class="n"> a</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">11</span><span class="p">)</span><br />
        &gt;&gt;&gt; a<br />
</code><code><span class="n">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></code><br />
        &gt;&gt;&gt;<span class="n"> b</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">a</span><span class="p">) </span><span class="comment"># &quot;deep copy&quot; list a<br />
</span> &gt;&gt;&gt; <span class="key"></span>b<br />
<code><span class="n">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></code><br />
        &gt;&gt;&gt; a.reverse( ) <span class="comment"># reverse list a</span><br />
        &gt;&gt;&gt; a<br />
<code><span class="n">[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]</span></code><br />
        &gt;&gt;&gt; b<br />
<code><span class="n">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></code> <span class="comment"># list b is not reversed</span><br />
<br />
<img src="../images/lists2.png" width="314" height="208" /><br />
</p>
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">4.2 Tuples</span> <a name="tuples" id="introduction2"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>A <em>tuple</em> is another Python data type for holding a collection of items. A tuple is a set of comma separated items, but round brackets (parentheses) are used instead of square brackets. When a tuple is printed, it is surrounded by parentheses.  
        A tuple can  be created with or without parentheses around the items: </p>
<p><code>&gt;&gt;&gt; <span class="n">t</span> <span class="o">=</span> <span class="s">&quot;abc&quot;</span><span class="p">,</span> <span class="mi">456</span><span class="p">,</span> <span class="s">&#39;wxyz&#39;</span> <br />
        &gt;&gt;&gt; <span class="nb">type</span><span class="p">(</span><span class="n">t</span><span class="p">)</span><br />
</code><code><span class="n">&lt;type 'tuple'&gt;</span></code><br />
        &gt;&gt;&gt; t<br />
<code><span class="n">('abc', 456, 'wxyz')</span></code><br />
<br />
        &gt;&gt;&gt; <span class="n">t2</span> <span class="o">=</span> <span class="p">(</span> <span class="mf">4.5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mf">0.3</span><span class="p">)</span> <br />
        &gt;&gt;&gt;<span class="nb"> type</span><span class="p">(</span><span class="n">t2</span><span class="p">)</span><br />
<code><span class="n">&lt;type 'tuple'&gt;</span></code><br />
        &gt;&gt;&gt; t2<br />
<code><span class="n">(4.5, 7, 0.3)</span></code><br />
</p>
<p>Like strings, tuples items can be indexed but they are not mutable. It is not possible to assign individual items of a tuple with indexing:<br />
<code><br />
        &gt;&gt;&gt;<span class="n"> t</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><br />
</code><code><span class="n">'abc'</span></code><br />
        &gt;&gt;&gt;<span class="n"> t</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><br />
<span class="mi">456</span><br />
        &gt;&gt;&gt; <span class="n">t2</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><br />
<span class="mi">4.5</span><br />
        &gt;&gt;&gt; <span class="n">t2</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> 5<br />
<span class="err">Traceback (most recent call last):<br />
        File &quot;&lt;interactive input&gt;&quot;, line 1, in &lt;module&gt;<br />
        TypeError: 'tuple' object does not support item assignment</span><br />
</p>
<p>Tuples are used in situations where immutability is desirable. For example, they are often used for (x,y,z) point coordinates or for holding the set of items in a data record.</p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">4.3 Syntax check and tracebacks</span><a name="syntaxCheck" id="introduction3"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Most of the  examples in the book until this point have used the Interactive Window to explain the basic Python components. In upcoming chapters we will begin to write complete scripts.  Before we do so, it will be useful to become  familiar with syntax checking in PythonWin. Chapter 2  discussed examples of errors, tracebacks, and exceptions thrown by interactive input. Now we'll compare  interactive input error handling to script window error handling.</p>
<p align="left"> The Interactive Window automatically gives you immediate feedback in the form of a traceback message when you enter code that contains a syntax error, because it evaluates (runs) the code when you enter it. For example, a traceback message is printed, because of the following code, in which the <code>print</code> keyword is misspelled as  <code>pirnt </code>:<br />
<code><br />
        &gt;&gt;&gt; pirnt test<br />
<span class="err">Traceback (  File &quot;&lt;interactive input&gt;&quot;, line 1<br />
        pirnt test<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^<br />
        SyntaxError: invalid syntax</span><br />
</code><br />
        When you enter code in a PythonWin script window, you don't automatically receive immediate feedback as you're writing, but you can trigger syntax checking when you're ready by clicking a button.  The PythonWin syntax checker is similar to a word processing spelling checker.  The 'check' button, the one with the checkmark, on the PythonWin standard toolbar checks the syntax without executing the code.  It finds syntax errors, such as incorrect indentation, misspelling of keywords, and missing punctuation. </p>
<p><img src="../images/check_pythonwin.jpg" alt="check syntax in Pythonwin" width="444" height="81" /><br />
        Figure 4.1: The 'check' button checks the syntax of the current script.</p>
<p>The feedback panel in the lower left corner of PythonWin shows the result of the check. If an error is detected, the feedback panel  says &quot;Failed to check - syntax error - invalid syntax&quot; as shown in Figure 4.1. The cursor jumps to a position  near to the first syntax error it detects in the script, usually the same line or the line following the erroneous line. To try this yourself,</p>
<ol>
<li> Create a new script with one line of code as shown in Figure 4.2. </li>
<li>The check button is disabled (grayed out <img src="../images/checkButton1.png" alt="checkbutton" />). You can't check the syntax until the script has been saved at least once. Save the script in 'C:\gispy\scratch' as script 'test.py'. </li>
<li>Click in the 'test.py' script window to make sure your window focus is there and not in the Interactive Window. </li>
<li>Now click the 'check' button <img src="../images/checkButton2.png" alt="checkbutton" />, which became enabled when the script was saved.</li>
<li> Observe the feedback panel and the cursor (see Figure 4.2).  The feedback panel says  <code>Failed to check - syntax error - invalid syntax</code> and the  cursor has jumped to the erroneous line. It can't detect exactly what's wrong, so it gives this generic message and moves the cursor near to where it detects an error.<br />
<img src="../images/syntax_error.png" alt="syntax checker" width="326" height="349" />&nbsp;&nbsp;&nbsp;&nbsp;<br />
          Figure 4.2: Syntax checker finds an error. <br />
<br />
</li>
<li>Next click the 'Run' button <img src="../images/running_man.png" alt="the run button" width="24" border="1" height="23" /> to see if it will run. The feedback shows a syntax error message --&quot;Failed to <em>run script...</em>&quot; (Figure 4.3).  If you overlook the feedback panel, it may seem  as if the program is not responding to the 'Run' button click. Check the feedback panel whenever you run a script. <br />
<img src="../images/syntax_error2.png" /><br />
          Figure 4.3: Script fails to run. <br />
<br />
</li>
<li> The script will not run until the syntax errors are repaired; Repair the syntax error--change  'pirnt' to 'print'.</li>
<li>Click the 'check' button again.</li>
<li>The feedback bar reports success: &quot;Python and TabNanny successfully checked the file&quot; (Figure 4.4). The TabNanny, specialized program for checking indentation is run as part of the syntax checking process.<br />
<img src="../images/syntax_error3.png" width="329" height="348" /><br />
          Figure 4.4: Successful syntax check.<br />
<br />
</li>
<li>A successful syntax check does not necessarily mean that the code is free of errors. Click the 'Run' button now that the syntax has been corrected. The feedback panel reports that an exception was raised. This time a traceback error is printed in the Interactive Window (Figure 4.5) because the error was only detected when the script ran, not during the syntax checking phase. <br />
<img src="../images/syntax_error4.png" /> <br />
          Figure 4.5: Exception raised. </li>
</ol>
<p> The syntax check can only detect errors that violate certain syntax rules. Some errors can only be detected when Python attempts to run the code and then an error message appears in the feedback panel when it reaches a problem. When Python tries to print <code>test</code>, it throws an exception and prints a traceback message. A script traceback differs slightly from  interactive input traceback because the message traces the origin of the error. </p>
<p>Entering the code from 'test.py' in the Interactive Window prints the following traceback:<br />
<code><br />
        &gt;&gt;&gt; <span class="key">print</span> test <br />
<span class="err">Traceback (most recent call last):<br />
        File &quot;&lt;interactive input&gt;&quot;, line 1, in &lt;module&gt;<br />
        NameError: name 'test' is not defined</span><br />
</code></p>
<p>Whereas, the traceback   message in Figure 4.5 thrown by running 'test.py' reads as follows:<br />
<code><br />
        &gt;&gt;&gt; <span class="err">Traceback (most recent call last):<br />
        File &quot;C:\Python27\ArcGIS10.1\Lib\site-packages\pythonwin\pywin\framework\scriptutils.py&quot;, line 326, in RunScript<br />
        exec codeObject in __main__.__dict__<br />
        File &quot;C:\gispy\scratch\test.py&quot;, line 1, in &lt;module&gt;<br />
        print test<br />
        NameError: name 'test' is not defined</span><br />
</code></p>
<p>In many cases, the most pertinent information appears near the end of the traceback. The last line  names the exception (<code>NameError</code>) and describes the error (name <code>test</code> is not defined). The last line of both the interactive traceback and the script window traceback are identical, but the preceding lines indicate the location of the error. In one case, this is <code>&lt;interactive input&gt;</code>. <br />
<br />
<code><span class="err">File &quot;&lt;interactive input&gt;&quot;, line 1, in &lt;module&gt;</span><br />
</code></p>
<p>In the other case, the line of code is printed beneath the location of the line of the script which caused the error (line 1 of test.py).<br />
<code><br />
<span class="err">File &quot;C:\gispy\scratch\test.py&quot;, line 1, in &lt;module&gt;<br />
        print test</span><br />
</code></p>
<p>Python keeps track of a call stack. The top of the stack has the script you've written. Next comes a script that your script has triggered to run. The traceback prints the stack, printing the line of code that was triggered and the name of the script. The bottom of the stack has the Python program that runs the scripts ('scriptutils.py'). In the case of this example, there are only two scripts in the stack--'test.py' and 'scriptutils.py'. These lines show the line of code and that was triggered in scriptutils.py:<br />
<br />
<code><span class="err">File &quot;C:\Python27\ArcGIS10.1\Lib\site-packages\pythonwin\pywin\framework\scriptutils.py&quot;, line 326, in RunScript<br />
        exec codeObject in __main__.__dict__<br />
</span></code></p>
<p>We can  ignore this part of the traceback. The only part of the stack that is interesting for our purposes is the line of code which we wrote that caused the error. This is why we focus mainly on the last few lines of the message. Traceback messages print the script line number where the error occurred. The examples in the upcoming chapters of this book usually report only a portion of tracebacks.</p>
<table width="779" border="3" bgcolor="#CEDAE3">
<tr>
<td width="765" height="76"><blockquote>
<p>To show line numbers in PythonWin: <br />
                Tools menu &gt; Options...&gt; Editor tab &gt; Set &quot;Line Numbers&quot; Margin Width  &gt;= 30 pixels.</p>
<p>To show line numbers in PyScripter:<br />
              Tools &gt; Options &gt; Editor Options &gt; Display &gt; Gutter: check 'Visible' and 'Show line numbers'.</p>
</blockquote></td>
</tr>
</table>
<p>These examples show that the Interactive Window prints a traceback message immediately when you enter erroneous code because the code is evaluated immediately; Whereas, script window code is only checked when you use the syntax check button or try to run the code.  If a syntax error is found in a script, the feedback bar reports an error and the cursor moves near to the first detected error. Some errors are not detectable by the syntax check. These errors stop the script from running and print traceback messages in the Interactive Window. The traceback, read from bottom to top, names the exception, describes the error, and prints the erroneous line and the line number in the script where it was found. In summary, checking syntax, showing line numbers, and reading tracebacks will help you build working scripts as you progress through the upcoming chapters.</p>
<table width="779" border="3" bgcolor="#CEDAE3">
<tr>
<td width="765" height="76"><blockquote>
<p>Always check the feedback panel and the Interactive Window when you run a script in PythonWin.</p>
</blockquote></td>
</tr>
</table>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><b class="head">4.4 Key terms</b><a name="keyterms" id="keyterms2"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p> <code>List </code> data type<br />
        in-place method<br />
        mutable vs. immutable<br />
        shallow copy vs. deep copy<br />
        built-in  <code>list</code> function<br />
        Sequence operations (length, indexing, concatenation, slicing, membership)<br />
        List methods<br />
        'Tuple' data type</p>
<hr />
<table width="775" border="0">
<tbody>
<tr>
<th width="684" height="28" align="left" scope="row"><p class="head">4.5 Exercises<a name="exercises" id="exercises"></a></p></th>
<td width="81" align="right"><p><a href="#top">back to top</a></p></td>
</tr>
</tbody>
</table>
<br />
<ol>
<li> Practice interpreting exceptions and diagnosing errors as you follow the given steps. Then answer the follow-up questions.
          <table border="1" cellpadding="2" cellspacing="2" bgcolor="#ffffcc" style="text-align: left; width: 412px; height: 30px;">
<tbody>
<tr>
<td nowrap="nowrap" style="vertical-align: top;"><code><br />
<span class="comment"># addWithErrors.py <br />
                  # Purpose: 
                  Demonstrate exceptions within a script<br />
                  # What the script should do when fixed:
                  add two numbers
                  given as arguments.</span><br />
<br />
<span class="key">iport</span> sys <span class="comment"># Import  sys, so that the script can use this built-in Python module.<br />
</span><br />
<span class="n">a</span> <span class="o">=</span> <span class="n">sys.argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="c"># Get the 1st argument from the user and cast it to float</span>.<br />
<span class="n">b</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys.argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="c"># Get the 2nd argument from the user and cast it to float.</span><br />
<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><br />
<span class="k">print</span> <span class="n">The</span> <span class="nb">sum</span> <span class="ow">is</span> <span class="p">{</span><span class="mi">0</span><span class="p">}</span><span class="o">.</span><span class="s">&quot;.format(c)</span><br />
</code></td>
</tr>
</tbody>
</table>
<ol type="a">
<li> Open 'addWithErrors.py' and save  it as 'addWithOutErrors.py'. This script is like 'add_version2.py' from Chapter 2, but several errors have been introduced.</li>
<li>Run the syntax check.<br />
              The feedback panel says: &quot;Failed to check - syntax error - invalid syntax&quot; and the cursor jumps to line 5. In the steps below, you'll see that there are several errors, but the code is evaluated from top to bottom, so the cursor jumps to the first error Python detects. Do you see a problem on that line?<br />
</li>
<li>The keyword 'import' is misspelled Replace 'iport' with 'import'.</li>
<li>Run the syntax check.<br />
              The feedback panel says:  <code>&quot;Failed to check - syntax error - invalid syntax&quot; </code> and now the cursor jumps to line 9. (Now line 9 is the first place an error is detected).</li>
<li>But there's nothing wrong with line 9! Can you find the error is on the previous line? The closing parenthesis is missing on line 8. The cursor jumps to line 9 because Python detected an assignment statement before the parentheses were closed. Until it reached line 9, it didn't detect that there was anything wrong.<br />
              Add ')' just before the comment on line 8. So that it looks like this:<br />
<code><span class="n">b</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys.argv</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span> <span class="comment"> # Get the ...</span> </code></li>
<li>Run the syntax check.<br />
              The feedback panel says: &quot;Failed to check - syntax error - invalid syntax&quot; and the cursor jumps to line 10. Do you see the syntax error on line 10? <br />
</li>
<li>Line 10 is missing a quotation mark on the string. Add a quotation mark (&quot;) after the <code>print</code>  keyword and the text colors change so that  they looks like this:<br />
<code><span class="k">print</span> <span class="s">&quot;The sum is {0}.&quot;</span><span class="o">.</span>format<span class="p">(</span>c<span class="p">)</span> </code></li>
<li>Run the syntax check. <br />
              The feedback panel says: &quot;Python and TabNanny successfully checked the file&quot;. All the detectable syntax errors have been corrected, so the script can be run.</li>
<li>Run the script with no arguments by clicking the 'Run' button. The following traceback message is printed:<br />
<code><span class="err"><br />
              File &quot;C:\gispy\scratch\addWithOutErrors.py&quot;, line 7, in &lt;module&gt;<br />
              a = sys.argv[1] # Get the 1st argument from the user and cast it to float.<br />
              IndexError: list index out of range</span></code><br />
</li>
<li>The traceback message says an <code>IndexError</code> occurred on line 7 of 'addWithOutErrors.py'. In this case, the traceback is generated because we didn't provide any user arguments. Index 1 is out of range, because no script arguments were used.</li>
<li>Run the code with arguments 3 and 8. The following traceback message is printed:<span class="err"><br />
              File &quot;C:\gispy\scratch\addWithOutErrors.py&quot;, line 9, in &lt;module&gt;<br />
              c = a + b<br />
              TypeError: cannot concatenate 'str' and 'int' objects</span></li>
<li>The traceback message says a <code>TypeError</code> occurred on line 9 of our script. It says it cannot concatenate a string object with an integer object. When you get a type error, it's useful to check the type of the variables using the built-in type function, to see if they are the data type that you expect them to be. Check the data types of 'a' and 'b' in the Interactive Window using the built-in <code>type</code> function:<br />
<code><br />
              &gt;&gt;&gt; <span class="nb">type</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <br />
<span class="n">&lt;type 'str'&gt;</span><br />
              &gt;&gt;&gt; <span class="nb">type</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <br />
<span class="n">&lt;type 'int'&gt;</span></code><br />
<br />
</li>
<li><code>a</code> is a string because arguments are strings unless they are cast to another type. <code>b</code> is cast to integer. Cast <code>a</code> to integer too by changing line 7 to look like this:<br />
<code><br />
<span class="n">a</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys.argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span></code><br />
<br />
</li>
<li>Run the script again. The feedback bar says &quot;Script File 'C:\gispy\scratch\addWithoutErrors.py' returned exit code 0&quot; and the following prints in the Interactive Window.<br />
<br /><code>
            &gt;&gt;&gt; The sum is 11. </code><br />
<br />
            This is good news. It means the script ran to completion without throwing any exceptions.<br />
<br />
</li>
</ol>
          Follow-up questions:<br />
<ol type="i">
<li> What does the cursor do when you use the syntax checker and a syntax error occurs? Specifically, where does it go?</li>
<br />
<li>How does PythonWin display a quotation mark that's missing its partner (the mark on the other end of the string literal)?</li>
<br />
<li>When you use your mouse to select a parenthesis that has a matching partner, how does PythonWin display the parentheses?</li>
<br />
<li>When  you use your mouse to select a parenthesis that does not have a matching partner, how does PythonWin display the parenthesis?</li>
<br />
<br />
</ol>
</li>
<li>The Python statements on the left use operations involving the list type variable <code>places</code><em>. </em>Match the Python 
          statement with its output. All answers MUST BE one of the letters A 
          through I. If you think the answer is not there, you're on the wrong 
          track! The list variable named <code>places</code> is assigned as 
          follows: <br />
<code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />
<span class="n">places</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;roads&quot;</span><span class="p">,</span> <span class="s">&quot;cities&quot;</span><span class="p">,</span> <span class="s">&quot;states&quot;</span><span class="p">]</span> <br />
</code><br />
<br />
<table width="634" border="3">
<tbody>
<tr>
<td width="301">Python statement </td>
<td width="313">Output (notice there are 9 letters) </td>
</tr>
<tr>
<td><ol>
<li><code>places[0]</code><br />
<br />
</li>
<li><code>places[0:2] + places[-3:]</code><br />
<br />
</li>
<li><code>places[0][0]</code><br />
<br />
</li>
<li><code>len(places)</code><br />
<br />
</li>
<li><code>places[0:5]</code><br />
<br />
</li>
<li><code>places[-4:]</code><br />
<br />
</li>
<li><code>places[11]</code><br />
<br />
</li>
<li><code>places[:2]</code><br />
<br />
</li>
<li><code>'towns' in places</code><br />
<br />
</li>
<li><code>places[1]</code></li>
</ol> </td>
<td><ol type="A">
<li><code>3</code><br />
<br />
</li>
<li><code>&quot;roads&quot;</code><br />
<br />
</li>
<li><code>IndexError</code><br />
<br />
</li>
<li><code>['roads', 'cities']</code><br />
<br />
</li>
<li><code>['roads', 'cities', 'states']<br />
</code><br />
</li>
<li><code>['roads', 'cities', 'roads', 'cities', 'states']</code><br />
<br />
</li>
<li><code>False</code><br />
<br />
</li>
<li><code>'r'</code><br />
<br />
</li>
<li><code>'cities'</code></li>
</ol> </td>
</tr>
</tbody>
</table>
<br />
<br />
</li>
<li>The Python statements on the left use list
          methods  and operations (and one string method) involving 
          the list type variable <code>census</code><em>. </em>Match the Python statement with the 
          resulting value of the <code>census</code> variable. Consider these as 
          individual statements, not cumulative. In other words, reset the value 
          of <code>census</code> to its original value between each command. All 
          answers MUST BE one of the letters A through G. <strong>Notice that the question
          asks for matching the Python statement with the  resulting value of the 
          <code>census</code> variable and not matching the  function with the value 
          it returns. If you think the answer is not there, you're on the wrong 
          track!</strong> <br />
          The list variable called 'census' is assigned as 
          follows: <br />
<code><br />
          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;census = 
          ['4', '3', '79', '1', '66', '9', '1']<br />
</code><br />
<table width="573" border="3">
<tbody>
<tr>
<td width="252">Python statement </td>
<td width="301">Resulting value of census (there are 
                  only 7 letters) </td>
</tr>
<tr>
<td><ol>
<li><code>len(<span class="n"> census </span>)</code></li>
<li> <code><span class="n">census</span><span class="o">.</span><span class="n">insert</span>( 0, 2)</code></li>
<li><code> <span class="n">census</span><span class="o">.</span><span class="n">append</span>( 2 )</code></li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">remove</span>('1')<span class="p"></span></code> </li>
<li><code><span class="n">census</span> <span class="o">=</span> <span class="s">&#39;0&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n"> census </span><span class="p">)</span></code></li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi"> 3</span> <span class="p">)</span></code></li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="s"> &#39;1&#39; </span><span class="p">)</span></code>r </li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span> <span class="p">)</span></code> </li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">reverse</span><span class="p">(</span> <span class="p">)</span></code> <br />
</li>
</ol> </td>
<td><ol type="A">
<li><code>[2, '4', '3', '79', '1', '66', '9', '1']</code><br />
<br />
</li>
<li><code>['1', '1', '3', '4', '66', '79', '9']</code><br />
<br />
</li>
<li><code>['4', '3', '79', '66', '9', '1']</code><br />
<br />
</li>
<li><code>['4', '3', '79', '1', '66', '9', '1']</code><br />
<br />
</li>
<li><code> '403079010660901'</code><br />
<br />
</li>
<li><code>['1', '9', '66', '1', '79', '3', '4']</code><br />
<br />
</li>
<li><code>['4', '3', '79', '1', '66', '9', '1', 2]</code><br />
</li>
</ol></td>
</tr>
</tbody>
</table>
<br />
</li>
<li>Answer these three questions related to difference between in-place methods and methods that return a value. <br />
<ol type="a">
<li>What is the value of the variable <code>census</code><em> </em>after all of these statements 
              are executed?<br />
<code><br />
              &gt;&gt;&gt; <span class="n">census</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">79</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span> <br />
              &gt;&gt;&gt; <span class="n">census</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span> <span class="p">)</span> <br />
              &gt;&gt;&gt; <span class="n">census</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span> <span class="p">)</span> <br />
              &gt;&gt;&gt; <span class="n">census</span><span class="o">.</span><span class="n">reverse</span><span class="p">(</span> <span class="p">)</span><br />
</code><br />
<ol type="i">
<li><code>[4, 3, 79, 1, 66, 9, 1]</code></li>
<li><code>[79, 66, 9, 4, 3, 1, 1]</code></li>
<li><code>[79, 66, 9, 4, 3, 1]</code></li>
<li><code>[66, 9, 4, 3, 1, 1]</code><br />
</li>
</ol>
<br />
</li>
<li>What is the value
              of the variable <code>happySheep</code> after ALL of these 
              statements are executed? Hint: if you think the correct answer is not there, 
              you're on the wrong track.<br />
<code><br />
              &gt;&gt;&gt; <span class="n">happySheep</span> <span class="o">=</span> <span class="s">&quot;knoll.shp&quot;</span> <br />
              &gt;&gt;&gt; <span class="n">happySheep</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;ll&#39;</span><span class="p">,</span> <span class="s">&#39;ck&#39;</span><span class="p">)</span> <br />
              &gt;&gt;&gt; <span class="n">happySheep</span><span class="o">.</span><span class="n">upper</span><span class="p">(</span> <span class="p">)</span><br />
              &gt;&gt;&gt; <span class="n">happySheep</span><span class="p">[:</span><span class="mi">4</span><span class="p">]<br />
</span></code> <br />
<ol type="i">
<li><code><span class="n">&quot;Knock.shp&quot;</span></code></li>
<li><code><span class="n">&quot;knoll.shp&quot;</span></code></li>
<li><code><span class="n">&quot;KNO&quot;</span></code></li>
<li><code><span class="n">&quot;KNOCK.SHP&quot;</span></code></li>
<br />
</ol>
</li>
<li>Use an example from parts a and b to explain what an in-place method does, as opposed to a method that only returns a value.<br />
<br />
</li>
</ol>
</li>
<li>Select the line or lines of code that set <code>listA</code> to <code>[0, 10, 20, 30, 40]</code>.<br />
<ol type="a">
<li><code><span class="n">listA</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span></code></li>
<li><code><span class="n">listA</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span></code></li>
<li><code><span class="n">listA </span><span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span></code></li>
<li><code><span class="n">listA</span><span class="o"> =</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">40</span><span class="p">)</span></code></li>
<li><code><span class="n">listA</span><span class="o"> =</span> <span class="nb">range</span><span class="p">(</span><span class="mi">40</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">10</span><span class="p">)</span></code></li>
<li><code><span class="n">listA</span><span class="o"> =</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">41</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span></code><br />
<br />
</li>
</ol>
</li>
<li>The Northeastern region fire data is a text file 
          containing a set of fields followed by records containing entries for 
          those fields.  The following lines of code use Python lists to store the field 
          names and the first data record: <br />
<code><br />
          &gt;&gt;&gt; fields <span class="o">=</span> <span class="p">[</span><span class="s">&quot;FireId&quot;</span><span class="p">,</span> <span class="s">&quot;Org&quot;</span><span class="p">,</span> <span class="s">&quot;Reg-State&quot;</span><span class="p">,</span> <span class="s">&quot;FireType/ProtectionType&quot;</span><span class="p">]</span> <br />
          &gt;&gt;&gt; record <span class="o">=</span> <span class="p">[</span><span class="s">&quot;238998&quot;</span><span class="p">,</span> <span class="s">&quot;NPS&quot;</span><span class="p">,</span> <span class="s">&quot;Northeast&quot;</span><span class="p">,</span> <span class="s">&quot;11&quot;</span><span class="p">]</span> <br />
</code><br />
          Select the line(s) of code that use indexing to print the value of 
          the Reg-State field in the given record. <br />
<br />
<ol type="a">
<li><code><span class="key">print</span> fields[<span class="mi">3</span>]</code></li>
<li><code><span class="key">print</span> record[<span class="mi">1</span>:<span class="mi">3</span>]</code></li>
<li><code><span class="key">print </span>record[<span class="mi">2</span>]</code></li>
<li><code><span class="key">print</span> fields + records</code></li>
<li><code><span class="key">print</span> record[-<span class="mi">2</span>]</code><br />
<br />
</li>
</ol>
</li>
<li>The following code uses list methods and operations to find the minimum value of a list.  Write a line of code that does the same thing but uses a Python built-in function (with no dot notation).
          <p><code>&gt;&gt;&gt; fireTypes <span class="o">=</span> <span class="p">[</span><span class="mi">8</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">]</span> <span class="n"><br />
            &gt;&gt;&gt; 
            fireTypes</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span> <span class="p">)</span> <span class="c"># Sort the numeric list</span> <br />
            &gt;&gt;&gt; <span class="k">print</span> <span class="n">fireTypes</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="c"># Use indexing to print the minimum</span> 2<br />
</code></p>
</li>
<li>The following Interactive Window code samples use square braces in three 
          different ways. Use chapter Key terms to describe what each code statement is doing.<br />
<br />
<ol type="a">
<li><code>
              &gt;&gt;&gt;<span class="n"> theList</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;spam&#39;</span><span class="p">,</span> <span class="s">&#39;eggs&#39;</span><span class="p">,</span> <span class="s">&#39;sausage&#39;</span><span class="p">,</span> <span class="s">&#39;bacon&#39;</span><span class="p">,</span> <span class="s">&#39;spam&#39;</span><span class="p">]</span><br />
</code><br />
</li>
<li><code>
              &gt;&gt;&gt; <span class="n">theList</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><br />
<span class="n">'eggs'</span><br />
</code><br />
</li>
<li><code>
              &gt;&gt;&gt;<span class="n"> theList</span><span class="p">[:</span><span class="mi">3</span><span class="p">]</span><br />
<span class="n">['spam', 'eggs', 'sausage']</span></code> </li>
<br />
</ol>
</li>
<li>Answer the following questions about the traceback message shown below:
          <ol type="a">
<li>What is the name of the exception</li>
<li>What is the name of the script  containing the error? </li>
<li>Which line of the script contains the error? </li>
<li>Explain why this error might have occurred.<br />
<br />
</li>
</ol>
<code><span class="err">          Traceback (most recent call last):<br />
          File &quot;C:\Python27\ArcGIS10.2\Lib\site-packages\pythonwin\pywin\framework\scriptutils.py&quot;, line 326, in RunScript<br />
          exec codeObject in __main__.__dict__<br />
          File &quot;C:\gispy\sample_scripts\ch04\County.py&quot;, line 23, in &lt;module&gt;<br />
          District = sys.argv[5]<br />
          IndexError: list index out of range</span><br />
</code><br />
</li>
<li><strong>noMoreErrors.py</strong> The sample script named 'noMoreErrors.py' currently contains 5 errors. Modify the script to remove all  errors. As you remove errors, note whether the error resulted in a feedback bar message or a traceback message and note the message. Modify the last five lines of the script to report the error messages you encountered. The first two of these have been completed for you already.When the script is repaired, the first portion of the output will look like this (and error messages for #3-5 will also be printed): <br />
<code><span class="n"><br />
          NoMoreErrors.py<br />
          b<br />
          Mucca.gdb<br />
          Dyer20<br />
          DYER<br />
          #1. FEEDBACK BAR: Failed to check - syntax error - EOL while scanning string literal<br />
          #2. TRACEBACK: IndexError: string index out of range<br />
          ...</span><br />
</code><br />
</li>
</ol><a href="#top">back to top</a> <a href="#top">back to top</a> <p><strong>Table 4.2: </strong>Sequence Operations on Lists<br />
<br />
<code><br />
&gt;&gt;&gt;<span class="n"> exampleList</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10000</span><span class="p">,</span> <span class="s">'a'</span><span class="p">,</span> <span class="mf">1.5</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'banana'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">,</span> <span class="s">'double rainbow'</span><span class="p">]</span><br />
</code></p>
<table width="732" border="3">
<tr>
<td width="130"><strong>Operation</strong></td>
<td width="260"><strong>Sample code</strong></td>
<td width="316"><strong>Return value </strong></td>
</tr>
<tr>
<td>length</td>
<td><code>len(exampleList)</code></td>
<td><p><code>7</code><br />
</p></td>
</tr>
<tr>
<td>indexing</td>
<td><code>exampleList[6]</code></td>
<td><code>'double rainbow'</code></td>
</tr>
<tr>
<td>slicing</td>
<td><code>exampleList[</code><code><span class="n">2:4</span></code>]</td>
<td><code>[1.5, 'b']</code><br /></td>
</tr>
<tr>
<td>concatenation</td>
<td><code>exampleList + exampleList</code> </td>
<td><code>[10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow', 10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow']</code></td>
</tr>
<tr>
<td>membership</td>
<td><code>'prune' in exampleList </code></td>
<td><p><code>False</code><br />
</p></td>
</tr>
</table><strong>Operation</strong><strong>Sample code</strong><strong>Return value </strong>length<code>len(exampleList)</code><p><code>7</code><br />
</p>indexing<code>exampleList[6]</code><code>'double rainbow'</code>slicing<code>exampleList[</code><code><span class="n">2:4</span></code>]<code>[1.5, 'b']</code><br />concatenation<code>exampleList + exampleList</code> <code>[10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow', 10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow']</code>membership<code>'prune' in exampleList </code><p><code>False</code><br />
</p><a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <blockquote>
<p>To show line numbers in PythonWin: <br />
                Tools menu &gt; Options...&gt; Editor tab &gt; Set &quot;Line Numbers&quot; Margin Width  &gt;= 30 pixels.</p>
<p>To show line numbers in PyScripter:<br />
              Tools &gt; Options &gt; Editor Options &gt; Display &gt; Gutter: check 'Visible' and 'Show line numbers'.</p>
</blockquote><blockquote>
<p>Always check the feedback panel and the Interactive Window when you run a script in PythonWin.</p>
</blockquote><a href="#top">back to top</a> <p><a href="#top">back to top</a></p><code><br />
<span class="comment"># addWithErrors.py <br />
                  # Purpose: 
                  Demonstrate exceptions within a script<br />
                  # What the script should do when fixed:
                  add two numbers
                  given as arguments.</span><br />
<br />
<span class="key">iport</span> sys <span class="comment"># Import  sys, so that the script can use this built-in Python module.<br />
</span><br />
<span class="n">a</span> <span class="o">=</span> <span class="n">sys.argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="c"># Get the 1st argument from the user and cast it to float</span>.<br />
<span class="n">b</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys.argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="c"># Get the 2nd argument from the user and cast it to float.</span><br />
<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><br />
<span class="k">print</span> <span class="n">The</span> <span class="nb">sum</span> <span class="ow">is</span> <span class="p">{</span><span class="mi">0</span><span class="p">}</span><span class="o">.</span><span class="s">&quot;.format(c)</span><br />
</code>Python statement Output (notice there are 9 letters) <ol>
<li><code>places[0]</code><br />
<br />
</li>
<li><code>places[0:2] + places[-3:]</code><br />
<br />
</li>
<li><code>places[0][0]</code><br />
<br />
</li>
<li><code>len(places)</code><br />
<br />
</li>
<li><code>places[0:5]</code><br />
<br />
</li>
<li><code>places[-4:]</code><br />
<br />
</li>
<li><code>places[11]</code><br />
<br />
</li>
<li><code>places[:2]</code><br />
<br />
</li>
<li><code>'towns' in places</code><br />
<br />
</li>
<li><code>places[1]</code></li>
</ol> <ol type="A">
<li><code>3</code><br />
<br />
</li>
<li><code>&quot;roads&quot;</code><br />
<br />
</li>
<li><code>IndexError</code><br />
<br />
</li>
<li><code>['roads', 'cities']</code><br />
<br />
</li>
<li><code>['roads', 'cities', 'states']<br />
</code><br />
</li>
<li><code>['roads', 'cities', 'roads', 'cities', 'states']</code><br />
<br />
</li>
<li><code>False</code><br />
<br />
</li>
<li><code>'r'</code><br />
<br />
</li>
<li><code>'cities'</code></li>
</ol> Python statement Resulting value of census (there are 
                  only 7 letters) <ol>
<li><code>len(<span class="n"> census </span>)</code></li>
<li> <code><span class="n">census</span><span class="o">.</span><span class="n">insert</span>( 0, 2)</code></li>
<li><code> <span class="n">census</span><span class="o">.</span><span class="n">append</span>( 2 )</code></li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">remove</span>('1')<span class="p"></span></code> </li>
<li><code><span class="n">census</span> <span class="o">=</span> <span class="s">&#39;0&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n"> census </span><span class="p">)</span></code></li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi"> 3</span> <span class="p">)</span></code></li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="s"> &#39;1&#39; </span><span class="p">)</span></code>r </li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span> <span class="p">)</span></code> </li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">reverse</span><span class="p">(</span> <span class="p">)</span></code> <br />
</li>
</ol> <ol type="A">
<li><code>[2, '4', '3', '79', '1', '66', '9', '1']</code><br />
<br />
</li>
<li><code>['1', '1', '3', '4', '66', '79', '9']</code><br />
<br />
</li>
<li><code>['4', '3', '79', '66', '9', '1']</code><br />
<br />
</li>
<li><code>['4', '3', '79', '1', '66', '9', '1']</code><br />
<br />
</li>
<li><code> '403079010660901'</code><br />
<br />
</li>
<li><code>['1', '9', '66', '1', '79', '3', '4']</code><br />
<br />
</li>
<li><code>['4', '3', '79', '1', '66', '9', '1', 2]</code><br />
</li>
</ol><span class="head">4.1 Lists</span> <a name="lists" id="lists"></a><a href="#top">back to top</a> <code>listVariable = [item1, item2, item3,...]</code><strong><span class="head">4.1.1 Sequence operations on lists</span><a name="ops" id="introduction5"></a></strong><a href="#top">back to top</a> <p><strong>Table 4.2: </strong>Sequence Operations on Lists<br />
<br />
<code><br />
&gt;&gt;&gt;<span class="n"> exampleList</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10000</span><span class="p">,</span> <span class="s">'a'</span><span class="p">,</span> <span class="mf">1.5</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'banana'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">,</span> <span class="s">'double rainbow'</span><span class="p">]</span><br />
</code></p>
<table width="732" border="3">
<tr>
<td width="130"><strong>Operation</strong></td>
<td width="260"><strong>Sample code</strong></td>
<td width="316"><strong>Return value </strong></td>
</tr>
<tr>
<td>length</td>
<td><code>len(exampleList)</code></td>
<td><p><code>7</code><br />
</p></td>
</tr>
<tr>
<td>indexing</td>
<td><code>exampleList[6]</code></td>
<td><code>'double rainbow'</code></td>
</tr>
<tr>
<td>slicing</td>
<td><code>exampleList[</code><code><span class="n">2:4</span></code>]</td>
<td><code>[1.5, 'b']</code><br /></td>
</tr>
<tr>
<td>concatenation</td>
<td><code>exampleList + exampleList</code> </td>
<td><code>[10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow', 10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow']</code></td>
</tr>
<tr>
<td>membership</td>
<td><code>'prune' in exampleList </code></td>
<td><p><code>False</code><br />
</p></td>
</tr>
</table><strong>Operation</strong><strong>Sample code</strong><strong>Return value </strong>length<code>len(exampleList)</code><p><code>7</code><br />
</p>indexing<code>exampleList[6]</code><code>'double rainbow'</code>slicing<code>exampleList[</code><code><span class="n">2:4</span></code>]<code>[1.5, 'b']</code><br />concatenation<code>exampleList + exampleList</code> <code>[10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow', 10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow']</code>membership<code>'prune' in exampleList </code><p><code>False</code><br />
</p><strong>Operation</strong><strong>Sample code</strong><strong>Return value </strong>length<code>len(exampleList)</code><p><code>7</code><br />
</p>indexing<code>exampleList[6]</code><code>'double rainbow'</code>slicing<code>exampleList[</code><code><span class="n">2:4</span></code>]<code>[1.5, 'b']</code><br />concatenation<code>exampleList + exampleList</code> <code>[10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow', 10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow']</code>membership<code>'prune' in exampleList </code><p><code>False</code><br />
</p><strong><span class="head">4.1.2 List methods</span></strong><a href="#top">back to top</a> <code>object.method(arguments1, argument2, argument3,...)</code><strong><span class="head">4.1.3 The built-in <code>range</code> function</span><a name="range" id="range"></a></strong><a href="#top">back to top</a> <span class="head">4.1.4 Copying a list</span><a href="#top">back to top</a> <span class="head">4.2 Tuples</span> <a name="tuples" id="introduction2"></a><a href="#top">back to top</a> <span class="head">4.3 Syntax check and tracebacks</span><a name="syntaxCheck" id="introduction3"></a><a href="#top">back to top</a> <blockquote>
<p>To show line numbers in PythonWin: <br />
                Tools menu &gt; Options...&gt; Editor tab &gt; Set &quot;Line Numbers&quot; Margin Width  &gt;= 30 pixels.</p>
<p>To show line numbers in PyScripter:<br />
              Tools &gt; Options &gt; Editor Options &gt; Display &gt; Gutter: check 'Visible' and 'Show line numbers'.</p>
</blockquote><blockquote>
<p>Always check the feedback panel and the Interactive Window when you run a script in PythonWin.</p>
</blockquote><b class="head">4.4 Key terms</b><a name="keyterms" id="keyterms2"></a><a href="#top">back to top</a> <p class="head">4.5 Exercises<a name="exercises" id="exercises"></a></p><p><a href="#top">back to top</a></p><code><br />
<span class="comment"># addWithErrors.py <br />
                  # Purpose: 
                  Demonstrate exceptions within a script<br />
                  # What the script should do when fixed:
                  add two numbers
                  given as arguments.</span><br />
<br />
<span class="key">iport</span> sys <span class="comment"># Import  sys, so that the script can use this built-in Python module.<br />
</span><br />
<span class="n">a</span> <span class="o">=</span> <span class="n">sys.argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="c"># Get the 1st argument from the user and cast it to float</span>.<br />
<span class="n">b</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys.argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="c"># Get the 2nd argument from the user and cast it to float.</span><br />
<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><br />
<span class="k">print</span> <span class="n">The</span> <span class="nb">sum</span> <span class="ow">is</span> <span class="p">{</span><span class="mi">0</span><span class="p">}</span><span class="o">.</span><span class="s">&quot;.format(c)</span><br />
</code>Python statement Output (notice there are 9 letters) <ol>
<li><code>places[0]</code><br />
<br />
</li>
<li><code>places[0:2] + places[-3:]</code><br />
<br />
</li>
<li><code>places[0][0]</code><br />
<br />
</li>
<li><code>len(places)</code><br />
<br />
</li>
<li><code>places[0:5]</code><br />
<br />
</li>
<li><code>places[-4:]</code><br />
<br />
</li>
<li><code>places[11]</code><br />
<br />
</li>
<li><code>places[:2]</code><br />
<br />
</li>
<li><code>'towns' in places</code><br />
<br />
</li>
<li><code>places[1]</code></li>
</ol> <ol type="A">
<li><code>3</code><br />
<br />
</li>
<li><code>&quot;roads&quot;</code><br />
<br />
</li>
<li><code>IndexError</code><br />
<br />
</li>
<li><code>['roads', 'cities']</code><br />
<br />
</li>
<li><code>['roads', 'cities', 'states']<br />
</code><br />
</li>
<li><code>['roads', 'cities', 'roads', 'cities', 'states']</code><br />
<br />
</li>
<li><code>False</code><br />
<br />
</li>
<li><code>'r'</code><br />
<br />
</li>
<li><code>'cities'</code></li>
</ol> Python statement Resulting value of census (there are 
                  only 7 letters) <ol>
<li><code>len(<span class="n"> census </span>)</code></li>
<li> <code><span class="n">census</span><span class="o">.</span><span class="n">insert</span>( 0, 2)</code></li>
<li><code> <span class="n">census</span><span class="o">.</span><span class="n">append</span>( 2 )</code></li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">remove</span>('1')<span class="p"></span></code> </li>
<li><code><span class="n">census</span> <span class="o">=</span> <span class="s">&#39;0&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n"> census </span><span class="p">)</span></code></li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi"> 3</span> <span class="p">)</span></code></li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="s"> &#39;1&#39; </span><span class="p">)</span></code>r </li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span> <span class="p">)</span></code> </li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">reverse</span><span class="p">(</span> <span class="p">)</span></code> <br />
</li>
</ol> <ol type="A">
<li><code>[2, '4', '3', '79', '1', '66', '9', '1']</code><br />
<br />
</li>
<li><code>['1', '1', '3', '4', '66', '79', '9']</code><br />
<br />
</li>
<li><code>['4', '3', '79', '66', '9', '1']</code><br />
<br />
</li>
<li><code>['4', '3', '79', '1', '66', '9', '1']</code><br />
<br />
</li>
<li><code> '403079010660901'</code><br />
<br />
</li>
<li><code>['1', '9', '66', '1', '79', '3', '4']</code><br />
<br />
</li>
<li><code>['4', '3', '79', '1', '66', '9', '1', 2]</code><br />
</li>
</ol>------------------------------------------------------------rows: 26 cols: 2<span class="head">4.1 Lists</span> <a name="lists" id="lists"></a><code>listVariable = [item1, item2, item3,...]</code><strong><span class="head">4.1.1 Sequence operations on lists</span><a name="ops" id="introduction5"></a></strong><strong><span class="head">4.1.2 List methods</span></strong><code>object.method(arguments1, argument2, argument3,...)</code><strong><span class="head">4.1.3 The built-in <code>range</code> function</span><a name="range" id="range"></a></strong><span class="head">4.1.4 Copying a list</span><span class="head">4.2 Tuples</span> <a name="tuples" id="introduction2"></a><span class="head">4.3 Syntax check and tracebacks</span><a name="syntaxCheck" id="introduction3"></a><b class="head">4.4 Key terms</b><a name="keyterms" id="keyterms2"></a><p class="head">4.5 Exercises<a name="exercises" id="exercises"></a></p><span class="head">Chapter objectives</span> <br />
<br />
After reading this chapter, you'll be able to do the following:
<ul>
<li>Create Python lists.</li>
<li>Index into, slice, and concatenate lists.</li>
<li>Find the length of a list and check if an item is in a list.</li>
<li>Append items to a list. </li>
<li>Locate online help for the list methods.</li>
<li>Create a list of numbers automatically.</li>
<li>Differentiate between in-place methods and methods that return a value.</li>
<li>Create and index tuples.</li>
<li>Check script syntax.</li>
<li>Interpret traceback error messages.</li>
</ul>
<hr />
<span class="foo">
<span class="head">Chapter Outline<br />
</span>
<a href="#lists">Lists</a> <br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#ops">Sequence operations on lists</a><br />
        
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#methods">List Methods</a><br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="range">The built-in <code>range</code> function</a><br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#copying">Copying Lists</a><br />
<a href="#tuples">Tuples</a><br />
<a href="#syntaxCheck">Syntax check and tracebacks</a><br />
<a href="#keyterms">Key terms</a><br />
<a href="#exercises">Exercises</a><br />
</span>
<br />
Python has built-in data types for managing collections of items, including lists, tuples, sets, dictionaries, to name a few. This chapter mainly focuses on lists, since these are ubiquitous in Python code. Tuples are also discussed briefly as well; We'll use these in the chapter on cursors. 
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">4.1 Lists</span> <a name="lists" id="lists"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>        GIS scripting frequently involves manipulating collections of items, such as  files or data records. For example, you might have multiple tabular data files with special characters in the fields preventing direct import into ArcGIS.  A script to replace the characters can use lists to hold the  file names and  
        field names. Then the files and fields can be batch processed. Batch processing is the key capability of scripting.  This chapter presents the core list concepts for solving GIS problems like this. A Python <em>list</em> is   a data type that holds a collection of  items. The items in a list are surrounded by square brackets and separated by commas. The syntax for a list assignment statement looks like this:</p>
<table width="812" border="0" bgcolor="#ffcccc">
<tr>
<th scope="row"><code>listVariable = [item1, item2, item3,...]</code></th>
</tr>
</table>
<p>In this example, <code>fields</code> is a Python list of field names from a comma separated value ('.csv') file containing 
        wildfire data:<br />
</p>
<p><code>&gt;&gt;&gt;<span class="n"> fields</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;FireId&#39;</span><span class="p">,</span> <span class="s">&#39;Org&#39;</span><span class="p">,</span> <span class="s">&#39;Reg-State&#39;</span><span class="p">,</span> <span class="s">&#39;FireType/ProtectionType&#39;</span><span class="p">]</span><br />
        &gt;&gt;&gt; fields<br />
</code><code><span class="n">['FireId', 'Org', 'Reg-State', 
        'FireType/ProtectionType']</span></code><br />
        &gt;&gt;&gt; type(fields)<br />
<code><span class="n">&lt;type 'list'&gt;</span></code><br />
<br />
        All of the items in the <code>fields</code> list are strings, but a list can hold items  of varying data types. For example, a list can contain numbers, strings and other lists. The 'stateData' list assigned here contains a string, a list, and 
        an integer:<br />
</p>
<p><code>&gt;&gt;&gt;<span class="n"> stateData</span> <span class="o">=</span> <span class="p">[</span> <span class="s">'Florida'</span><span class="p">,</span> <span class="p">[</span><span class="s">'Alabama'</span><span class="p">,</span> <span class="s">'Georgia'</span> <span class="p">],</span> <span class="mi">18809888</span> <span class="p">]</span><br />
</code></p>
<p>This list contains both numeric and string items:<br />
</p>
<p><code>&gt;&gt;&gt;<span class="n"> exampleList</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10000</span><span class="p">,</span> <span class="s">'a'</span><span class="p">,</span> <span class="mf">1.5</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'banana'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">,</span> <span class="s">'double rainbow'</span><span class="p">]</span><br />
</code></p>
<p>You can also create an empty list by assigning empty square brackets to a variable, as in this example:<br />
</p>
<p><code>&gt;&gt;&gt;<span class="n"> dataList</span> <span class="o">=</span> <span class="p">[</span> <span class="p">]</span><br />
</code></p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><strong><span class="head">4.1.1 Sequence operations on lists</span><a name="ops" id="introduction5"></a></strong></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Lists, like strings are  one of the sequence data types in Python.  The sequence operations discussed in the context of string data types also apply to lists--the length of a list can be found, lists can be indexed, sliced, and concatenated, and you can check if an item is a member of a 
        list. Table 4.2 shows sample code and output for each of these operations. </p>
<table bgcolor="#EEEEEE" border="0" bordercolor="#ece9d8" width="779">
<tbody>
<tr>
<td scope="row"><p><strong>Table 4.2: </strong>Sequence Operations on Lists<br />
<br />
<code><br />
&gt;&gt;&gt;<span class="n"> exampleList</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10000</span><span class="p">,</span> <span class="s">'a'</span><span class="p">,</span> <span class="mf">1.5</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'banana'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">,</span> <span class="s">'double rainbow'</span><span class="p">]</span><br />
</code></p>
<table width="732" border="3">
<tr>
<td width="130"><strong>Operation</strong></td>
<td width="260"><strong>Sample code</strong></td>
<td width="316"><strong>Return value </strong></td>
</tr>
<tr>
<td>length</td>
<td><code>len(exampleList)</code></td>
<td><p><code>7</code><br />
</p></td>
</tr>
<tr>
<td>indexing</td>
<td><code>exampleList[6]</code></td>
<td><code>'double rainbow'</code></td>
</tr>
<tr>
<td>slicing</td>
<td><code>exampleList[</code><code><span class="n">2:4</span></code>]</td>
<td><code>[1.5, 'b']</code><br /></td>
</tr>
<tr>
<td>concatenation</td>
<td><code>exampleList + exampleList</code> </td>
<td><code>[10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow', 10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow']</code></td>
</tr>
<tr>
<td>membership</td>
<td><code>'prune' in exampleList </code></td>
<td><p><code>False</code><br />
</p></td>
</tr>
</table></td>
</tr>
</tbody>
</table>
<p>The operations work on list items just like they work on string characters; however, lists are mutable. This means that indexing can also be used to <em>change</em> the value of an item in the list. Recall that strings are immutable and trying to change an indexed character in a  string returns an error. In the following example, a list is created, then on the second line, an indexed list item is modified. The last line in the example shows that the first item in the list has been changed:<br />
</p>
<p><code>&gt;&gt;&gt;<span class="n"> exampleList</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10000</span><span class="p">,</span> <span class="s">'a'</span><span class="p">,</span> <span class="mf">1.5</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'banana'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">,</span> <span class="s">'double rainbow'</span><span class="p">] </span><span class="comment">#creating the list</span><br />
        &gt;&gt;&gt;<span class="n"> exampleList</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;prune&#39; </span><span class="comment"># modifying the first item in the list.</span><br />
        &gt;&gt;&gt; exampleList<br />
        ['prune', 'a', 1.5, 'b', 'banana', 'c', 'double rainbow']
      </code></p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><strong><span class="head">4.1.2 List methods</span></strong></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Also like strings, list objects have a specific set of methods associated with them including <code>append</code>, <code>extend</code>, <code>insert</code>, <code>remove</code>, <code>pop</code>, <code>index</code>, <code>count</code>, <code>sort</code>, and <code>reverse</code>.  For a complete description of each, search  Guido Van Rossum's Python
        Tutorial for the 'More on lists' section.   Like  string methods, list methods use the
        dot notation:</p>
<table width="812" border="0" bgcolor="#ffcccc">
<tr>
<th scope="row"><code>object.method(arguments1, argument2, argument3,...)</code></th>
</tr>
</table>
<p>There is one notable difference between list and string methods that relates to mutability. Many list methods are in-place methods.  <em>In-place methods</em> are those methods which change the object that calls them.  
        Whereas, other  methods do not alter the object that calls them; Instead, they return a value. In-place list methods can change the list itself. In-place list methods such as append, extend, reverse, and sort do not  use an assignment 
        statement to propagate the new list. The example below creates a  <code>fireIDs</code> list and   appends a new id to end of the list using the  <code>append</code> method with the new id as the argument: </p>
<p><code>&gt;&gt;&gt;<span class="n"> fireIDs</span> <span class="o">=</span> <span class="p">[</span> <span class="s">'238998'</span><span class="p">,</span> <span class="s">'239131'</span><span class="p">,</span> <span class="s">'239135'</span><span class="p">,</span> <span class="s">'239400'</span><span class="p">]</span> <span class="comment"># initialize the list with 4 IDs.</span><br />
        &gt;&gt;&gt; newID <span class="o">=</span> <span class="s">'239413'</span><br />
        &gt;&gt;&gt; <span class="n">fireIDs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">newID</span><span class="p">)</span> <span class="comment"># Changing the list in-place</span>.<br />
        &gt;&gt;&gt; fireIDs<br />
        ['238998', '239131', '239135', '239400', 
        '239413']<br />
        &gt;&gt;&gt;
        <span class="comment"># New value was appended to the end of the list, which now holds 5 IDs.</span><br />
</code></p>
<p>Since <code>append</code> is an in-place method, the original list is modified, in-place. In contrast, the   list method named 'count' is not an in-place method. It does not alter the list, but returns a value instead. The following example creates a  <code>fireTypes</code> list and determines the number of code 11 fires that had
      occurred, using the <code>count </code> method:<a name="range" id="introduction4"></a></p>
<p><code><span class="n">&gt;&gt;&gt; fireTypes</span> <span class="o">=</span> <span class="p">[</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">16</span> <span class="p">]</span><br />
<span class="n">&gt;&gt;&gt; countResults</span> <span class="o">=</span> <span class="n">fireTypes</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="mi">11</span><span class="p">)<br />
</span>&gt;&gt;&gt; <span class="k">print</span> <span class="n">countResults</span><br />
<span class="mi">4 </span><span class="comment"># The list contains 4 elevens.</span><br />
&gt;&gt;&gt; fireTypes <span class="comment"># Note that the list contents are unchanged</span>:<br />
</code><code><span class="n">[ 16, 13, 16, 6, 17, 16,   6,
        
        11, 11,  12,
        14,
        13,
        11, 13,
        13, 13, 11, 15,  16 ]</span></code><br />
</p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><strong><span class="head">4.1.3 The built-in <code>range</code> function</span><a name="range" id="range"></a></strong></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>The built-in <code>range</code> function is a convenient way to generate numerical lists which can be useful for  batch processing related tasks.  The <code>range</code> function takes one to three numerical arguments and returns a list of numbers. If you pass in one  numerical argument, <code>n</code>, it returns a Python list containing the integers <code>0</code> through  <code>n - 1</code>, as in the following example:<br />
<br />
<code>&gt;&gt;&gt;<span class="nb"> range</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span><br />
</code><code><span class="n">[0, 1, 2, 3, 4, 5, 6, 7, 8]</span></code><br />
</p>
<p>By using a second argument, you can modify the lower bound:<br />
<code><br />
        &gt;&gt;&gt;<span class="nb"> range</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">9</span><span class="p">)</span><br />
</code><code><span class="n">[5, 6, 7, 8]</span></code><br />
<br />
        By using a third argument, can change the step size: <br />
<code><br />
        &gt;&gt;&gt; <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><br />
</code><code><span class="n">[0, 2, 4, 6, 8]</span></code><br />
<br />
        The <code>range</code> function is used again in a later chapter to create numeric lists for looping.</p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">4.1.4 Copying a list</span></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>In-place methods like <code>reverse</code> and <code>sort</code> alter the order of the list. For example, here the <code>reverse</code> method reverses the order of the <code>fireIDs</code> list:</p>
<p><code>&gt;&gt;&gt;<span class="n"> fireIDs</span> <span class="o">=</span> <span class="p">[</span> <span class="s">&quot;238998&quot;</span><span class="p">,</span> <span class="s">&quot;239131&quot;</span><span class="p">,</span> <span class="s">&quot;239135&quot;</span><span class="p">,</span> <span class="s">&quot;239400&quot;</span><span class="p">]</span><br />
        &gt;&gt;&gt;<span class="n"> fireIDs</span><span class="o">.</span><span class="n">reverse</span><span class="p">(</span> <span class="p">)</span><br />
        &gt;&gt;&gt; fireIDs<br />
</code><code><span class="n">['239400', '239135', '239131', 
        '238998']</span></code><br />
</p>
      In some cases, it may be necessary to keep a copy of the list in its original order. Python variables can be thought of as tags attached to objects. Because of this, there are two types of copy operations for objects: shallow copies and deep copies. A <em>shallow copy</em> attaches two tags to the same list object. A <em>deep copy</em> attaches each tag to a separate list object.  The assignment statement shown in the following example doesn't work as you might intuitively expect. Python list <code>a</code> is copied to list <code>b</code> but both the lists are reversed when <code>a</code> is reversed. This is a shallow copy:<br />
<code><br />
      &gt;&gt;&gt;<span class="n"> a</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">11</span><span class="p">)</span><br />
      &gt;&gt;&gt; a<br />
</code><code><span class="n">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></code><br />
      &gt;&gt;&gt; b <span class="o">=</span> a <span class="comment"># &quot;shallow copy&quot; list a<br />
</span> &gt;&gt;&gt; <span class="key"></span>b<br />
<code><span class="n">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></code><br />
      &gt;&gt;&gt; a.reverse( ) <span class="comment"># reverse list a</span><br />
      &gt;&gt;&gt; a<br />
<code><span class="n">[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]</span></code><br />
      &gt;&gt;&gt; b<br />
<code><span class="n">[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]</span></code> <span class="comment"># list b is also reversed</span><br />
<br />
<br />
<img src="../images/lists1.png" width="318" height="135" /><br />
<br />
<p> Both tags <code>a</code> and <code>b</code> are pointing to the same object. Instead, we need to create a second object via a deep copy to retain a copy of the list in its original order. To do this we need to create a new   list and  attach the <code>b</code> tag to it. The built-in <code>list</code> function constructs a new list object based on a list given as an argument. This built-in function is used to create a deep copy in the next example. <code>list(a)</code> constructs a new <code>list</code> object and this is assigned to <code>b</code>. In the end, <code>a</code> is reversed, but <code>b</code> retains the original order:</p>
<p><code>&gt;&gt;&gt;<span class="n"> a</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">11</span><span class="p">)</span><br />
        &gt;&gt;&gt; a<br />
</code><code><span class="n">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></code><br />
        &gt;&gt;&gt;<span class="n"> b</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">a</span><span class="p">) </span><span class="comment"># &quot;deep copy&quot; list a<br />
</span> &gt;&gt;&gt; <span class="key"></span>b<br />
<code><span class="n">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></code><br />
        &gt;&gt;&gt; a.reverse( ) <span class="comment"># reverse list a</span><br />
        &gt;&gt;&gt; a<br />
<code><span class="n">[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]</span></code><br />
        &gt;&gt;&gt; b<br />
<code><span class="n">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></code> <span class="comment"># list b is not reversed</span><br />
<br />
<img src="../images/lists2.png" width="314" height="208" /><br />
</p>
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">4.2 Tuples</span> <a name="tuples" id="introduction2"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>A <em>tuple</em> is another Python data type for holding a collection of items. A tuple is a set of comma separated items, but round brackets (parentheses) are used instead of square brackets. When a tuple is printed, it is surrounded by parentheses.  
        A tuple can  be created with or without parentheses around the items: </p>
<p><code>&gt;&gt;&gt; <span class="n">t</span> <span class="o">=</span> <span class="s">&quot;abc&quot;</span><span class="p">,</span> <span class="mi">456</span><span class="p">,</span> <span class="s">&#39;wxyz&#39;</span> <br />
        &gt;&gt;&gt; <span class="nb">type</span><span class="p">(</span><span class="n">t</span><span class="p">)</span><br />
</code><code><span class="n">&lt;type 'tuple'&gt;</span></code><br />
        &gt;&gt;&gt; t<br />
<code><span class="n">('abc', 456, 'wxyz')</span></code><br />
<br />
        &gt;&gt;&gt; <span class="n">t2</span> <span class="o">=</span> <span class="p">(</span> <span class="mf">4.5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mf">0.3</span><span class="p">)</span> <br />
        &gt;&gt;&gt;<span class="nb"> type</span><span class="p">(</span><span class="n">t2</span><span class="p">)</span><br />
<code><span class="n">&lt;type 'tuple'&gt;</span></code><br />
        &gt;&gt;&gt; t2<br />
<code><span class="n">(4.5, 7, 0.3)</span></code><br />
</p>
<p>Like strings, tuples items can be indexed but they are not mutable. It is not possible to assign individual items of a tuple with indexing:<br />
<code><br />
        &gt;&gt;&gt;<span class="n"> t</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><br />
</code><code><span class="n">'abc'</span></code><br />
        &gt;&gt;&gt;<span class="n"> t</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><br />
<span class="mi">456</span><br />
        &gt;&gt;&gt; <span class="n">t2</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><br />
<span class="mi">4.5</span><br />
        &gt;&gt;&gt; <span class="n">t2</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> 5<br />
<span class="err">Traceback (most recent call last):<br />
        File &quot;&lt;interactive input&gt;&quot;, line 1, in &lt;module&gt;<br />
        TypeError: 'tuple' object does not support item assignment</span><br />
</p>
<p>Tuples are used in situations where immutability is desirable. For example, they are often used for (x,y,z) point coordinates or for holding the set of items in a data record.</p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">4.3 Syntax check and tracebacks</span><a name="syntaxCheck" id="introduction3"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Most of the  examples in the book until this point have used the Interactive Window to explain the basic Python components. In upcoming chapters we will begin to write complete scripts.  Before we do so, it will be useful to become  familiar with syntax checking in PythonWin. Chapter 2  discussed examples of errors, tracebacks, and exceptions thrown by interactive input. Now we'll compare  interactive input error handling to script window error handling.</p>
<p align="left"> The Interactive Window automatically gives you immediate feedback in the form of a traceback message when you enter code that contains a syntax error, because it evaluates (runs) the code when you enter it. For example, a traceback message is printed, because of the following code, in which the <code>print</code> keyword is misspelled as  <code>pirnt </code>:<br />
<code><br />
        &gt;&gt;&gt; pirnt test<br />
<span class="err">Traceback (  File &quot;&lt;interactive input&gt;&quot;, line 1<br />
        pirnt test<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^<br />
        SyntaxError: invalid syntax</span><br />
</code><br />
        When you enter code in a PythonWin script window, you don't automatically receive immediate feedback as you're writing, but you can trigger syntax checking when you're ready by clicking a button.  The PythonWin syntax checker is similar to a word processing spelling checker.  The 'check' button, the one with the checkmark, on the PythonWin standard toolbar checks the syntax without executing the code.  It finds syntax errors, such as incorrect indentation, misspelling of keywords, and missing punctuation. </p>
<p><img src="../images/check_pythonwin.jpg" alt="check syntax in Pythonwin" width="444" height="81" /><br />
        Figure 4.1: The 'check' button checks the syntax of the current script.</p>
<p>The feedback panel in the lower left corner of PythonWin shows the result of the check. If an error is detected, the feedback panel  says &quot;Failed to check - syntax error - invalid syntax&quot; as shown in Figure 4.1. The cursor jumps to a position  near to the first syntax error it detects in the script, usually the same line or the line following the erroneous line. To try this yourself,</p>
<ol>
<li> Create a new script with one line of code as shown in Figure 4.2. </li>
<li>The check button is disabled (grayed out <img src="../images/checkButton1.png" alt="checkbutton" />). You can't check the syntax until the script has been saved at least once. Save the script in 'C:\gispy\scratch' as script 'test.py'. </li>
<li>Click in the 'test.py' script window to make sure your window focus is there and not in the Interactive Window. </li>
<li>Now click the 'check' button <img src="../images/checkButton2.png" alt="checkbutton" />, which became enabled when the script was saved.</li>
<li> Observe the feedback panel and the cursor (see Figure 4.2).  The feedback panel says  <code>Failed to check - syntax error - invalid syntax</code> and the  cursor has jumped to the erroneous line. It can't detect exactly what's wrong, so it gives this generic message and moves the cursor near to where it detects an error.<br />
<img src="../images/syntax_error.png" alt="syntax checker" width="326" height="349" />&nbsp;&nbsp;&nbsp;&nbsp;<br />
          Figure 4.2: Syntax checker finds an error. <br />
<br />
</li>
<li>Next click the 'Run' button <img src="../images/running_man.png" alt="the run button" width="24" border="1" height="23" /> to see if it will run. The feedback shows a syntax error message --&quot;Failed to <em>run script...</em>&quot; (Figure 4.3).  If you overlook the feedback panel, it may seem  as if the program is not responding to the 'Run' button click. Check the feedback panel whenever you run a script. <br />
<img src="../images/syntax_error2.png" /><br />
          Figure 4.3: Script fails to run. <br />
<br />
</li>
<li> The script will not run until the syntax errors are repaired; Repair the syntax error--change  'pirnt' to 'print'.</li>
<li>Click the 'check' button again.</li>
<li>The feedback bar reports success: &quot;Python and TabNanny successfully checked the file&quot; (Figure 4.4). The TabNanny, specialized program for checking indentation is run as part of the syntax checking process.<br />
<img src="../images/syntax_error3.png" width="329" height="348" /><br />
          Figure 4.4: Successful syntax check.<br />
<br />
</li>
<li>A successful syntax check does not necessarily mean that the code is free of errors. Click the 'Run' button now that the syntax has been corrected. The feedback panel reports that an exception was raised. This time a traceback error is printed in the Interactive Window (Figure 4.5) because the error was only detected when the script ran, not during the syntax checking phase. <br />
<img src="../images/syntax_error4.png" /> <br />
          Figure 4.5: Exception raised. </li>
</ol>
<p> The syntax check can only detect errors that violate certain syntax rules. Some errors can only be detected when Python attempts to run the code and then an error message appears in the feedback panel when it reaches a problem. When Python tries to print <code>test</code>, it throws an exception and prints a traceback message. A script traceback differs slightly from  interactive input traceback because the message traces the origin of the error. </p>
<p>Entering the code from 'test.py' in the Interactive Window prints the following traceback:<br />
<code><br />
        &gt;&gt;&gt; <span class="key">print</span> test <br />
<span class="err">Traceback (most recent call last):<br />
        File &quot;&lt;interactive input&gt;&quot;, line 1, in &lt;module&gt;<br />
        NameError: name 'test' is not defined</span><br />
</code></p>
<p>Whereas, the traceback   message in Figure 4.5 thrown by running 'test.py' reads as follows:<br />
<code><br />
        &gt;&gt;&gt; <span class="err">Traceback (most recent call last):<br />
        File &quot;C:\Python27\ArcGIS10.1\Lib\site-packages\pythonwin\pywin\framework\scriptutils.py&quot;, line 326, in RunScript<br />
        exec codeObject in __main__.__dict__<br />
        File &quot;C:\gispy\scratch\test.py&quot;, line 1, in &lt;module&gt;<br />
        print test<br />
        NameError: name 'test' is not defined</span><br />
</code></p>
<p>In many cases, the most pertinent information appears near the end of the traceback. The last line  names the exception (<code>NameError</code>) and describes the error (name <code>test</code> is not defined). The last line of both the interactive traceback and the script window traceback are identical, but the preceding lines indicate the location of the error. In one case, this is <code>&lt;interactive input&gt;</code>. <br />
<br />
<code><span class="err">File &quot;&lt;interactive input&gt;&quot;, line 1, in &lt;module&gt;</span><br />
</code></p>
<p>In the other case, the line of code is printed beneath the location of the line of the script which caused the error (line 1 of test.py).<br />
<code><br />
<span class="err">File &quot;C:\gispy\scratch\test.py&quot;, line 1, in &lt;module&gt;<br />
        print test</span><br />
</code></p>
<p>Python keeps track of a call stack. The top of the stack has the script you've written. Next comes a script that your script has triggered to run. The traceback prints the stack, printing the line of code that was triggered and the name of the script. The bottom of the stack has the Python program that runs the scripts ('scriptutils.py'). In the case of this example, there are only two scripts in the stack--'test.py' and 'scriptutils.py'. These lines show the line of code and that was triggered in scriptutils.py:<br />
<br />
<code><span class="err">File &quot;C:\Python27\ArcGIS10.1\Lib\site-packages\pythonwin\pywin\framework\scriptutils.py&quot;, line 326, in RunScript<br />
        exec codeObject in __main__.__dict__<br />
</span></code></p>
<p>We can  ignore this part of the traceback. The only part of the stack that is interesting for our purposes is the line of code which we wrote that caused the error. This is why we focus mainly on the last few lines of the message. Traceback messages print the script line number where the error occurred. The examples in the upcoming chapters of this book usually report only a portion of tracebacks.</p>
<table width="779" border="3" bgcolor="#CEDAE3">
<tr>
<td width="765" height="76"><blockquote>
<p>To show line numbers in PythonWin: <br />
                Tools menu &gt; Options...&gt; Editor tab &gt; Set &quot;Line Numbers&quot; Margin Width  &gt;= 30 pixels.</p>
<p>To show line numbers in PyScripter:<br />
              Tools &gt; Options &gt; Editor Options &gt; Display &gt; Gutter: check 'Visible' and 'Show line numbers'.</p>
</blockquote></td>
</tr>
</table>
<p>These examples show that the Interactive Window prints a traceback message immediately when you enter erroneous code because the code is evaluated immediately; Whereas, script window code is only checked when you use the syntax check button or try to run the code.  If a syntax error is found in a script, the feedback bar reports an error and the cursor moves near to the first detected error. Some errors are not detectable by the syntax check. These errors stop the script from running and print traceback messages in the Interactive Window. The traceback, read from bottom to top, names the exception, describes the error, and prints the erroneous line and the line number in the script where it was found. In summary, checking syntax, showing line numbers, and reading tracebacks will help you build working scripts as you progress through the upcoming chapters.</p>
<table width="779" border="3" bgcolor="#CEDAE3">
<tr>
<td width="765" height="76"><blockquote>
<p>Always check the feedback panel and the Interactive Window when you run a script in PythonWin.</p>
</blockquote></td>
</tr>
</table>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><b class="head">4.4 Key terms</b><a name="keyterms" id="keyterms2"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p> <code>List </code> data type<br />
        in-place method<br />
        mutable vs. immutable<br />
        shallow copy vs. deep copy<br />
        built-in  <code>list</code> function<br />
        Sequence operations (length, indexing, concatenation, slicing, membership)<br />
        List methods<br />
        'Tuple' data type</p>
<hr />
<table width="775" border="0">
<tbody>
<tr>
<th width="684" height="28" align="left" scope="row"><p class="head">4.5 Exercises<a name="exercises" id="exercises"></a></p></th>
<td width="81" align="right"><p><a href="#top">back to top</a></p></td>
</tr>
</tbody>
</table>
<br />
<ol>
<li> Practice interpreting exceptions and diagnosing errors as you follow the given steps. Then answer the follow-up questions.
          <table border="1" cellpadding="2" cellspacing="2" bgcolor="#ffffcc" style="text-align: left; width: 412px; height: 30px;">
<tbody>
<tr>
<td nowrap="nowrap" style="vertical-align: top;"><code><br />
<span class="comment"># addWithErrors.py <br />
                  # Purpose: 
                  Demonstrate exceptions within a script<br />
                  # What the script should do when fixed:
                  add two numbers
                  given as arguments.</span><br />
<br />
<span class="key">iport</span> sys <span class="comment"># Import  sys, so that the script can use this built-in Python module.<br />
</span><br />
<span class="n">a</span> <span class="o">=</span> <span class="n">sys.argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="c"># Get the 1st argument from the user and cast it to float</span>.<br />
<span class="n">b</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys.argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="c"># Get the 2nd argument from the user and cast it to float.</span><br />
<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><br />
<span class="k">print</span> <span class="n">The</span> <span class="nb">sum</span> <span class="ow">is</span> <span class="p">{</span><span class="mi">0</span><span class="p">}</span><span class="o">.</span><span class="s">&quot;.format(c)</span><br />
</code></td>
</tr>
</tbody>
</table>
<ol type="a">
<li> Open 'addWithErrors.py' and save  it as 'addWithOutErrors.py'. This script is like 'add_version2.py' from Chapter 2, but several errors have been introduced.</li>
<li>Run the syntax check.<br />
              The feedback panel says: &quot;Failed to check - syntax error - invalid syntax&quot; and the cursor jumps to line 5. In the steps below, you'll see that there are several errors, but the code is evaluated from top to bottom, so the cursor jumps to the first error Python detects. Do you see a problem on that line?<br />
</li>
<li>The keyword 'import' is misspelled Replace 'iport' with 'import'.</li>
<li>Run the syntax check.<br />
              The feedback panel says:  <code>&quot;Failed to check - syntax error - invalid syntax&quot; </code> and now the cursor jumps to line 9. (Now line 9 is the first place an error is detected).</li>
<li>But there's nothing wrong with line 9! Can you find the error is on the previous line? The closing parenthesis is missing on line 8. The cursor jumps to line 9 because Python detected an assignment statement before the parentheses were closed. Until it reached line 9, it didn't detect that there was anything wrong.<br />
              Add ')' just before the comment on line 8. So that it looks like this:<br />
<code><span class="n">b</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys.argv</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span> <span class="comment"> # Get the ...</span> </code></li>
<li>Run the syntax check.<br />
              The feedback panel says: &quot;Failed to check - syntax error - invalid syntax&quot; and the cursor jumps to line 10. Do you see the syntax error on line 10? <br />
</li>
<li>Line 10 is missing a quotation mark on the string. Add a quotation mark (&quot;) after the <code>print</code>  keyword and the text colors change so that  they looks like this:<br />
<code><span class="k">print</span> <span class="s">&quot;The sum is {0}.&quot;</span><span class="o">.</span>format<span class="p">(</span>c<span class="p">)</span> </code></li>
<li>Run the syntax check. <br />
              The feedback panel says: &quot;Python and TabNanny successfully checked the file&quot;. All the detectable syntax errors have been corrected, so the script can be run.</li>
<li>Run the script with no arguments by clicking the 'Run' button. The following traceback message is printed:<br />
<code><span class="err"><br />
              File &quot;C:\gispy\scratch\addWithOutErrors.py&quot;, line 7, in &lt;module&gt;<br />
              a = sys.argv[1] # Get the 1st argument from the user and cast it to float.<br />
              IndexError: list index out of range</span></code><br />
</li>
<li>The traceback message says an <code>IndexError</code> occurred on line 7 of 'addWithOutErrors.py'. In this case, the traceback is generated because we didn't provide any user arguments. Index 1 is out of range, because no script arguments were used.</li>
<li>Run the code with arguments 3 and 8. The following traceback message is printed:<span class="err"><br />
              File &quot;C:\gispy\scratch\addWithOutErrors.py&quot;, line 9, in &lt;module&gt;<br />
              c = a + b<br />
              TypeError: cannot concatenate 'str' and 'int' objects</span></li>
<li>The traceback message says a <code>TypeError</code> occurred on line 9 of our script. It says it cannot concatenate a string object with an integer object. When you get a type error, it's useful to check the type of the variables using the built-in type function, to see if they are the data type that you expect them to be. Check the data types of 'a' and 'b' in the Interactive Window using the built-in <code>type</code> function:<br />
<code><br />
              &gt;&gt;&gt; <span class="nb">type</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <br />
<span class="n">&lt;type 'str'&gt;</span><br />
              &gt;&gt;&gt; <span class="nb">type</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <br />
<span class="n">&lt;type 'int'&gt;</span></code><br />
<br />
</li>
<li><code>a</code> is a string because arguments are strings unless they are cast to another type. <code>b</code> is cast to integer. Cast <code>a</code> to integer too by changing line 7 to look like this:<br />
<code><br />
<span class="n">a</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys.argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span></code><br />
<br />
</li>
<li>Run the script again. The feedback bar says &quot;Script File 'C:\gispy\scratch\addWithoutErrors.py' returned exit code 0&quot; and the following prints in the Interactive Window.<br />
<br /><code>
            &gt;&gt;&gt; The sum is 11. </code><br />
<br />
            This is good news. It means the script ran to completion without throwing any exceptions.<br />
<br />
</li>
</ol>
          Follow-up questions:<br />
<ol type="i">
<li> What does the cursor do when you use the syntax checker and a syntax error occurs? Specifically, where does it go?</li>
<br />
<li>How does PythonWin display a quotation mark that's missing its partner (the mark on the other end of the string literal)?</li>
<br />
<li>When you use your mouse to select a parenthesis that has a matching partner, how does PythonWin display the parentheses?</li>
<br />
<li>When  you use your mouse to select a parenthesis that does not have a matching partner, how does PythonWin display the parenthesis?</li>
<br />
<br />
</ol>
</li>
<li>The Python statements on the left use operations involving the list type variable <code>places</code><em>. </em>Match the Python 
          statement with its output. All answers MUST BE one of the letters A 
          through I. If you think the answer is not there, you're on the wrong 
          track! The list variable named <code>places</code> is assigned as 
          follows: <br />
<code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />
<span class="n">places</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;roads&quot;</span><span class="p">,</span> <span class="s">&quot;cities&quot;</span><span class="p">,</span> <span class="s">&quot;states&quot;</span><span class="p">]</span> <br />
</code><br />
<br />
<table width="634" border="3">
<tbody>
<tr>
<td width="301">Python statement </td>
<td width="313">Output (notice there are 9 letters) </td>
</tr>
<tr>
<td><ol>
<li><code>places[0]</code><br />
<br />
</li>
<li><code>places[0:2] + places[-3:]</code><br />
<br />
</li>
<li><code>places[0][0]</code><br />
<br />
</li>
<li><code>len(places)</code><br />
<br />
</li>
<li><code>places[0:5]</code><br />
<br />
</li>
<li><code>places[-4:]</code><br />
<br />
</li>
<li><code>places[11]</code><br />
<br />
</li>
<li><code>places[:2]</code><br />
<br />
</li>
<li><code>'towns' in places</code><br />
<br />
</li>
<li><code>places[1]</code></li>
</ol> </td>
<td><ol type="A">
<li><code>3</code><br />
<br />
</li>
<li><code>&quot;roads&quot;</code><br />
<br />
</li>
<li><code>IndexError</code><br />
<br />
</li>
<li><code>['roads', 'cities']</code><br />
<br />
</li>
<li><code>['roads', 'cities', 'states']<br />
</code><br />
</li>
<li><code>['roads', 'cities', 'roads', 'cities', 'states']</code><br />
<br />
</li>
<li><code>False</code><br />
<br />
</li>
<li><code>'r'</code><br />
<br />
</li>
<li><code>'cities'</code></li>
</ol> </td>
</tr>
</tbody>
</table>
<br />
<br />
</li>
<li>The Python statements on the left use list
          methods  and operations (and one string method) involving 
          the list type variable <code>census</code><em>. </em>Match the Python statement with the 
          resulting value of the <code>census</code> variable. Consider these as 
          individual statements, not cumulative. In other words, reset the value 
          of <code>census</code> to its original value between each command. All 
          answers MUST BE one of the letters A through G. <strong>Notice that the question
          asks for matching the Python statement with the  resulting value of the 
          <code>census</code> variable and not matching the  function with the value 
          it returns. If you think the answer is not there, you're on the wrong 
          track!</strong> <br />
          The list variable called 'census' is assigned as 
          follows: <br />
<code><br />
          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;census = 
          ['4', '3', '79', '1', '66', '9', '1']<br />
</code><br />
<table width="573" border="3">
<tbody>
<tr>
<td width="252">Python statement </td>
<td width="301">Resulting value of census (there are 
                  only 7 letters) </td>
</tr>
<tr>
<td><ol>
<li><code>len(<span class="n"> census </span>)</code></li>
<li> <code><span class="n">census</span><span class="o">.</span><span class="n">insert</span>( 0, 2)</code></li>
<li><code> <span class="n">census</span><span class="o">.</span><span class="n">append</span>( 2 )</code></li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">remove</span>('1')<span class="p"></span></code> </li>
<li><code><span class="n">census</span> <span class="o">=</span> <span class="s">&#39;0&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n"> census </span><span class="p">)</span></code></li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi"> 3</span> <span class="p">)</span></code></li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="s"> &#39;1&#39; </span><span class="p">)</span></code>r </li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span> <span class="p">)</span></code> </li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">reverse</span><span class="p">(</span> <span class="p">)</span></code> <br />
</li>
</ol> </td>
<td><ol type="A">
<li><code>[2, '4', '3', '79', '1', '66', '9', '1']</code><br />
<br />
</li>
<li><code>['1', '1', '3', '4', '66', '79', '9']</code><br />
<br />
</li>
<li><code>['4', '3', '79', '66', '9', '1']</code><br />
<br />
</li>
<li><code>['4', '3', '79', '1', '66', '9', '1']</code><br />
<br />
</li>
<li><code> '403079010660901'</code><br />
<br />
</li>
<li><code>['1', '9', '66', '1', '79', '3', '4']</code><br />
<br />
</li>
<li><code>['4', '3', '79', '1', '66', '9', '1', 2]</code><br />
</li>
</ol></td>
</tr>
</tbody>
</table>
<br />
</li>
<li>Answer these three questions related to difference between in-place methods and methods that return a value. <br />
<ol type="a">
<li>What is the value of the variable <code>census</code><em> </em>after all of these statements 
              are executed?<br />
<code><br />
              &gt;&gt;&gt; <span class="n">census</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">79</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span> <br />
              &gt;&gt;&gt; <span class="n">census</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span> <span class="p">)</span> <br />
              &gt;&gt;&gt; <span class="n">census</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span> <span class="p">)</span> <br />
              &gt;&gt;&gt; <span class="n">census</span><span class="o">.</span><span class="n">reverse</span><span class="p">(</span> <span class="p">)</span><br />
</code><br />
<ol type="i">
<li><code>[4, 3, 79, 1, 66, 9, 1]</code></li>
<li><code>[79, 66, 9, 4, 3, 1, 1]</code></li>
<li><code>[79, 66, 9, 4, 3, 1]</code></li>
<li><code>[66, 9, 4, 3, 1, 1]</code><br />
</li>
</ol>
<br />
</li>
<li>What is the value
              of the variable <code>happySheep</code> after ALL of these 
              statements are executed? Hint: if you think the correct answer is not there, 
              you're on the wrong track.<br />
<code><br />
              &gt;&gt;&gt; <span class="n">happySheep</span> <span class="o">=</span> <span class="s">&quot;knoll.shp&quot;</span> <br />
              &gt;&gt;&gt; <span class="n">happySheep</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;ll&#39;</span><span class="p">,</span> <span class="s">&#39;ck&#39;</span><span class="p">)</span> <br />
              &gt;&gt;&gt; <span class="n">happySheep</span><span class="o">.</span><span class="n">upper</span><span class="p">(</span> <span class="p">)</span><br />
              &gt;&gt;&gt; <span class="n">happySheep</span><span class="p">[:</span><span class="mi">4</span><span class="p">]<br />
</span></code> <br />
<ol type="i">
<li><code><span class="n">&quot;Knock.shp&quot;</span></code></li>
<li><code><span class="n">&quot;knoll.shp&quot;</span></code></li>
<li><code><span class="n">&quot;KNO&quot;</span></code></li>
<li><code><span class="n">&quot;KNOCK.SHP&quot;</span></code></li>
<br />
</ol>
</li>
<li>Use an example from parts a and b to explain what an in-place method does, as opposed to a method that only returns a value.<br />
<br />
</li>
</ol>
</li>
<li>Select the line or lines of code that set <code>listA</code> to <code>[0, 10, 20, 30, 40]</code>.<br />
<ol type="a">
<li><code><span class="n">listA</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span></code></li>
<li><code><span class="n">listA</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span></code></li>
<li><code><span class="n">listA </span><span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span></code></li>
<li><code><span class="n">listA</span><span class="o"> =</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">40</span><span class="p">)</span></code></li>
<li><code><span class="n">listA</span><span class="o"> =</span> <span class="nb">range</span><span class="p">(</span><span class="mi">40</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">10</span><span class="p">)</span></code></li>
<li><code><span class="n">listA</span><span class="o"> =</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">41</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span></code><br />
<br />
</li>
</ol>
</li>
<li>The Northeastern region fire data is a text file 
          containing a set of fields followed by records containing entries for 
          those fields.  The following lines of code use Python lists to store the field 
          names and the first data record: <br />
<code><br />
          &gt;&gt;&gt; fields <span class="o">=</span> <span class="p">[</span><span class="s">&quot;FireId&quot;</span><span class="p">,</span> <span class="s">&quot;Org&quot;</span><span class="p">,</span> <span class="s">&quot;Reg-State&quot;</span><span class="p">,</span> <span class="s">&quot;FireType/ProtectionType&quot;</span><span class="p">]</span> <br />
          &gt;&gt;&gt; record <span class="o">=</span> <span class="p">[</span><span class="s">&quot;238998&quot;</span><span class="p">,</span> <span class="s">&quot;NPS&quot;</span><span class="p">,</span> <span class="s">&quot;Northeast&quot;</span><span class="p">,</span> <span class="s">&quot;11&quot;</span><span class="p">]</span> <br />
</code><br />
          Select the line(s) of code that use indexing to print the value of 
          the Reg-State field in the given record. <br />
<br />
<ol type="a">
<li><code><span class="key">print</span> fields[<span class="mi">3</span>]</code></li>
<li><code><span class="key">print</span> record[<span class="mi">1</span>:<span class="mi">3</span>]</code></li>
<li><code><span class="key">print </span>record[<span class="mi">2</span>]</code></li>
<li><code><span class="key">print</span> fields + records</code></li>
<li><code><span class="key">print</span> record[-<span class="mi">2</span>]</code><br />
<br />
</li>
</ol>
</li>
<li>The following code uses list methods and operations to find the minimum value of a list.  Write a line of code that does the same thing but uses a Python built-in function (with no dot notation).
          <p><code>&gt;&gt;&gt; fireTypes <span class="o">=</span> <span class="p">[</span><span class="mi">8</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">]</span> <span class="n"><br />
            &gt;&gt;&gt; 
            fireTypes</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span> <span class="p">)</span> <span class="c"># Sort the numeric list</span> <br />
            &gt;&gt;&gt; <span class="k">print</span> <span class="n">fireTypes</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="c"># Use indexing to print the minimum</span> 2<br />
</code></p>
</li>
<li>The following Interactive Window code samples use square braces in three 
          different ways. Use chapter Key terms to describe what each code statement is doing.<br />
<br />
<ol type="a">
<li><code>
              &gt;&gt;&gt;<span class="n"> theList</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;spam&#39;</span><span class="p">,</span> <span class="s">&#39;eggs&#39;</span><span class="p">,</span> <span class="s">&#39;sausage&#39;</span><span class="p">,</span> <span class="s">&#39;bacon&#39;</span><span class="p">,</span> <span class="s">&#39;spam&#39;</span><span class="p">]</span><br />
</code><br />
</li>
<li><code>
              &gt;&gt;&gt; <span class="n">theList</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><br />
<span class="n">'eggs'</span><br />
</code><br />
</li>
<li><code>
              &gt;&gt;&gt;<span class="n"> theList</span><span class="p">[:</span><span class="mi">3</span><span class="p">]</span><br />
<span class="n">['spam', 'eggs', 'sausage']</span></code> </li>
<br />
</ol>
</li>
<li>Answer the following questions about the traceback message shown below:
          <ol type="a">
<li>What is the name of the exception</li>
<li>What is the name of the script  containing the error? </li>
<li>Which line of the script contains the error? </li>
<li>Explain why this error might have occurred.<br />
<br />
</li>
</ol>
<code><span class="err">          Traceback (most recent call last):<br />
          File &quot;C:\Python27\ArcGIS10.2\Lib\site-packages\pythonwin\pywin\framework\scriptutils.py&quot;, line 326, in RunScript<br />
          exec codeObject in __main__.__dict__<br />
          File &quot;C:\gispy\sample_scripts\ch04\County.py&quot;, line 23, in &lt;module&gt;<br />
          District = sys.argv[5]<br />
          IndexError: list index out of range</span><br />
</code><br />
</li>
<li><strong>noMoreErrors.py</strong> The sample script named 'noMoreErrors.py' currently contains 5 errors. Modify the script to remove all  errors. As you remove errors, note whether the error resulted in a feedback bar message or a traceback message and note the message. Modify the last five lines of the script to report the error messages you encountered. The first two of these have been completed for you already.When the script is repaired, the first portion of the output will look like this (and error messages for #3-5 will also be printed): <br />
<code><span class="n"><br />
          NoMoreErrors.py<br />
          b<br />
          Mucca.gdb<br />
          Dyer20<br />
          DYER<br />
          #1. FEEDBACK BAR: Failed to check - syntax error - EOL while scanning string literal<br />
          #2. TRACEBACK: IndexError: string index out of range<br />
          ...</span><br />
</code><br />
</li>
</ol><a href="#top">back to top</a> <a href="#top">back to top</a> <p><strong>Table 4.2: </strong>Sequence Operations on Lists<br />
<br />
<code><br />
&gt;&gt;&gt;<span class="n"> exampleList</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10000</span><span class="p">,</span> <span class="s">'a'</span><span class="p">,</span> <span class="mf">1.5</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'banana'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">,</span> <span class="s">'double rainbow'</span><span class="p">]</span><br />
</code></p>
<table width="732" border="3">
<tr>
<td width="130"><strong>Operation</strong></td>
<td width="260"><strong>Sample code</strong></td>
<td width="316"><strong>Return value </strong></td>
</tr>
<tr>
<td>length</td>
<td><code>len(exampleList)</code></td>
<td><p><code>7</code><br />
</p></td>
</tr>
<tr>
<td>indexing</td>
<td><code>exampleList[6]</code></td>
<td><code>'double rainbow'</code></td>
</tr>
<tr>
<td>slicing</td>
<td><code>exampleList[</code><code><span class="n">2:4</span></code>]</td>
<td><code>[1.5, 'b']</code><br /></td>
</tr>
<tr>
<td>concatenation</td>
<td><code>exampleList + exampleList</code> </td>
<td><code>[10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow', 10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow']</code></td>
</tr>
<tr>
<td>membership</td>
<td><code>'prune' in exampleList </code></td>
<td><p><code>False</code><br />
</p></td>
</tr>
</table><strong>Operation</strong><strong>Sample code</strong><strong>Return value </strong>length<code>len(exampleList)</code><p><code>7</code><br />
</p>indexing<code>exampleList[6]</code><code>'double rainbow'</code>slicing<code>exampleList[</code><code><span class="n">2:4</span></code>]<code>[1.5, 'b']</code><br />concatenation<code>exampleList + exampleList</code> <code>[10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow', 10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow']</code>membership<code>'prune' in exampleList </code><p><code>False</code><br />
</p><a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <blockquote>
<p>To show line numbers in PythonWin: <br />
                Tools menu &gt; Options...&gt; Editor tab &gt; Set &quot;Line Numbers&quot; Margin Width  &gt;= 30 pixels.</p>
<p>To show line numbers in PyScripter:<br />
              Tools &gt; Options &gt; Editor Options &gt; Display &gt; Gutter: check 'Visible' and 'Show line numbers'.</p>
</blockquote><blockquote>
<p>Always check the feedback panel and the Interactive Window when you run a script in PythonWin.</p>
</blockquote><a href="#top">back to top</a> <p><a href="#top">back to top</a></p><code><br />
<span class="comment"># addWithErrors.py <br />
                  # Purpose: 
                  Demonstrate exceptions within a script<br />
                  # What the script should do when fixed:
                  add two numbers
                  given as arguments.</span><br />
<br />
<span class="key">iport</span> sys <span class="comment"># Import  sys, so that the script can use this built-in Python module.<br />
</span><br />
<span class="n">a</span> <span class="o">=</span> <span class="n">sys.argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="c"># Get the 1st argument from the user and cast it to float</span>.<br />
<span class="n">b</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys.argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="c"># Get the 2nd argument from the user and cast it to float.</span><br />
<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><br />
<span class="k">print</span> <span class="n">The</span> <span class="nb">sum</span> <span class="ow">is</span> <span class="p">{</span><span class="mi">0</span><span class="p">}</span><span class="o">.</span><span class="s">&quot;.format(c)</span><br />
</code>Python statement Output (notice there are 9 letters) <ol>
<li><code>places[0]</code><br />
<br />
</li>
<li><code>places[0:2] + places[-3:]</code><br />
<br />
</li>
<li><code>places[0][0]</code><br />
<br />
</li>
<li><code>len(places)</code><br />
<br />
</li>
<li><code>places[0:5]</code><br />
<br />
</li>
<li><code>places[-4:]</code><br />
<br />
</li>
<li><code>places[11]</code><br />
<br />
</li>
<li><code>places[:2]</code><br />
<br />
</li>
<li><code>'towns' in places</code><br />
<br />
</li>
<li><code>places[1]</code></li>
</ol> <ol type="A">
<li><code>3</code><br />
<br />
</li>
<li><code>&quot;roads&quot;</code><br />
<br />
</li>
<li><code>IndexError</code><br />
<br />
</li>
<li><code>['roads', 'cities']</code><br />
<br />
</li>
<li><code>['roads', 'cities', 'states']<br />
</code><br />
</li>
<li><code>['roads', 'cities', 'roads', 'cities', 'states']</code><br />
<br />
</li>
<li><code>False</code><br />
<br />
</li>
<li><code>'r'</code><br />
<br />
</li>
<li><code>'cities'</code></li>
</ol> Python statement Resulting value of census (there are 
                  only 7 letters) <ol>
<li><code>len(<span class="n"> census </span>)</code></li>
<li> <code><span class="n">census</span><span class="o">.</span><span class="n">insert</span>( 0, 2)</code></li>
<li><code> <span class="n">census</span><span class="o">.</span><span class="n">append</span>( 2 )</code></li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">remove</span>('1')<span class="p"></span></code> </li>
<li><code><span class="n">census</span> <span class="o">=</span> <span class="s">&#39;0&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n"> census </span><span class="p">)</span></code></li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi"> 3</span> <span class="p">)</span></code></li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="s"> &#39;1&#39; </span><span class="p">)</span></code>r </li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span> <span class="p">)</span></code> </li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">reverse</span><span class="p">(</span> <span class="p">)</span></code> <br />
</li>
</ol> <ol type="A">
<li><code>[2, '4', '3', '79', '1', '66', '9', '1']</code><br />
<br />
</li>
<li><code>['1', '1', '3', '4', '66', '79', '9']</code><br />
<br />
</li>
<li><code>['4', '3', '79', '66', '9', '1']</code><br />
<br />
</li>
<li><code>['4', '3', '79', '1', '66', '9', '1']</code><br />
<br />
</li>
<li><code> '403079010660901'</code><br />
<br />
</li>
<li><code>['1', '9', '66', '1', '79', '3', '4']</code><br />
<br />
</li>
<li><code>['4', '3', '79', '1', '66', '9', '1', 2]</code><br />
</li>
</ol><span class="head">4.1 Lists</span> <a name="lists" id="lists"></a><a href="#top">back to top</a> <code>listVariable = [item1, item2, item3,...]</code><strong><span class="head">4.1.1 Sequence operations on lists</span><a name="ops" id="introduction5"></a></strong><a href="#top">back to top</a> <p><strong>Table 4.2: </strong>Sequence Operations on Lists<br />
<br />
<code><br />
&gt;&gt;&gt;<span class="n"> exampleList</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10000</span><span class="p">,</span> <span class="s">'a'</span><span class="p">,</span> <span class="mf">1.5</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'banana'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">,</span> <span class="s">'double rainbow'</span><span class="p">]</span><br />
</code></p>
<table width="732" border="3">
<tr>
<td width="130"><strong>Operation</strong></td>
<td width="260"><strong>Sample code</strong></td>
<td width="316"><strong>Return value </strong></td>
</tr>
<tr>
<td>length</td>
<td><code>len(exampleList)</code></td>
<td><p><code>7</code><br />
</p></td>
</tr>
<tr>
<td>indexing</td>
<td><code>exampleList[6]</code></td>
<td><code>'double rainbow'</code></td>
</tr>
<tr>
<td>slicing</td>
<td><code>exampleList[</code><code><span class="n">2:4</span></code>]</td>
<td><code>[1.5, 'b']</code><br /></td>
</tr>
<tr>
<td>concatenation</td>
<td><code>exampleList + exampleList</code> </td>
<td><code>[10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow', 10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow']</code></td>
</tr>
<tr>
<td>membership</td>
<td><code>'prune' in exampleList </code></td>
<td><p><code>False</code><br />
</p></td>
</tr>
</table><strong>Operation</strong><strong>Sample code</strong><strong>Return value </strong>length<code>len(exampleList)</code><p><code>7</code><br />
</p>indexing<code>exampleList[6]</code><code>'double rainbow'</code>slicing<code>exampleList[</code><code><span class="n">2:4</span></code>]<code>[1.5, 'b']</code><br />concatenation<code>exampleList + exampleList</code> <code>[10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow', 10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow']</code>membership<code>'prune' in exampleList </code><p><code>False</code><br />
</p><strong>Operation</strong><strong>Sample code</strong><strong>Return value </strong>length<code>len(exampleList)</code><p><code>7</code><br />
</p>indexing<code>exampleList[6]</code><code>'double rainbow'</code>slicing<code>exampleList[</code><code><span class="n">2:4</span></code>]<code>[1.5, 'b']</code><br />concatenation<code>exampleList + exampleList</code> <code>[10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow', 10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow']</code>membership<code>'prune' in exampleList </code><p><code>False</code><br />
</p><strong><span class="head">4.1.2 List methods</span></strong><a href="#top">back to top</a> <code>object.method(arguments1, argument2, argument3,...)</code><strong><span class="head">4.1.3 The built-in <code>range</code> function</span><a name="range" id="range"></a></strong><a href="#top">back to top</a> <span class="head">4.1.4 Copying a list</span><a href="#top">back to top</a> <span class="head">4.2 Tuples</span> <a name="tuples" id="introduction2"></a><a href="#top">back to top</a> <span class="head">4.3 Syntax check and tracebacks</span><a name="syntaxCheck" id="introduction3"></a><a href="#top">back to top</a> <blockquote>
<p>To show line numbers in PythonWin: <br />
                Tools menu &gt; Options...&gt; Editor tab &gt; Set &quot;Line Numbers&quot; Margin Width  &gt;= 30 pixels.</p>
<p>To show line numbers in PyScripter:<br />
              Tools &gt; Options &gt; Editor Options &gt; Display &gt; Gutter: check 'Visible' and 'Show line numbers'.</p>
</blockquote><blockquote>
<p>Always check the feedback panel and the Interactive Window when you run a script in PythonWin.</p>
</blockquote><b class="head">4.4 Key terms</b><a name="keyterms" id="keyterms2"></a><a href="#top">back to top</a> <p class="head">4.5 Exercises<a name="exercises" id="exercises"></a></p><p><a href="#top">back to top</a></p><code><br />
<span class="comment"># addWithErrors.py <br />
                  # Purpose: 
                  Demonstrate exceptions within a script<br />
                  # What the script should do when fixed:
                  add two numbers
                  given as arguments.</span><br />
<br />
<span class="key">iport</span> sys <span class="comment"># Import  sys, so that the script can use this built-in Python module.<br />
</span><br />
<span class="n">a</span> <span class="o">=</span> <span class="n">sys.argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="c"># Get the 1st argument from the user and cast it to float</span>.<br />
<span class="n">b</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys.argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="c"># Get the 2nd argument from the user and cast it to float.</span><br />
<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><br />
<span class="k">print</span> <span class="n">The</span> <span class="nb">sum</span> <span class="ow">is</span> <span class="p">{</span><span class="mi">0</span><span class="p">}</span><span class="o">.</span><span class="s">&quot;.format(c)</span><br />
</code>Python statement Output (notice there are 9 letters) <ol>
<li><code>places[0]</code><br />
<br />
</li>
<li><code>places[0:2] + places[-3:]</code><br />
<br />
</li>
<li><code>places[0][0]</code><br />
<br />
</li>
<li><code>len(places)</code><br />
<br />
</li>
<li><code>places[0:5]</code><br />
<br />
</li>
<li><code>places[-4:]</code><br />
<br />
</li>
<li><code>places[11]</code><br />
<br />
</li>
<li><code>places[:2]</code><br />
<br />
</li>
<li><code>'towns' in places</code><br />
<br />
</li>
<li><code>places[1]</code></li>
</ol> <ol type="A">
<li><code>3</code><br />
<br />
</li>
<li><code>&quot;roads&quot;</code><br />
<br />
</li>
<li><code>IndexError</code><br />
<br />
</li>
<li><code>['roads', 'cities']</code><br />
<br />
</li>
<li><code>['roads', 'cities', 'states']<br />
</code><br />
</li>
<li><code>['roads', 'cities', 'roads', 'cities', 'states']</code><br />
<br />
</li>
<li><code>False</code><br />
<br />
</li>
<li><code>'r'</code><br />
<br />
</li>
<li><code>'cities'</code></li>
</ol> Python statement Resulting value of census (there are 
                  only 7 letters) <ol>
<li><code>len(<span class="n"> census </span>)</code></li>
<li> <code><span class="n">census</span><span class="o">.</span><span class="n">insert</span>( 0, 2)</code></li>
<li><code> <span class="n">census</span><span class="o">.</span><span class="n">append</span>( 2 )</code></li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">remove</span>('1')<span class="p"></span></code> </li>
<li><code><span class="n">census</span> <span class="o">=</span> <span class="s">&#39;0&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n"> census </span><span class="p">)</span></code></li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi"> 3</span> <span class="p">)</span></code></li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="s"> &#39;1&#39; </span><span class="p">)</span></code>r </li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span> <span class="p">)</span></code> </li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">reverse</span><span class="p">(</span> <span class="p">)</span></code> <br />
</li>
</ol> <ol type="A">
<li><code>[2, '4', '3', '79', '1', '66', '9', '1']</code><br />
<br />
</li>
<li><code>['1', '1', '3', '4', '66', '79', '9']</code><br />
<br />
</li>
<li><code>['4', '3', '79', '66', '9', '1']</code><br />
<br />
</li>
<li><code>['4', '3', '79', '1', '66', '9', '1']</code><br />
<br />
</li>
<li><code> '403079010660901'</code><br />
<br />
</li>
<li><code>['1', '9', '66', '1', '79', '3', '4']</code><br />
<br />
</li>
<li><code>['4', '3', '79', '1', '66', '9', '1', 2]</code><br />
</li>
</ol>------------------------------------------------------------rows: 7 cols: 3<p><strong>Table 4.2: </strong>Sequence Operations on Lists<br />
<br />
<code><br />
&gt;&gt;&gt;<span class="n"> exampleList</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10000</span><span class="p">,</span> <span class="s">'a'</span><span class="p">,</span> <span class="mf">1.5</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'banana'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">,</span> <span class="s">'double rainbow'</span><span class="p">]</span><br />
</code></p>
<table width="732" border="3">
<tr>
<td width="130"><strong>Operation</strong></td>
<td width="260"><strong>Sample code</strong></td>
<td width="316"><strong>Return value </strong></td>
</tr>
<tr>
<td>length</td>
<td><code>len(exampleList)</code></td>
<td><p><code>7</code><br />
</p></td>
</tr>
<tr>
<td>indexing</td>
<td><code>exampleList[6]</code></td>
<td><code>'double rainbow'</code></td>
</tr>
<tr>
<td>slicing</td>
<td><code>exampleList[</code><code><span class="n">2:4</span></code>]</td>
<td><code>[1.5, 'b']</code><br /></td>
</tr>
<tr>
<td>concatenation</td>
<td><code>exampleList + exampleList</code> </td>
<td><code>[10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow', 10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow']</code></td>
</tr>
<tr>
<td>membership</td>
<td><code>'prune' in exampleList </code></td>
<td><p><code>False</code><br />
</p></td>
</tr>
</table><strong>Operation</strong><strong>Sample code</strong><strong>Return value </strong>length<code>len(exampleList)</code><p><code>7</code><br />
</p>indexing<code>exampleList[6]</code><code>'double rainbow'</code>slicing<code>exampleList[</code><code><span class="n">2:4</span></code>]<code>[1.5, 'b']</code><br />concatenation<code>exampleList + exampleList</code> <code>[10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow', 10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow']</code>membership<code>'prune' in exampleList </code><p><code>False</code><br />
</p><strong>Operation</strong><strong>Sample code</strong><strong>Return value </strong>length<code>len(exampleList)</code><p><code>7</code><br />
</p>indexing<code>exampleList[6]</code><code>'double rainbow'</code>slicing<code>exampleList[</code><code><span class="n">2:4</span></code>]<code>[1.5, 'b']</code><br />concatenation<code>exampleList + exampleList</code> <code>[10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow', 10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow']</code>membership<code>'prune' in exampleList </code><p><code>False</code><br />
</p>------------------------------------------------------------rows: 7 cols: 3<p><strong>Table 4.2: </strong>Sequence Operations on Lists<br />
<br />
<code><br />
&gt;&gt;&gt;<span class="n"> exampleList</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10000</span><span class="p">,</span> <span class="s">'a'</span><span class="p">,</span> <span class="mf">1.5</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'banana'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">,</span> <span class="s">'double rainbow'</span><span class="p">]</span><br />
</code></p>
<table width="732" border="3">
<tr>
<td width="130"><strong>Operation</strong></td>
<td width="260"><strong>Sample code</strong></td>
<td width="316"><strong>Return value </strong></td>
</tr>
<tr>
<td>length</td>
<td><code>len(exampleList)</code></td>
<td><p><code>7</code><br />
</p></td>
</tr>
<tr>
<td>indexing</td>
<td><code>exampleList[6]</code></td>
<td><code>'double rainbow'</code></td>
</tr>
<tr>
<td>slicing</td>
<td><code>exampleList[</code><code><span class="n">2:4</span></code>]</td>
<td><code>[1.5, 'b']</code><br /></td>
</tr>
<tr>
<td>concatenation</td>
<td><code>exampleList + exampleList</code> </td>
<td><code>[10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow', 10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow']</code></td>
</tr>
<tr>
<td>membership</td>
<td><code>'prune' in exampleList </code></td>
<td><p><code>False</code><br />
</p></td>
</tr>
</table><strong>Operation</strong><strong>Sample code</strong><strong>Return value </strong>length<code>len(exampleList)</code><p><code>7</code><br />
</p>indexing<code>exampleList[6]</code><code>'double rainbow'</code>slicing<code>exampleList[</code><code><span class="n">2:4</span></code>]<code>[1.5, 'b']</code><br />concatenation<code>exampleList + exampleList</code> <code>[10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow', 10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow']</code>membership<code>'prune' in exampleList </code><p><code>False</code><br />
</p><strong>Operation</strong><strong>Sample code</strong><strong>Return value </strong>length<code>len(exampleList)</code><p><code>7</code><br />
</p>indexing<code>exampleList[6]</code><code>'double rainbow'</code>slicing<code>exampleList[</code><code><span class="n">2:4</span></code>]<code>[1.5, 'b']</code><br />concatenation<code>exampleList + exampleList</code> <code>[10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow', 10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow']</code>membership<code>'prune' in exampleList </code><p><code>False</code><br />
</p>------------------------------------------------------------rows: 7 cols: 3<p><strong>Table 4.2: </strong>Sequence Operations on Lists<br />
<br />
<code><br />
&gt;&gt;&gt;<span class="n"> exampleList</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10000</span><span class="p">,</span> <span class="s">'a'</span><span class="p">,</span> <span class="mf">1.5</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'banana'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">,</span> <span class="s">'double rainbow'</span><span class="p">]</span><br />
</code></p>
<table width="732" border="3">
<tr>
<td width="130"><strong>Operation</strong></td>
<td width="260"><strong>Sample code</strong></td>
<td width="316"><strong>Return value </strong></td>
</tr>
<tr>
<td>length</td>
<td><code>len(exampleList)</code></td>
<td><p><code>7</code><br />
</p></td>
</tr>
<tr>
<td>indexing</td>
<td><code>exampleList[6]</code></td>
<td><code>'double rainbow'</code></td>
</tr>
<tr>
<td>slicing</td>
<td><code>exampleList[</code><code><span class="n">2:4</span></code>]</td>
<td><code>[1.5, 'b']</code><br /></td>
</tr>
<tr>
<td>concatenation</td>
<td><code>exampleList + exampleList</code> </td>
<td><code>[10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow', 10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow']</code></td>
</tr>
<tr>
<td>membership</td>
<td><code>'prune' in exampleList </code></td>
<td><p><code>False</code><br />
</p></td>
</tr>
</table><strong>Operation</strong><strong>Sample code</strong><strong>Return value </strong>length<code>len(exampleList)</code><p><code>7</code><br />
</p>indexing<code>exampleList[6]</code><code>'double rainbow'</code>slicing<code>exampleList[</code><code><span class="n">2:4</span></code>]<code>[1.5, 'b']</code><br />concatenation<code>exampleList + exampleList</code> <code>[10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow', 10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow']</code>membership<code>'prune' in exampleList </code><p><code>False</code><br />
</p><strong>Operation</strong><strong>Sample code</strong><strong>Return value </strong>length<code>len(exampleList)</code><p><code>7</code><br />
</p>indexing<code>exampleList[6]</code><code>'double rainbow'</code>slicing<code>exampleList[</code><code><span class="n">2:4</span></code>]<code>[1.5, 'b']</code><br />concatenation<code>exampleList + exampleList</code> <code>[10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow', 10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow']</code>membership<code>'prune' in exampleList </code><p><code>False</code><br />
</p>------------------------------------------------------------rows: 7 cols: 3<p><strong>Table 4.2: </strong>Sequence Operations on Lists<br />
<br />
<code><br />
&gt;&gt;&gt;<span class="n"> exampleList</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10000</span><span class="p">,</span> <span class="s">'a'</span><span class="p">,</span> <span class="mf">1.5</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'banana'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">,</span> <span class="s">'double rainbow'</span><span class="p">]</span><br />
</code></p>
<table width="732" border="3">
<tr>
<td width="130"><strong>Operation</strong></td>
<td width="260"><strong>Sample code</strong></td>
<td width="316"><strong>Return value </strong></td>
</tr>
<tr>
<td>length</td>
<td><code>len(exampleList)</code></td>
<td><p><code>7</code><br />
</p></td>
</tr>
<tr>
<td>indexing</td>
<td><code>exampleList[6]</code></td>
<td><code>'double rainbow'</code></td>
</tr>
<tr>
<td>slicing</td>
<td><code>exampleList[</code><code><span class="n">2:4</span></code>]</td>
<td><code>[1.5, 'b']</code><br /></td>
</tr>
<tr>
<td>concatenation</td>
<td><code>exampleList + exampleList</code> </td>
<td><code>[10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow', 10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow']</code></td>
</tr>
<tr>
<td>membership</td>
<td><code>'prune' in exampleList </code></td>
<td><p><code>False</code><br />
</p></td>
</tr>
</table><strong>Operation</strong><strong>Sample code</strong><strong>Return value </strong>length<code>len(exampleList)</code><p><code>7</code><br />
</p>indexing<code>exampleList[6]</code><code>'double rainbow'</code>slicing<code>exampleList[</code><code><span class="n">2:4</span></code>]<code>[1.5, 'b']</code><br />concatenation<code>exampleList + exampleList</code> <code>[10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow', 10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow']</code>membership<code>'prune' in exampleList </code><p><code>False</code><br />
</p><strong>Operation</strong><strong>Sample code</strong><strong>Return value </strong>length<code>len(exampleList)</code><p><code>7</code><br />
</p>indexing<code>exampleList[6]</code><code>'double rainbow'</code>slicing<code>exampleList[</code><code><span class="n">2:4</span></code>]<code>[1.5, 'b']</code><br />concatenation<code>exampleList + exampleList</code> <code>[10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow', 10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow']</code>membership<code>'prune' in exampleList </code><p><code>False</code><br />
</p>------------------------------------------------------------rows: 6 cols: 3<strong>Operation</strong><strong>Sample code</strong><strong>Return value </strong>length<code>len(exampleList)</code><p><code>7</code><br />
</p>indexing<code>exampleList[6]</code><code>'double rainbow'</code>slicing<code>exampleList[</code><code><span class="n">2:4</span></code>]<code>[1.5, 'b']</code><br />concatenation<code>exampleList + exampleList</code> <code>[10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow', 10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow']</code>membership<code>'prune' in exampleList </code><p><code>False</code><br />
</p>------------------------------------------------------------rows: 6 cols: 3<strong>Operation</strong><strong>Sample code</strong><strong>Return value </strong>length<code>len(exampleList)</code><p><code>7</code><br />
</p>indexing<code>exampleList[6]</code><code>'double rainbow'</code>slicing<code>exampleList[</code><code><span class="n">2:4</span></code>]<code>[1.5, 'b']</code><br />concatenation<code>exampleList + exampleList</code> <code>[10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow', 10000, 'a', 1.5, 'b', 'banana', 'c', 'double rainbow']</code>membership<code>'prune' in exampleList </code><p><code>False</code><br />
</p>------------------------------------------------------------rows: 2 cols: 2Python statement Output (notice there are 9 letters) <ol>
<li><code>places[0]</code><br />
<br />
</li>
<li><code>places[0:2] + places[-3:]</code><br />
<br />
</li>
<li><code>places[0][0]</code><br />
<br />
</li>
<li><code>len(places)</code><br />
<br />
</li>
<li><code>places[0:5]</code><br />
<br />
</li>
<li><code>places[-4:]</code><br />
<br />
</li>
<li><code>places[11]</code><br />
<br />
</li>
<li><code>places[:2]</code><br />
<br />
</li>
<li><code>'towns' in places</code><br />
<br />
</li>
<li><code>places[1]</code></li>
</ol> <ol type="A">
<li><code>3</code><br />
<br />
</li>
<li><code>&quot;roads&quot;</code><br />
<br />
</li>
<li><code>IndexError</code><br />
<br />
</li>
<li><code>['roads', 'cities']</code><br />
<br />
</li>
<li><code>['roads', 'cities', 'states']<br />
</code><br />
</li>
<li><code>['roads', 'cities', 'roads', 'cities', 'states']</code><br />
<br />
</li>
<li><code>False</code><br />
<br />
</li>
<li><code>'r'</code><br />
<br />
</li>
<li><code>'cities'</code></li>
</ol> ------------------------------------------------------------rows: 2 cols: 2Python statement Output (notice there are 9 letters) <ol>
<li><code>places[0]</code><br />
<br />
</li>
<li><code>places[0:2] + places[-3:]</code><br />
<br />
</li>
<li><code>places[0][0]</code><br />
<br />
</li>
<li><code>len(places)</code><br />
<br />
</li>
<li><code>places[0:5]</code><br />
<br />
</li>
<li><code>places[-4:]</code><br />
<br />
</li>
<li><code>places[11]</code><br />
<br />
</li>
<li><code>places[:2]</code><br />
<br />
</li>
<li><code>'towns' in places</code><br />
<br />
</li>
<li><code>places[1]</code></li>
</ol> <ol type="A">
<li><code>3</code><br />
<br />
</li>
<li><code>&quot;roads&quot;</code><br />
<br />
</li>
<li><code>IndexError</code><br />
<br />
</li>
<li><code>['roads', 'cities']</code><br />
<br />
</li>
<li><code>['roads', 'cities', 'states']<br />
</code><br />
</li>
<li><code>['roads', 'cities', 'roads', 'cities', 'states']</code><br />
<br />
</li>
<li><code>False</code><br />
<br />
</li>
<li><code>'r'</code><br />
<br />
</li>
<li><code>'cities'</code></li>
</ol> ------------------------------------------------------------rows: 2 cols: 2Python statement Resulting value of census (there are 
                  only 7 letters) <ol>
<li><code>len(<span class="n"> census </span>)</code></li>
<li> <code><span class="n">census</span><span class="o">.</span><span class="n">insert</span>( 0, 2)</code></li>
<li><code> <span class="n">census</span><span class="o">.</span><span class="n">append</span>( 2 )</code></li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">remove</span>('1')<span class="p"></span></code> </li>
<li><code><span class="n">census</span> <span class="o">=</span> <span class="s">&#39;0&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n"> census </span><span class="p">)</span></code></li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi"> 3</span> <span class="p">)</span></code></li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="s"> &#39;1&#39; </span><span class="p">)</span></code>r </li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span> <span class="p">)</span></code> </li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">reverse</span><span class="p">(</span> <span class="p">)</span></code> <br />
</li>
</ol> <ol type="A">
<li><code>[2, '4', '3', '79', '1', '66', '9', '1']</code><br />
<br />
</li>
<li><code>['1', '1', '3', '4', '66', '79', '9']</code><br />
<br />
</li>
<li><code>['4', '3', '79', '66', '9', '1']</code><br />
<br />
</li>
<li><code>['4', '3', '79', '1', '66', '9', '1']</code><br />
<br />
</li>
<li><code> '403079010660901'</code><br />
<br />
</li>
<li><code>['1', '9', '66', '1', '79', '3', '4']</code><br />
<br />
</li>
<li><code>['4', '3', '79', '1', '66', '9', '1', 2]</code><br />
</li>
</ol>------------------------------------------------------------rows: 2 cols: 2Python statement Resulting value of census (there are 
                  only 7 letters) <ol>
<li><code>len(<span class="n"> census </span>)</code></li>
<li> <code><span class="n">census</span><span class="o">.</span><span class="n">insert</span>( 0, 2)</code></li>
<li><code> <span class="n">census</span><span class="o">.</span><span class="n">append</span>( 2 )</code></li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">remove</span>('1')<span class="p"></span></code> </li>
<li><code><span class="n">census</span> <span class="o">=</span> <span class="s">&#39;0&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n"> census </span><span class="p">)</span></code></li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi"> 3</span> <span class="p">)</span></code></li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="s"> &#39;1&#39; </span><span class="p">)</span></code>r </li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span> <span class="p">)</span></code> </li>
<li><code><span class="n">census</span><span class="o">.</span><span class="n">reverse</span><span class="p">(</span> <span class="p">)</span></code> <br />
</li>
</ol> <ol type="A">
<li><code>[2, '4', '3', '79', '1', '66', '9', '1']</code><br />
<br />
</li>
<li><code>['1', '1', '3', '4', '66', '79', '9']</code><br />
<br />
</li>
<li><code>['4', '3', '79', '66', '9', '1']</code><br />
<br />
</li>
<li><code>['4', '3', '79', '1', '66', '9', '1']</code><br />
<br />
</li>
<li><code> '403079010660901'</code><br />
<br />
</li>
<li><code>['1', '9', '66', '1', '79', '3', '4']</code><br />
<br />
</li>
<li><code>['4', '3', '79', '1', '66', '9', '1', 2]</code><br />
</li>
</ol>------------------------------Ch04.html processed++++++++
K:/www/outputPagesCh04.html written
Ch05.html STARTED++++++++
------------------------------rows: 9 cols: 1<span class="head">5.1 ArcToolbox</span> <a name="toolbox" id="toolbox"></a><span class="head">5.2 ArcGIS Python Resources</span> <a name="reference" id="toolbar2"></a><span class="head">5.3 Exporting Models</span> <a name="models" id="models"></a><span class="head">5.4 Working with GIS data</span> <a name="working" id="working"></a><span class="head">5.5 Key terms</span><a name="keyterms" id="keyterms"></a><span class="head">5.6 Exercises</span><a name="exercises" id="exercises2"></a><span class="head">Chapter objectives</span><br />
<br />
After reading this chapter, you'll be able to do the following:<ul><li>Describe the ArcToolbox hierarchy.</li>
<li>Search for tools in ArcCatalog.</li>
<li>Locate tool help on ArcGIS Resources online.</li>
<li>Export a script from a visual workflow model.</li>
<li>Modify and run exported scripts.</li>
<li>Preview geoprocessing output.</li>
<li>Release locks on data.</li>
</ul>
<hr />
<p class="foo">
<span class="head">Chapter Outline</span>
<br />
<a href="#toolbox">ArcToolbox</a><br />
<a href="#reference">ArcGIS Python Resources</a><br />
<a href="#models">Exporting Models</a><br />
<a href="#working">Working with GIS data<br />
</a>Key terms<br />
<a href="#exercises">Exercises          </a> </p>
<hr />
<p>This  chapter discusses some things you need to know about the ArcGIS geoprocessing tools and data to prepare for working with them in Python. ArcGIS provides a palette of sophisticated tools for processing and analyzing geographic data. There are several ways in which these tools can be used. For example, ArcToolbox tools can be run from ArcToolbox by clicking on the tool  and filling out a form to specify the parameters; they can  be run from ModelBuilder Models, and they can be run from Python scripts. This chapter discusses ArcToolbox, Modelbuilder, and  Esri data fundamentals necessary for working with ArcGIS in Python. </p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">5.1 ArcToolbox</span> <a name="toolbox" id="toolbox"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>ArcGIS provides a large suite of tools for processing data. The ArcToolbox <img src="../images/arcToolboxButton.png" alt="arctoolbox button" width="24" height="22" /> panel in ArcCatalog (and ArcMap) lists the toolboxes --3D Analyst, Analysis, Cartography, and so forth (Figure 5.1a). The tools are grouped into toolboxes by the type of actions they perform and each toolbox contains toolsets that further group the tools by their functionality. Each toolbox (<img src="../images/toolbox.png" alt="arctoolbox button" width="25" height="20" />) and toolset (<img src="../images/toolset.png" alt="arctoolbox button" width="24" height="21" />) can be expanded to show the contents. Figure 5.1b shows the Extract, Overlay, Proximity, and Statistics toolsets in the Analysis toolbox. In this figure, the Proximity toolset is also expanded. This toolset contains six tools, Buffer, Create Thiessen Polygons, etc. Though the icons vary on the third level, these are all tools.  A tool can be run from ArcToolbox, by clicking on the tool, filling out the form that it launches, and clicking 'OK'. </p>
<p> The availability of tools depends on the license level of ArcGIS desktop installed (basic, standard, or advanced). Some tools, such as Spatial Analyst tools, are not available at the basic and standard levels. When these tools are available, an extension needs to be checked out for the tools to become functional. For example, to use Spatial Analyst tools with an advanced install, the Spatial Analyst extension must be checked out (ArcCatalog &gt; Customize &gt; Extensions &gt; Check Spatial Analyst). Scripts need to check out these extensions too, as shown in the upcoming chapter.</p>
<p><img src="../images/arcToolbox1.png" alt="a" width="285" height="429" /><br />
          Figure 5.1a ArcToolbox.<br />
<br />        
        &nbsp;<img src="../images/arctoolbox2.png" alt="a" width="224" height="218" /><br />
        Figure 5.1b The Analysis toolbox and the Proximity toolset.</p>
<p><img src="../images/searchPanel.png" /><br /> 
          Figure 5.1c The search panel.       </p>
<p>The  'Search' panel available in ArcCatalog (and ArcMap) is  useful for navigating the tools. Click the 'Search' button <img src="../images/search.png" alt="arctoolbox button" width="25" height="27" />to open this panel, select the 'Tools' option, and type a tool name. Figure 5.1c shows the results of a search. Click on a tool in the results (e.g., Buffer (Analysis) Tool) and  it opens the GUI to run the tool. The form has a 'Tool Help' button which will launch the local ArcGIS Desktop help for that tool. As you work through the examples in this book, you can locate tools in this way and become familiar with their functionality by reading the help and running them using the GUI interface. </p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">5.2 ArcGIS Python Resources</span> <a name="reference" id="toolbar2"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p><img src="../images/arcgisOnlineHelp.png" alt="arcgisOnlineHelp" /><br />
        Figure 5.2</p>
<p>The  'ArcGIS   Resources' site (resources.arcgis.com) is the foremost reference you will need for working with Python in ArcGIS. </p>
<p> The site provides full documentation for ArcGIS Python functionality. The 'Search ArcGIS Resources' box   is indispensable  for working with Python in ArcGIS. Use the search box to get a list of pages matching your query and use the search filters to narrow the search (Figure 5.2). For example, enter 'buffer' in the search box. This returns thousands of results including blogs, bug reports, web mapping help, and so forth. Narrow the search by using the 'Help' and 'Desktop' filters as shown Figure 5.3.</p>
<p><img src="../images/searchFilter.png" alt="searchFilter" /><br />
<strong>Figure 5.3</strong></p>
<p>Notice that the results are different from the ArcCatalog search results for the same term (Figure 5.1c);  the ArcGIS Desktop help is organized differently than the online help. The online help provides the most current, comprehensive documentation. </p>
<p> A set of descriptive identifiers is provided for each link.  The Buffer (Analysis) link has the identifiers 'Tool Reference' and 'ANALYSIS' (Figure 5.4). The last identifier shows the date the content was last modified. </p>
<p><img src="../images/identifier.png" alt="searchFilter" /><br />
<strong>Figure 5.4</strong></p>
<p>Each ArcGIS tool has a 'Tool Reference'  page that corresponds to the built-in help for that tool. Chapter 6 discusses components in 'Tool Reference' pages.</p>
<p>This site is referred to as the 'ArcGIS Resources' site in this book.   Key search terms will be provided to direct you to specific help topics. </p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">5.3 Exporting Models</span> <a name="models" id="models"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Python can call almost all the tools in ArcToolbox and, in this way, repetitive processes can be automated. Before we begin writing scripts from scratch, we'll start with an example automatically generated by the ArcGIS Modelbuilder application.   Modelbuilder is an application built into ArcCatalog (and ArcMap) that allows users to create a workflow visualization, called a <em>model</em>. Models not only visualize the workflow, but can also be can be run to execute the workflow. ArcGIS Toolbox tools can also be run via Modelbuilder; Tools can be dragged into the model panel and connected to create the workflow. When a model   runs,  it executes tools and the underlying code statements that correspond to pieces of the model.   The underlying code can be exported to a Python script and we can compare the workflow visualization with the code. Follow  steps 1-3 to create and export a simple model.</p>
<ol>
<li>In ArcCatalog, to create a model like the one in Figure 5.5:<br />
            - Launch Modelbuilder from the menu button <img src="../images/modelbuilderButton.png" alt="" width="28" height="26" /> on the Standard toolbar.<br />
            - Open ArcToolbox with the menu ArcToolbox button <img src="../images/arcToolboxButton.png" alt="arctoolbox button" width="24" height="22" /> on the Standard toolbar.<br />
            - 
            Locate the Buffer (Analysis) tool in the ArcToolbox (ArcToolbox &gt; Analysis Tools &gt; Proximity  &gt; Buffer)<br />
            - 
            Click the Buffer tool and drag it into Modelbuilder from its toolbox in ArcToolbox. <br />
            - Right-click on buffer &gt; Make variable &gt; From Parameter &gt; Input Features. <br />
            -
            Right-click on buffer (again) &gt; Make variable &gt; From Parameter &gt; Distance.<br />
            -
            Double click on Input Features and browse  to 'C:/gispy/data/ch05/park.shp'.<br />
            - Double click on Distance and set it to 100 Feet.<br />
            - Right-click on the input features buffer &gt; rename 'inputFeatures'.<br />
            - Right-click on the distance oval &gt; rename 'distance'.<br />
            - Right-click on the Output Feature Class oval &gt; rename 'outputFeatures'.<br />
<img src="../images/variable_names3.jpg" alt="model" /><br />
<strong>Figure 5.5</strong><br />
<br />
</li>
<li>Run the model to confirm that it works (Model menu &gt; Run).<br />
<br />
</li>
<li> Export the model as a script (Model &gt; Export &gt; Pythons Script). This should generate a script like Figure 5.6, shown with line numbers to the left of the code. Open the script in PythonWin to view the code. </li>
</ol>
<p>To compare the model and script, we'll look at each line of code. </p>
<ul>
<li>Lines 1- 7, 9, 13, and 18 are comments. </li>
<li>Line 10 imports  <span class="n"><code>arcpy</code></span>. This line of code  enables the script to use  ArcGIS commands. </li>
<li>Lines 14-16 are assignment statements for   <code>inputFeatures</code>,
            <code>distance</code>, and <code>outputFeatures</code>. These variables correspond to the    model variables, the ovals that specify input and output for the tool. The string literal assigned to the script variables depends on the value assigned in Modelbuilder. For example, on line 13, <code>inputFeatures</code> is being assigned the value 'C:\\gispy\\data\\ch05\\park.shp' because the model variable was given this value before the model was exported. </li>
<li> Line 19 calls the Buffer (Analysis) tool. Running a tool in Python is like calling a function. We call the tool and pass arguments into it. The tool does our bidding and creates output or returns values. The variables and string literals in the parentheses are passing information to the tool. The Buffer (Analysis) tool requires three input parameters (and the others are optional). These required parameters are represented by the ovals in our model. The first three arguments in the Python correspond to these parameters. When the code was exported, it filled in the default values for the rest of the parameters. In summary, Line 18 acts like the rectangle in the model; it creates a buffer around the input features by the given distance and saves the results in the output features. </li>
</ul>
<p> With these observations, it's possible to get a feel for the connection between the model components and the lines of code in the script. In theory, exported models could be used as a starting point for scripts, but   this approach can be cumbersome for several reasons.  First, scripting enables a more  flexible, reusable complex workflow, including functionality beyond ArcGIS geoprocessing.    Second, exported scripts
          usually require modification to perform as desired, making it more efficient to  modify existing code samples than to build and export models. </p>
<p>The model/script comparison above provides some intuition for how the Python code is working, though lines 9 and 18 need some  more explanation. The next sections addresses this need with  discussions on importing  <span class="n"><code>arcpy</code></span>, using  dot notation with <span class="n"><code>arcpy</code></span>, and calling tools.<br />
<br />
<img src="../images/buffer.py.png" alt="Exported model" /><br />
<strong>Figure 5.6</strong> A script exported from the model shown above.</p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">5.4 Working with GIS data</span> <a name="working" id="working"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Each time you run a Python script that performs geoprocessing,  you will want to check the output. Esri   geographic data features and the tables associated with them can be viewed in the ArcCatalog 'Preview' table. Browse to a shapefile in the ArcCatalog 'Catalog Tree' and select the 'Preview'. Select 'Geography' preview from the bar at the bottom of the Preview pane to view the geographic features. Then select 'Table' to see the associated attribute table. Figures 5.7a and b show the geography and  table views of 'park.shp'.  Only 7 rows of the long table  are shown in Figure 5.7b. There are 426 rows in total, one data record for each polygon. </p>
<p>When the data is being viewed in ArcCatalog, it is locked, so that other programs can't modify it simultaneously. A file with an 'sr.lock' extension is visible in Windows Explorer the data is locked. For example, the file could be named 'park.shp.HAL.5532.5620.sr.lock' on a computer named 'Hal'. When you perform processing on the file in a Python script, you need to make sure that the data is not locked. To unlock the data after previewing it in ArcCatalog,  select the parent workspace ('C:/gispy/data/ch05' in Figure 5.7) and refresh ArcCatalog (press F5). Selecting another file within the same workspace and refreshing the Catalog Tree will not release the lock; the parent workspace must be refreshed. </p>
<table width="779" border="3" bgcolor="#CEDAE3">
<tr>
<td width="765" height="38"><blockquote>Unlocking the data before performing Python geoprocessing is critical, else the script may give unforeseen errors.</blockquote></td>
</tr>
</table>
<p>To see the geographic view of more than one file at a time, you need to use ArcMap. To view your data in ArcMap, the simplest approach is to browse to the data in the ArcCatalog tree embedded in ArcMap and drag/drop it onto blank map. As long as ArcMap is still running,  data used in this way will be locked. Even if the map document is closed, the locks may not be released until the program itself is exited. </p>
<img src="../images/previewGeography.png" alt="a" /> <br />
        Figure 5.7a: Geography preview of 'park.shp'<br />
<p><img src="../images/previewTable.png" alt="a" /><br />
          Figure 5.7b: Table preview of 'park.shp'</p>
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">5.5 Key terms</span><a name="keyterms" id="keyterms"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>ArcToolbox<br />
          ArcCatalog tool search<br />
          ArcGIS Resources site<br />
          Modelbuilder<br />
          Model parameter<br />
          ArcCatalog 
          geography and table preview<br />
          Data locks<br />
</p>
<hr /><table border="0" width="775">
<tbody>
<tr>
<th align="left" scope="row"><span class="head">5.6 Exercises</span><a name="exercises" id="exercises2"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<p>1.  Use the given steps to create and test 'aggregate.py'. The steps walk through creating a model, exporting it, and running it as a script.
          &nbsp;The  script will call the Aggregate Polygons (Cartography) tool,  a data summary technique which
          groups features that are very close together. If input features are within a
          specified aggregation distance, this script will combine them into a
          single unit. The figures below show an original shapefile in Figure 5.8a
        and an aggregated version in Figure 5.8b. </p>
<p><img src="../images/export_clip_image001.jpg" alt="No aggregation" width="276" height="228" /><br />
<strong>Figure 5.8a</strong> park.shp with no aggregation</p>
<p><img src="../images/export_clip_image002.jpg" alt="With aggregation" width="276" height="228" /><br />
<strong>Figure 5.8b</strong> park.shp after 1500 foot aggregation<span class="style2"><br />
</span> </p>
<ol type="a">
<li>Step 1: <u>Create a new toolbox</u>. Browse to C:\gispy\sample_scripts\ch05 in ArcCatalog and create the new toolbox there.</li>
<li>Step 2: <u>Create the model</u>. The model should use the tool
            named 'Aggregate Polygons'. Browse to the tool (ArcToolbox &gt; Cartography Tools &gt; Generalization &gt; Aggregate Polygons), then drag and drop it onto the model.&nbsp; Give the tool two input parameters: input
            features and  aggregation distance.&nbsp; Double-click on the input variables and give them
            default values of 'C:\\gispy\\data\\ch05\\park.shp' and 100 feet.&nbsp; The model will become colored once these values are set. Rename the variables to
            meaningful, succinct names: inputFeatures, aggDistance, outputFeatures,
            and outputTable.   Make all four variables  model parameters (right-click on the oval &gt; Model Parameter and a<strong> '</strong>P<strong>'</strong> appears by the oval). Set the <code>inputFeatures</code> 'P' first and  <code>aggDistance</code> 'P' second so that your script has the input features as the first parameter and the aggregation distance as the second parameter.<br />
            .<img src="../images/aggregate_model.png" alt="a" /><br />
<br />
</li>
<li>Step 3: <u>Export the model.</u> Call it aggregateExport.py and  save it in 'C:\gispy\sample_scripts\ch05'.</li>
<li>Step 4: <u>Run the model in PythonWin.</u> Open the script in
            PythonWin and run the script with arguments: In the 'Run Script' window 'Arguments' text box,   insert the arguments the script needs, a shapefile and an aggregation distance. Try the following input example: <br />
            C:/gispy/data/ch05/park.shp &quot;1500 feet&quot; <br />
            Be sure to separate the two arguments by a space. Click 'OK' to run the script. Next,
            in the script, change the names of the output features and table to &quot;C:\\gispy\\data\\ch05\\park_Agg500.shp&quot; and &quot;C:\\gispy\\data\\ch05\\park_Agg500_Tbl&quot;, respectively, and run the script again with an aggregation
            distance of 500 feet, by modifying the aggregation distance value in the 'Arguments' text box.&nbsp;<br />
<br />
</li>
<li>Step 5: <u>Check the output.</u> View the two output
            shapefiles in ArcCatalog by selecting each one in turn in the 'Catalog Tree' and selecting the 'Preview' tab.&nbsp; Select the 'Table' view from the drop-down menu at the bottom of the 'Preview' tab and observe the number of records in the output files as compared to the input file. </li>
</ol><a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <blockquote>Unlocking the data before performing Python geoprocessing is critical, else the script may give unforeseen errors.</blockquote><a href="#top">back to top</a> <a href="#top">back to top</a> <span class="head">5.1 ArcToolbox</span> <a name="toolbox" id="toolbox"></a><a href="#top">back to top</a> <span class="head">5.2 ArcGIS Python Resources</span> <a name="reference" id="toolbar2"></a><a href="#top">back to top</a> <span class="head">5.3 Exporting Models</span> <a name="models" id="models"></a><a href="#top">back to top</a> <span class="head">5.4 Working with GIS data</span> <a name="working" id="working"></a><a href="#top">back to top</a> <blockquote>Unlocking the data before performing Python geoprocessing is critical, else the script may give unforeseen errors.</blockquote><span class="head">5.5 Key terms</span><a name="keyterms" id="keyterms"></a><a href="#top">back to top</a> <span class="head">5.6 Exercises</span><a name="exercises" id="exercises2"></a><a href="#top">back to top</a> ------------------------------------------------------------rows: 9 cols: 1<span class="head">5.1 ArcToolbox</span> <a name="toolbox" id="toolbox"></a><span class="head">5.2 ArcGIS Python Resources</span> <a name="reference" id="toolbar2"></a><span class="head">5.3 Exporting Models</span> <a name="models" id="models"></a><span class="head">5.4 Working with GIS data</span> <a name="working" id="working"></a><span class="head">5.5 Key terms</span><a name="keyterms" id="keyterms"></a><span class="head">5.6 Exercises</span><a name="exercises" id="exercises2"></a><span class="head">Chapter objectives</span><br />
<br />
After reading this chapter, you'll be able to do the following:<ul><li>Describe the ArcToolbox hierarchy.</li>
<li>Search for tools in ArcCatalog.</li>
<li>Locate tool help on ArcGIS Resources online.</li>
<li>Export a script from a visual workflow model.</li>
<li>Modify and run exported scripts.</li>
<li>Preview geoprocessing output.</li>
<li>Release locks on data.</li>
</ul>
<hr />
<p class="foo">
<span class="head">Chapter Outline</span>
<br />
<a href="#toolbox">ArcToolbox</a><br />
<a href="#reference">ArcGIS Python Resources</a><br />
<a href="#models">Exporting Models</a><br />
<a href="#working">Working with GIS data<br />
</a>Key terms<br />
<a href="#exercises">Exercises          </a> </p>
<hr />
<p>This  chapter discusses some things you need to know about the ArcGIS geoprocessing tools and data to prepare for working with them in Python. ArcGIS provides a palette of sophisticated tools for processing and analyzing geographic data. There are several ways in which these tools can be used. For example, ArcToolbox tools can be run from ArcToolbox by clicking on the tool  and filling out a form to specify the parameters; they can  be run from ModelBuilder Models, and they can be run from Python scripts. This chapter discusses ArcToolbox, Modelbuilder, and  Esri data fundamentals necessary for working with ArcGIS in Python. </p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">5.1 ArcToolbox</span> <a name="toolbox" id="toolbox"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>ArcGIS provides a large suite of tools for processing data. The ArcToolbox <img src="../images/arcToolboxButton.png" alt="arctoolbox button" width="24" height="22" /> panel in ArcCatalog (and ArcMap) lists the toolboxes --3D Analyst, Analysis, Cartography, and so forth (Figure 5.1a). The tools are grouped into toolboxes by the type of actions they perform and each toolbox contains toolsets that further group the tools by their functionality. Each toolbox (<img src="../images/toolbox.png" alt="arctoolbox button" width="25" height="20" />) and toolset (<img src="../images/toolset.png" alt="arctoolbox button" width="24" height="21" />) can be expanded to show the contents. Figure 5.1b shows the Extract, Overlay, Proximity, and Statistics toolsets in the Analysis toolbox. In this figure, the Proximity toolset is also expanded. This toolset contains six tools, Buffer, Create Thiessen Polygons, etc. Though the icons vary on the third level, these are all tools.  A tool can be run from ArcToolbox, by clicking on the tool, filling out the form that it launches, and clicking 'OK'. </p>
<p> The availability of tools depends on the license level of ArcGIS desktop installed (basic, standard, or advanced). Some tools, such as Spatial Analyst tools, are not available at the basic and standard levels. When these tools are available, an extension needs to be checked out for the tools to become functional. For example, to use Spatial Analyst tools with an advanced install, the Spatial Analyst extension must be checked out (ArcCatalog &gt; Customize &gt; Extensions &gt; Check Spatial Analyst). Scripts need to check out these extensions too, as shown in the upcoming chapter.</p>
<p><img src="../images/arcToolbox1.png" alt="a" width="285" height="429" /><br />
          Figure 5.1a ArcToolbox.<br />
<br />        
        &nbsp;<img src="../images/arctoolbox2.png" alt="a" width="224" height="218" /><br />
        Figure 5.1b The Analysis toolbox and the Proximity toolset.</p>
<p><img src="../images/searchPanel.png" /><br /> 
          Figure 5.1c The search panel.       </p>
<p>The  'Search' panel available in ArcCatalog (and ArcMap) is  useful for navigating the tools. Click the 'Search' button <img src="../images/search.png" alt="arctoolbox button" width="25" height="27" />to open this panel, select the 'Tools' option, and type a tool name. Figure 5.1c shows the results of a search. Click on a tool in the results (e.g., Buffer (Analysis) Tool) and  it opens the GUI to run the tool. The form has a 'Tool Help' button which will launch the local ArcGIS Desktop help for that tool. As you work through the examples in this book, you can locate tools in this way and become familiar with their functionality by reading the help and running them using the GUI interface. </p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">5.2 ArcGIS Python Resources</span> <a name="reference" id="toolbar2"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p><img src="../images/arcgisOnlineHelp.png" alt="arcgisOnlineHelp" /><br />
        Figure 5.2</p>
<p>The  'ArcGIS   Resources' site (resources.arcgis.com) is the foremost reference you will need for working with Python in ArcGIS. </p>
<p> The site provides full documentation for ArcGIS Python functionality. The 'Search ArcGIS Resources' box   is indispensable  for working with Python in ArcGIS. Use the search box to get a list of pages matching your query and use the search filters to narrow the search (Figure 5.2). For example, enter 'buffer' in the search box. This returns thousands of results including blogs, bug reports, web mapping help, and so forth. Narrow the search by using the 'Help' and 'Desktop' filters as shown Figure 5.3.</p>
<p><img src="../images/searchFilter.png" alt="searchFilter" /><br />
<strong>Figure 5.3</strong></p>
<p>Notice that the results are different from the ArcCatalog search results for the same term (Figure 5.1c);  the ArcGIS Desktop help is organized differently than the online help. The online help provides the most current, comprehensive documentation. </p>
<p> A set of descriptive identifiers is provided for each link.  The Buffer (Analysis) link has the identifiers 'Tool Reference' and 'ANALYSIS' (Figure 5.4). The last identifier shows the date the content was last modified. </p>
<p><img src="../images/identifier.png" alt="searchFilter" /><br />
<strong>Figure 5.4</strong></p>
<p>Each ArcGIS tool has a 'Tool Reference'  page that corresponds to the built-in help for that tool. Chapter 6 discusses components in 'Tool Reference' pages.</p>
<p>This site is referred to as the 'ArcGIS Resources' site in this book.   Key search terms will be provided to direct you to specific help topics. </p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">5.3 Exporting Models</span> <a name="models" id="models"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Python can call almost all the tools in ArcToolbox and, in this way, repetitive processes can be automated. Before we begin writing scripts from scratch, we'll start with an example automatically generated by the ArcGIS Modelbuilder application.   Modelbuilder is an application built into ArcCatalog (and ArcMap) that allows users to create a workflow visualization, called a <em>model</em>. Models not only visualize the workflow, but can also be can be run to execute the workflow. ArcGIS Toolbox tools can also be run via Modelbuilder; Tools can be dragged into the model panel and connected to create the workflow. When a model   runs,  it executes tools and the underlying code statements that correspond to pieces of the model.   The underlying code can be exported to a Python script and we can compare the workflow visualization with the code. Follow  steps 1-3 to create and export a simple model.</p>
<ol>
<li>In ArcCatalog, to create a model like the one in Figure 5.5:<br />
            - Launch Modelbuilder from the menu button <img src="../images/modelbuilderButton.png" alt="" width="28" height="26" /> on the Standard toolbar.<br />
            - Open ArcToolbox with the menu ArcToolbox button <img src="../images/arcToolboxButton.png" alt="arctoolbox button" width="24" height="22" /> on the Standard toolbar.<br />
            - 
            Locate the Buffer (Analysis) tool in the ArcToolbox (ArcToolbox &gt; Analysis Tools &gt; Proximity  &gt; Buffer)<br />
            - 
            Click the Buffer tool and drag it into Modelbuilder from its toolbox in ArcToolbox. <br />
            - Right-click on buffer &gt; Make variable &gt; From Parameter &gt; Input Features. <br />
            -
            Right-click on buffer (again) &gt; Make variable &gt; From Parameter &gt; Distance.<br />
            -
            Double click on Input Features and browse  to 'C:/gispy/data/ch05/park.shp'.<br />
            - Double click on Distance and set it to 100 Feet.<br />
            - Right-click on the input features buffer &gt; rename 'inputFeatures'.<br />
            - Right-click on the distance oval &gt; rename 'distance'.<br />
            - Right-click on the Output Feature Class oval &gt; rename 'outputFeatures'.<br />
<img src="../images/variable_names3.jpg" alt="model" /><br />
<strong>Figure 5.5</strong><br />
<br />
</li>
<li>Run the model to confirm that it works (Model menu &gt; Run).<br />
<br />
</li>
<li> Export the model as a script (Model &gt; Export &gt; Pythons Script). This should generate a script like Figure 5.6, shown with line numbers to the left of the code. Open the script in PythonWin to view the code. </li>
</ol>
<p>To compare the model and script, we'll look at each line of code. </p>
<ul>
<li>Lines 1- 7, 9, 13, and 18 are comments. </li>
<li>Line 10 imports  <span class="n"><code>arcpy</code></span>. This line of code  enables the script to use  ArcGIS commands. </li>
<li>Lines 14-16 are assignment statements for   <code>inputFeatures</code>,
            <code>distance</code>, and <code>outputFeatures</code>. These variables correspond to the    model variables, the ovals that specify input and output for the tool. The string literal assigned to the script variables depends on the value assigned in Modelbuilder. For example, on line 13, <code>inputFeatures</code> is being assigned the value 'C:\\gispy\\data\\ch05\\park.shp' because the model variable was given this value before the model was exported. </li>
<li> Line 19 calls the Buffer (Analysis) tool. Running a tool in Python is like calling a function. We call the tool and pass arguments into it. The tool does our bidding and creates output or returns values. The variables and string literals in the parentheses are passing information to the tool. The Buffer (Analysis) tool requires three input parameters (and the others are optional). These required parameters are represented by the ovals in our model. The first three arguments in the Python correspond to these parameters. When the code was exported, it filled in the default values for the rest of the parameters. In summary, Line 18 acts like the rectangle in the model; it creates a buffer around the input features by the given distance and saves the results in the output features. </li>
</ul>
<p> With these observations, it's possible to get a feel for the connection between the model components and the lines of code in the script. In theory, exported models could be used as a starting point for scripts, but   this approach can be cumbersome for several reasons.  First, scripting enables a more  flexible, reusable complex workflow, including functionality beyond ArcGIS geoprocessing.    Second, exported scripts
          usually require modification to perform as desired, making it more efficient to  modify existing code samples than to build and export models. </p>
<p>The model/script comparison above provides some intuition for how the Python code is working, though lines 9 and 18 need some  more explanation. The next sections addresses this need with  discussions on importing  <span class="n"><code>arcpy</code></span>, using  dot notation with <span class="n"><code>arcpy</code></span>, and calling tools.<br />
<br />
<img src="../images/buffer.py.png" alt="Exported model" /><br />
<strong>Figure 5.6</strong> A script exported from the model shown above.</p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">5.4 Working with GIS data</span> <a name="working" id="working"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Each time you run a Python script that performs geoprocessing,  you will want to check the output. Esri   geographic data features and the tables associated with them can be viewed in the ArcCatalog 'Preview' table. Browse to a shapefile in the ArcCatalog 'Catalog Tree' and select the 'Preview'. Select 'Geography' preview from the bar at the bottom of the Preview pane to view the geographic features. Then select 'Table' to see the associated attribute table. Figures 5.7a and b show the geography and  table views of 'park.shp'.  Only 7 rows of the long table  are shown in Figure 5.7b. There are 426 rows in total, one data record for each polygon. </p>
<p>When the data is being viewed in ArcCatalog, it is locked, so that other programs can't modify it simultaneously. A file with an 'sr.lock' extension is visible in Windows Explorer the data is locked. For example, the file could be named 'park.shp.HAL.5532.5620.sr.lock' on a computer named 'Hal'. When you perform processing on the file in a Python script, you need to make sure that the data is not locked. To unlock the data after previewing it in ArcCatalog,  select the parent workspace ('C:/gispy/data/ch05' in Figure 5.7) and refresh ArcCatalog (press F5). Selecting another file within the same workspace and refreshing the Catalog Tree will not release the lock; the parent workspace must be refreshed. </p>
<table width="779" border="3" bgcolor="#CEDAE3">
<tr>
<td width="765" height="38"><blockquote>Unlocking the data before performing Python geoprocessing is critical, else the script may give unforeseen errors.</blockquote></td>
</tr>
</table>
<p>To see the geographic view of more than one file at a time, you need to use ArcMap. To view your data in ArcMap, the simplest approach is to browse to the data in the ArcCatalog tree embedded in ArcMap and drag/drop it onto blank map. As long as ArcMap is still running,  data used in this way will be locked. Even if the map document is closed, the locks may not be released until the program itself is exited. </p>
<img src="../images/previewGeography.png" alt="a" /> <br />
        Figure 5.7a: Geography preview of 'park.shp'<br />
<p><img src="../images/previewTable.png" alt="a" /><br />
          Figure 5.7b: Table preview of 'park.shp'</p>
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">5.5 Key terms</span><a name="keyterms" id="keyterms"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>ArcToolbox<br />
          ArcCatalog tool search<br />
          ArcGIS Resources site<br />
          Modelbuilder<br />
          Model parameter<br />
          ArcCatalog 
          geography and table preview<br />
          Data locks<br />
</p>
<hr /><table border="0" width="775">
<tbody>
<tr>
<th align="left" scope="row"><span class="head">5.6 Exercises</span><a name="exercises" id="exercises2"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<p>1.  Use the given steps to create and test 'aggregate.py'. The steps walk through creating a model, exporting it, and running it as a script.
          &nbsp;The  script will call the Aggregate Polygons (Cartography) tool,  a data summary technique which
          groups features that are very close together. If input features are within a
          specified aggregation distance, this script will combine them into a
          single unit. The figures below show an original shapefile in Figure 5.8a
        and an aggregated version in Figure 5.8b. </p>
<p><img src="../images/export_clip_image001.jpg" alt="No aggregation" width="276" height="228" /><br />
<strong>Figure 5.8a</strong> park.shp with no aggregation</p>
<p><img src="../images/export_clip_image002.jpg" alt="With aggregation" width="276" height="228" /><br />
<strong>Figure 5.8b</strong> park.shp after 1500 foot aggregation<span class="style2"><br />
</span> </p>
<ol type="a">
<li>Step 1: <u>Create a new toolbox</u>. Browse to C:\gispy\sample_scripts\ch05 in ArcCatalog and create the new toolbox there.</li>
<li>Step 2: <u>Create the model</u>. The model should use the tool
            named 'Aggregate Polygons'. Browse to the tool (ArcToolbox &gt; Cartography Tools &gt; Generalization &gt; Aggregate Polygons), then drag and drop it onto the model.&nbsp; Give the tool two input parameters: input
            features and  aggregation distance.&nbsp; Double-click on the input variables and give them
            default values of 'C:\\gispy\\data\\ch05\\park.shp' and 100 feet.&nbsp; The model will become colored once these values are set. Rename the variables to
            meaningful, succinct names: inputFeatures, aggDistance, outputFeatures,
            and outputTable.   Make all four variables  model parameters (right-click on the oval &gt; Model Parameter and a<strong> '</strong>P<strong>'</strong> appears by the oval). Set the <code>inputFeatures</code> 'P' first and  <code>aggDistance</code> 'P' second so that your script has the input features as the first parameter and the aggregation distance as the second parameter.<br />
            .<img src="../images/aggregate_model.png" alt="a" /><br />
<br />
</li>
<li>Step 3: <u>Export the model.</u> Call it aggregateExport.py and  save it in 'C:\gispy\sample_scripts\ch05'.</li>
<li>Step 4: <u>Run the model in PythonWin.</u> Open the script in
            PythonWin and run the script with arguments: In the 'Run Script' window 'Arguments' text box,   insert the arguments the script needs, a shapefile and an aggregation distance. Try the following input example: <br />
            C:/gispy/data/ch05/park.shp &quot;1500 feet&quot; <br />
            Be sure to separate the two arguments by a space. Click 'OK' to run the script. Next,
            in the script, change the names of the output features and table to &quot;C:\\gispy\\data\\ch05\\park_Agg500.shp&quot; and &quot;C:\\gispy\\data\\ch05\\park_Agg500_Tbl&quot;, respectively, and run the script again with an aggregation
            distance of 500 feet, by modifying the aggregation distance value in the 'Arguments' text box.&nbsp;<br />
<br />
</li>
<li>Step 5: <u>Check the output.</u> View the two output
            shapefiles in ArcCatalog by selecting each one in turn in the 'Catalog Tree' and selecting the 'Preview' tab.&nbsp; Select the 'Table' view from the drop-down menu at the bottom of the 'Preview' tab and observe the number of records in the output files as compared to the input file. </li>
</ol><a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <blockquote>Unlocking the data before performing Python geoprocessing is critical, else the script may give unforeseen errors.</blockquote><a href="#top">back to top</a> <a href="#top">back to top</a> <span class="head">5.1 ArcToolbox</span> <a name="toolbox" id="toolbox"></a><a href="#top">back to top</a> <span class="head">5.2 ArcGIS Python Resources</span> <a name="reference" id="toolbar2"></a><a href="#top">back to top</a> <span class="head">5.3 Exporting Models</span> <a name="models" id="models"></a><a href="#top">back to top</a> <span class="head">5.4 Working with GIS data</span> <a name="working" id="working"></a><a href="#top">back to top</a> <blockquote>Unlocking the data before performing Python geoprocessing is critical, else the script may give unforeseen errors.</blockquote><span class="head">5.5 Key terms</span><a name="keyterms" id="keyterms"></a><a href="#top">back to top</a> <span class="head">5.6 Exercises</span><a name="exercises" id="exercises2"></a><a href="#top">back to top</a> ------------------------------------------------------------rows: 9 cols: 1<span class="head">5.1 ArcToolbox</span> <a name="toolbox" id="toolbox"></a><span class="head">5.2 ArcGIS Python Resources</span> <a name="reference" id="toolbar2"></a><span class="head">5.3 Exporting Models</span> <a name="models" id="models"></a><span class="head">5.4 Working with GIS data</span> <a name="working" id="working"></a><span class="head">5.5 Key terms</span><a name="keyterms" id="keyterms"></a><span class="head">5.6 Exercises</span><a name="exercises" id="exercises2"></a><span class="head">Chapter objectives</span><br />
<br />
After reading this chapter, you'll be able to do the following:<ul><li>Describe the ArcToolbox hierarchy.</li>
<li>Search for tools in ArcCatalog.</li>
<li>Locate tool help on ArcGIS Resources online.</li>
<li>Export a script from a visual workflow model.</li>
<li>Modify and run exported scripts.</li>
<li>Preview geoprocessing output.</li>
<li>Release locks on data.</li>
</ul>
<hr />
<p class="foo">
<span class="head">Chapter Outline</span>
<br />
<a href="#toolbox">ArcToolbox</a><br />
<a href="#reference">ArcGIS Python Resources</a><br />
<a href="#models">Exporting Models</a><br />
<a href="#working">Working with GIS data<br />
</a>Key terms<br />
<a href="#exercises">Exercises          </a> </p>
<hr />
<p>This  chapter discusses some things you need to know about the ArcGIS geoprocessing tools and data to prepare for working with them in Python. ArcGIS provides a palette of sophisticated tools for processing and analyzing geographic data. There are several ways in which these tools can be used. For example, ArcToolbox tools can be run from ArcToolbox by clicking on the tool  and filling out a form to specify the parameters; they can  be run from ModelBuilder Models, and they can be run from Python scripts. This chapter discusses ArcToolbox, Modelbuilder, and  Esri data fundamentals necessary for working with ArcGIS in Python. </p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">5.1 ArcToolbox</span> <a name="toolbox" id="toolbox"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>ArcGIS provides a large suite of tools for processing data. The ArcToolbox <img src="../images/arcToolboxButton.png" alt="arctoolbox button" width="24" height="22" /> panel in ArcCatalog (and ArcMap) lists the toolboxes --3D Analyst, Analysis, Cartography, and so forth (Figure 5.1a). The tools are grouped into toolboxes by the type of actions they perform and each toolbox contains toolsets that further group the tools by their functionality. Each toolbox (<img src="../images/toolbox.png" alt="arctoolbox button" width="25" height="20" />) and toolset (<img src="../images/toolset.png" alt="arctoolbox button" width="24" height="21" />) can be expanded to show the contents. Figure 5.1b shows the Extract, Overlay, Proximity, and Statistics toolsets in the Analysis toolbox. In this figure, the Proximity toolset is also expanded. This toolset contains six tools, Buffer, Create Thiessen Polygons, etc. Though the icons vary on the third level, these are all tools.  A tool can be run from ArcToolbox, by clicking on the tool, filling out the form that it launches, and clicking 'OK'. </p>
<p> The availability of tools depends on the license level of ArcGIS desktop installed (basic, standard, or advanced). Some tools, such as Spatial Analyst tools, are not available at the basic and standard levels. When these tools are available, an extension needs to be checked out for the tools to become functional. For example, to use Spatial Analyst tools with an advanced install, the Spatial Analyst extension must be checked out (ArcCatalog &gt; Customize &gt; Extensions &gt; Check Spatial Analyst). Scripts need to check out these extensions too, as shown in the upcoming chapter.</p>
<p><img src="../images/arcToolbox1.png" alt="a" width="285" height="429" /><br />
          Figure 5.1a ArcToolbox.<br />
<br />        
        &nbsp;<img src="../images/arctoolbox2.png" alt="a" width="224" height="218" /><br />
        Figure 5.1b The Analysis toolbox and the Proximity toolset.</p>
<p><img src="../images/searchPanel.png" /><br /> 
          Figure 5.1c The search panel.       </p>
<p>The  'Search' panel available in ArcCatalog (and ArcMap) is  useful for navigating the tools. Click the 'Search' button <img src="../images/search.png" alt="arctoolbox button" width="25" height="27" />to open this panel, select the 'Tools' option, and type a tool name. Figure 5.1c shows the results of a search. Click on a tool in the results (e.g., Buffer (Analysis) Tool) and  it opens the GUI to run the tool. The form has a 'Tool Help' button which will launch the local ArcGIS Desktop help for that tool. As you work through the examples in this book, you can locate tools in this way and become familiar with their functionality by reading the help and running them using the GUI interface. </p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">5.2 ArcGIS Python Resources</span> <a name="reference" id="toolbar2"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p><img src="../images/arcgisOnlineHelp.png" alt="arcgisOnlineHelp" /><br />
        Figure 5.2</p>
<p>The  'ArcGIS   Resources' site (resources.arcgis.com) is the foremost reference you will need for working with Python in ArcGIS. </p>
<p> The site provides full documentation for ArcGIS Python functionality. The 'Search ArcGIS Resources' box   is indispensable  for working with Python in ArcGIS. Use the search box to get a list of pages matching your query and use the search filters to narrow the search (Figure 5.2). For example, enter 'buffer' in the search box. This returns thousands of results including blogs, bug reports, web mapping help, and so forth. Narrow the search by using the 'Help' and 'Desktop' filters as shown Figure 5.3.</p>
<p><img src="../images/searchFilter.png" alt="searchFilter" /><br />
<strong>Figure 5.3</strong></p>
<p>Notice that the results are different from the ArcCatalog search results for the same term (Figure 5.1c);  the ArcGIS Desktop help is organized differently than the online help. The online help provides the most current, comprehensive documentation. </p>
<p> A set of descriptive identifiers is provided for each link.  The Buffer (Analysis) link has the identifiers 'Tool Reference' and 'ANALYSIS' (Figure 5.4). The last identifier shows the date the content was last modified. </p>
<p><img src="../images/identifier.png" alt="searchFilter" /><br />
<strong>Figure 5.4</strong></p>
<p>Each ArcGIS tool has a 'Tool Reference'  page that corresponds to the built-in help for that tool. Chapter 6 discusses components in 'Tool Reference' pages.</p>
<p>This site is referred to as the 'ArcGIS Resources' site in this book.   Key search terms will be provided to direct you to specific help topics. </p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">5.3 Exporting Models</span> <a name="models" id="models"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Python can call almost all the tools in ArcToolbox and, in this way, repetitive processes can be automated. Before we begin writing scripts from scratch, we'll start with an example automatically generated by the ArcGIS Modelbuilder application.   Modelbuilder is an application built into ArcCatalog (and ArcMap) that allows users to create a workflow visualization, called a <em>model</em>. Models not only visualize the workflow, but can also be can be run to execute the workflow. ArcGIS Toolbox tools can also be run via Modelbuilder; Tools can be dragged into the model panel and connected to create the workflow. When a model   runs,  it executes tools and the underlying code statements that correspond to pieces of the model.   The underlying code can be exported to a Python script and we can compare the workflow visualization with the code. Follow  steps 1-3 to create and export a simple model.</p>
<ol>
<li>In ArcCatalog, to create a model like the one in Figure 5.5:<br />
            - Launch Modelbuilder from the menu button <img src="../images/modelbuilderButton.png" alt="" width="28" height="26" /> on the Standard toolbar.<br />
            - Open ArcToolbox with the menu ArcToolbox button <img src="../images/arcToolboxButton.png" alt="arctoolbox button" width="24" height="22" /> on the Standard toolbar.<br />
            - 
            Locate the Buffer (Analysis) tool in the ArcToolbox (ArcToolbox &gt; Analysis Tools &gt; Proximity  &gt; Buffer)<br />
            - 
            Click the Buffer tool and drag it into Modelbuilder from its toolbox in ArcToolbox. <br />
            - Right-click on buffer &gt; Make variable &gt; From Parameter &gt; Input Features. <br />
            -
            Right-click on buffer (again) &gt; Make variable &gt; From Parameter &gt; Distance.<br />
            -
            Double click on Input Features and browse  to 'C:/gispy/data/ch05/park.shp'.<br />
            - Double click on Distance and set it to 100 Feet.<br />
            - Right-click on the input features buffer &gt; rename 'inputFeatures'.<br />
            - Right-click on the distance oval &gt; rename 'distance'.<br />
            - Right-click on the Output Feature Class oval &gt; rename 'outputFeatures'.<br />
<img src="../images/variable_names3.jpg" alt="model" /><br />
<strong>Figure 5.5</strong><br />
<br />
</li>
<li>Run the model to confirm that it works (Model menu &gt; Run).<br />
<br />
</li>
<li> Export the model as a script (Model &gt; Export &gt; Pythons Script). This should generate a script like Figure 5.6, shown with line numbers to the left of the code. Open the script in PythonWin to view the code. </li>
</ol>
<p>To compare the model and script, we'll look at each line of code. </p>
<ul>
<li>Lines 1- 7, 9, 13, and 18 are comments. </li>
<li>Line 10 imports  <span class="n"><code>arcpy</code></span>. This line of code  enables the script to use  ArcGIS commands. </li>
<li>Lines 14-16 are assignment statements for   <code>inputFeatures</code>,
            <code>distance</code>, and <code>outputFeatures</code>. These variables correspond to the    model variables, the ovals that specify input and output for the tool. The string literal assigned to the script variables depends on the value assigned in Modelbuilder. For example, on line 13, <code>inputFeatures</code> is being assigned the value 'C:\\gispy\\data\\ch05\\park.shp' because the model variable was given this value before the model was exported. </li>
<li> Line 19 calls the Buffer (Analysis) tool. Running a tool in Python is like calling a function. We call the tool and pass arguments into it. The tool does our bidding and creates output or returns values. The variables and string literals in the parentheses are passing information to the tool. The Buffer (Analysis) tool requires three input parameters (and the others are optional). These required parameters are represented by the ovals in our model. The first three arguments in the Python correspond to these parameters. When the code was exported, it filled in the default values for the rest of the parameters. In summary, Line 18 acts like the rectangle in the model; it creates a buffer around the input features by the given distance and saves the results in the output features. </li>
</ul>
<p> With these observations, it's possible to get a feel for the connection between the model components and the lines of code in the script. In theory, exported models could be used as a starting point for scripts, but   this approach can be cumbersome for several reasons.  First, scripting enables a more  flexible, reusable complex workflow, including functionality beyond ArcGIS geoprocessing.    Second, exported scripts
          usually require modification to perform as desired, making it more efficient to  modify existing code samples than to build and export models. </p>
<p>The model/script comparison above provides some intuition for how the Python code is working, though lines 9 and 18 need some  more explanation. The next sections addresses this need with  discussions on importing  <span class="n"><code>arcpy</code></span>, using  dot notation with <span class="n"><code>arcpy</code></span>, and calling tools.<br />
<br />
<img src="../images/buffer.py.png" alt="Exported model" /><br />
<strong>Figure 5.6</strong> A script exported from the model shown above.</p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">5.4 Working with GIS data</span> <a name="working" id="working"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Each time you run a Python script that performs geoprocessing,  you will want to check the output. Esri   geographic data features and the tables associated with them can be viewed in the ArcCatalog 'Preview' table. Browse to a shapefile in the ArcCatalog 'Catalog Tree' and select the 'Preview'. Select 'Geography' preview from the bar at the bottom of the Preview pane to view the geographic features. Then select 'Table' to see the associated attribute table. Figures 5.7a and b show the geography and  table views of 'park.shp'.  Only 7 rows of the long table  are shown in Figure 5.7b. There are 426 rows in total, one data record for each polygon. </p>
<p>When the data is being viewed in ArcCatalog, it is locked, so that other programs can't modify it simultaneously. A file with an 'sr.lock' extension is visible in Windows Explorer the data is locked. For example, the file could be named 'park.shp.HAL.5532.5620.sr.lock' on a computer named 'Hal'. When you perform processing on the file in a Python script, you need to make sure that the data is not locked. To unlock the data after previewing it in ArcCatalog,  select the parent workspace ('C:/gispy/data/ch05' in Figure 5.7) and refresh ArcCatalog (press F5). Selecting another file within the same workspace and refreshing the Catalog Tree will not release the lock; the parent workspace must be refreshed. </p>
<table width="779" border="3" bgcolor="#CEDAE3">
<tr>
<td width="765" height="38"><blockquote>Unlocking the data before performing Python geoprocessing is critical, else the script may give unforeseen errors.</blockquote></td>
</tr>
</table>
<p>To see the geographic view of more than one file at a time, you need to use ArcMap. To view your data in ArcMap, the simplest approach is to browse to the data in the ArcCatalog tree embedded in ArcMap and drag/drop it onto blank map. As long as ArcMap is still running,  data used in this way will be locked. Even if the map document is closed, the locks may not be released until the program itself is exited. </p>
<img src="../images/previewGeography.png" alt="a" /> <br />
        Figure 5.7a: Geography preview of 'park.shp'<br />
<p><img src="../images/previewTable.png" alt="a" /><br />
          Figure 5.7b: Table preview of 'park.shp'</p>
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">5.5 Key terms</span><a name="keyterms" id="keyterms"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>ArcToolbox<br />
          ArcCatalog tool search<br />
          ArcGIS Resources site<br />
          Modelbuilder<br />
          Model parameter<br />
          ArcCatalog 
          geography and table preview<br />
          Data locks<br />
</p>
<hr /><table border="0" width="775">
<tbody>
<tr>
<th align="left" scope="row"><span class="head">5.6 Exercises</span><a name="exercises" id="exercises2"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<p>1.  Use the given steps to create and test 'aggregate.py'. The steps walk through creating a model, exporting it, and running it as a script.
          &nbsp;The  script will call the Aggregate Polygons (Cartography) tool,  a data summary technique which
          groups features that are very close together. If input features are within a
          specified aggregation distance, this script will combine them into a
          single unit. The figures below show an original shapefile in Figure 5.8a
        and an aggregated version in Figure 5.8b. </p>
<p><img src="../images/export_clip_image001.jpg" alt="No aggregation" width="276" height="228" /><br />
<strong>Figure 5.8a</strong> park.shp with no aggregation</p>
<p><img src="../images/export_clip_image002.jpg" alt="With aggregation" width="276" height="228" /><br />
<strong>Figure 5.8b</strong> park.shp after 1500 foot aggregation<span class="style2"><br />
</span> </p>
<ol type="a">
<li>Step 1: <u>Create a new toolbox</u>. Browse to C:\gispy\sample_scripts\ch05 in ArcCatalog and create the new toolbox there.</li>
<li>Step 2: <u>Create the model</u>. The model should use the tool
            named 'Aggregate Polygons'. Browse to the tool (ArcToolbox &gt; Cartography Tools &gt; Generalization &gt; Aggregate Polygons), then drag and drop it onto the model.&nbsp; Give the tool two input parameters: input
            features and  aggregation distance.&nbsp; Double-click on the input variables and give them
            default values of 'C:\\gispy\\data\\ch05\\park.shp' and 100 feet.&nbsp; The model will become colored once these values are set. Rename the variables to
            meaningful, succinct names: inputFeatures, aggDistance, outputFeatures,
            and outputTable.   Make all four variables  model parameters (right-click on the oval &gt; Model Parameter and a<strong> '</strong>P<strong>'</strong> appears by the oval). Set the <code>inputFeatures</code> 'P' first and  <code>aggDistance</code> 'P' second so that your script has the input features as the first parameter and the aggregation distance as the second parameter.<br />
            .<img src="../images/aggregate_model.png" alt="a" /><br />
<br />
</li>
<li>Step 3: <u>Export the model.</u> Call it aggregateExport.py and  save it in 'C:\gispy\sample_scripts\ch05'.</li>
<li>Step 4: <u>Run the model in PythonWin.</u> Open the script in
            PythonWin and run the script with arguments: In the 'Run Script' window 'Arguments' text box,   insert the arguments the script needs, a shapefile and an aggregation distance. Try the following input example: <br />
            C:/gispy/data/ch05/park.shp &quot;1500 feet&quot; <br />
            Be sure to separate the two arguments by a space. Click 'OK' to run the script. Next,
            in the script, change the names of the output features and table to &quot;C:\\gispy\\data\\ch05\\park_Agg500.shp&quot; and &quot;C:\\gispy\\data\\ch05\\park_Agg500_Tbl&quot;, respectively, and run the script again with an aggregation
            distance of 500 feet, by modifying the aggregation distance value in the 'Arguments' text box.&nbsp;<br />
<br />
</li>
<li>Step 5: <u>Check the output.</u> View the two output
            shapefiles in ArcCatalog by selecting each one in turn in the 'Catalog Tree' and selecting the 'Preview' tab.&nbsp; Select the 'Table' view from the drop-down menu at the bottom of the 'Preview' tab and observe the number of records in the output files as compared to the input file. </li>
</ol><a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <blockquote>Unlocking the data before performing Python geoprocessing is critical, else the script may give unforeseen errors.</blockquote><a href="#top">back to top</a> <a href="#top">back to top</a> <span class="head">5.1 ArcToolbox</span> <a name="toolbox" id="toolbox"></a><a href="#top">back to top</a> <span class="head">5.2 ArcGIS Python Resources</span> <a name="reference" id="toolbar2"></a><a href="#top">back to top</a> <span class="head">5.3 Exporting Models</span> <a name="models" id="models"></a><a href="#top">back to top</a> <span class="head">5.4 Working with GIS data</span> <a name="working" id="working"></a><a href="#top">back to top</a> <blockquote>Unlocking the data before performing Python geoprocessing is critical, else the script may give unforeseen errors.</blockquote><span class="head">5.5 Key terms</span><a name="keyterms" id="keyterms"></a><a href="#top">back to top</a> <span class="head">5.6 Exercises</span><a name="exercises" id="exercises2"></a><a href="#top">back to top</a> ------------------------------Ch05.html processed++++++++
K:/www/outputPagesCh05.html written
Ch06.html STARTED++++++++
------------------------------rows: 63 cols: 0<span class="head">6.1 Importing <code>arcpy</code></span> <a name="arcpy" id="environment3"></a><span class="head">6.2 <code>arcpy</code> Functions</span> <a name="functions" id="environment2"></a><span class="head">6.3 Environment
                settings</span> <a name="environment" id="environment"></a><code>arcpy<span class="o">.</span>env<span class="o">.</span>property <span class="o">=</span> value</code><code>variable <span class="o">=</span> arcpy<span class="o">.</span>env<span class="o">.</span>property</code><p><span class="head">6.4 Calling 
                  Tools</span> <a name="tools" id="tools"></a></p>ToolboxAlias<span><strong><span class="head">6.4.1 Using tool help</span><a name="help" id="help"></a></strong></span><span><strong><span class="head">6.4.2 Copy code snippet</span></strong></span> <a name="snippet" id="snippet"></a><span><strong><span class="head">6.4.3 Linear units</span></strong></span> <a name="linear" id="snippet2"></a><span><strong><span class="head">6.4.4 Python expressions as inputs</span><a name="expressions" id="expressions"></a></strong></span><span><strong><span class="head">6.4.5 Multivalue inputs</span></strong></span> <a name="multivalue" id="multivalue"></a><span><strong><span class="head">6.4.6 Optional parameters</span></strong></span> <a name="optional" id="optional"></a><span><strong><span class="head">6.4.7 Return values (...using the <code>Result</code> object)</span><a name="return" id="return"></a></strong></span><span class="head">6.4.8 Calling  Spatial Analyst tools</span><a name="sa" id="sa"></a><span>
<span class="head">6.4.9 Importing spatial analyst</span>
<a name="importsa" id="importsa"></a></span><span class="head">6.4.10 Raster Calculator</span>

<a name="rastCalc" id="importsa2"></a> <span><strong><span class="head">6.4.11 Temporary feature layers</span><a name="tempLayers" id="custom2"></a></strong></span><span class="head">6.4.12 Using variables for multiple tool calls</span><a name="multipleTool" id="multipleTool"></a><span><strong><span class="head">6.4.13 Calling custom tools</span><a name="custom" id="custom"></a></strong></span><span class="head">6.5 A word about old scripts</span> <a name="arcgisscripting" id="introduction3"></a><span class="head">6.6 Discussion </span><a name="discussion" id="discussion"></a><span class="head">6.7 Key terms</span><a name="keyterms" id="keyterms2"></a><span class="head">6.8 Exercises</span> <a name="exercises" id="exercises"></a><br /><span class="head">Chapter objectives</span>
<br />
<br />
        After reading this chapter, you'll be able to do the following: 
        <ul>
<li>Explain, in general terms, the capabilities of the <code>arcpy</code> package.<br />
</li>
<li>Define the Python terms <em>module</em> and <em>package</em>.</li>
<li><span>Set geoprocessing environment variables.</span></li>
<li>Invoke geoprocessing tools with Python.</li>
<li>Interpret ArcGIS Resources  scripting help for geoprocessing tools.</li>
<li>Copy code snippets from hand-run tools.</li>
<li>Calculate field values with Python expressions.</li>
<li>Format linear units, multi-value input and optional input for GIS tools.</li>
<li>Consume values returned by GIS tools.</li>
<li>Call Spatial Analyst tools and perform map algebra.</li>
<li>Save temporary raster and feature layer data.</li>
<li>Use output from tool a GIS tool as input to another GIS tool. </li>
<li>Import custom toolboxes and call custom tools.</li>
</ul>
<hr />
<span class="foo">
<span class="head">Chapter Outline</span>
<br />
<br />
<a href="#arcpy">Importing <code>arcpy</code> </a><br />
<a href="#functions"><code>arcpy</code> Functions</a><br />
<a href="#environment">Environment settings</a><br />
<a href="#tools">Calling tools</a><br />
          &nbsp;&nbsp;&nbsp;&nbsp;<a href="#help">Using tool help</a><br />
          &nbsp;&nbsp;&nbsp;&nbsp;<a href="#snippet">Copy Code Snippet</a><br />
          &nbsp;&nbsp;&nbsp;&nbsp;<a href="#linear">Linear units</a><br />
          &nbsp;&nbsp;&nbsp;&nbsp;<a href="#expressions">Python expressions as inputs</a><br />
          &nbsp;&nbsp;&nbsp;&nbsp;<a href="#multivalue">Multivalue inputs</a><br />
          &nbsp;&nbsp;&nbsp;&nbsp;<a href="#optional">Optional parameters</a><br />
          &nbsp;&nbsp;&nbsp;&nbsp;<a href="#return">Return values</a><br />
          &nbsp;&nbsp;&nbsp;&nbsp;<a href="#sa">Calling Spatial Analyst tools</a><br />
          &nbsp;&nbsp;&nbsp;&nbsp;<a href="#importsa">Importing spatial analyst</a><br />
          &nbsp;&nbsp;&nbsp;&nbsp;<a href="#rastCalc">Raster Calculator</a><br />
          &nbsp;&nbsp;&nbsp;&nbsp;<a href="#tempLayers">Temporary Layers<br />
</a><a href="#tempLayers"></a>&nbsp;<a href="#tempLayers"></a>&nbsp;&nbsp;&nbsp;<a href="#multipleTool">Using variables for multiple tool calls</a><br />
          &nbsp;&nbsp;&nbsp;&nbsp;<a href="#custom">Calling custom tools</a><br />
<a href="#arcgisscripting">A word about old scripts</a><br />
<a href="#keyterms">Key terms</a><br />
<a href="#discussion">Discussion</a><br />
<a href="#exercises">Exercises</a><br />
</span> <hr />
<p>          Now that you know some basic  Python and  some things about ArcGIS geoprocessing tools,  we can begin to discuss Python ArcGIS functionality.  Many aspects of ArcGIS  functionality, including tools are accessible through Python. The key to accessing ArcGIS in Python is a special set of scripts called <code>arcpy</code>. The main idea of this chapter is to familiarize you with <code>arcpy</code> and the syntax for using ArcToolbox tools. </p>
<hr /><table border="0" width="775">
<tbody>
<tr>
<th align="left" scope="row"><span class="head">6.1 Importing <code>arcpy</code></span> <a name="arcpy" id="environment3"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<p>You may have noticed that the scripts exported from Modelbuilder begin by importing <code>arcpy</code>.  This is how most geoprocessing scripts begin, because importing <code>arcpy</code> is the key to accessing ArcGIS Python. To use ArcGIS functionality in Python, a script  needs to import <code>arcpy</code>. The terms <code>import</code> and <code>arcpy</code> are explained here:</p>
<ul>
<li>The keyword <code>import</code> is used to reference a  module or a package. This provides access to functionality beyond the built-in Python functionality. As discussed in Chapter 2, the term following the <code>import</code> keyword  is a module or a package.  Recall that a <em>module</em> is a single Python script ('.py' file) containing tightly related definitions and statements. A <em>package</em> is a special way of structuring a set of related Python modules. A package is a directory containing modules and sometimes subpackages, which also contain modules. A module named '__init__.py' tells Python that the directory contains a package. Modules structured within a package and items in those modules can be accessed using the  dot notation.<br />
<br />
</li>
<li><code>arcpy</code> is a package installed with ArcGIS. <code>arcpy</code> can also be thought of as a Python object that has numerous methods, including geoprocessing tools. Search under the ArcGIS install and you will find an <code>arcpy</code> directory. This is the package being imported. <code>arcpy</code> provides a variety of functionality that we'll be using throughout the remainder of the book. Table 6.1 lists the main <code>arcpy</code> topics covered in this book. </li>
</ul>
<p>The <code>arcpy</code> package has an object-oriented design which can be defined using object-oriented terms, some of which were already used in Chapters 3 and 4:</p>
<ul>
<li>Everything in Python is an <em>object</em>, including modules and packages. <code>arcpy</code> is an object. <code>arcpy</code> also uses objects, such as  a <code>ValueTable</code> object, a <code>Describe</code> object, and a <code>Result</code> object which are discussed in upcoming sections. <br />
<br />
</li>
<li>Objects have methods associated with them. A <em>method</em> is a function that performs some action on the object.  Methods are simply a specific type of functions. The terms 'calling methods', 'passing arguments', and 'returning values'  apply to methods just as they apply to functions.</li>
</ul>
<p> Dot notation generates context menus for <code>arcpy</code>, showing a list of available <code>arcpy</code> methods and properties. When you use dot notation with strings and lists, context menus automatically appear, but these are built-in data types. In order to view context menus for <code>arcpy</code>, you must first import <code>arcpy</code> to give Python access to the information it uses to populate the context menu. In other words, it recognizes the word <code>arcpy</code> as a package.  Once you have imported <code>arcpy</code>, within a PythonWin session, the context menus are available for the entire session.  Try the code shown in the screen shot below to see the context menu for  <code>arcpy</code>. In some cases, no error will occur if incorrect spelling or capitalization is used; it will simply not work. Selecting choices from the  context menu is a good way to maintain accurate spelling and capitalization and increase efficiency. You can start typing a name and the menu will scroll to the closest choice. Press the 'Tab' key and the current selection will automatically be completed. If you don't see your choice, your spelling or capitalization is wrong.  The <code>arcpy</code> menu contains a list of  <code>arcpy</code> functions, environment settings,  tools, and modules. <br />
<br />
<img src="../images/autoCompletion.png" alt="autocompletion" width="561" height="205" /></p>
<table bgcolor="#eeeeee" border="0" bordercolor="#ece9d8" width="779">
<tbody>
<tr>
<td scope="row"><p><strong>Table 6.1: Highlights of <code>arcpy</code> functionality </strong><a name="create" id="create2"></a></p>
<table width="759" border="1">
<tr>
<td width="74"><strong>ArcGIS Topic</strong></td>
<td width="260"><strong>Functionality</strong></td>
<td width="403"><strong>Code sample</strong></td>
</tr>
<tr>
<td>Tools </td>
<td>Call ArcToolbox tools</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="s">&#39;output.shp&#39;</span><span class="p">,</span> <span class="s">&#39;1 Mile&#39;</span><span class="p">)</span></code></td>
</tr>
<tr>
<td>Other functions</td>
<td>Licensing, data management, and other miscellaneous needs.</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">CheckOutExtension</span><span class="p">(</span><span class="s">&#39;Spatial&#39;</span><span class="p">)</span></code></td>
</tr>
<tr>
<td>Environment<br />
                      variables</td>
<td>Set and get environment variable values</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span> </code></td>
</tr>
<tr>
<td>Describe</td>
<td>Describe data properties</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">Describe</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">)</span> </code></td>
</tr>
<tr>
<td>Listing data</td>
<td>List  items (e.g., rasters, feature classes, workspaces, toolboxes,  environment variables, and indexes)</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">ListFeatureClasses</span><span class="p">(</span> <span class="p">)</span> </code></td>
</tr>
<tr>
<td>Cursor</td>
<td>Read/modify attribute table elements</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">da</span><span class="o">.</span><span class="n">SearchCursor</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="n">fieldNames</span><span class="p">)</span> </code></td>
</tr>
<tr>
<td>Messaging</td>
<td>Get and print geoprocessing messages</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">GetMessages</span><span class="p">(</span> <span class="p">)</span> </code></td>
</tr>
<tr>
<td>Mapping</td>
<td>Manipulate existing map layers, add layers to maps, modifying surrounds, manipulate symbology<br /></td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">mapping</span><span class="o">.</span><span class="n">MoveLayer</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">refLayer</span><span class="p">,</span> <span class="n">moveLayer</span><span class="p">,</span> <span class="s">&#39;BEFORE&#39;</span><span class="p">)</span> </code></td>
</tr>
</table>
<br /></td>
</tr>
</tbody>
</table>
<p> With each software release, <code>arcpy</code> functionality grows.  It would be difficult to learn about every <code>arcpy</code> object, method, and property. You can accomplish a lot with just a high level knowledge  of available functionality along with some detailed knowledge of a few components. The rest of the details can be referenced in the help documentation. Figure 6.2  provides an overview of <code>arcpy</code> functionality. Symbols are used for properties, methods, and objects as shown in the key (bottom right). Designed loosely to resemble an  object model diagram, the boxes enclose functionality categories and only a few examples are shown for each category (it's designed more like a 'cheat sheet' than an object model diagram). The contents are not exhaustive  but Figure 6.2 will provide a reference for the <code>arcpy</code> discussion. Packages, modules, and classes are Python constructs for organizing code. These constructs can contain functions (or methods) and properties. To see a complete list of functions/methods and properties for any of these constructs, search the online ArcGIS  Resources site. </p>
<p><img src="../images/cheatSheet1.png" border="1" /><br />
<strong>Figure 6.2</strong> Main components of <code>arcpy</code> functionality with a few examples listed for each item.</p>
<hr />
<table border="0" width="775">
<tbody>
<tr>
<th align="left" scope="row"><span class="head">6.2 <code>arcpy</code> Functions</span> <a name="functions" id="environment2"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<p>The  <code>arcpy</code> functions (blue box in Figure 6.2) provide support for geoprocessing workflows.   For example, functions can be used to list datasets, retrieve a dataset's   properties, check for existence of data, validate a table name before   adding it to a geodatabase, or perform many other useful scripting   tasks. The syntax for calling functions in the <code>arcpy</code> package uses the dot notation with  <code>arcpy</code> before the dot and the function name after the dot:</p>
<table width="600" border="0" bgcolor="#ffcccc">
<tbody>
<tr>
<td width="791" scope="row"><code>arcpy<span class="o">.</span>functionName(argument1, 
              argument2, argument3,...)</code></td>
</tr>
</tbody>
</table>
<p>In the following example, the function name is 'CheckExtension' and it takes one argument, the extension code, '3D' for the 3D Analyst toolbox: <br />
</p>
<p><code>&gt;&gt;&gt; <span class="key">import</span> arcpy<br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>CheckExtension(<span class="s">'3D'</span>)<br />
<span class="num">u'Available'<br />
</span></code></p>
<p>The response means the 3D Analyst Extension license is available to be checked out. 
          As mentioned earlier, the <code>u</code> in front stands for unicode, a way of encoding strings. But the string encoding doesn't have any practical repercussions for our interests, so you can ignore this. If you print the value, with the built-in <code>print</code> function, the <code>u</code> will not be included. <br />
<code><br />
          &gt;&gt;&gt; <span class="key">print</span> arcpy<span class="o">.</span>CheckExtension(<span class="s">'3D'</span>)<br />
</code><code><span class="n">Available</span></code><br /> </p>
<p>Notice, the example above did not import <code>arcpy</code>. For a given PythonWin session, once  <code>arcpy</code> is imported, it doesn't need to be imported again. But if  PythonWin is closed and reopened, <code>arcpy</code> needs to be imported again. <br />
<br />
          Functions that don't require arguments still need to use parentheses. For example, the <code>ListPrinterNames</code> function lists the printers available to the caller and takes no arguments:<br />
<code><br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>ListPrinterNames( )<br />
<span class="num">[u'Use Mac Printer', u'Send To OneNote 2010', u'Microsoft XPS Document Writer', u'Fax', u'Adobe PDF']<br />
</span></code><br />
          Many <code>arcpy</code>  functions return  values. An assignment statement can  capture the return value in a variable. The following code creates a <code>arcpy</code> <code>Point</code> object. The <code>CreateObject</code> function returns a <code>Point</code> object and it is stored in the variable named <code>pt</code>. The second line prints the value of this variable,  a 2-dimensional <code>Point</code> object located at <code>(0,0)</code>:<br />
<code><br />
          &gt;&gt;&gt; pt <span class="o">=</span> arcpy<span class="o">.</span>CreateObject(<span class="s">'Point'</span>)<br />
&gt;&gt;&gt; pt<br />
</code><code><span class="n">&lt;Point (0.0, 0.0, #, #)&gt;</span></code><br />
<br />
          The <code>arcpy</code> functions serve a  variety of scripting needs, some dealing with administrative concerns such as licensing (e.g., <code>CheckExtension</code>), others dealing with data management. For example, the <code>Exists</code> function takes one argument, a dataset and checks if it exists:</p>
<p><code>&gt;&gt;&gt; arcpy<span class="o">.</span>Exists(<span class="s">'C:/gispy/data/ch06/park.shp'</span>)<br />
          True<br />
</code></p>
<p>Other functions deal with topics such as geodatabase management, messaging, fields, tools, parameters, and cursors.   Search  for an 'alphabetical list of <code>arcpy</code> functions', on the ArcGIS Resources site to see a complete list of functions. Technically, the ArcToolbox tool functions are <code>arcpy</code> functions, but these are listed separately elsewhere on the site.  The syntax for calling tools is  similar to the syntax for calling other <code>arcpy</code> functions. Before we call tools it's important to know about managing environment settings. The syntax for environment settings uses dot notation as well.<br />
</p>
<hr /><table border="0" width="775">
<tbody>
<tr>
<th align="left" scope="row"><span class="head">6.3 Environment
                settings</span> <a name="environment" id="environment"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<p><img src="../images/envSettings.png" alt="envSettings" /><br />
          Figure 6.2a<br />
<br />
          Each tool has  settings it uses to execute an operation, such as a tolerance or   output location. The <em>environment settings</em> are conditions shared by all tools. ArcGIS has default values for these settings and users can modify the values via a dialog box in ArcGIS (Geoprocessing &gt; Environments launches the dialog box shown in Figure 6.2a). Python commands can also be used to get or set  the values of these settings. <code>arcpy</code> has an <code>env</code> class, a special structure for holding related properties. The <code>env</code> properties control the environment settings. <code>env</code> belongs to <code>arcpy</code> and the properties belong to the <code>env</code> class, so the property names have two dots, one after <code>arcpy</code> and one after <code>env</code>. The format for setting these properties is: </p>
<table width="600" border="0" bgcolor="#ffcccc">
<tbody>
<tr>
<th width="785" scope="row" align="left"><code>arcpy<span class="o">.</span>env<span class="o">.</span>property <span class="o">=</span> value</code></th>
</tr>
</tbody>
</table>
<p>The format for getting these properties is:</p>
<table width="600" border="0" bgcolor="#ffcccc">
<tbody>
<tr>
<th width="783" scope="row" align="left"><code>variable <span class="o">=</span> arcpy<span class="o">.</span>env<span class="o">.</span>property</code></th>
</tr>
</tbody>
</table>
<p>The workspace path and the overwrite output status are important environment  properties. The workspace  path specifies a structure such as a directory or file geodatabase that contains pertinent data. Tools look for input data in the workspace and place the output in the workspace. If the input data resides in the workspace, only the name of the file needs to be used. <code>arcpy</code> will automatically search in the workspace. Similarly, the workspace is the default location for output, unless otherwise specified. <br />
<code><br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>env<span class="o">.</span>workspace <span class="o">=</span> <span class="s">'C:/Data/Forestry'</span> <span class="comment"># Setting 
          the current workspace path</span><br />
<br />
          &gt;&gt;&gt; mydir <span class="o">=</span>  arcpy<span class="o">.</span>env<span class="o">.</span>workspace <span class="comment"># Getting 
          the current workspace path</span><br />
          &gt;&gt;&gt; mydir</code><code><span class="n"><br />
          u'C:/Data/Forestry'</span></code><br />
<br />
          Setting the workspace is simply a string assignment. No checking is done at this point to ensure that the workspace exists. This only occurs when a tool attempts to use the workspace to read or write data. The overwrite output status, either <code>True</code> or <code>False</code>, controls whether or not existing files are allowed to be overwritten by output from tools. The built-in constants <code>True</code> or <code>False</code> must be capitalized. The overwrite output status can also be set to 1 or 0 (1 for <code>True</code> and <code>0</code> for False). The default value for the <code>overwriteOutput</code> properties is <code>False</code>. <br />
<br />
<code>&gt;&gt;&gt; arcpy<span class="o">.</span>env<span class="o">.</span>overwriteOutput<br />
</code><code><span class="n">False</span></code><br />
<br />
          This protects the user from unintentionally overwriting a file, but is  inconvenient during development when scripts  need to be run more than once for testing. For  complex scripts, it's useful to set overwriteOutput to <code>True</code> placing this statement near the beginning of the script, after <code>arcpy</code> is imported, but before any tool calls are made:</p>
<p><code>&gt;&gt;&gt; arcpy<span class="o">.</span>env<span class="o">.</span>overwriteOutput <span class="o">=</span> <span class="bp">True</span><br />
</code><br />
          Since Python is case-sensitive, be sure to use lower camel case for <code>overwriteOutput</code>.  For environment settings, no error will appear if  the capitalization is incorrect; it will simply not work as expect. In this example, we use the wrong capitalization and no error is reported, but the value of the overwriteOutput property is not changed to False:<br />
<code><br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>env<span class="o">.</span>overwriteoutput <span class="o">=</span> <span class="bp">False</span><br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>env<span class="o">.</span>overwriteOutput<br />
<span class="num">True<br />
</span></code><br />
          Other environment variables may be useful for specific 
          problems.  For example, when you are creating raster data
          sets, you may
          want to set the tile size property which specifies the height and width of  data stored in blocks.  The default size  is 128 by 128 pixels:<br />
<code><br />
&gt;&gt;&gt; arcpy<span class="o">.</span>env<span class="o">.</span>tileSize<br />
</code><code><span class="n">u'128 128'</span></code><br />
<br />
          Type the following line of code to print a complete list of available environment 
          properties:</p>
<p><code>&gt;&gt;&gt; arcpy<span class="o">.</span>ListEnvironments()</code></p>
<hr /><table border="0" width="775">
<tbody>
<tr>
<th align="left" scope="row"><p><span class="head">6.4 Calling 
                  Tools</span> <a name="tools" id="tools"></a></p></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<p>
 
 ArcGIS users know how to run tools from ArcToolbox. As you saw in the Modelbuilder example, ArcToolbox tools, like other <code>arcpy</code> functions, use dot notation with <code>arcpy</code> before the dot. After the dot,  are the tool name and toolbox alias separated by an underscore. All ArcGIS tools with the exception of tools in  the Spatial Analyst Toolbox can be called with the following syntax:</p>
<table width="600" border="0" bgcolor="#ffcccc">
<tbody>
<tr>
<td width="600" scope="row"><code>arcpy<span class="o">.</span>toolName_toolboxAlias(arguments1, 
              argument2, argument3,...)</code></td>
</tr>
</tbody>
</table>
<p>For example, the RasterToASCII tool is in the Conversion Toolbox. The following example takes two arguments, the input raster name ('C:/gispy/data/ch06/getty_rast') and the output ASCII text file name ('C:/gispy/data/ch06/output.txt'). The first line sets the workspace, so we don't need to specify the full path file names:<br />
<code><br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>env<span class="o">.</span>workspace <span class="o">=</span> <span class="s">'C:/gispy/data/ch06/'</span><br />
          &gt;&gt;&gt; inputRaster <span class="o">=</span> <span class="s">'getty_rast'</span><br />
          &gt;&gt;&gt; outputFile <span class="o">=</span> <span class="s">'output.txt'</span><br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>RasterToASCII_conversion(inputRaster, outputFile)<br />
</code><br />
          The toolbox alias needs to be part of the tool call because some tools have the same name. For example, there is a Buffer tool in both the Analysis and Coverage Toolboxes. Table 6.2  lists a few toolbox aliases examples. Search the ArcGIS Resources site with the phrase 'toolbox alias' to see a complete list.  The following example finds a one quarter mile buffer around the polygons in the shapefile. If the workspace is not set and the full file path for the output is not specified, the output is placed in the same directory as the input. The first line sets <code>overwriteOutput</code> to <code>True</code>, in case 'parkBuffer.shp' already exists in 'C:/gispy/data/ch06'.</p>
<p><code>&gt;&gt;&gt; arcpy<span class="o">.</span>env<span class="o">.</span>overwriteOutput <span class="o">=</span> <span class="bp">True</span><br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>Buffer_analysis(<span class="s">'C:/gispy/data/ch06/park.shp'</span>,<span class="s"> 'parkBuffer.shp'</span>,<span class="s"> '0.25 
          miles'</span>)<br />
</code></p>
<p>The name of the input, include the path where it is stored. We call this the <em>full path file name</em>. If a full path file name is specified in a tool call, the full path file location is used instead of the workspace. In the following example, the tool looks for the input file within the <code>arcpy</code> workspace, but the output is placed in a different directory because the full path file name is used for the output:<br />
<code><br />
            &gt;&gt;&gt; arcpy<span class="o">.</span>env<span class="o">.</span>workspace <span class="o">=</span> <span class="s">'C:/gispy/data/ch06/'</span><br />
&gt;&gt;&gt; arcpy<span class="o">.</span>Buffer_analysis(<span class="s">'park.shp'</span>,<span class="s"> 'C:/gispy/scratch/parkBuffer.shp'</span>,<span class="s"> '0.25 
          miles'</span>)<br />
</code><br />
          The Buffer (Analysis) tool requires three arguments: the input data, the output file name, and a buffer distance. There are several more optional arguments. The next section explains  the ArcGIS Resources site tool help information, such as the required/optional parameters for a tool.        </p>
<table width="475" bgcolor="#eeeeee">
<tr>
<td width="467"><strong>Table 6.2 </strong>Toolbox alias examples<br />
<table border="3">
<tr>
<th width="186" scope="row">Toolbox</th>
<th width="117">Alias</th>
</tr>
<tr>
<td>3D Analyst Tools</td>
<td>3d</td>
</tr>
<tr>
<td>Analysis Tools</td>
<td>analysis</td>
</tr>
<tr>
<td>Cartography Tools</td>
<td>cartography</td>
</tr>
<tr>
<td>Conversion Tools</td>
<td>conversion</td>
</tr>
<tr>
<td>Data Interoperability Tools</td>
<td>interop</td>
</tr>
<tr>
<td>Data Management Tools</td>
<td>management</td>
</tr>
<tr>
<td>Spatial Analyst Tools</td>
<td>sa</td>
</tr>
<tr>
<td>Spatial Statistics Tools</td>
<td>stats</td>
</tr>
</table></td>
</tr>
</table>
<br />
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span><strong><span class="head">6.4.1 Using tool help</span><a name="help" id="help"></a></strong></span></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p> As mentioned in Chapter 5, the ArcGIS Resources site hosts a 'Tool reference' page for each tool. Search on the name of the tool and filter by 'Help' and 'Desktop' to find a tool's page.  Tool reference pages begin with an explanation of how the tool works (usually consisting of Summary, Illustration, and Usage sections). The next sections, the 'Syntax' and 'Code sample' sections are guides for Python scripting.</p>
<p> As an example, search for the Buffer (Analysis) tool. The 'Syntax' section begins with a function signature (a code template). Locate the 'Syntax' section for the Buffer tool. At the very beginning of this section,  tool syntax is represented by a <em>code signature</em>. This is a blueprint for how to call the tool via Python. The code signature for the Buffer (Analysis) tool looks like this: </p>
<blockquote><code>Buffer_analysis (in_features, out_feature_class,   buffer_distance_or_field, {line_side}, {line_end_type},   {dissolve_option}, {dissolve_field})</code></blockquote>
<p>It shows the toolName_toolboxAlias followed by a list of arguments. Python scripts need to list the parameters in the same order shown in the code signature. The table uses the term 'parameter' instead of 'argument'. These terms are closely related and sometimes used interchangeably. Strictly speaking, though, a 'parameter' is specified in the tool's signature; Whereas,  an 'argument' is a specific value passed in for a tool call.   
          Optional parameters are surrounded by curly brackets in the code signature. For example, the last four buffer parameters are optional. </p>
<p>The table below the code signature provides more information about these parameters. Figure 6.3 shows the first few rows of the Buffer (Analysis) tool parameter table. The table has three columns 'Parameter', 'Explanation', and 'Data Type'. </p>
<ul>
<li>The 'Parameter' column contains the parameter name as given in the code signature. If the parameter is optional, the word 'optional' appears behind the name. The Python code often uses a string to pass in the parameter value. In a some cases, Python lists are used to supply values for <em>multivalue inputs</em>, for  parameters which accept more than one value. If this is the case, a list appears behind the variable name Parameter column. For example, the Merge (Data Management) tool takes a list of input datasets. The table entry for this parameter is shown in Figure 6.3.<br />
<img src="../images/listParameters.png" width="122" height="76" /><br />
<strong>Figure 6.3 </strong>The [inputs,...] indicates that you can pass in a list of input files for this parameter.<br />
<br />
</li>
<li>The 'Explanation' column describes   the purpose of the parameter, gives a list of acceptable values (where applicable), and indicates the default behavior for optional parameters. <br />
<br />
</li>
<li>The 'Data Type' column lists the Esri data type the tool needs for each parameter. These data types are specialized structures related to ArcGIS data. The data types in this column  do not refer to Python data types.  For example, the <code>in_features</code> and <code>out_feature_class</code> are Feature Layer and Feature Class data types, respectively. 'Feature Layer' and 'Feature Class' refer to Esri data files such as Shapefiles, but we use a Python string  to specify the names of these files. The 'Linear Unit' is a distance, but we use a Python string  to specify that too. In the following example, Python string literals are used to specify a Feature Layer, a Feature Class, and a Linear Unit:<br />
<br />
<code>&gt;&gt;&gt; arcpy<span class="o">.</span>Buffer_analysis(<span class="s">'C:/gispy/data/ch06/park.shp'</span>,<span class="s"> 'parkBuffer.shp'</span>,<span class="s"> '0.25 
            miles'</span>)</code></li>
</ul>
<p><img src="../images/buffer_table.png" alt="a" width="787" height="208" /><br />
<strong>Figure 6.4 </strong>The code signature and top portion of the parameter  table in the 'Syntax' section of the Buffer (Analysis) tool help page.</p>
<p id="GUID-005927AB-ACD6-4FB1-99F3-CA0BC43CF71F">The 'Code Sample' section following the 'Syntax' section provides sample scripts that can be a good starting point for beginners. Sometimes they can be used with only slight adjustments to accommodate the differences in input data. </p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span><strong><span class="head">6.4.2 Copy code snippet</span></strong></span> <a name="snippet" id="snippet"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Another help option is to run a tool using its dialog box and then copy the Python code it creates as follows:</p>
<ol id="GUID-15C12CF9-3326-43EB-B474-46EEA64367FD" purpose="ol">
<li purpose="li" id="GUID-EB40E153-19F4-48C0-BFCC-4F597B0D8E66">Locate the tool in ArcToolbox.</li>
<li purpose="li" id="GUID-9C0158F2-5F04-4B17-9AC2-FB16D45D52B5">Execute the tool using its dialog box.</li>
<li purpose="li" id="GUID-E884FE1F-8D1D-44C3-8803-B6DBF08AE271">Open the 'Results' window (Geoprocessing menu &gt; Results).</li>
<li>In the Results window,   right-click on the tool name in the results listed there and select 'Copy as Python snippet'. </li>
<li>Paste the snippet into PythonWin and examine the syntax.</li>
</ol>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span><strong><span class="head">6.4.3 Linear units</span></strong></span> <a name="linear" id="snippet2"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>A linear unit is an Esri data type for Euclidean distances. When we use a tool's GUI interface, there's a text box and a combo box for typing a number and selecting a unit of measure. In Python, linear units are specified as a string, with a number and a unit of measure, separated by a space (e.g.,<code>'0.25 miles'</code>).  A list of recognized unit of measures is given in Table 6.3. Singular and plural forms of these units are both accepted. Also, linear unit names are not case sensitive. If a distance unit is not specified, the tool uses the units of the input feature, unless the Output Coordinate System environment property has been set.</p>
<p><img src="../images/tool_GUI.png" alt="Buffer tool graphical user interface" /></p>
<table width="572" bgcolor="#eeeeee">
<tr>
<td width="564"><strong>Table 6.3</strong> Linear Unit of Measure Keywords (not case 
              sensitive)
              <table border="1" width="453">
<tbody>
<tr>
<td width="443">centimeters | decimal degrees | decimeters | feet | inches | kilometers | meters | miles | millimeters | nautical miles | points | unknown | yards</td>
</tr>
</tbody>
</table></td>
</tr>
</table>
<br />
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span><strong><span class="head">6.4.4 Python expressions as inputs</span><a name="expressions" id="expressions"></a></strong></span></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Some tools, such as the Calculate Field and Calculate Value (Data Management) tools take parameters which are themselves Python expressions. The expression can be very simple. For example, the following code sets every entry in the <code>'result'</code> field of the 'data1.shp' shapefile to 5:<br />
<code><br />
          &gt;&gt;&gt; data <span class="o">=</span><span class="s"> 'C:/gispy/data/ch06/data1.shp'</span><br />
          &gt;&gt;&gt; fieldName <span class="o">=</span> <span class="s">'result'</span><br />
          &gt;&gt;&gt; expression <span class="o">=</span> <span class="mi">5</span><br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>CalculateField_management(data, fieldName, expression, <span class="s">'PYTHON'</span>)<br />
</code></p>
<p>The last parameter in this Calculate Field call indicates the type of the expression (The alternatives are <code>'PYTHON'</code>, <code>'PYTHON_9.3'</code>, or <code>'VB'</code> and <code>'VB'</code> is the default). The Calculate Field expressions can also use the values in other fields and combine them with mathematical operators. In these expressions, field names need to be surrounded by  exclamation points. The following code calculates the <code>'result'</code> field again using an expression which multiplies the value in the <code>'measure'</code> field by two and subtracts the value in the <code>'coverage'</code> field:<br />
<code><br />
          &gt;&gt;&gt; expression <span class="o">=</span> <span class="s">'2*!measure! - !coverage!'</span><br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>CalculateField_management(data, fieldName, expression, <span class="s">'PYTHON'</span>)<br />
</code></p>
<p>Note that the expression must be compatible with the field type. The 'result' field is a 'float' type field, so mathematical values can be used.  Feature class field calculation expressions can also use the 'shape' field (Only feature classes have a 'shape' field). This shape field contains a set of <code>arcpy</code> <code>Geometry</code> objects (listed in Figure 6.2 under 'Other objects'). <code>arcpy</code> <code>Geometry</code> objects have properties such as 'area' and 'length'. These properties  can be used with dot notation on the 'shape' field in the expressions. The following code uses the 'area' geometry property to calculate a field named <code>'PolyArea'</code> for the 'special_regions.shp' polygon shapefile:<br />
<code><br />
          &gt;&gt;&gt; data<span class="o"> =</span> <span class="s">'C:/gispy/data/ch06/special_regions.shp'</span><br />
          &gt;&gt;&gt; fieldName <span class="o">=</span> <span class="s">'PolyArea'</span><br />
          &gt;&gt;&gt; expression <span class="o">=</span> <span class="s">'!shape.area!'</span><br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>CalculateField_management(data, fieldName, expression, <span class="s">'PYTHON'</span>)<br />
</code></p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span><strong><span class="head">6.4.5 Multivalue inputs</span></strong></span> <a name="multivalue" id="multivalue"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p><span>Some tools accept multiple values as input for a single parameter. </span>They are usually tools that combine the input in some manner (e.g., merge or intersect the data). The tool help table shows parameters which accept multiple values with a list behind their name in the 'Parameter' column (see Figure 6.3). A Python list may be the simplest way to input these values, especially if you already have the input in a list. However, there are two other ways to provide input to these tools. They also accept  a semicolon delimited string or as a <code>ValueTable</code> object. In the following code  a Python list is used to specify the three input files to merge:<br />
</p>
<p><code>&gt;&gt;&gt; inputFiles <span class="o">=</span>          [<span class="s">'park.shp'</span>, <span class="s">'special_regions.shp'</span>, <span class="s">'workzones.shp'</span>]<br />
  &gt;&gt;&gt; arcpy<span class="o">.</span>Merge_management(inputFiles, <span class="s">'mergedData.shp'</span>)<br />
</code></p>
<p>In some cases, you may have values in a <em>multivalue string</em>, a string where the values are separated (or delimited) by semicolons. Multivalue parameters can be specified in this way too. Here the three inputs are given in a multivalue string:<br />
<code><br />
          &gt;&gt;&gt; inputFiles <span class="o">=</span> <span class="s">'park.shp;special_regions.shp;workzones.shp'</span><br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>Merge_management(inputFiles, <span class="s">'mergedData2.shp'</span>)<br />
</code><br />
          A ValueTable is an <code>arcpy</code> object for storing rows and columns of information. To use it, you create a <code>ValueTable</code> object using the <code>arcpy</code> <code>ValueTable</code> function. It returns a <code>ValueTable</code> object, which has methods and properties. One of the ValueTable methods is 'addRow'. This example shows how to use the value table to merge three files:<br />
<code><br />
          &gt;&gt;&gt; vt <span class="o">=</span> arcpy<span class="o">.</span>ValueTable( )<br />
          &gt;&gt;&gt; vt<span class="o">.</span>addRow(<span class="s">'park.shp'</span>)<br />
          &gt;&gt;&gt; vt<span class="o">.</span>addRow(<span class="s">'special_regions.shp'</span>)<br />
          &gt;&gt;&gt; vt<span class="o">.</span>addRow(<span class="s">'workzones.shp'</span>)<br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>Merge_management(vt, <span class="s">'mergedData3.shp'</span>)<br />
</code></p>
<p>The merge example is a one-dimensional example.That is, it only has one item in each row. The true advantage of the <code>ValueTable</code> object is for dealing with higher dimensions of data. The <code>ValueTable</code> approach  provides a convenient way to organize data when the input is a list of lists. As an example, the 'in_features' for the Intersect tool is a list of input file names. Alternatively, it can be a list of file names and priority rankings. For example, </p>
<p><code>&gt;&gt;&gt; inputFiles <span class="o">=</span> [ [<span class="s">'park.shp'</span>, 2], [<span class="s">'special_regions.shp'</span>, 2], [<span class="s">'workzones.shp'</span>,1] ]<br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>Intersect_analysis(inputFiles, <span class="s">'intersectData.shp'</span>)<br />
</code></p>
<p>Instead of using a list of lists, you could use a ValueTable for the intersection example as follows:<br />
<code><br />
          &gt;&gt;&gt; vt <span class="o">=</span> arcpy<span class="o">.</span>ValueTable( )<br />
          &gt;&gt;&gt; vt<span class="o">.</span>addRow(<span class="s">'park.shp 2'</span>)<br />
          &gt;&gt;&gt; vt<span class="o">.</span>addRow(<span class="s">'special_regions.shp 2'</span>)<br />
          &gt;&gt;&gt; vt<span class="o">.</span>addRow(<span class="s">'workzones.shp 1'</span>)<br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>Intersect_analysis(vt, <span class="s">'intersectData.shp'</span>)<br />
</code></p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span><strong><span class="head">6.4.6 Optional parameters</span></strong></span> <a name="optional" id="optional"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Tool parameters must be used in the order they are listed in the tool code signature. The required tool parameters always come at the beginning of the list. Optional parameters can be omitted or a number sign (<code>'#'</code>) can be used as a place holder. In either of these cases, the default value is used for that parameter. For example, the Polygon Neighbors tool, which returns a table of statistics about neighboring polygons has two required parameters and six optional parameters, as shown in the code signature: </p>
<p><code>        PolygonNeighbors_analysis (in_features, out_table, {in_fields},   {area_overlap}, {both_sides}, {cluster_tolerance}, {out_linear_units},   {out_area_units})</code></p>
<p>In the following example, Polygon Neighbors is called two different ways, but these lines of code are two equivalent ways of using the default values for the six optional parameters in the Polygon Neighbors (Analysis) tool:<br />
<code><br />
          &gt;&gt;&gt; <span class="n">arcpy</span><span class="o">.</span>env<span class="o">.</span>workspace  <span class="o">=</span> <span class="s">'C:/gispy/data/ch06/'</span><br />
          &gt;&gt;&gt; <span class="n">arcpy</span><span class="o">.</span>env<span class="o">.</span>overwriteOutput <span class="o">=</span> <span class="bp">True</span><br />
          &gt;&gt;&gt; <span class="n">arcpy</span><span class="o">.</span>PolygonNeighbors_analysis(<span class="s">'park.shp'</span>,<span class="s"> 'PN.dbf'</span>) <span class="comment"># Use default values for the last 6 args.</span><br />
          &gt;&gt;&gt; <span class="n">arcpy</span><span class="o">.</span>PolygonNeighbors_analysis(<span class="s">'park.shp'</span>,<span class="s"> 'PN.dbf'</span> ,<span class="comment"> <span class="s">'#'</span></span>, <span class="comment"><span class="str">'#','#', '#'</span>,<span class="str">'#'</span>, <span class="str">'#'</span></span>) <span class="comment"># Use default values for last 6 args.</span><br />
</code></p>
<p>If you want to set some but not all optional parameters,  you must use  number signs as place holders for interior optional arguments. In this example no place holder is needed, because we're using the first optional argument and we can simply omit the last five parameters:<br />
<code><br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>PolygonNeighbors_analysis(<span class="s">'park.shp'</span>,<span class="s"> 'PN.dbf'</span>, <span class="s">'COVER'</span> )<span class="comment"> # Use default values for the last 5 parameters</span>.<br />
</code></p>
<p>But in the following example, the place holder is needed, because we want to set the 'area_overlap' parameter, but use the default value for the 'in_fields' parameter. 'in_fields' precedes 'area_overlap' in the parameters list, so if we failed to use  '#' as a place holder, the tool would assume 'AREA_OVERLAP' was a field name<span class="comment">.</span><br />
<code><br />
          &gt;&gt;&gt; <span class="comment"># Use default value for in_fields, but set the value for area_overlap</span>.<br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>PolygonNeighbors_analysis(<span class="s">'park.shp'</span>,<span class="s"> 'PN.dbf'</span>, <span class="s">'#'</span>, <span class="s">'AREA_OVERLAP'</span>)<br />
</code></p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span><strong><span class="head">6.4.7 Return values (...using the <code>Result</code> object)</span><a name="return" id="return"></a></strong></span></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>          When a geoprocessing tool is run, the tool returns an <code>arcpy</code> <code>Result</code> object. The <code>Result</code> object contains information about the tool run, such as input values for the parameters and whether or not it was successful. It also contains a list of one or more output values. The returned object can be stored in a variable by using an assignment statement:<br />
</p>
<table width="600" border="0" bgcolor="#ffcccc">
<tbody>
<tr>
<td width="600" scope="row"><code>variable = arcpy<span class="o">.</span>toolName_toolboxAlias(arguments1, 
              argument2, argument3,...)</code></td>
</tr>
</tbody>
</table>
<p>In the following example, the <code>Result</code> object returned by the Polygon Neighbors tool is stored in a variable named 'pnResult':<br />
<code><br />
          &gt;&gt;&gt; pnResult <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span>PolygonNeighbors_analysis(<span class="s">'park.shp'</span>,<span class="s"> 'PN.dbf'</span>)<br />
</code></p>
<p>The built-in <code>type</code> function shows that <code>pnResult</code> is an <code>arcpy</code> <code>Result</code> object:<br />
<code><br />
          &gt;&gt;&gt; type(pnResult)<br />
<span class="n">&lt;class 'arcpy.arcobjects.arcobjects.Result'&gt;</span><br />
</code></p>
<p>When printed, the <code>Result</code> object prints the first item in the tool output list. In the case of the Polygon Neighbors tool, the first output is the full path file name for the output:<br />
<code><br />
          &gt;&gt;&gt; <span class="key">print</span> pnResult<br />
<span class="n">C:/gispy/data/ch06\PN.dbf</span><br />
</code></p>
<p><code>Result</code> objects have  a set of methods and properties (See Figure 6.5). Use dot notation with methods and properties to access the information a <code>Result</code> object contains.  The <code>outputCount</code> property and the <code>getOutput</code> method provide access to the output information. The following statement shows that the Polygon Neighbor returned one output:<br />
<code><br />
          &gt;&gt;&gt; pnResult<span class="o">.</span>outputCount<br />
<span class="num">1</span><br />
</code><br />
          To get the output, use the <code>getOutput</code> method with an index. It is zero-based indexing, so to get the first output, use index zero. The following statement gets the first output (and only) output from the <code>pnResult</code> object:<br />
<code><br />
          &gt;&gt;&gt; pnResult<span class="o">.</span>getOutput(<span class="mi">0</span>)<br />
<span class="n">u'C:/gispy/data/ch06\PN.dbf'</span><br />
</code></p>
<p>The output depends on the nature of the tool. The main purpose of some tools, such as Buffer and Polygon Neighbors, is to create an output file. While  the main purpose of other tools, such as Get Count and Average Nearest Neighbors is to compute numeric values. In the first case, there is one output value, the name of the output file. <br />
<br />
<code>&gt;&gt;&gt; res <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span>Buffer_analysis(<span class="s">'park.shp'</span>, <span class="s">'outBuff.shp'</span>, <span class="s">'4 miles'</span>)<br />
           &gt;&gt;&gt; <span class="k">print</span> res<br />
<span class="n">C:/gispy/data/ch06\outBuff.shp</span><br />
</code><br />
          Whereas, in the second case, the tool call returns the calculated results. <br />
<br />
<code>&gt;&gt;&gt; resGC <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span>GetCount_management(<span class="s">'park.shp'</span>)<br />
           &gt;&gt;&gt; <span class="k">print</span> resGC<br />
<span class="num">426</span><br />
</code></p>
<p>Though the print statement is convenient for printing the first result, the <code>getOutput</code> function must be used to retrieve further results or to use numeric results in calculations. The following code throws an exception because a <code>Result</code> object cannot be added to a number:</p>
<p><code>&gt;&gt;&gt; resGC <span class="o">+</span><span class="mi"> 25</span><br />
<span class="err">Traceback (most recent call last):<br />
          File &quot;&lt;interactive input&gt;&quot;, line 1, in &lt;module&gt;<br />
          TypeError: unsupported operand type(s) for +: 'Result' and 'int'</span><br />
</code></p>
<p>          Instead, the value must be retrieved from the <code>Result</code> object using the <code>getOutput</code> method:<br />
<br />
<code>&gt;&gt;&gt; count <span class="o">=</span> resGC<span><span class="o">.</span></span>getOutput(<span class="mi">0</span>)<br />
&gt;&gt;&gt; count<br />
<span class="num">u'426'<br />
</span></code></p>
<p>But  <code>getOutput</code> returns a string, so this can't be used directly:<br />
<code><br />
  &gt;&gt;&gt; count <span class="o">+ </span><span class="mi">25</span><br />
<span class="err">Traceback (most recent call last):<br />
          File &quot;&lt;interactive input&gt;&quot;, line 1, in &lt;module&gt;<br />
        TypeError: coercing to Unicode: need string or buffer, int found<br />
</span></code><br />
          Instead it needs to be cast to an integer:<br />
<code><br />
&gt;&gt;&gt; int(count) <span class="o">+</span><span class="mi"> 25</span><br />
<span class="num">451</span><br />
</code><br />
          The <code>getOutput</code> method also needs to be used when a tool returns more than one result. For example,  the Average Nearest Neighbor (Spatial Statistics)
          <leo_highlight style="background-color: transparent; background-image: none; 
background-repeat: repeat; background-attachment: scroll; 
background-position: 0% 0%; -moz-background-size: auto auto; cursor: 
pointer; display: inline; -moz-background-clip: -moz-initial; 
-moz-background-origin: -moz-initial; -moz-background-inline-policy: 
-moz-initial;" id="leoHighlights_Underline_3" onclick="leoHighlightsHandleClick('leoHighlights_Underline_28')" onmouseover="leoHighlightsHandleMouseOver('leoHighlights_Underline_28')" onmouseout="leoHighlightsHandleMouseOut('leoHighlights_Underline_28')" leohighlights_keywords="tool" leohighlights_url_top="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsTop.jsp?keywords%3Dtool%26domain%3D" leohighlights_url_bottom="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsBottom.jsp?keywords%3Dtool%26domain%3D" leohighlights_underline="false">tool</leo_highlight>
          computes a nearest neighbor ratio and a z-score 
          which tell us 
          something about the clustering of our points. Suppose we have points representing acts of kindness, we 
          might be interested in whether the points exhibit 
          clustering or if they 
        resemble a random distribution. Example 6.1 calls the Average Nearest Neighbor tool and prints the results using the <code>Result</code> object <code>getOutput</code> method. According to the results, the points exhibit clustering.</p>
<table border="0" height="41" width="600">
<tbody>
<tr>
<td width="773" bgcolor="#ffffcc" scope="row"><strong>Example 6.1</strong><br />
<code>
<div class="highlight">
<pre><span class="c"># avgNearNeighbor.py </span>
<span class="c">#Purpose: Analyze crime data to determine if spatial patterns are statistically significant </span>
<span class="kn">import</span> <span class="nn">arcpy</span><br />

<br /><span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/data/ch06&#39;</span>
<br />
<span class="n">annResult</span> <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span><span class="n">AverageNearestNeighbor_stats</span><span class="p">(</span><span class="s">&#39;points.shp&#39;</span><span class="p">,</span> <span class="s">&#39;Euclidean Distance&#39;</span><span class="p">)</span>
<br />

<span class="k">print</span> <span class="s">&#39;Average Nearest Neighbor Output&#39;</span>
<span class="k">print</span> <span class="s">&#39;Nearest neighbor ratio: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">)</span> 
<span class="k">print</span> <span class="s">&#39;z-score: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">)</span>
<span class="k">print</span> <span class="s">&#39;p-value: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">)</span> 
<span class="k">print</span> <span class="s">&#39;Expected Mean Distance: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">)</span>
<span class="k">print</span> <span class="s">&#39;Observed Mean Distance: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="p">)</span>

<span class="o"></span><span class="mf"></span></pre>
</div></code>
<p> Printed output:                </p>
<p>&gt;&gt;&gt; <code><span class="n">Average Nearest Neighbor Output<br />
                  Nearest neighbor ratio: 0.853047<br />
                  z-score: -5.802495<br />
                  p-value: 0<br />
                  Expected Mean Distance: 753.825013<br />
              Observed Mean Distance: 643.048013</span></code></p></td>
</tr>
</tbody>
</table>
<p><img src="../images/resultObject.png" alt="resultObject" /><br />
<strong>Figure 6.5</strong>: <code>Result</code> object methods and properties.<br />
</p>
<hr /> <table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">6.4.8 Calling  Spatial Analyst tools</span><a name="sa" id="sa"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p><br />
          The syntax for calling Spatial Analyst tools is slightly different from other tools.  Double dot notation must be used instead of an underscore to specify the toolbox.<br />
</p>
<table width="600" border="0" bgcolor="#ffcccc">
<tbody>
<tr>
<td width="791" scope="row"><code>arcpy<span class="o">.</span>toolboxAlias<span class="o">.</span>toolName(arguments1, 
              argument2, argument3,...)</code></td>
</tr>
</tbody>
</table>
<p>There's another difference in the way Spatial Analyst  tools work. Instead of returning a <code>Result</code> object,  Spatial Analyst tools return <code>arcpy</code> <code>Raster</code> objects. This <code>Raster</code> object temporarily holds the output raster in memory. Unless explicitly saved, it will be deleted when the IDE session is closed. To store the raster permanently, we have to save the raster in a separate step. The following code assigns the environment settings, checks out the Spatial Analyst extension and then calls the Square Root tool on a raster named <code>'getty_rast'</code>. The <code>Raster</code> object being returned is assigned to a variable named <code>outputRast</code>.<br />
<code><br />
          &gt;&gt;&gt; <span class="key">import</span> arcpy<br />
          &gt;&gt;&gt; <span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span>workspace<span class="o"> =</span> <span class="s">'C:/gispy/data/ch06/'</span><br />
          &gt;&gt;&gt;<span class="n"> arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span><br />
          &gt;&gt;&gt; inRast <span class="o">=</span> <span class="s">'getty_rast'</span><br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>CheckOutExtension(<span class="s">'Spatial'</span>)<br />
</code><code><span class="n">u'CheckedOut'</span></code><br />
          &gt;&gt;&gt; outputRast <span class="o">=</span> arcpy<span class="o">.</span>sa<span class="o">.</span>SquareRoot(inRast)<br />
<br />
          The next step is to save the output raster. The  <code>Raster</code> objects have a <code>save</code> method which takes on optional parameter, a name.  When the Square Root tool was run, it automatically generated a name. If no parameter is used, the raster is saved by that name. The following line of code saves the output raster with the default name:</p>
<p><code>&gt;&gt;&gt; outputRast<span class="o">.</span>save( )<br />
          &gt;&gt;&gt; outputRast<span class="n"><br />
          C:\gispy\data\ch06\squar_ras</span><br />
</code></p>
<p>In this case, the automatically generated name is <code>'squar_ras'</code>. The following line of code saves the raster and names it <code>'gettySqRoot'</code>:<br />
<code><br />
          &gt;&gt;&gt; outputRast<span class="o">.</span>save(<span class="s">'gettySqRoot'</span>)<br />
</code></p>
<p>Raster names have some constraints. When you don't specify an extension, the Esri GRID raster format is used. The names of GRID rasters must be no longer than 13 characters, though the error says something more generic than that, as shown here:<br />
<code><br />
          &gt;&gt;&gt; outputRast<span class="o">.</span>save(<span class="s">'gettySquareRoot'</span>)<br />
<span class="err">Traceback (most recent call last):<br />
          File &quot;&lt;interactive input&gt;&quot;, line 1, in &lt;module&gt;<br />
          RuntimeError: ERROR 010240: Could not save raster dataset to C:\gispy\data\ch06\gettySquareRoot with output format GRID.</span><br />
          &gt;&gt;&gt; len(<span class="s">'gettySquareRoot'</span>)<br />
<span class="num">15</span><br />
</code></p>
<p>
Other toolboxes automatically save the output to a long-term storage location such as a shapefile on the computer hard disk drive when the tool is called. The Spatial Analyst tools keep the raster data in-memory (a sort of short term memory storage which is fast to access). The raster <code>save</code> method commits the raster to long-term memory.  This extra step of saving the raster is designed for optimization. Raster calculations might involve a chain of sequential calls that create intermediate rasters. If only the final output is needed (and not the intermediate rasters), the script can opt to only save the last one. This can save significantly on processing time for large rasters.<br />
</p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span>
<span class="head">6.4.9 Importing spatial analyst</span>
<a name="importsa" id="importsa"></a></span></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>
            The ArcGIS Resources Spatial Analyst tool reference pages sometimes use a variation of the import statement in the code samples as in the following code:<br />
<br />
<code>&gt;&gt;&gt; <span class="key">from</span> arcpy<span class="o">.</span>sa <span class="key">import</span> *<br />
</code><br />
          This statement creates a direct reference to the Spatial Analyst tool; It provides a shortcut so Spatial Analyst tools can be called without preprending <code>arcpy<span class="o">.</span>sa</code>. For example, it allows you to  replace this statement:<br />
<code><br />
            &gt;&gt;&gt; outputRast <span class="o">=</span> arcpy<span class="o">.</span>sa<span class="o">.</span>SquareRoot(inRast)<br />
</code><br />
            with this statement:<br />
<br />
<code>&gt;&gt;&gt; outputRast <span class="o">=</span> SquareRoot(inRast)<br />
</code><br />

            This type of import saves some typing, but it can lead to confusion. For example, the Spatial Analyst has an <code>Int</code> tool which converts each cell raster value to  an integer; At the same time, Python has a built-in integer function named <code>int</code>. Using the special import shortcut could lead to mystifying code such as the following:<br />
<code><br />
            &gt;&gt;&gt; outputRast <span class="o">=</span> Int(inRast)<br />
            &gt;&gt;&gt; outputNum <span class="o">=</span> int(myNum)<br />
</code><br />

            These statements look almost identical, but one takes a raster and returns a <code>Raster</code> object; The other takes a number and returns a number. Using the standard import and full tool call (e.g., <code>arcpy<span class="o">.</span>sa<span class="o">.</span>Int</code>) avoids ambiguities.        </p>
<hr /> <table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">6.4.10 Raster Calculator</span>

<a name="rastCalc" id="importsa2"></a> </th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<br />
            Python can call 
          any tool in ArcToolbox with the exception of the Spatial Analyst Raster Calculator tool. The Raster Calculator performs what is know as 'map algebra' --is performs mathematical operations on each cell of a raster grid. For example, multiplying a raster by two using the Raster Calculator doubles the value stored in each cell. The Raster Calculator tool is not designed to be called from a stand-alone script. Instead, the script can call tools from the Spatial Analyst Math Toolset. For example, multiplying the cells in 'getty_rast' by 5 and subtracting 2 from each cell, in Raster Calculator would look like this: 5 * 'getty_rast' - 2. The values in 'getty_rast' are 1 and 2, so the resulting values are 3 and 8. To do this in a Python script, you could use two tool calls. Output from the first statement would provide input for the second as shown in Example 6.2. Since the initial values are 1 and 2, outRast1 has the values 5 and 10. These values are used in the Minus tool call, so the  values in outRast2 are 3 and 8. The second to last line of code saves this raster. The last two lines of code delete the <code>Raster</code> objects using the <code>del</code> keyword. This avoids locking issues.<br />

<table border="0" height="267" width="600">
<tbody>
<tr>
<td width="773" height="263" bgcolor="#ffffcc" scope="row"><strong>Example 6.2</strong><br />
<code>
<div class="highlight">
<pre><span class="c"># computeRastEquation.py </span>
<span class="c"># Purpose: Calculate 5 * &#39;getty_rast&#39; - 2</span>

<span class="kn">import</span> <span class="nn">arcpy</span>

<span class="n"><br />arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/data/ch06/rastSmall.gdb&#39;</span><br />arcpy<span class="o">.</span>CheckOutExtension(<span class="s">'Spatial'</span>)<br /><span class="n"><br />outRast1</span> <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span><span class="n">sa</span><span class="o">.</span><span class="n">Times</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="s">&#39;dataRast&#39;</span><span class="p">)</span>
<span class="n">outRast2</span> <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span><span class="n">sa</span><span class="o">.</span><span class="n">Minus</span><span class="p">(</span><span class="n">outRast1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">outRast2</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="s">&#39;equationRast&#39;</span> <span class="p">)</span><br /><span class="kn">del</span> outRast1<br /><span class="kn">del</span> outRast2

</pre>
</div> </code> </td>
</tr>
</tbody>
</table>
<p>Another way to handle raster calculations is to create  <code>arcpy</code> <code>Raster</code> objects using the <code>arcpy</code> <code>Raster</code> method and then construct mathematical expressions using  mathematical operators in combination with the <code>Raster</code> objects. The following code is equivalent to the code used in Example 6.2, producing values in <code>equationRast2</code> identical to those in <code>equationRast</code>: </p>
<code><div class="highlight">
<pre>
<span class="n">&gt;&gt;&gt; rastObj</span> <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span><span class="n">Raster</span><span class="p">(</span><span class="s">&#39;dataRast&#39;</span><span class="p">)</span>
<span class="n">&gt;&gt;&gt; outRast</span> <span class="o">=</span> <span class="mi">5</span><span class="o">*</span><span class="n">rastObj</span> <span class="o">-</span> <span class="mi">2</span>
<span class="n">&gt;&gt;&gt; outRast</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="s">&#39;equationRast2&#39;</span> <span class="p">)</span><br />&gt;&gt;&gt; <span class="kn">del</span> outRast</pre>
</div></code>
<p>One advantage of this approach is that pairwise mathematical operators (<code>*</code>, <code>/</code>, <code>+</code>, <code>-</code>, etc.) can be used more than once, so that more than one pair of items can be multiplied in one statement, whereas, the Times (Spatial Analyst) tool can only handle pairs. The following code uses multiple <code>Raster</code> objects and numbers and mathematical operators in a single expression and saves the results in the <code>'output'</code> raster:</p>
<div class="highlight">
<pre><code>
<span class="n">&gt;&gt;&gt; r1</span> <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span><span class="n">Raster</span><span class="p">(</span><span class="s">&#39;out1&#39;</span><span class="p">)</span>
<span class="n">&gt;&gt;&gt; r2</span> <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span><span class="n">Raster</span><span class="p">(</span><span class="s">&#39;out2&#39;</span> <span class="p">)</span>
<span class="n">&gt;&gt;&gt; r3</span> <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span><span class="n">Raster</span><span class="p">(</span><span class="s">&#39;out3&#39;</span> <span class="p">)</span>
<span class="n">&gt;&gt;&gt; outRast</span> <span class="o">=</span> <span class="p">(</span><span class="mi">5</span><span class="o">*</span><span class="n">r1</span><span class="o">*</span><span class="n">r2</span><span class="o">*</span><span class="n">r3</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span>
<span class="n">&gt;&gt;&gt; outRast</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="s">&#39;output&#39;</span> <span class="p">)<br /></span>&gt;&gt;&gt; <span class="kn">del</span> outRast<br /></code></pre>
</div>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span><strong><span class="head">6.4.11 Temporary feature layers</span><a name="tempLayers" id="custom2"></a></strong></span></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Unlike the Spatial Analyst raster computations, most   ArcGIS tools that compute vector data output create a long term file (such as a shapefile or geodatabase feature class) without calling a <code>save</code> function. Some exceptions can be found in the Data Management toolbox.  Some of these tools create <em>temporary feature layer</em>s output, a collection of features in temporary memory that will not persist after the IDE session ends.  For example, the Make XY Event Layer (Data Management)  tool creates a temporary feature layer. This tool takes a text file containing header fields and rows of attribute values and creates a new point feature layer based on the x and y coordinate fields in the file. The following code makes a temporary layer file (<code>'tmpLayer'</code>) from the  'xyData.txt' file which contains 'x', 'y', and 'butterfly' fields. <br />
</p>
<p><code>&gt;&gt;&gt; <span class="n">arcpy</span><span class="o">.</span><span class="n">MakeXYEventLayer_management</span><span class="p">(</span><span class="s">&#39;C:/gispy/data/ch06/xyData.txt&#39;</span><span class="p">,</span><span class="s">&#39;x&#39;</span><span class="p">,</span><span class="s">&#39;y&#39;</span><span class="p">,</span><span class="s">&#39;tmpLayer&#39;</span><span class="p">)</span><br />
</code></p>
<p> You can perform additional tool calls on the temporary layer within the same script (or within the same Interactive Window session). The following code gets the record count:</p>
<p><code>&gt;&gt;&gt;<span class="n"> countRes</span> <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span><span class="n">GetCount_management</span><span class="p">(</span><span class="s">&#39;tmpLayer&#39;</span><span class="p">)</span><br />
  &gt;&gt;&gt;<span class="n"> countRes</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><br />
<span class="n">u'8'</span><br />
</code></p>
<p>No file named  <code>'tempLayer'</code> ever appears in the 'C:/gispy/data/ch06' directory. To save this file in long-term memory, you'll need to call another <code>arcpy</code> tool. There are a number of Data Management tools that can be used for this. The following code uses the 'CopyFeatures' tool to save the layer to a shapefile:<br />
</p>
<p><code>&gt;&gt;&gt; <span class="n">arcpy</span><span class="o">.</span><span class="n">CopyFeatures_management</span><span class="p">(</span><span class="s">&#39;tmpLayer&#39;</span><span class="p">,</span> <span class="s">&#39;butterflies.shp&#39;</span><span class="p">)</span><br />
<span class="n">&lt;Result 'C:/gispy/data/ch06\\butterflies.shp'&gt;</span><br />
</code></p>
<p>The output from the Make XY Event Layer (Data Management)  tool is used as input for the 'Copy Features' tool and a 'butterflies.shp' file is saved in the 'C:/gispy/data/ch06' directory. When the current  IDE session ends (for example, when PythonWin is closed), this file will persist, but <code>'tmpLayer'</code> will be destroyed.</p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">6.4.12 Using variables for multiple tool calls</span><a name="multipleTool" id="multipleTool"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Calling more than one tool in a script often involves using the output from one tool as the input for the next tool. In this case, it becomes useful to  employ variables to store tool arguments so that string literals are not repeated. The temporary feature layer example in the previous section repeats the string literal <code>'tmpLayer'</code> three times. Using a variable name would make it easier to change this name if needed (since it would only need to be changed in one place). Additionally, output file names can easily be created based on input file names. For example, the following code slices the file extension and appends 'Buffer.shp' to the name:<br />
</p>
<p><code>
          &gt;&gt;&gt; fireDamage <span class="o">=</span> <span class="s">&#39;special_regions.shp&#39;<br />
</span><span class="n">&gt;&gt;&gt; fireBuffer</span> <span class="o">=</span> <span class="n">fireDamage</span><span class="p">[:</span><span class="o">-</span><span class="mi">4</span><span class="p">]</span> <span class="o">+</span> <span class="s">&#39;Buffer.shp&#39;</span> <br />
<span class="n">&gt;&gt;&gt; fireBuffer</span> <br />
<span class="n">'special_regionsBuffer.shp'</span><br />
</code></p>
        In Example 6.3, 'special_regions.shp' represents regions damaged by a 
          fire. To find the portion of the park 
          (in 'park.shp') which lies 
          within 1 mile of the fire damage, 
          we buffer the fire 
          damaged regions and then clip the park polygons on the
        buffer zone. The output from the Buffer tool is input for the Clip tool.
<table border="0" height="812" width="600">
<tbody>
<tr>
<td width="447" height="808" bgcolor="#ffffcc" scope="row"><strong>Example 6.3</strong> <br />
<code>
<div class="highlight">
<pre><span class="c"># buffer_clip.py (hard-coded version)</span>
<span class="c"># Purpose: Buffer a zone and use it to clip another file</span>
<span class="c"># Input: No arguments needed.</span>

<span class="kn">import</span> <span class="nn">arcpy</span><span class="o"></span><span class="nn"></span>

<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/data/ch06&#39;</span>
<span class="n">outDir</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/scratch/&#39;</span>

<span class="c"># Set buffer params</span>
<span class="n">fireDamage</span> <span class="o">=</span> <span class="s">&#39;special_regions.shp&#39;</span>
<span class="n">fireBuffer</span> <span class="o">=</span>  <span class="n">outDir</span> <span class="o">+</span> <span class="n">fireDamage</span><span class="p">[:</span><span class="o">-</span><span class="mi">4</span><span class="p">]</span> <span class="o">+</span> <span class="s">&#39;Buffer.shp&#39;</span>
<span class="n">bufferDist</span> <span class="o">=</span> <span class="s">&#39;1 mile&#39;</span>

<span class="c"># Set clip params</span>
<span class="n">park</span> <span class="o">=</span> <span class="s">&#39;park.shp&#39;</span>
<span class="n">clipOutput</span> <span class="o">=</span> <span class="n">outDir</span> <span class="o">+</span> <span class="n">park</span><span class="p">[:</span><span class="o">-</span><span class="mi">4</span><span class="p">]</span> <span class="o">+</span> <span class="s">&#39;DamageBuffer.shp&#39;</span>

<span class="n">arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="n">fireDamage</span><span class="p">,</span> <span class="n">fireBuffer</span><span class="p">,</span><span class="n">bufferDist</span><span class="p">)</span>
<span class="k">print</span> <span class="s">&#39;{0} created.&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">fireBuffer</span><span class="p">)</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">Clip_analysis</span><span class="p">(</span><span class="n">park</span><span class="p">,</span> <span class="n">fireBuffer</span><span class="p">,</span> <span class="n">clipOutput</span> <span class="p">)</span>
<span class="k">print</span> <span class="s">&#39;{0} created.&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">clipOutput</span><span class="p">)</span>
  </pre></div></code>
<p><img src="../images/buffer_clip_input.jpg" alt="initialview" /></p>
<p>Figure 6.6a: Initial view of data in Example 6.3<br />
                  black: park = 'park.shp'<br />
                  gray: fireDamage = 'special_regions.shp'</p>
<p><img src="../images/buffer_clip_intermediate.jpg" alt="2" /><br />
                  Figure 6.6b: Intermediate view of data in Example 6.3<br />
                  black: park = 'park.shp' <br />
                  green: fireBuffer = 'special_regionsBuffer.shp'</p>
<p><img src="../images/buffer_clip_output.jpg" alt="3" /><br />
                  Figure 6.6c: Final view of data in Example 6.3<br />
                  black: park = 'park.shp' <br />
                  gray: fireDamage = 'special_regions.shp'<br />
                  light gray: clipOutput = 'parkDamageBuffer.shp'<br />
                  Park within 1 mi. of fire <br />
</p></td>
</tr>
</tbody>
</table>
<span><br />
</span>
<p>Example 6.4 finds the lengths of the fire damage boundaries in two steps. First a field is added to store this information. Second, shape lengths are calculated in the new field. Both of these tools use the same input dataset and  field name, and these variable values are set  before the tool calls. The other two Calculate Field parameters are set as string literals and  only used once in this example. The length is calculated using the <code>'!shape.length!'</code> expression and <code>'PYTHON'</code> indicates that it is a Python type expression. </p>
<table border="0" height="41" width="600">
<tbody>
<tr>
<td width="773" bgcolor="#ffffcc" scope="row"><p><strong>Example 6.4</strong><br />
</p><code>
<div class="highlight">
<pre><span class="c"># addLengthField.py</span>
<span class="c"># Purpose: Add a field containing polygon lengths to the shapefile.</span>
<span class="c"># Usage: No arguments needed.</span>
<span class="kn">import</span> <span class="nn">arcpy</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/data/ch06&#39;</span>

<span class="n">inputFile</span> <span class="o">=</span> <span class="s">&#39;special_regions.shp&#39;</span>
<span class="n">fieldName</span> <span class="o">=</span> <span class="s">&#39;Length&#39;</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">AddField_management</span><span class="p">(</span> <span class="n">inputFile</span><span class="p">,</span> <span class="n">fieldName</span><span class="p">,</span> <span class="s">&#39;FLOAT&#39;</span> <span class="p">)</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">CalculateField_management</span><span class="p">(</span> <span class="n">inputFile</span><span class="p">,</span> <span class="n">fieldName</span><span class="p">,</span> <span class="s">&#39;!shape.length!&#39;</span><span class="p">,</span> <span class="s">&#39;PYTHON&#39;</span> <span class="p">)</span>
</pre>
</div> </code></td>
</tr>
</tbody>
</table>
<br /><hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><span><strong><span class="head">6.4.13 Calling custom tools</span><a name="custom" id="custom"></a></strong></span></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Many useful tools can be found by searching online. You may find models or Script Tools that you want to call from within your code. To use custom tools (those that
          are not built-in to ArcToolbox) use the <code>arcpy</code> <code>ImportToolbox</code> function and then call the 
        tool using the tool name and the toolbox alias. Tool names can differ from the labels displayed in ArcCatalog. Labels are allowed to contain spaces. To determine the tool name, right-click on the tool and view the 'Name' property on the 'General' tab. To determine the toolbox alias, right-click on the toolbox and view the 'Alias' property on the general tab. If it doesn't already have one, you need to set the alias here. </p>
<p>This example pertains to 'customTools.tbx' which has a Script Tool named 'Inventory'. The toolbox alias is 'custom'. The Script Tool points to a script named 'inventory.py'. The header comments in this script say the following:<br />
<code><br />
<span class="comment"># Usage: workspace, level_of_detail (SUMMARY_ONLY or DETAILED_INVENTORY)<br />
          # Example: C:/gispy/data/ch06/ SUMMARY_ONLY summaryFile.txt</span></code><br />
</p>
<p>We call the tool requesting a summary of the 'C:/gispy/data/ch06/' directory.</p>
<table border="0" height="41" width="600">
<tbody>
<tr>
<td width="773" bgcolor="#ffffcc" scope="row"><p><strong>Example 6.5</strong><br />
</p>
<code>
<div class="highlight">
<pre><span class="c"># callInventory.py</span>
<span class="c"># Purpose: Call the inventory tool.</span>
<span class="kn">import</span> <span class="nn">arcpy</span>

<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/sample_scripts/ch06&#39;</span>
<span class="n">inputDir</span> <span class="o">=</span> <span class="s">&quot;C:/gispy/data/ch06/&quot;</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">ImportToolbox</span><span class="p">(</span><span class="s">&#39;customTools.tbx&#39;</span><span class="p">)</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">Inventory_custom</span><span class="p">(</span><span class="n">inputDir</span><span class="p">,</span> <span class="s">&#39;SUMMARY_ONLY&#39;</span><span class="p">,</span> <span class="s">&#39;summaryFile.txt&#39;</span><span class="p">)</span></pre>
</div>
</code></td>
</tr>
</tbody>
</table>
<p>The output text file from this tool, 'summaryFile.txt', looks something  like this:</p>
<p>Summary of C:\gispy\data\ch06<br />
          -------------------------------------<br />
          27 Files<br />
          10 ShapeFiles<br />
          1 Workspaces<br />
          1 Folders<br />
          2 TextFiles<br />
          1 RasterDatasets<br />
</p>
<hr />
<table border="0" width="775">
<tbody>
<tr>
<th align="left" scope="row"><span class="head">6.5 A word about old scripts</span> <a name="arcgisscripting" id="introduction3"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<p>Python programming for ArcGIS has changed a great deal since it was first introduced. ArcGIS Python is backwards compatible. In other words, Python code written for previous versions of ArcGIS will still run in the newer versions. For example, an ArcGIS 9.2 Python script will in ArcGIS10.1.  The <code>arcpy</code> package is how ArcGIS 10.x gives Python access to geoprocessing. In 9.x  versions, the <code>arcgisscripting</code> package was used. <code>arcpy</code> encompasses and enhances arcgisscripting. Table 6.4 shows prior version equivalents to <code>import arcpy</code>. </p>
<table width="483" bgcolor="#eeeeee">
<tr>
<td width="475" height="201"><p><strong>Table 6.4: Geoprocessing in Python. </strong><a name="create" id="create"></a></p>
<table width="405" border="1">
<tr>
<td width="68"><strong>ArcGIS Version</strong></td>
<td width="321"><strong>Python code statements</strong></td>
</tr>
<tr>
<td><div align="center">9.1</div></td>
<td><code><span class="key">from</span> win32com.client <span class="key">import</span> Dispatch <br />
                    gp <span class="o">=</span> Dispatch(<span class="s">'esriGeoprocessing.GPDispatch.1'</span>)</code> </td>
</tr>
<tr>
<td><div align="center">9.2</div></td>
<td><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create( ) </code></td>
</tr>
<tr>
<td><div align="center">9.3</div></td>
<td><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create(<span class="mi">9.3</span>) </code></td>
</tr>
<tr>
<td><div align="center">10.x</div></td>
<td><code><span class="key">import</span> arcpy</code></td>
</tr>
</table></td>
</tr>
</table>
<span><br />
</span>
<hr /><table border="0" width="775">
<tbody>
<tr>
<th align="left" scope="row"><span class="head">6.6 Discussion </span><a name="discussion" id="discussion"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<p>Calling tools in ArcGIS follows a basic pattern with some variations. The parameters required by the tools vary based on the kinds of input the tool needs. To use Python for ArcGIS, you'll need to become familiar with the basic pattern and use the tool help for more detailed information. Context menus  help with spelling and parameter requirements. The ArcGIS Resources tool help  parameter tables and script examples provide more detailed information. This chapter  presented the basic pattern for calling tools and highlighted the most common parameter usage questions. Spatial Analyst toolbox objects such as the <code>arcpy.sa.RemapValue</code> and <code>arcpy.sa.WOTable</code> are somewhat complex and highly specialized. For tools that require these arguments, run the tool via ArcToolbox and 'Copy the code snippet' to get an example with sample input data. For the vast majority of tool calls though, you won't need to copy code snippets, because the syntax will become routine after a little practice.</p>
<p>The <code>ValueTable</code>, <code>Result</code>, and <code>Raster</code> objects introduced in this chapter are just three of the many <code>arcpy</code> objects. The <code>arcpy</code> cheatsheet detail diagrams in this book, like the one in Figure 6.5, provide selected method and property names for several <code>arcpy</code> objects. The  ArcGIS Resource site explain every property and method  for  each <code>arcpy</code> object. <br />
<br />
        When searching, for an <code>arcpy</code> object, use the word <code>arcpy</code> along with the name of the object to improve the search results. For example, instead of searching for 'result', search for 'result arcpy', to bring the <code>Result</code> object help page to the top of the search. </p>
<table width="779" border="3" bgcolor="#CEDAE3">
<tr>
<td width="765" height="86"><blockquote>
<p>When you search for <code>arcpy</code> objects on the ArcGIS Resources site,  add the word <code>arcpy</code> to the search to bring the <code>arcpy</code>-related results to the top of the search.<br />
</p>
</blockquote></td>
</tr>
</table>
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">6.7 Key terms</span><a name="keyterms" id="keyterms2"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Modelbuilder models<br />
<span class="key">import</span> keyword<br />
<code>arcpy</code> package<br />
          Python package<br />
          Python module<br />
          Environment settings<br />
          full path file name<br />
          Multivalue input<br />
          Multivalue string<br />
        Temporary feature layers</p>
<hr />
<table border="0" width="775">
<tbody>
<tr>
<th align="left" scope="row"><span class="head">6.8 Exercises</span> <a name="exercises" id="exercises"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<p>Write a Python script to solve each 
          problem and test the script on sample data in 'C:/gispy/data/ch06/'. Hard-code the workspace to this directory. Hard-coding means specifying it with a string literal (<code><span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/data/ch06&#39;</span></code>). To achieve a deeper understanding of the code syntax, write the scripts without using ModelBuilder. Name the script as specified in bold print at the beginning of each question. <br />
</p>
<ol>
<li><strong>erase.py</strong> 'special_regions.shp' represents areas where a fire damaged a park, 'park.shp'.
            
            Use the Erase
            (Analysis)
            <leo_highlight style="background-color: 
transparent; background-image: none; background-repeat: repeat; 
background-attachment: scroll; background-position: 0% 0%; 
-moz-background-size: auto auto; cursor: pointer; display: inline; 
-moz-background-clip: -moz-initial; -moz-background-origin: 
-moz-initial; -moz-background-inline-policy: -moz-initial;" id="leoHighlights_Underline_38" onclick="leoHighlightsHandleClick('leoHighlights_Underline_38')" onmouseover="leoHighlightsHandleMouseOver('leoHighlights_Underline_38')" onmouseout="leoHighlightsHandleMouseOut('leoHighlights_Underline_38')" leohighlights_keywords="tool" leohighlights_url_top="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsTop.jsp?keywords%3Dtool%26domain%3D" leohighlights_url_bottom="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsBottom.jsp?keywords%3Dtool%26domain%3D" leohighlights_underline="false">tool</leo_highlight>
            to create a shapefile in 'C:/gispy/scratch' 
            called 'no_damage.shp'  which shows all the park 
            regions that did 
            not sustain damage.<br />
<br />
</li>
<li><strong>freq.py</strong> The land cover types in 'park.shp' include 'woods', 'orchards', and 'other'. Park 
            rangers would 
            like a table including the frequencies of polygons with 
            each cover type.
            Write a script to perform a Frequency (Analysis) on the 
            'COVER' field that 
            will generate this table. Create the output in 'C:/gispy/scratch' and name it 'COVER_freq.dbf'.<br />
<br />
</li>
<li><strong>split.py</strong> 'park.shp' is a 
            large park. Maintenance has outlined work zones for 
            which different 
            teams will be responsible. 'workzones.shp' 
            specifies the zones. 
            The manager would like to give each
            <leo_highlight style="background-color: transparent; background-image: none; 
background-repeat: repeat; background-attachment: scroll; 
background-position: 0% 0%; -moz-background-size: auto auto; cursor: 
pointer; display: inline; -moz-background-clip: -moz-initial; 
-moz-background-origin: -moz-initial; -moz-background-inline-policy: 
-moz-initial;" id="leoHighlights_Underline_35" onclick="leoHighlightsHandleClick('leoHighlights_Underline_35')" onmouseover="leoHighlightsHandleMouseOver('leoHighlights_Underline_35')" onmouseout="leoHighlightsHandleMouseOut('leoHighlights_Underline_35')" leohighlights_keywords="team" leohighlights_url_top="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsTop.jsp?keywords%3Dteam%26domain%3D" leohighlights_url_bottom="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsBottom.jsp?keywords%3Dteam%26domain%3D" leohighlights_underline="false">team</leo_highlight>
            leader a map that 
            only includes
            her own work zone.  Write a script to call the Split (Analysis)
            <leo_highlight style="background-color: transparent; background-image: none; 
background-repeat: repeat; background-attachment: scroll; 
background-position: 0% 0%; -moz-background-size: auto auto; cursor: 
pointer; display: inline; -moz-background-clip: -moz-initial; 
-moz-background-origin: -moz-initial; -moz-background-inline-policy: 
-moz-initial;" id="leoHighlights_Underline_36" onclick="leoHighlightsHandleClick('leoHighlights_Underline_36')" onmouseover="leoHighlightsHandleMouseOver('leoHighlights_Underline_36')" onmouseout="leoHighlightsHandleMouseOut('leoHighlights_Underline_36')" leohighlights_keywords="tool" leohighlights_url_top="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsTop.jsp?keywords%3Dtool%26domain%3D" leohighlights_url_bottom="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsBottom.jsp?keywords%3Dtool%26domain%3D" leohighlights_underline="false">tool</leo_highlight>
            to generate the desired shapefiles. 
            Using the Zone 
            field to split the park. Have the script place the 
            output shapefiles in 'C:/gispy/scratch'.<br />
<br />
</li>
<li><strong>square.py </strong>Compute the square of        the cell values in Gettysburg battlefield Esri GRID 
            raster, 'getty_rast', using the Square (Spatial Analyst) tool. Create the output raster in 'C:/gispy/scratch' and name it  'squareGetty'.<br />
<br />
</li>
<li><strong>getCount.py</strong> Use the Get Count (Data Management)
            <leo_highlight style="background-color: 
transparent; background-image: none; background-repeat: repeat; 
background-attachment: scroll; background-position: 0% 0%; 
-moz-background-size: auto auto; cursor: pointer; display: inline; 
-moz-background-clip: -moz-initial; -moz-background-origin: 
-moz-initial; -moz-background-inline-policy: -moz-initial;" id="leoHighlights_Underline_34" onclick="leoHighlightsHandleClick('leoHighlights_Underline_34')" onmouseover="leoHighlightsHandleMouseOver('leoHighlights_Underline_34')" onmouseout="leoHighlightsHandleMouseOut('leoHighlights_Underline_34')" leohighlights_keywords="tool" leohighlights_url_top="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsTop.jsp?keywords%3Dtool%26domain%3D" leohighlights_url_bottom="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsBottom.jsp?keywords%3Dtool%26domain%3D" leohighlights_underline="false">tool</leo_highlight>
            to determine the 
            number of polygons  in 'park.shp'. 
            Get the count using the  <code>arcpy</code> <code>Result</code> 
            object. Output should look  like this, though you may get a different count if 'park.shp' has been modified:<br />
<code>&gt;&gt;&gt;  <span class="n">There are 425 polygons  in  
            park.shp</span></code><br />
<br />
</li>
<li><strong>distribution.py </strong>Practice performing sequential geoprocessing steps. To see 
            how the land cover polygons are distributed within 'C:/gispy/data/ch06/park.shp', perform two
            <leo_highlight style="background-color: transparent; background-image: none; 
background-repeat: repeat; background-attachment: scroll; 
background-position: 0% 0%; -moz-background-size: auto auto; cursor: 
pointer; display: inline; -moz-background-clip: -moz-initial; 
-moz-background-origin: -moz-initial; -moz-background-inline-policy: 
-moz-initial;" id="leoHighlights_Underline_42" onclick="leoHighlightsHandleClick('leoHighlights_Underline_42')" onmouseover="leoHighlightsHandleMouseOver('leoHighlights_Underline_42')" onmouseout="leoHighlightsHandleMouseOut('leoHighlights_Underline_42')" leohighlights_keywords="tool" leohighlights_url_top="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsTop.jsp?keywords%3Dtool%26domain%3D" leohighlights_url_bottom="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsBottom.jsp?keywords%3Dtool%26domain%3D" leohighlights_underline="false">tool calls in this script. </leo_highlight>
            Use the Feature to Point (Data Management) tool to find the centroid of each polygon. Name this result 'C:/gispy/scratch/centroid.shp'. Then use the Create Thiessen Polygons (Analysis) tool to find the Voronoi regions of these centroids and name the result 'C:/gispy/scratch/voronoi.shp'.<br />
<br />
</li>
<li><strong>hullPoints.py</strong> Practice performing sequential geoprocessing steps. To find four corner point for  'C:/gispy/data/ch06/data1.shp',   perform two
            <leo_highlight style="background-color: transparent; background-image: none; 
background-repeat: repeat; background-attachment: scroll; 
background-position: 0% 0%; -moz-background-size: auto auto; cursor: 
pointer; display: inline; -moz-background-clip: -moz-initial; 
-moz-background-origin: -moz-initial; -moz-background-inline-policy: 
-moz-initial;" id="leoHighlights_Underline_5" onclick="leoHighlightsHandleClick('leoHighlights_Underline_42')" onmouseover="leoHighlightsHandleMouseOver('leoHighlights_Underline_42')" onmouseout="leoHighlightsHandleMouseOut('leoHighlights_Underline_42')" leohighlights_keywords="tool" leohighlights_url_top="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsTop.jsp?keywords%3Dtool%26domain%3D" leohighlights_url_bottom="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsBottom.jsp?keywords%3Dtool%26domain%3D" leohighlights_underline="false">tool calls in this script: </leo_highlight>
          Use the Minimum Bounding Geometry (Data Management) tool to find the hull of the points. Name this result 'C:/gispy/scratch/boundingPoly.shp'. Then call the Feature Vertices to Points (Data Management) tool on this bounding polygon and name this result 'C:/gispy/scratch/outerPoints.shp'.<br />
<br />
</li>
<li><strong>avgRast.py </strong>Write a script that uses <code>Raster</code> objects and Spatial Analyst to calculate an average raster value from three rasters 'out1', 'out2', and 'out3'  in the sample database, in rastSmall.gdb. Save the output raster in rastSmall.gdb as 'C:/gispy/scratch/avgRast'. Use a few simple mathematical operations instead of using the Cell Statistics tool. Be sure to delete the output <code>Raster</code> object using the <code>del</code> keyword.<br />
<br />
</li>
<li><strong>reclassify.py</strong> To explore using the <code>RemapValue</code> object, the  Reclassify (Spatial Analyst)
            <leo_highlight style="background-color: transparent; background-image: none; 
background-repeat: repeat; background-attachment: scroll; 
background-position: 0% 0%; -moz-background-size: auto auto; cursor: 
pointer; display: inline; -moz-background-clip: -moz-initial; 
-moz-background-origin: -moz-initial; -moz-background-inline-policy: 
-moz-initial;" id="leoHighlights_Underline_37" onclick="leoHighlightsHandleClick('leoHighlights_Underline_37')" onmouseover="leoHighlightsHandleMouseOver('leoHighlights_Underline_37')" onmouseout="leoHighlightsHandleMouseOut('leoHighlights_Underline_37')" leohighlights_keywords="tool" leohighlights_url_top="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsTop.jsp?keywords%3Dtool%26domain%3D" leohighlights_url_bottom="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsBottom.jsp?keywords%3Dtool%26domain%3D" leohighlights_underline="false">tool</leo_highlight>
            to 
            reclassify       the Gettysburg battlefield Esri GRID 
            raster 
            (getty_rast) 'VALUE' field so that all raster areas with a value of 1 
            have a new      
            value of 100 and all areas with a value of 2 have a new 
            value of 200. 
          Name the output raster 'C:/gispy/scratch/reclassGetty'. Then copy a code snippet from the results to see the syntax for the <code>RemapValue</code> object, and write a script that calls the Reclassify tool with the same input and output. In the script, be sure to delete the output <code>Raster</code> object using the <code>del</code> keyword.          </li>
</ol><a href="#top">back to top</a> <p><strong>Table 6.1: Highlights of <code>arcpy</code> functionality </strong><a name="create" id="create2"></a></p>
<table width="759" border="1">
<tr>
<td width="74"><strong>ArcGIS Topic</strong></td>
<td width="260"><strong>Functionality</strong></td>
<td width="403"><strong>Code sample</strong></td>
</tr>
<tr>
<td>Tools </td>
<td>Call ArcToolbox tools</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="s">&#39;output.shp&#39;</span><span class="p">,</span> <span class="s">&#39;1 Mile&#39;</span><span class="p">)</span></code></td>
</tr>
<tr>
<td>Other functions</td>
<td>Licensing, data management, and other miscellaneous needs.</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">CheckOutExtension</span><span class="p">(</span><span class="s">&#39;Spatial&#39;</span><span class="p">)</span></code></td>
</tr>
<tr>
<td>Environment<br />
                      variables</td>
<td>Set and get environment variable values</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span> </code></td>
</tr>
<tr>
<td>Describe</td>
<td>Describe data properties</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">Describe</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">)</span> </code></td>
</tr>
<tr>
<td>Listing data</td>
<td>List  items (e.g., rasters, feature classes, workspaces, toolboxes,  environment variables, and indexes)</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">ListFeatureClasses</span><span class="p">(</span> <span class="p">)</span> </code></td>
</tr>
<tr>
<td>Cursor</td>
<td>Read/modify attribute table elements</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">da</span><span class="o">.</span><span class="n">SearchCursor</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="n">fieldNames</span><span class="p">)</span> </code></td>
</tr>
<tr>
<td>Messaging</td>
<td>Get and print geoprocessing messages</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">GetMessages</span><span class="p">(</span> <span class="p">)</span> </code></td>
</tr>
<tr>
<td>Mapping</td>
<td>Manipulate existing map layers, add layers to maps, modifying surrounds, manipulate symbology<br /></td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">mapping</span><span class="o">.</span><span class="n">MoveLayer</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">refLayer</span><span class="p">,</span> <span class="n">moveLayer</span><span class="p">,</span> <span class="s">&#39;BEFORE&#39;</span><span class="p">)</span> </code></td>
</tr>
</table>
<br /><strong>ArcGIS Topic</strong><strong>Functionality</strong><strong>Code sample</strong>Tools Call ArcToolbox tools<code><span class="n">arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="s">&#39;output.shp&#39;</span><span class="p">,</span> <span class="s">&#39;1 Mile&#39;</span><span class="p">)</span></code>Other functionsLicensing, data management, and other miscellaneous needs.<code><span class="n">arcpy</span><span class="o">.</span><span class="n">CheckOutExtension</span><span class="p">(</span><span class="s">&#39;Spatial&#39;</span><span class="p">)</span></code>Environment<br />
                      variablesSet and get environment variable values<code><span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span> </code>DescribeDescribe data properties<code><span class="n">arcpy</span><span class="o">.</span><span class="n">Describe</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">)</span> </code>Listing dataList  items (e.g., rasters, feature classes, workspaces, toolboxes,  environment variables, and indexes)<code><span class="n">arcpy</span><span class="o">.</span><span class="n">ListFeatureClasses</span><span class="p">(</span> <span class="p">)</span> </code>CursorRead/modify attribute table elements<code><span class="n">arcpy</span><span class="o">.</span><span class="n">da</span><span class="o">.</span><span class="n">SearchCursor</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="n">fieldNames</span><span class="p">)</span> </code>MessagingGet and print geoprocessing messages<code><span class="n">arcpy</span><span class="o">.</span><span class="n">GetMessages</span><span class="p">(</span> <span class="p">)</span> </code>MappingManipulate existing map layers, add layers to maps, modifying surrounds, manipulate symbology<br /><code><span class="n">arcpy</span><span class="o">.</span><span class="n">mapping</span><span class="o">.</span><span class="n">MoveLayer</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">refLayer</span><span class="p">,</span> <span class="n">moveLayer</span><span class="p">,</span> <span class="s">&#39;BEFORE&#39;</span><span class="p">)</span> </code><a href="#top">back to top</a> <code>arcpy<span class="o">.</span>functionName(argument1, 
              argument2, argument3,...)</code><a href="#top">back to top</a> <a href="#top">back to top</a> <code>arcpy<span class="o">.</span>toolName_toolboxAlias(arguments1, 
              argument2, argument3,...)</code><strong>Table 6.2 </strong>Toolbox alias examples<br />
<table border="3">
<tr>
<th width="186" scope="row">Toolbox</th>
<th width="117">Alias</th>
</tr>
<tr>
<td>3D Analyst Tools</td>
<td>3d</td>
</tr>
<tr>
<td>Analysis Tools</td>
<td>analysis</td>
</tr>
<tr>
<td>Cartography Tools</td>
<td>cartography</td>
</tr>
<tr>
<td>Conversion Tools</td>
<td>conversion</td>
</tr>
<tr>
<td>Data Interoperability Tools</td>
<td>interop</td>
</tr>
<tr>
<td>Data Management Tools</td>
<td>management</td>
</tr>
<tr>
<td>Spatial Analyst Tools</td>
<td>sa</td>
</tr>
<tr>
<td>Spatial Statistics Tools</td>
<td>stats</td>
</tr>
</table>3D Analyst Tools3dAnalysis ToolsanalysisCartography ToolscartographyConversion ToolsconversionData Interoperability ToolsinteropData Management ToolsmanagementSpatial Analyst ToolssaSpatial Statistics Toolsstats<a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <strong>Table 6.3</strong> Linear Unit of Measure Keywords (not case 
              sensitive)
              <table border="1" width="453">
<tbody>
<tr>
<td width="443">centimeters | decimal degrees | decimeters | feet | inches | kilometers | meters | miles | millimeters | nautical miles | points | unknown | yards</td>
</tr>
</tbody>
</table>centimeters | decimal degrees | decimeters | feet | inches | kilometers | meters | miles | millimeters | nautical miles | points | unknown | yards<a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <code>variable = arcpy<span class="o">.</span>toolName_toolboxAlias(arguments1, 
              argument2, argument3,...)</code><strong>Example 6.1</strong><br />
<code>
<div class="highlight">
<pre><span class="c"># avgNearNeighbor.py </span>
<span class="c">#Purpose: Analyze crime data to determine if spatial patterns are statistically significant </span>
<span class="kn">import</span> <span class="nn">arcpy</span><br />

<br /><span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/data/ch06&#39;</span>
<br />
<span class="n">annResult</span> <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span><span class="n">AverageNearestNeighbor_stats</span><span class="p">(</span><span class="s">&#39;points.shp&#39;</span><span class="p">,</span> <span class="s">&#39;Euclidean Distance&#39;</span><span class="p">)</span>
<br />

<span class="k">print</span> <span class="s">&#39;Average Nearest Neighbor Output&#39;</span>
<span class="k">print</span> <span class="s">&#39;Nearest neighbor ratio: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">)</span> 
<span class="k">print</span> <span class="s">&#39;z-score: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">)</span>
<span class="k">print</span> <span class="s">&#39;p-value: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">)</span> 
<span class="k">print</span> <span class="s">&#39;Expected Mean Distance: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">)</span>
<span class="k">print</span> <span class="s">&#39;Observed Mean Distance: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="p">)</span>

<span class="o"></span><span class="mf"></span></pre>
</div></code>
<p> Printed output:                </p>
<p>&gt;&gt;&gt; <code><span class="n">Average Nearest Neighbor Output<br />
                  Nearest neighbor ratio: 0.853047<br />
                  z-score: -5.802495<br />
                  p-value: 0<br />
                  Expected Mean Distance: 753.825013<br />
              Observed Mean Distance: 643.048013</span></code></p><a href="#top">back to top</a> <code>arcpy<span class="o">.</span>toolboxAlias<span class="o">.</span>toolName(arguments1, 
              argument2, argument3,...)</code><a href="#top">back to top</a> <a href="#top">back to top</a> <strong>Example 6.2</strong><br />
<code>
<div class="highlight">
<pre><span class="c"># computeRastEquation.py </span>
<span class="c"># Purpose: Calculate 5 * &#39;getty_rast&#39; - 2</span>

<span class="kn">import</span> <span class="nn">arcpy</span>

<span class="n"><br />arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/data/ch06/rastSmall.gdb&#39;</span><br />arcpy<span class="o">.</span>CheckOutExtension(<span class="s">'Spatial'</span>)<br /><span class="n"><br />outRast1</span> <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span><span class="n">sa</span><span class="o">.</span><span class="n">Times</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="s">&#39;dataRast&#39;</span><span class="p">)</span>
<span class="n">outRast2</span> <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span><span class="n">sa</span><span class="o">.</span><span class="n">Minus</span><span class="p">(</span><span class="n">outRast1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">outRast2</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="s">&#39;equationRast&#39;</span> <span class="p">)</span><br /><span class="kn">del</span> outRast1<br /><span class="kn">del</span> outRast2

</pre>
</div> </code> <a href="#top">back to top</a> <a href="#top">back to top</a> <strong>Example 6.3</strong> <br />
<code>
<div class="highlight">
<pre><span class="c"># buffer_clip.py (hard-coded version)</span>
<span class="c"># Purpose: Buffer a zone and use it to clip another file</span>
<span class="c"># Input: No arguments needed.</span>

<span class="kn">import</span> <span class="nn">arcpy</span><span class="o"></span><span class="nn"></span>

<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/data/ch06&#39;</span>
<span class="n">outDir</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/scratch/&#39;</span>

<span class="c"># Set buffer params</span>
<span class="n">fireDamage</span> <span class="o">=</span> <span class="s">&#39;special_regions.shp&#39;</span>
<span class="n">fireBuffer</span> <span class="o">=</span>  <span class="n">outDir</span> <span class="o">+</span> <span class="n">fireDamage</span><span class="p">[:</span><span class="o">-</span><span class="mi">4</span><span class="p">]</span> <span class="o">+</span> <span class="s">&#39;Buffer.shp&#39;</span>
<span class="n">bufferDist</span> <span class="o">=</span> <span class="s">&#39;1 mile&#39;</span>

<span class="c"># Set clip params</span>
<span class="n">park</span> <span class="o">=</span> <span class="s">&#39;park.shp&#39;</span>
<span class="n">clipOutput</span> <span class="o">=</span> <span class="n">outDir</span> <span class="o">+</span> <span class="n">park</span><span class="p">[:</span><span class="o">-</span><span class="mi">4</span><span class="p">]</span> <span class="o">+</span> <span class="s">&#39;DamageBuffer.shp&#39;</span>

<span class="n">arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="n">fireDamage</span><span class="p">,</span> <span class="n">fireBuffer</span><span class="p">,</span><span class="n">bufferDist</span><span class="p">)</span>
<span class="k">print</span> <span class="s">&#39;{0} created.&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">fireBuffer</span><span class="p">)</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">Clip_analysis</span><span class="p">(</span><span class="n">park</span><span class="p">,</span> <span class="n">fireBuffer</span><span class="p">,</span> <span class="n">clipOutput</span> <span class="p">)</span>
<span class="k">print</span> <span class="s">&#39;{0} created.&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">clipOutput</span><span class="p">)</span>
  </pre></div></code>
<p><img src="../images/buffer_clip_input.jpg" alt="initialview" /></p>
<p>Figure 6.6a: Initial view of data in Example 6.3<br />
                  black: park = 'park.shp'<br />
                  gray: fireDamage = 'special_regions.shp'</p>
<p><img src="../images/buffer_clip_intermediate.jpg" alt="2" /><br />
                  Figure 6.6b: Intermediate view of data in Example 6.3<br />
                  black: park = 'park.shp' <br />
                  green: fireBuffer = 'special_regionsBuffer.shp'</p>
<p><img src="../images/buffer_clip_output.jpg" alt="3" /><br />
                  Figure 6.6c: Final view of data in Example 6.3<br />
                  black: park = 'park.shp' <br />
                  gray: fireDamage = 'special_regions.shp'<br />
                  light gray: clipOutput = 'parkDamageBuffer.shp'<br />
                  Park within 1 mi. of fire <br />
</p><p><strong>Example 6.4</strong><br />
</p><code>
<div class="highlight">
<pre><span class="c"># addLengthField.py</span>
<span class="c"># Purpose: Add a field containing polygon lengths to the shapefile.</span>
<span class="c"># Usage: No arguments needed.</span>
<span class="kn">import</span> <span class="nn">arcpy</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/data/ch06&#39;</span>

<span class="n">inputFile</span> <span class="o">=</span> <span class="s">&#39;special_regions.shp&#39;</span>
<span class="n">fieldName</span> <span class="o">=</span> <span class="s">&#39;Length&#39;</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">AddField_management</span><span class="p">(</span> <span class="n">inputFile</span><span class="p">,</span> <span class="n">fieldName</span><span class="p">,</span> <span class="s">&#39;FLOAT&#39;</span> <span class="p">)</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">CalculateField_management</span><span class="p">(</span> <span class="n">inputFile</span><span class="p">,</span> <span class="n">fieldName</span><span class="p">,</span> <span class="s">&#39;!shape.length!&#39;</span><span class="p">,</span> <span class="s">&#39;PYTHON&#39;</span> <span class="p">)</span>
</pre>
</div> </code><a href="#top">back to top</a> <p><strong>Example 6.5</strong><br />
</p>
<code>
<div class="highlight">
<pre><span class="c"># callInventory.py</span>
<span class="c"># Purpose: Call the inventory tool.</span>
<span class="kn">import</span> <span class="nn">arcpy</span>

<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/sample_scripts/ch06&#39;</span>
<span class="n">inputDir</span> <span class="o">=</span> <span class="s">&quot;C:/gispy/data/ch06/&quot;</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">ImportToolbox</span><span class="p">(</span><span class="s">&#39;customTools.tbx&#39;</span><span class="p">)</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">Inventory_custom</span><span class="p">(</span><span class="n">inputDir</span><span class="p">,</span> <span class="s">&#39;SUMMARY_ONLY&#39;</span><span class="p">,</span> <span class="s">&#39;summaryFile.txt&#39;</span><span class="p">)</span></pre>
</div>
</code><a href="#top">back to top</a> <p><strong>Table 6.4: Geoprocessing in Python. </strong><a name="create" id="create"></a></p>
<table width="405" border="1">
<tr>
<td width="68"><strong>ArcGIS Version</strong></td>
<td width="321"><strong>Python code statements</strong></td>
</tr>
<tr>
<td><div align="center">9.1</div></td>
<td><code><span class="key">from</span> win32com.client <span class="key">import</span> Dispatch <br />
                    gp <span class="o">=</span> Dispatch(<span class="s">'esriGeoprocessing.GPDispatch.1'</span>)</code> </td>
</tr>
<tr>
<td><div align="center">9.2</div></td>
<td><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create( ) </code></td>
</tr>
<tr>
<td><div align="center">9.3</div></td>
<td><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create(<span class="mi">9.3</span>) </code></td>
</tr>
<tr>
<td><div align="center">10.x</div></td>
<td><code><span class="key">import</span> arcpy</code></td>
</tr>
</table><strong>ArcGIS Version</strong><strong>Python code statements</strong><div align="center">9.1</div><code><span class="key">from</span> win32com.client <span class="key">import</span> Dispatch <br />
                    gp <span class="o">=</span> Dispatch(<span class="s">'esriGeoprocessing.GPDispatch.1'</span>)</code> <div align="center">9.2</div><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create( ) </code><div align="center">9.3</div><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create(<span class="mi">9.3</span>) </code><div align="center">10.x</div><code><span class="key">import</span> arcpy</code><a href="#top">back to top</a> <blockquote>
<p>When you search for <code>arcpy</code> objects on the ArcGIS Resources site,  add the word <code>arcpy</code> to the search to bring the <code>arcpy</code>-related results to the top of the search.<br />
</p>
</blockquote><a href="#top">back to top</a> <a href="#top">back to top</a> <span class="head">6.1 Importing <code>arcpy</code></span> <a name="arcpy" id="environment3"></a><a href="#top">back to top</a> <p><strong>Table 6.1: Highlights of <code>arcpy</code> functionality </strong><a name="create" id="create2"></a></p>
<table width="759" border="1">
<tr>
<td width="74"><strong>ArcGIS Topic</strong></td>
<td width="260"><strong>Functionality</strong></td>
<td width="403"><strong>Code sample</strong></td>
</tr>
<tr>
<td>Tools </td>
<td>Call ArcToolbox tools</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="s">&#39;output.shp&#39;</span><span class="p">,</span> <span class="s">&#39;1 Mile&#39;</span><span class="p">)</span></code></td>
</tr>
<tr>
<td>Other functions</td>
<td>Licensing, data management, and other miscellaneous needs.</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">CheckOutExtension</span><span class="p">(</span><span class="s">&#39;Spatial&#39;</span><span class="p">)</span></code></td>
</tr>
<tr>
<td>Environment<br />
                      variables</td>
<td>Set and get environment variable values</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span> </code></td>
</tr>
<tr>
<td>Describe</td>
<td>Describe data properties</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">Describe</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">)</span> </code></td>
</tr>
<tr>
<td>Listing data</td>
<td>List  items (e.g., rasters, feature classes, workspaces, toolboxes,  environment variables, and indexes)</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">ListFeatureClasses</span><span class="p">(</span> <span class="p">)</span> </code></td>
</tr>
<tr>
<td>Cursor</td>
<td>Read/modify attribute table elements</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">da</span><span class="o">.</span><span class="n">SearchCursor</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="n">fieldNames</span><span class="p">)</span> </code></td>
</tr>
<tr>
<td>Messaging</td>
<td>Get and print geoprocessing messages</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">GetMessages</span><span class="p">(</span> <span class="p">)</span> </code></td>
</tr>
<tr>
<td>Mapping</td>
<td>Manipulate existing map layers, add layers to maps, modifying surrounds, manipulate symbology<br /></td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">mapping</span><span class="o">.</span><span class="n">MoveLayer</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">refLayer</span><span class="p">,</span> <span class="n">moveLayer</span><span class="p">,</span> <span class="s">&#39;BEFORE&#39;</span><span class="p">)</span> </code></td>
</tr>
</table>
<br /><strong>ArcGIS Topic</strong><strong>Functionality</strong><strong>Code sample</strong>Tools Call ArcToolbox tools<code><span class="n">arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="s">&#39;output.shp&#39;</span><span class="p">,</span> <span class="s">&#39;1 Mile&#39;</span><span class="p">)</span></code>Other functionsLicensing, data management, and other miscellaneous needs.<code><span class="n">arcpy</span><span class="o">.</span><span class="n">CheckOutExtension</span><span class="p">(</span><span class="s">&#39;Spatial&#39;</span><span class="p">)</span></code>Environment<br />
                      variablesSet and get environment variable values<code><span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span> </code>DescribeDescribe data properties<code><span class="n">arcpy</span><span class="o">.</span><span class="n">Describe</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">)</span> </code>Listing dataList  items (e.g., rasters, feature classes, workspaces, toolboxes,  environment variables, and indexes)<code><span class="n">arcpy</span><span class="o">.</span><span class="n">ListFeatureClasses</span><span class="p">(</span> <span class="p">)</span> </code>CursorRead/modify attribute table elements<code><span class="n">arcpy</span><span class="o">.</span><span class="n">da</span><span class="o">.</span><span class="n">SearchCursor</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="n">fieldNames</span><span class="p">)</span> </code>MessagingGet and print geoprocessing messages<code><span class="n">arcpy</span><span class="o">.</span><span class="n">GetMessages</span><span class="p">(</span> <span class="p">)</span> </code>MappingManipulate existing map layers, add layers to maps, modifying surrounds, manipulate symbology<br /><code><span class="n">arcpy</span><span class="o">.</span><span class="n">mapping</span><span class="o">.</span><span class="n">MoveLayer</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">refLayer</span><span class="p">,</span> <span class="n">moveLayer</span><span class="p">,</span> <span class="s">&#39;BEFORE&#39;</span><span class="p">)</span> </code><strong>ArcGIS Topic</strong><strong>Functionality</strong><strong>Code sample</strong>Tools Call ArcToolbox tools<code><span class="n">arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="s">&#39;output.shp&#39;</span><span class="p">,</span> <span class="s">&#39;1 Mile&#39;</span><span class="p">)</span></code>Other functionsLicensing, data management, and other miscellaneous needs.<code><span class="n">arcpy</span><span class="o">.</span><span class="n">CheckOutExtension</span><span class="p">(</span><span class="s">&#39;Spatial&#39;</span><span class="p">)</span></code>Environment<br />
                      variablesSet and get environment variable values<code><span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span> </code>DescribeDescribe data properties<code><span class="n">arcpy</span><span class="o">.</span><span class="n">Describe</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">)</span> </code>Listing dataList  items (e.g., rasters, feature classes, workspaces, toolboxes,  environment variables, and indexes)<code><span class="n">arcpy</span><span class="o">.</span><span class="n">ListFeatureClasses</span><span class="p">(</span> <span class="p">)</span> </code>CursorRead/modify attribute table elements<code><span class="n">arcpy</span><span class="o">.</span><span class="n">da</span><span class="o">.</span><span class="n">SearchCursor</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="n">fieldNames</span><span class="p">)</span> </code>MessagingGet and print geoprocessing messages<code><span class="n">arcpy</span><span class="o">.</span><span class="n">GetMessages</span><span class="p">(</span> <span class="p">)</span> </code>MappingManipulate existing map layers, add layers to maps, modifying surrounds, manipulate symbology<br /><code><span class="n">arcpy</span><span class="o">.</span><span class="n">mapping</span><span class="o">.</span><span class="n">MoveLayer</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">refLayer</span><span class="p">,</span> <span class="n">moveLayer</span><span class="p">,</span> <span class="s">&#39;BEFORE&#39;</span><span class="p">)</span> </code><span class="head">6.2 <code>arcpy</code> Functions</span> <a name="functions" id="environment2"></a><a href="#top">back to top</a> <code>arcpy<span class="o">.</span>functionName(argument1, 
              argument2, argument3,...)</code><span class="head">6.3 Environment
                settings</span> <a name="environment" id="environment"></a><a href="#top">back to top</a> <code>arcpy<span class="o">.</span>env<span class="o">.</span>property <span class="o">=</span> value</code><code>variable <span class="o">=</span> arcpy<span class="o">.</span>env<span class="o">.</span>property</code><p><span class="head">6.4 Calling 
                  Tools</span> <a name="tools" id="tools"></a></p><a href="#top">back to top</a> <code>arcpy<span class="o">.</span>toolName_toolboxAlias(arguments1, 
              argument2, argument3,...)</code>ToolboxAlias<strong>Table 6.2 </strong>Toolbox alias examples<br />
<table border="3">
<tr>
<th width="186" scope="row">Toolbox</th>
<th width="117">Alias</th>
</tr>
<tr>
<td>3D Analyst Tools</td>
<td>3d</td>
</tr>
<tr>
<td>Analysis Tools</td>
<td>analysis</td>
</tr>
<tr>
<td>Cartography Tools</td>
<td>cartography</td>
</tr>
<tr>
<td>Conversion Tools</td>
<td>conversion</td>
</tr>
<tr>
<td>Data Interoperability Tools</td>
<td>interop</td>
</tr>
<tr>
<td>Data Management Tools</td>
<td>management</td>
</tr>
<tr>
<td>Spatial Analyst Tools</td>
<td>sa</td>
</tr>
<tr>
<td>Spatial Statistics Tools</td>
<td>stats</td>
</tr>
</table>3D Analyst Tools3dAnalysis ToolsanalysisCartography ToolscartographyConversion ToolsconversionData Interoperability ToolsinteropData Management ToolsmanagementSpatial Analyst ToolssaSpatial Statistics ToolsstatsToolboxAlias3D Analyst Tools3dAnalysis ToolsanalysisCartography ToolscartographyConversion ToolsconversionData Interoperability ToolsinteropData Management ToolsmanagementSpatial Analyst ToolssaSpatial Statistics Toolsstats<span><strong><span class="head">6.4.1 Using tool help</span><a name="help" id="help"></a></strong></span><a href="#top">back to top</a> <span><strong><span class="head">6.4.2 Copy code snippet</span></strong></span> <a name="snippet" id="snippet"></a><a href="#top">back to top</a> <span><strong><span class="head">6.4.3 Linear units</span></strong></span> <a name="linear" id="snippet2"></a><a href="#top">back to top</a> <strong>Table 6.3</strong> Linear Unit of Measure Keywords (not case 
              sensitive)
              <table border="1" width="453">
<tbody>
<tr>
<td width="443">centimeters | decimal degrees | decimeters | feet | inches | kilometers | meters | miles | millimeters | nautical miles | points | unknown | yards</td>
</tr>
</tbody>
</table>centimeters | decimal degrees | decimeters | feet | inches | kilometers | meters | miles | millimeters | nautical miles | points | unknown | yardscentimeters | decimal degrees | decimeters | feet | inches | kilometers | meters | miles | millimeters | nautical miles | points | unknown | yards<span><strong><span class="head">6.4.4 Python expressions as inputs</span><a name="expressions" id="expressions"></a></strong></span><a href="#top">back to top</a> <span><strong><span class="head">6.4.5 Multivalue inputs</span></strong></span> <a name="multivalue" id="multivalue"></a><a href="#top">back to top</a> <span><strong><span class="head">6.4.6 Optional parameters</span></strong></span> <a name="optional" id="optional"></a><a href="#top">back to top</a> <span><strong><span class="head">6.4.7 Return values (...using the <code>Result</code> object)</span><a name="return" id="return"></a></strong></span><a href="#top">back to top</a> <code>variable = arcpy<span class="o">.</span>toolName_toolboxAlias(arguments1, 
              argument2, argument3,...)</code><strong>Example 6.1</strong><br />
<code>
<div class="highlight">
<pre><span class="c"># avgNearNeighbor.py </span>
<span class="c">#Purpose: Analyze crime data to determine if spatial patterns are statistically significant </span>
<span class="kn">import</span> <span class="nn">arcpy</span><br />

<br /><span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/data/ch06&#39;</span>
<br />
<span class="n">annResult</span> <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span><span class="n">AverageNearestNeighbor_stats</span><span class="p">(</span><span class="s">&#39;points.shp&#39;</span><span class="p">,</span> <span class="s">&#39;Euclidean Distance&#39;</span><span class="p">)</span>
<br />

<span class="k">print</span> <span class="s">&#39;Average Nearest Neighbor Output&#39;</span>
<span class="k">print</span> <span class="s">&#39;Nearest neighbor ratio: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">)</span> 
<span class="k">print</span> <span class="s">&#39;z-score: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">)</span>
<span class="k">print</span> <span class="s">&#39;p-value: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">)</span> 
<span class="k">print</span> <span class="s">&#39;Expected Mean Distance: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">)</span>
<span class="k">print</span> <span class="s">&#39;Observed Mean Distance: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="p">)</span>

<span class="o"></span><span class="mf"></span></pre>
</div></code>
<p> Printed output:                </p>
<p>&gt;&gt;&gt; <code><span class="n">Average Nearest Neighbor Output<br />
                  Nearest neighbor ratio: 0.853047<br />
                  z-score: -5.802495<br />
                  p-value: 0<br />
                  Expected Mean Distance: 753.825013<br />
              Observed Mean Distance: 643.048013</span></code></p><span class="head">6.4.8 Calling  Spatial Analyst tools</span><a name="sa" id="sa"></a><a href="#top">back to top</a> <code>arcpy<span class="o">.</span>toolboxAlias<span class="o">.</span>toolName(arguments1, 
              argument2, argument3,...)</code><span>
<span class="head">6.4.9 Importing spatial analyst</span>
<a name="importsa" id="importsa"></a></span><a href="#top">back to top</a> <span class="head">6.4.10 Raster Calculator</span>

<a name="rastCalc" id="importsa2"></a> <a href="#top">back to top</a> <strong>Example 6.2</strong><br />
<code>
<div class="highlight">
<pre><span class="c"># computeRastEquation.py </span>
<span class="c"># Purpose: Calculate 5 * &#39;getty_rast&#39; - 2</span>

<span class="kn">import</span> <span class="nn">arcpy</span>

<span class="n"><br />arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/data/ch06/rastSmall.gdb&#39;</span><br />arcpy<span class="o">.</span>CheckOutExtension(<span class="s">'Spatial'</span>)<br /><span class="n"><br />outRast1</span> <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span><span class="n">sa</span><span class="o">.</span><span class="n">Times</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="s">&#39;dataRast&#39;</span><span class="p">)</span>
<span class="n">outRast2</span> <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span><span class="n">sa</span><span class="o">.</span><span class="n">Minus</span><span class="p">(</span><span class="n">outRast1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">outRast2</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="s">&#39;equationRast&#39;</span> <span class="p">)</span><br /><span class="kn">del</span> outRast1<br /><span class="kn">del</span> outRast2

</pre>
</div> </code> <span><strong><span class="head">6.4.11 Temporary feature layers</span><a name="tempLayers" id="custom2"></a></strong></span><a href="#top">back to top</a> <span class="head">6.4.12 Using variables for multiple tool calls</span><a name="multipleTool" id="multipleTool"></a><a href="#top">back to top</a> <strong>Example 6.3</strong> <br />
<code>
<div class="highlight">
<pre><span class="c"># buffer_clip.py (hard-coded version)</span>
<span class="c"># Purpose: Buffer a zone and use it to clip another file</span>
<span class="c"># Input: No arguments needed.</span>

<span class="kn">import</span> <span class="nn">arcpy</span><span class="o"></span><span class="nn"></span>

<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/data/ch06&#39;</span>
<span class="n">outDir</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/scratch/&#39;</span>

<span class="c"># Set buffer params</span>
<span class="n">fireDamage</span> <span class="o">=</span> <span class="s">&#39;special_regions.shp&#39;</span>
<span class="n">fireBuffer</span> <span class="o">=</span>  <span class="n">outDir</span> <span class="o">+</span> <span class="n">fireDamage</span><span class="p">[:</span><span class="o">-</span><span class="mi">4</span><span class="p">]</span> <span class="o">+</span> <span class="s">&#39;Buffer.shp&#39;</span>
<span class="n">bufferDist</span> <span class="o">=</span> <span class="s">&#39;1 mile&#39;</span>

<span class="c"># Set clip params</span>
<span class="n">park</span> <span class="o">=</span> <span class="s">&#39;park.shp&#39;</span>
<span class="n">clipOutput</span> <span class="o">=</span> <span class="n">outDir</span> <span class="o">+</span> <span class="n">park</span><span class="p">[:</span><span class="o">-</span><span class="mi">4</span><span class="p">]</span> <span class="o">+</span> <span class="s">&#39;DamageBuffer.shp&#39;</span>

<span class="n">arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="n">fireDamage</span><span class="p">,</span> <span class="n">fireBuffer</span><span class="p">,</span><span class="n">bufferDist</span><span class="p">)</span>
<span class="k">print</span> <span class="s">&#39;{0} created.&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">fireBuffer</span><span class="p">)</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">Clip_analysis</span><span class="p">(</span><span class="n">park</span><span class="p">,</span> <span class="n">fireBuffer</span><span class="p">,</span> <span class="n">clipOutput</span> <span class="p">)</span>
<span class="k">print</span> <span class="s">&#39;{0} created.&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">clipOutput</span><span class="p">)</span>
  </pre></div></code>
<p><img src="../images/buffer_clip_input.jpg" alt="initialview" /></p>
<p>Figure 6.6a: Initial view of data in Example 6.3<br />
                  black: park = 'park.shp'<br />
                  gray: fireDamage = 'special_regions.shp'</p>
<p><img src="../images/buffer_clip_intermediate.jpg" alt="2" /><br />
                  Figure 6.6b: Intermediate view of data in Example 6.3<br />
                  black: park = 'park.shp' <br />
                  green: fireBuffer = 'special_regionsBuffer.shp'</p>
<p><img src="../images/buffer_clip_output.jpg" alt="3" /><br />
                  Figure 6.6c: Final view of data in Example 6.3<br />
                  black: park = 'park.shp' <br />
                  gray: fireDamage = 'special_regions.shp'<br />
                  light gray: clipOutput = 'parkDamageBuffer.shp'<br />
                  Park within 1 mi. of fire <br />
</p><p><strong>Example 6.4</strong><br />
</p><code>
<div class="highlight">
<pre><span class="c"># addLengthField.py</span>
<span class="c"># Purpose: Add a field containing polygon lengths to the shapefile.</span>
<span class="c"># Usage: No arguments needed.</span>
<span class="kn">import</span> <span class="nn">arcpy</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/data/ch06&#39;</span>

<span class="n">inputFile</span> <span class="o">=</span> <span class="s">&#39;special_regions.shp&#39;</span>
<span class="n">fieldName</span> <span class="o">=</span> <span class="s">&#39;Length&#39;</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">AddField_management</span><span class="p">(</span> <span class="n">inputFile</span><span class="p">,</span> <span class="n">fieldName</span><span class="p">,</span> <span class="s">&#39;FLOAT&#39;</span> <span class="p">)</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">CalculateField_management</span><span class="p">(</span> <span class="n">inputFile</span><span class="p">,</span> <span class="n">fieldName</span><span class="p">,</span> <span class="s">&#39;!shape.length!&#39;</span><span class="p">,</span> <span class="s">&#39;PYTHON&#39;</span> <span class="p">)</span>
</pre>
</div> </code><span><strong><span class="head">6.4.13 Calling custom tools</span><a name="custom" id="custom"></a></strong></span><a href="#top">back to top</a> <p><strong>Example 6.5</strong><br />
</p>
<code>
<div class="highlight">
<pre><span class="c"># callInventory.py</span>
<span class="c"># Purpose: Call the inventory tool.</span>
<span class="kn">import</span> <span class="nn">arcpy</span>

<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/sample_scripts/ch06&#39;</span>
<span class="n">inputDir</span> <span class="o">=</span> <span class="s">&quot;C:/gispy/data/ch06/&quot;</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">ImportToolbox</span><span class="p">(</span><span class="s">&#39;customTools.tbx&#39;</span><span class="p">)</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">Inventory_custom</span><span class="p">(</span><span class="n">inputDir</span><span class="p">,</span> <span class="s">&#39;SUMMARY_ONLY&#39;</span><span class="p">,</span> <span class="s">&#39;summaryFile.txt&#39;</span><span class="p">)</span></pre>
</div>
</code><span class="head">6.5 A word about old scripts</span> <a name="arcgisscripting" id="introduction3"></a><a href="#top">back to top</a> <p><strong>Table 6.4: Geoprocessing in Python. </strong><a name="create" id="create"></a></p>
<table width="405" border="1">
<tr>
<td width="68"><strong>ArcGIS Version</strong></td>
<td width="321"><strong>Python code statements</strong></td>
</tr>
<tr>
<td><div align="center">9.1</div></td>
<td><code><span class="key">from</span> win32com.client <span class="key">import</span> Dispatch <br />
                    gp <span class="o">=</span> Dispatch(<span class="s">'esriGeoprocessing.GPDispatch.1'</span>)</code> </td>
</tr>
<tr>
<td><div align="center">9.2</div></td>
<td><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create( ) </code></td>
</tr>
<tr>
<td><div align="center">9.3</div></td>
<td><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create(<span class="mi">9.3</span>) </code></td>
</tr>
<tr>
<td><div align="center">10.x</div></td>
<td><code><span class="key">import</span> arcpy</code></td>
</tr>
</table><strong>ArcGIS Version</strong><strong>Python code statements</strong><div align="center">9.1</div><code><span class="key">from</span> win32com.client <span class="key">import</span> Dispatch <br />
                    gp <span class="o">=</span> Dispatch(<span class="s">'esriGeoprocessing.GPDispatch.1'</span>)</code> <div align="center">9.2</div><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create( ) </code><div align="center">9.3</div><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create(<span class="mi">9.3</span>) </code><div align="center">10.x</div><code><span class="key">import</span> arcpy</code><strong>ArcGIS Version</strong><strong>Python code statements</strong><div align="center">9.1</div><code><span class="key">from</span> win32com.client <span class="key">import</span> Dispatch <br />
                    gp <span class="o">=</span> Dispatch(<span class="s">'esriGeoprocessing.GPDispatch.1'</span>)</code> <div align="center">9.2</div><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create( ) </code><div align="center">9.3</div><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create(<span class="mi">9.3</span>) </code><div align="center">10.x</div><code><span class="key">import</span> arcpy</code><span class="head">6.6 Discussion </span><a name="discussion" id="discussion"></a><a href="#top">back to top</a> <blockquote>
<p>When you search for <code>arcpy</code> objects on the ArcGIS Resources site,  add the word <code>arcpy</code> to the search to bring the <code>arcpy</code>-related results to the top of the search.<br />
</p>
</blockquote><span class="head">6.7 Key terms</span><a name="keyterms" id="keyterms2"></a><a href="#top">back to top</a> <span class="head">6.8 Exercises</span> <a name="exercises" id="exercises"></a><a href="#top">back to top</a> ------------------------------------------------------------rows: 63 cols: 0<span class="head">6.1 Importing <code>arcpy</code></span> <a name="arcpy" id="environment3"></a><span class="head">6.2 <code>arcpy</code> Functions</span> <a name="functions" id="environment2"></a><span class="head">6.3 Environment
                settings</span> <a name="environment" id="environment"></a><code>arcpy<span class="o">.</span>env<span class="o">.</span>property <span class="o">=</span> value</code><code>variable <span class="o">=</span> arcpy<span class="o">.</span>env<span class="o">.</span>property</code><p><span class="head">6.4 Calling 
                  Tools</span> <a name="tools" id="tools"></a></p>ToolboxAlias<span><strong><span class="head">6.4.1 Using tool help</span><a name="help" id="help"></a></strong></span><span><strong><span class="head">6.4.2 Copy code snippet</span></strong></span> <a name="snippet" id="snippet"></a><span><strong><span class="head">6.4.3 Linear units</span></strong></span> <a name="linear" id="snippet2"></a><span><strong><span class="head">6.4.4 Python expressions as inputs</span><a name="expressions" id="expressions"></a></strong></span><span><strong><span class="head">6.4.5 Multivalue inputs</span></strong></span> <a name="multivalue" id="multivalue"></a><span><strong><span class="head">6.4.6 Optional parameters</span></strong></span> <a name="optional" id="optional"></a><span><strong><span class="head">6.4.7 Return values (...using the <code>Result</code> object)</span><a name="return" id="return"></a></strong></span><span class="head">6.4.8 Calling  Spatial Analyst tools</span><a name="sa" id="sa"></a><span>
<span class="head">6.4.9 Importing spatial analyst</span>
<a name="importsa" id="importsa"></a></span><span class="head">6.4.10 Raster Calculator</span>

<a name="rastCalc" id="importsa2"></a> <span><strong><span class="head">6.4.11 Temporary feature layers</span><a name="tempLayers" id="custom2"></a></strong></span><span class="head">6.4.12 Using variables for multiple tool calls</span><a name="multipleTool" id="multipleTool"></a><span><strong><span class="head">6.4.13 Calling custom tools</span><a name="custom" id="custom"></a></strong></span><span class="head">6.5 A word about old scripts</span> <a name="arcgisscripting" id="introduction3"></a><span class="head">6.6 Discussion </span><a name="discussion" id="discussion"></a><span class="head">6.7 Key terms</span><a name="keyterms" id="keyterms2"></a><span class="head">6.8 Exercises</span> <a name="exercises" id="exercises"></a><br /><span class="head">Chapter objectives</span>
<br />
<br />
        After reading this chapter, you'll be able to do the following: 
        <ul>
<li>Explain, in general terms, the capabilities of the <code>arcpy</code> package.<br />
</li>
<li>Define the Python terms <em>module</em> and <em>package</em>.</li>
<li><span>Set geoprocessing environment variables.</span></li>
<li>Invoke geoprocessing tools with Python.</li>
<li>Interpret ArcGIS Resources  scripting help for geoprocessing tools.</li>
<li>Copy code snippets from hand-run tools.</li>
<li>Calculate field values with Python expressions.</li>
<li>Format linear units, multi-value input and optional input for GIS tools.</li>
<li>Consume values returned by GIS tools.</li>
<li>Call Spatial Analyst tools and perform map algebra.</li>
<li>Save temporary raster and feature layer data.</li>
<li>Use output from tool a GIS tool as input to another GIS tool. </li>
<li>Import custom toolboxes and call custom tools.</li>
</ul>
<hr />
<span class="foo">
<span class="head">Chapter Outline</span>
<br />
<br />
<a href="#arcpy">Importing <code>arcpy</code> </a><br />
<a href="#functions"><code>arcpy</code> Functions</a><br />
<a href="#environment">Environment settings</a><br />
<a href="#tools">Calling tools</a><br />
          &nbsp;&nbsp;&nbsp;&nbsp;<a href="#help">Using tool help</a><br />
          &nbsp;&nbsp;&nbsp;&nbsp;<a href="#snippet">Copy Code Snippet</a><br />
          &nbsp;&nbsp;&nbsp;&nbsp;<a href="#linear">Linear units</a><br />
          &nbsp;&nbsp;&nbsp;&nbsp;<a href="#expressions">Python expressions as inputs</a><br />
          &nbsp;&nbsp;&nbsp;&nbsp;<a href="#multivalue">Multivalue inputs</a><br />
          &nbsp;&nbsp;&nbsp;&nbsp;<a href="#optional">Optional parameters</a><br />
          &nbsp;&nbsp;&nbsp;&nbsp;<a href="#return">Return values</a><br />
          &nbsp;&nbsp;&nbsp;&nbsp;<a href="#sa">Calling Spatial Analyst tools</a><br />
          &nbsp;&nbsp;&nbsp;&nbsp;<a href="#importsa">Importing spatial analyst</a><br />
          &nbsp;&nbsp;&nbsp;&nbsp;<a href="#rastCalc">Raster Calculator</a><br />
          &nbsp;&nbsp;&nbsp;&nbsp;<a href="#tempLayers">Temporary Layers<br />
</a><a href="#tempLayers"></a>&nbsp;<a href="#tempLayers"></a>&nbsp;&nbsp;&nbsp;<a href="#multipleTool">Using variables for multiple tool calls</a><br />
          &nbsp;&nbsp;&nbsp;&nbsp;<a href="#custom">Calling custom tools</a><br />
<a href="#arcgisscripting">A word about old scripts</a><br />
<a href="#keyterms">Key terms</a><br />
<a href="#discussion">Discussion</a><br />
<a href="#exercises">Exercises</a><br />
</span> <hr />
<p>          Now that you know some basic  Python and  some things about ArcGIS geoprocessing tools,  we can begin to discuss Python ArcGIS functionality.  Many aspects of ArcGIS  functionality, including tools are accessible through Python. The key to accessing ArcGIS in Python is a special set of scripts called <code>arcpy</code>. The main idea of this chapter is to familiarize you with <code>arcpy</code> and the syntax for using ArcToolbox tools. </p>
<hr /><table border="0" width="775">
<tbody>
<tr>
<th align="left" scope="row"><span class="head">6.1 Importing <code>arcpy</code></span> <a name="arcpy" id="environment3"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<p>You may have noticed that the scripts exported from Modelbuilder begin by importing <code>arcpy</code>.  This is how most geoprocessing scripts begin, because importing <code>arcpy</code> is the key to accessing ArcGIS Python. To use ArcGIS functionality in Python, a script  needs to import <code>arcpy</code>. The terms <code>import</code> and <code>arcpy</code> are explained here:</p>
<ul>
<li>The keyword <code>import</code> is used to reference a  module or a package. This provides access to functionality beyond the built-in Python functionality. As discussed in Chapter 2, the term following the <code>import</code> keyword  is a module or a package.  Recall that a <em>module</em> is a single Python script ('.py' file) containing tightly related definitions and statements. A <em>package</em> is a special way of structuring a set of related Python modules. A package is a directory containing modules and sometimes subpackages, which also contain modules. A module named '__init__.py' tells Python that the directory contains a package. Modules structured within a package and items in those modules can be accessed using the  dot notation.<br />
<br />
</li>
<li><code>arcpy</code> is a package installed with ArcGIS. <code>arcpy</code> can also be thought of as a Python object that has numerous methods, including geoprocessing tools. Search under the ArcGIS install and you will find an <code>arcpy</code> directory. This is the package being imported. <code>arcpy</code> provides a variety of functionality that we'll be using throughout the remainder of the book. Table 6.1 lists the main <code>arcpy</code> topics covered in this book. </li>
</ul>
<p>The <code>arcpy</code> package has an object-oriented design which can be defined using object-oriented terms, some of which were already used in Chapters 3 and 4:</p>
<ul>
<li>Everything in Python is an <em>object</em>, including modules and packages. <code>arcpy</code> is an object. <code>arcpy</code> also uses objects, such as  a <code>ValueTable</code> object, a <code>Describe</code> object, and a <code>Result</code> object which are discussed in upcoming sections. <br />
<br />
</li>
<li>Objects have methods associated with them. A <em>method</em> is a function that performs some action on the object.  Methods are simply a specific type of functions. The terms 'calling methods', 'passing arguments', and 'returning values'  apply to methods just as they apply to functions.</li>
</ul>
<p> Dot notation generates context menus for <code>arcpy</code>, showing a list of available <code>arcpy</code> methods and properties. When you use dot notation with strings and lists, context menus automatically appear, but these are built-in data types. In order to view context menus for <code>arcpy</code>, you must first import <code>arcpy</code> to give Python access to the information it uses to populate the context menu. In other words, it recognizes the word <code>arcpy</code> as a package.  Once you have imported <code>arcpy</code>, within a PythonWin session, the context menus are available for the entire session.  Try the code shown in the screen shot below to see the context menu for  <code>arcpy</code>. In some cases, no error will occur if incorrect spelling or capitalization is used; it will simply not work. Selecting choices from the  context menu is a good way to maintain accurate spelling and capitalization and increase efficiency. You can start typing a name and the menu will scroll to the closest choice. Press the 'Tab' key and the current selection will automatically be completed. If you don't see your choice, your spelling or capitalization is wrong.  The <code>arcpy</code> menu contains a list of  <code>arcpy</code> functions, environment settings,  tools, and modules. <br />
<br />
<img src="../images/autoCompletion.png" alt="autocompletion" width="561" height="205" /></p>
<table bgcolor="#eeeeee" border="0" bordercolor="#ece9d8" width="779">
<tbody>
<tr>
<td scope="row"><p><strong>Table 6.1: Highlights of <code>arcpy</code> functionality </strong><a name="create" id="create2"></a></p>
<table width="759" border="1">
<tr>
<td width="74"><strong>ArcGIS Topic</strong></td>
<td width="260"><strong>Functionality</strong></td>
<td width="403"><strong>Code sample</strong></td>
</tr>
<tr>
<td>Tools </td>
<td>Call ArcToolbox tools</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="s">&#39;output.shp&#39;</span><span class="p">,</span> <span class="s">&#39;1 Mile&#39;</span><span class="p">)</span></code></td>
</tr>
<tr>
<td>Other functions</td>
<td>Licensing, data management, and other miscellaneous needs.</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">CheckOutExtension</span><span class="p">(</span><span class="s">&#39;Spatial&#39;</span><span class="p">)</span></code></td>
</tr>
<tr>
<td>Environment<br />
                      variables</td>
<td>Set and get environment variable values</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span> </code></td>
</tr>
<tr>
<td>Describe</td>
<td>Describe data properties</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">Describe</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">)</span> </code></td>
</tr>
<tr>
<td>Listing data</td>
<td>List  items (e.g., rasters, feature classes, workspaces, toolboxes,  environment variables, and indexes)</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">ListFeatureClasses</span><span class="p">(</span> <span class="p">)</span> </code></td>
</tr>
<tr>
<td>Cursor</td>
<td>Read/modify attribute table elements</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">da</span><span class="o">.</span><span class="n">SearchCursor</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="n">fieldNames</span><span class="p">)</span> </code></td>
</tr>
<tr>
<td>Messaging</td>
<td>Get and print geoprocessing messages</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">GetMessages</span><span class="p">(</span> <span class="p">)</span> </code></td>
</tr>
<tr>
<td>Mapping</td>
<td>Manipulate existing map layers, add layers to maps, modifying surrounds, manipulate symbology<br /></td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">mapping</span><span class="o">.</span><span class="n">MoveLayer</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">refLayer</span><span class="p">,</span> <span class="n">moveLayer</span><span class="p">,</span> <span class="s">&#39;BEFORE&#39;</span><span class="p">)</span> </code></td>
</tr>
</table>
<br /></td>
</tr>
</tbody>
</table>
<p> With each software release, <code>arcpy</code> functionality grows.  It would be difficult to learn about every <code>arcpy</code> object, method, and property. You can accomplish a lot with just a high level knowledge  of available functionality along with some detailed knowledge of a few components. The rest of the details can be referenced in the help documentation. Figure 6.2  provides an overview of <code>arcpy</code> functionality. Symbols are used for properties, methods, and objects as shown in the key (bottom right). Designed loosely to resemble an  object model diagram, the boxes enclose functionality categories and only a few examples are shown for each category (it's designed more like a 'cheat sheet' than an object model diagram). The contents are not exhaustive  but Figure 6.2 will provide a reference for the <code>arcpy</code> discussion. Packages, modules, and classes are Python constructs for organizing code. These constructs can contain functions (or methods) and properties. To see a complete list of functions/methods and properties for any of these constructs, search the online ArcGIS  Resources site. </p>
<p><img src="../images/cheatSheet1.png" border="1" /><br />
<strong>Figure 6.2</strong> Main components of <code>arcpy</code> functionality with a few examples listed for each item.</p>
<hr />
<table border="0" width="775">
<tbody>
<tr>
<th align="left" scope="row"><span class="head">6.2 <code>arcpy</code> Functions</span> <a name="functions" id="environment2"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<p>The  <code>arcpy</code> functions (blue box in Figure 6.2) provide support for geoprocessing workflows.   For example, functions can be used to list datasets, retrieve a dataset's   properties, check for existence of data, validate a table name before   adding it to a geodatabase, or perform many other useful scripting   tasks. The syntax for calling functions in the <code>arcpy</code> package uses the dot notation with  <code>arcpy</code> before the dot and the function name after the dot:</p>
<table width="600" border="0" bgcolor="#ffcccc">
<tbody>
<tr>
<td width="791" scope="row"><code>arcpy<span class="o">.</span>functionName(argument1, 
              argument2, argument3,...)</code></td>
</tr>
</tbody>
</table>
<p>In the following example, the function name is 'CheckExtension' and it takes one argument, the extension code, '3D' for the 3D Analyst toolbox: <br />
</p>
<p><code>&gt;&gt;&gt; <span class="key">import</span> arcpy<br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>CheckExtension(<span class="s">'3D'</span>)<br />
<span class="num">u'Available'<br />
</span></code></p>
<p>The response means the 3D Analyst Extension license is available to be checked out. 
          As mentioned earlier, the <code>u</code> in front stands for unicode, a way of encoding strings. But the string encoding doesn't have any practical repercussions for our interests, so you can ignore this. If you print the value, with the built-in <code>print</code> function, the <code>u</code> will not be included. <br />
<code><br />
          &gt;&gt;&gt; <span class="key">print</span> arcpy<span class="o">.</span>CheckExtension(<span class="s">'3D'</span>)<br />
</code><code><span class="n">Available</span></code><br /> </p>
<p>Notice, the example above did not import <code>arcpy</code>. For a given PythonWin session, once  <code>arcpy</code> is imported, it doesn't need to be imported again. But if  PythonWin is closed and reopened, <code>arcpy</code> needs to be imported again. <br />
<br />
          Functions that don't require arguments still need to use parentheses. For example, the <code>ListPrinterNames</code> function lists the printers available to the caller and takes no arguments:<br />
<code><br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>ListPrinterNames( )<br />
<span class="num">[u'Use Mac Printer', u'Send To OneNote 2010', u'Microsoft XPS Document Writer', u'Fax', u'Adobe PDF']<br />
</span></code><br />
          Many <code>arcpy</code>  functions return  values. An assignment statement can  capture the return value in a variable. The following code creates a <code>arcpy</code> <code>Point</code> object. The <code>CreateObject</code> function returns a <code>Point</code> object and it is stored in the variable named <code>pt</code>. The second line prints the value of this variable,  a 2-dimensional <code>Point</code> object located at <code>(0,0)</code>:<br />
<code><br />
          &gt;&gt;&gt; pt <span class="o">=</span> arcpy<span class="o">.</span>CreateObject(<span class="s">'Point'</span>)<br />
&gt;&gt;&gt; pt<br />
</code><code><span class="n">&lt;Point (0.0, 0.0, #, #)&gt;</span></code><br />
<br />
          The <code>arcpy</code> functions serve a  variety of scripting needs, some dealing with administrative concerns such as licensing (e.g., <code>CheckExtension</code>), others dealing with data management. For example, the <code>Exists</code> function takes one argument, a dataset and checks if it exists:</p>
<p><code>&gt;&gt;&gt; arcpy<span class="o">.</span>Exists(<span class="s">'C:/gispy/data/ch06/park.shp'</span>)<br />
          True<br />
</code></p>
<p>Other functions deal with topics such as geodatabase management, messaging, fields, tools, parameters, and cursors.   Search  for an 'alphabetical list of <code>arcpy</code> functions', on the ArcGIS Resources site to see a complete list of functions. Technically, the ArcToolbox tool functions are <code>arcpy</code> functions, but these are listed separately elsewhere on the site.  The syntax for calling tools is  similar to the syntax for calling other <code>arcpy</code> functions. Before we call tools it's important to know about managing environment settings. The syntax for environment settings uses dot notation as well.<br />
</p>
<hr /><table border="0" width="775">
<tbody>
<tr>
<th align="left" scope="row"><span class="head">6.3 Environment
                settings</span> <a name="environment" id="environment"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<p><img src="../images/envSettings.png" alt="envSettings" /><br />
          Figure 6.2a<br />
<br />
          Each tool has  settings it uses to execute an operation, such as a tolerance or   output location. The <em>environment settings</em> are conditions shared by all tools. ArcGIS has default values for these settings and users can modify the values via a dialog box in ArcGIS (Geoprocessing &gt; Environments launches the dialog box shown in Figure 6.2a). Python commands can also be used to get or set  the values of these settings. <code>arcpy</code> has an <code>env</code> class, a special structure for holding related properties. The <code>env</code> properties control the environment settings. <code>env</code> belongs to <code>arcpy</code> and the properties belong to the <code>env</code> class, so the property names have two dots, one after <code>arcpy</code> and one after <code>env</code>. The format for setting these properties is: </p>
<table width="600" border="0" bgcolor="#ffcccc">
<tbody>
<tr>
<th width="785" scope="row" align="left"><code>arcpy<span class="o">.</span>env<span class="o">.</span>property <span class="o">=</span> value</code></th>
</tr>
</tbody>
</table>
<p>The format for getting these properties is:</p>
<table width="600" border="0" bgcolor="#ffcccc">
<tbody>
<tr>
<th width="783" scope="row" align="left"><code>variable <span class="o">=</span> arcpy<span class="o">.</span>env<span class="o">.</span>property</code></th>
</tr>
</tbody>
</table>
<p>The workspace path and the overwrite output status are important environment  properties. The workspace  path specifies a structure such as a directory or file geodatabase that contains pertinent data. Tools look for input data in the workspace and place the output in the workspace. If the input data resides in the workspace, only the name of the file needs to be used. <code>arcpy</code> will automatically search in the workspace. Similarly, the workspace is the default location for output, unless otherwise specified. <br />
<code><br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>env<span class="o">.</span>workspace <span class="o">=</span> <span class="s">'C:/Data/Forestry'</span> <span class="comment"># Setting 
          the current workspace path</span><br />
<br />
          &gt;&gt;&gt; mydir <span class="o">=</span>  arcpy<span class="o">.</span>env<span class="o">.</span>workspace <span class="comment"># Getting 
          the current workspace path</span><br />
          &gt;&gt;&gt; mydir</code><code><span class="n"><br />
          u'C:/Data/Forestry'</span></code><br />
<br />
          Setting the workspace is simply a string assignment. No checking is done at this point to ensure that the workspace exists. This only occurs when a tool attempts to use the workspace to read or write data. The overwrite output status, either <code>True</code> or <code>False</code>, controls whether or not existing files are allowed to be overwritten by output from tools. The built-in constants <code>True</code> or <code>False</code> must be capitalized. The overwrite output status can also be set to 1 or 0 (1 for <code>True</code> and <code>0</code> for False). The default value for the <code>overwriteOutput</code> properties is <code>False</code>. <br />
<br />
<code>&gt;&gt;&gt; arcpy<span class="o">.</span>env<span class="o">.</span>overwriteOutput<br />
</code><code><span class="n">False</span></code><br />
<br />
          This protects the user from unintentionally overwriting a file, but is  inconvenient during development when scripts  need to be run more than once for testing. For  complex scripts, it's useful to set overwriteOutput to <code>True</code> placing this statement near the beginning of the script, after <code>arcpy</code> is imported, but before any tool calls are made:</p>
<p><code>&gt;&gt;&gt; arcpy<span class="o">.</span>env<span class="o">.</span>overwriteOutput <span class="o">=</span> <span class="bp">True</span><br />
</code><br />
          Since Python is case-sensitive, be sure to use lower camel case for <code>overwriteOutput</code>.  For environment settings, no error will appear if  the capitalization is incorrect; it will simply not work as expect. In this example, we use the wrong capitalization and no error is reported, but the value of the overwriteOutput property is not changed to False:<br />
<code><br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>env<span class="o">.</span>overwriteoutput <span class="o">=</span> <span class="bp">False</span><br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>env<span class="o">.</span>overwriteOutput<br />
<span class="num">True<br />
</span></code><br />
          Other environment variables may be useful for specific 
          problems.  For example, when you are creating raster data
          sets, you may
          want to set the tile size property which specifies the height and width of  data stored in blocks.  The default size  is 128 by 128 pixels:<br />
<code><br />
&gt;&gt;&gt; arcpy<span class="o">.</span>env<span class="o">.</span>tileSize<br />
</code><code><span class="n">u'128 128'</span></code><br />
<br />
          Type the following line of code to print a complete list of available environment 
          properties:</p>
<p><code>&gt;&gt;&gt; arcpy<span class="o">.</span>ListEnvironments()</code></p>
<hr /><table border="0" width="775">
<tbody>
<tr>
<th align="left" scope="row"><p><span class="head">6.4 Calling 
                  Tools</span> <a name="tools" id="tools"></a></p></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<p>
 
 ArcGIS users know how to run tools from ArcToolbox. As you saw in the Modelbuilder example, ArcToolbox tools, like other <code>arcpy</code> functions, use dot notation with <code>arcpy</code> before the dot. After the dot,  are the tool name and toolbox alias separated by an underscore. All ArcGIS tools with the exception of tools in  the Spatial Analyst Toolbox can be called with the following syntax:</p>
<table width="600" border="0" bgcolor="#ffcccc">
<tbody>
<tr>
<td width="600" scope="row"><code>arcpy<span class="o">.</span>toolName_toolboxAlias(arguments1, 
              argument2, argument3,...)</code></td>
</tr>
</tbody>
</table>
<p>For example, the RasterToASCII tool is in the Conversion Toolbox. The following example takes two arguments, the input raster name ('C:/gispy/data/ch06/getty_rast') and the output ASCII text file name ('C:/gispy/data/ch06/output.txt'). The first line sets the workspace, so we don't need to specify the full path file names:<br />
<code><br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>env<span class="o">.</span>workspace <span class="o">=</span> <span class="s">'C:/gispy/data/ch06/'</span><br />
          &gt;&gt;&gt; inputRaster <span class="o">=</span> <span class="s">'getty_rast'</span><br />
          &gt;&gt;&gt; outputFile <span class="o">=</span> <span class="s">'output.txt'</span><br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>RasterToASCII_conversion(inputRaster, outputFile)<br />
</code><br />
          The toolbox alias needs to be part of the tool call because some tools have the same name. For example, there is a Buffer tool in both the Analysis and Coverage Toolboxes. Table 6.2  lists a few toolbox aliases examples. Search the ArcGIS Resources site with the phrase 'toolbox alias' to see a complete list.  The following example finds a one quarter mile buffer around the polygons in the shapefile. If the workspace is not set and the full file path for the output is not specified, the output is placed in the same directory as the input. The first line sets <code>overwriteOutput</code> to <code>True</code>, in case 'parkBuffer.shp' already exists in 'C:/gispy/data/ch06'.</p>
<p><code>&gt;&gt;&gt; arcpy<span class="o">.</span>env<span class="o">.</span>overwriteOutput <span class="o">=</span> <span class="bp">True</span><br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>Buffer_analysis(<span class="s">'C:/gispy/data/ch06/park.shp'</span>,<span class="s"> 'parkBuffer.shp'</span>,<span class="s"> '0.25 
          miles'</span>)<br />
</code></p>
<p>The name of the input, include the path where it is stored. We call this the <em>full path file name</em>. If a full path file name is specified in a tool call, the full path file location is used instead of the workspace. In the following example, the tool looks for the input file within the <code>arcpy</code> workspace, but the output is placed in a different directory because the full path file name is used for the output:<br />
<code><br />
            &gt;&gt;&gt; arcpy<span class="o">.</span>env<span class="o">.</span>workspace <span class="o">=</span> <span class="s">'C:/gispy/data/ch06/'</span><br />
&gt;&gt;&gt; arcpy<span class="o">.</span>Buffer_analysis(<span class="s">'park.shp'</span>,<span class="s"> 'C:/gispy/scratch/parkBuffer.shp'</span>,<span class="s"> '0.25 
          miles'</span>)<br />
</code><br />
          The Buffer (Analysis) tool requires three arguments: the input data, the output file name, and a buffer distance. There are several more optional arguments. The next section explains  the ArcGIS Resources site tool help information, such as the required/optional parameters for a tool.        </p>
<table width="475" bgcolor="#eeeeee">
<tr>
<td width="467"><strong>Table 6.2 </strong>Toolbox alias examples<br />
<table border="3">
<tr>
<th width="186" scope="row">Toolbox</th>
<th width="117">Alias</th>
</tr>
<tr>
<td>3D Analyst Tools</td>
<td>3d</td>
</tr>
<tr>
<td>Analysis Tools</td>
<td>analysis</td>
</tr>
<tr>
<td>Cartography Tools</td>
<td>cartography</td>
</tr>
<tr>
<td>Conversion Tools</td>
<td>conversion</td>
</tr>
<tr>
<td>Data Interoperability Tools</td>
<td>interop</td>
</tr>
<tr>
<td>Data Management Tools</td>
<td>management</td>
</tr>
<tr>
<td>Spatial Analyst Tools</td>
<td>sa</td>
</tr>
<tr>
<td>Spatial Statistics Tools</td>
<td>stats</td>
</tr>
</table></td>
</tr>
</table>
<br />
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span><strong><span class="head">6.4.1 Using tool help</span><a name="help" id="help"></a></strong></span></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p> As mentioned in Chapter 5, the ArcGIS Resources site hosts a 'Tool reference' page for each tool. Search on the name of the tool and filter by 'Help' and 'Desktop' to find a tool's page.  Tool reference pages begin with an explanation of how the tool works (usually consisting of Summary, Illustration, and Usage sections). The next sections, the 'Syntax' and 'Code sample' sections are guides for Python scripting.</p>
<p> As an example, search for the Buffer (Analysis) tool. The 'Syntax' section begins with a function signature (a code template). Locate the 'Syntax' section for the Buffer tool. At the very beginning of this section,  tool syntax is represented by a <em>code signature</em>. This is a blueprint for how to call the tool via Python. The code signature for the Buffer (Analysis) tool looks like this: </p>
<blockquote><code>Buffer_analysis (in_features, out_feature_class,   buffer_distance_or_field, {line_side}, {line_end_type},   {dissolve_option}, {dissolve_field})</code></blockquote>
<p>It shows the toolName_toolboxAlias followed by a list of arguments. Python scripts need to list the parameters in the same order shown in the code signature. The table uses the term 'parameter' instead of 'argument'. These terms are closely related and sometimes used interchangeably. Strictly speaking, though, a 'parameter' is specified in the tool's signature; Whereas,  an 'argument' is a specific value passed in for a tool call.   
          Optional parameters are surrounded by curly brackets in the code signature. For example, the last four buffer parameters are optional. </p>
<p>The table below the code signature provides more information about these parameters. Figure 6.3 shows the first few rows of the Buffer (Analysis) tool parameter table. The table has three columns 'Parameter', 'Explanation', and 'Data Type'. </p>
<ul>
<li>The 'Parameter' column contains the parameter name as given in the code signature. If the parameter is optional, the word 'optional' appears behind the name. The Python code often uses a string to pass in the parameter value. In a some cases, Python lists are used to supply values for <em>multivalue inputs</em>, for  parameters which accept more than one value. If this is the case, a list appears behind the variable name Parameter column. For example, the Merge (Data Management) tool takes a list of input datasets. The table entry for this parameter is shown in Figure 6.3.<br />
<img src="../images/listParameters.png" width="122" height="76" /><br />
<strong>Figure 6.3 </strong>The [inputs,...] indicates that you can pass in a list of input files for this parameter.<br />
<br />
</li>
<li>The 'Explanation' column describes   the purpose of the parameter, gives a list of acceptable values (where applicable), and indicates the default behavior for optional parameters. <br />
<br />
</li>
<li>The 'Data Type' column lists the Esri data type the tool needs for each parameter. These data types are specialized structures related to ArcGIS data. The data types in this column  do not refer to Python data types.  For example, the <code>in_features</code> and <code>out_feature_class</code> are Feature Layer and Feature Class data types, respectively. 'Feature Layer' and 'Feature Class' refer to Esri data files such as Shapefiles, but we use a Python string  to specify the names of these files. The 'Linear Unit' is a distance, but we use a Python string  to specify that too. In the following example, Python string literals are used to specify a Feature Layer, a Feature Class, and a Linear Unit:<br />
<br />
<code>&gt;&gt;&gt; arcpy<span class="o">.</span>Buffer_analysis(<span class="s">'C:/gispy/data/ch06/park.shp'</span>,<span class="s"> 'parkBuffer.shp'</span>,<span class="s"> '0.25 
            miles'</span>)</code></li>
</ul>
<p><img src="../images/buffer_table.png" alt="a" width="787" height="208" /><br />
<strong>Figure 6.4 </strong>The code signature and top portion of the parameter  table in the 'Syntax' section of the Buffer (Analysis) tool help page.</p>
<p id="GUID-005927AB-ACD6-4FB1-99F3-CA0BC43CF71F">The 'Code Sample' section following the 'Syntax' section provides sample scripts that can be a good starting point for beginners. Sometimes they can be used with only slight adjustments to accommodate the differences in input data. </p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span><strong><span class="head">6.4.2 Copy code snippet</span></strong></span> <a name="snippet" id="snippet"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Another help option is to run a tool using its dialog box and then copy the Python code it creates as follows:</p>
<ol id="GUID-15C12CF9-3326-43EB-B474-46EEA64367FD" purpose="ol">
<li purpose="li" id="GUID-EB40E153-19F4-48C0-BFCC-4F597B0D8E66">Locate the tool in ArcToolbox.</li>
<li purpose="li" id="GUID-9C0158F2-5F04-4B17-9AC2-FB16D45D52B5">Execute the tool using its dialog box.</li>
<li purpose="li" id="GUID-E884FE1F-8D1D-44C3-8803-B6DBF08AE271">Open the 'Results' window (Geoprocessing menu &gt; Results).</li>
<li>In the Results window,   right-click on the tool name in the results listed there and select 'Copy as Python snippet'. </li>
<li>Paste the snippet into PythonWin and examine the syntax.</li>
</ol>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span><strong><span class="head">6.4.3 Linear units</span></strong></span> <a name="linear" id="snippet2"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>A linear unit is an Esri data type for Euclidean distances. When we use a tool's GUI interface, there's a text box and a combo box for typing a number and selecting a unit of measure. In Python, linear units are specified as a string, with a number and a unit of measure, separated by a space (e.g.,<code>'0.25 miles'</code>).  A list of recognized unit of measures is given in Table 6.3. Singular and plural forms of these units are both accepted. Also, linear unit names are not case sensitive. If a distance unit is not specified, the tool uses the units of the input feature, unless the Output Coordinate System environment property has been set.</p>
<p><img src="../images/tool_GUI.png" alt="Buffer tool graphical user interface" /></p>
<table width="572" bgcolor="#eeeeee">
<tr>
<td width="564"><strong>Table 6.3</strong> Linear Unit of Measure Keywords (not case 
              sensitive)
              <table border="1" width="453">
<tbody>
<tr>
<td width="443">centimeters | decimal degrees | decimeters | feet | inches | kilometers | meters | miles | millimeters | nautical miles | points | unknown | yards</td>
</tr>
</tbody>
</table></td>
</tr>
</table>
<br />
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span><strong><span class="head">6.4.4 Python expressions as inputs</span><a name="expressions" id="expressions"></a></strong></span></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Some tools, such as the Calculate Field and Calculate Value (Data Management) tools take parameters which are themselves Python expressions. The expression can be very simple. For example, the following code sets every entry in the <code>'result'</code> field of the 'data1.shp' shapefile to 5:<br />
<code><br />
          &gt;&gt;&gt; data <span class="o">=</span><span class="s"> 'C:/gispy/data/ch06/data1.shp'</span><br />
          &gt;&gt;&gt; fieldName <span class="o">=</span> <span class="s">'result'</span><br />
          &gt;&gt;&gt; expression <span class="o">=</span> <span class="mi">5</span><br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>CalculateField_management(data, fieldName, expression, <span class="s">'PYTHON'</span>)<br />
</code></p>
<p>The last parameter in this Calculate Field call indicates the type of the expression (The alternatives are <code>'PYTHON'</code>, <code>'PYTHON_9.3'</code>, or <code>'VB'</code> and <code>'VB'</code> is the default). The Calculate Field expressions can also use the values in other fields and combine them with mathematical operators. In these expressions, field names need to be surrounded by  exclamation points. The following code calculates the <code>'result'</code> field again using an expression which multiplies the value in the <code>'measure'</code> field by two and subtracts the value in the <code>'coverage'</code> field:<br />
<code><br />
          &gt;&gt;&gt; expression <span class="o">=</span> <span class="s">'2*!measure! - !coverage!'</span><br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>CalculateField_management(data, fieldName, expression, <span class="s">'PYTHON'</span>)<br />
</code></p>
<p>Note that the expression must be compatible with the field type. The 'result' field is a 'float' type field, so mathematical values can be used.  Feature class field calculation expressions can also use the 'shape' field (Only feature classes have a 'shape' field). This shape field contains a set of <code>arcpy</code> <code>Geometry</code> objects (listed in Figure 6.2 under 'Other objects'). <code>arcpy</code> <code>Geometry</code> objects have properties such as 'area' and 'length'. These properties  can be used with dot notation on the 'shape' field in the expressions. The following code uses the 'area' geometry property to calculate a field named <code>'PolyArea'</code> for the 'special_regions.shp' polygon shapefile:<br />
<code><br />
          &gt;&gt;&gt; data<span class="o"> =</span> <span class="s">'C:/gispy/data/ch06/special_regions.shp'</span><br />
          &gt;&gt;&gt; fieldName <span class="o">=</span> <span class="s">'PolyArea'</span><br />
          &gt;&gt;&gt; expression <span class="o">=</span> <span class="s">'!shape.area!'</span><br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>CalculateField_management(data, fieldName, expression, <span class="s">'PYTHON'</span>)<br />
</code></p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span><strong><span class="head">6.4.5 Multivalue inputs</span></strong></span> <a name="multivalue" id="multivalue"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p><span>Some tools accept multiple values as input for a single parameter. </span>They are usually tools that combine the input in some manner (e.g., merge or intersect the data). The tool help table shows parameters which accept multiple values with a list behind their name in the 'Parameter' column (see Figure 6.3). A Python list may be the simplest way to input these values, especially if you already have the input in a list. However, there are two other ways to provide input to these tools. They also accept  a semicolon delimited string or as a <code>ValueTable</code> object. In the following code  a Python list is used to specify the three input files to merge:<br />
</p>
<p><code>&gt;&gt;&gt; inputFiles <span class="o">=</span>          [<span class="s">'park.shp'</span>, <span class="s">'special_regions.shp'</span>, <span class="s">'workzones.shp'</span>]<br />
  &gt;&gt;&gt; arcpy<span class="o">.</span>Merge_management(inputFiles, <span class="s">'mergedData.shp'</span>)<br />
</code></p>
<p>In some cases, you may have values in a <em>multivalue string</em>, a string where the values are separated (or delimited) by semicolons. Multivalue parameters can be specified in this way too. Here the three inputs are given in a multivalue string:<br />
<code><br />
          &gt;&gt;&gt; inputFiles <span class="o">=</span> <span class="s">'park.shp;special_regions.shp;workzones.shp'</span><br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>Merge_management(inputFiles, <span class="s">'mergedData2.shp'</span>)<br />
</code><br />
          A ValueTable is an <code>arcpy</code> object for storing rows and columns of information. To use it, you create a <code>ValueTable</code> object using the <code>arcpy</code> <code>ValueTable</code> function. It returns a <code>ValueTable</code> object, which has methods and properties. One of the ValueTable methods is 'addRow'. This example shows how to use the value table to merge three files:<br />
<code><br />
          &gt;&gt;&gt; vt <span class="o">=</span> arcpy<span class="o">.</span>ValueTable( )<br />
          &gt;&gt;&gt; vt<span class="o">.</span>addRow(<span class="s">'park.shp'</span>)<br />
          &gt;&gt;&gt; vt<span class="o">.</span>addRow(<span class="s">'special_regions.shp'</span>)<br />
          &gt;&gt;&gt; vt<span class="o">.</span>addRow(<span class="s">'workzones.shp'</span>)<br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>Merge_management(vt, <span class="s">'mergedData3.shp'</span>)<br />
</code></p>
<p>The merge example is a one-dimensional example.That is, it only has one item in each row. The true advantage of the <code>ValueTable</code> object is for dealing with higher dimensions of data. The <code>ValueTable</code> approach  provides a convenient way to organize data when the input is a list of lists. As an example, the 'in_features' for the Intersect tool is a list of input file names. Alternatively, it can be a list of file names and priority rankings. For example, </p>
<p><code>&gt;&gt;&gt; inputFiles <span class="o">=</span> [ [<span class="s">'park.shp'</span>, 2], [<span class="s">'special_regions.shp'</span>, 2], [<span class="s">'workzones.shp'</span>,1] ]<br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>Intersect_analysis(inputFiles, <span class="s">'intersectData.shp'</span>)<br />
</code></p>
<p>Instead of using a list of lists, you could use a ValueTable for the intersection example as follows:<br />
<code><br />
          &gt;&gt;&gt; vt <span class="o">=</span> arcpy<span class="o">.</span>ValueTable( )<br />
          &gt;&gt;&gt; vt<span class="o">.</span>addRow(<span class="s">'park.shp 2'</span>)<br />
          &gt;&gt;&gt; vt<span class="o">.</span>addRow(<span class="s">'special_regions.shp 2'</span>)<br />
          &gt;&gt;&gt; vt<span class="o">.</span>addRow(<span class="s">'workzones.shp 1'</span>)<br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>Intersect_analysis(vt, <span class="s">'intersectData.shp'</span>)<br />
</code></p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span><strong><span class="head">6.4.6 Optional parameters</span></strong></span> <a name="optional" id="optional"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Tool parameters must be used in the order they are listed in the tool code signature. The required tool parameters always come at the beginning of the list. Optional parameters can be omitted or a number sign (<code>'#'</code>) can be used as a place holder. In either of these cases, the default value is used for that parameter. For example, the Polygon Neighbors tool, which returns a table of statistics about neighboring polygons has two required parameters and six optional parameters, as shown in the code signature: </p>
<p><code>        PolygonNeighbors_analysis (in_features, out_table, {in_fields},   {area_overlap}, {both_sides}, {cluster_tolerance}, {out_linear_units},   {out_area_units})</code></p>
<p>In the following example, Polygon Neighbors is called two different ways, but these lines of code are two equivalent ways of using the default values for the six optional parameters in the Polygon Neighbors (Analysis) tool:<br />
<code><br />
          &gt;&gt;&gt; <span class="n">arcpy</span><span class="o">.</span>env<span class="o">.</span>workspace  <span class="o">=</span> <span class="s">'C:/gispy/data/ch06/'</span><br />
          &gt;&gt;&gt; <span class="n">arcpy</span><span class="o">.</span>env<span class="o">.</span>overwriteOutput <span class="o">=</span> <span class="bp">True</span><br />
          &gt;&gt;&gt; <span class="n">arcpy</span><span class="o">.</span>PolygonNeighbors_analysis(<span class="s">'park.shp'</span>,<span class="s"> 'PN.dbf'</span>) <span class="comment"># Use default values for the last 6 args.</span><br />
          &gt;&gt;&gt; <span class="n">arcpy</span><span class="o">.</span>PolygonNeighbors_analysis(<span class="s">'park.shp'</span>,<span class="s"> 'PN.dbf'</span> ,<span class="comment"> <span class="s">'#'</span></span>, <span class="comment"><span class="str">'#','#', '#'</span>,<span class="str">'#'</span>, <span class="str">'#'</span></span>) <span class="comment"># Use default values for last 6 args.</span><br />
</code></p>
<p>If you want to set some but not all optional parameters,  you must use  number signs as place holders for interior optional arguments. In this example no place holder is needed, because we're using the first optional argument and we can simply omit the last five parameters:<br />
<code><br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>PolygonNeighbors_analysis(<span class="s">'park.shp'</span>,<span class="s"> 'PN.dbf'</span>, <span class="s">'COVER'</span> )<span class="comment"> # Use default values for the last 5 parameters</span>.<br />
</code></p>
<p>But in the following example, the place holder is needed, because we want to set the 'area_overlap' parameter, but use the default value for the 'in_fields' parameter. 'in_fields' precedes 'area_overlap' in the parameters list, so if we failed to use  '#' as a place holder, the tool would assume 'AREA_OVERLAP' was a field name<span class="comment">.</span><br />
<code><br />
          &gt;&gt;&gt; <span class="comment"># Use default value for in_fields, but set the value for area_overlap</span>.<br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>PolygonNeighbors_analysis(<span class="s">'park.shp'</span>,<span class="s"> 'PN.dbf'</span>, <span class="s">'#'</span>, <span class="s">'AREA_OVERLAP'</span>)<br />
</code></p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span><strong><span class="head">6.4.7 Return values (...using the <code>Result</code> object)</span><a name="return" id="return"></a></strong></span></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>          When a geoprocessing tool is run, the tool returns an <code>arcpy</code> <code>Result</code> object. The <code>Result</code> object contains information about the tool run, such as input values for the parameters and whether or not it was successful. It also contains a list of one or more output values. The returned object can be stored in a variable by using an assignment statement:<br />
</p>
<table width="600" border="0" bgcolor="#ffcccc">
<tbody>
<tr>
<td width="600" scope="row"><code>variable = arcpy<span class="o">.</span>toolName_toolboxAlias(arguments1, 
              argument2, argument3,...)</code></td>
</tr>
</tbody>
</table>
<p>In the following example, the <code>Result</code> object returned by the Polygon Neighbors tool is stored in a variable named 'pnResult':<br />
<code><br />
          &gt;&gt;&gt; pnResult <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span>PolygonNeighbors_analysis(<span class="s">'park.shp'</span>,<span class="s"> 'PN.dbf'</span>)<br />
</code></p>
<p>The built-in <code>type</code> function shows that <code>pnResult</code> is an <code>arcpy</code> <code>Result</code> object:<br />
<code><br />
          &gt;&gt;&gt; type(pnResult)<br />
<span class="n">&lt;class 'arcpy.arcobjects.arcobjects.Result'&gt;</span><br />
</code></p>
<p>When printed, the <code>Result</code> object prints the first item in the tool output list. In the case of the Polygon Neighbors tool, the first output is the full path file name for the output:<br />
<code><br />
          &gt;&gt;&gt; <span class="key">print</span> pnResult<br />
<span class="n">C:/gispy/data/ch06\PN.dbf</span><br />
</code></p>
<p><code>Result</code> objects have  a set of methods and properties (See Figure 6.5). Use dot notation with methods and properties to access the information a <code>Result</code> object contains.  The <code>outputCount</code> property and the <code>getOutput</code> method provide access to the output information. The following statement shows that the Polygon Neighbor returned one output:<br />
<code><br />
          &gt;&gt;&gt; pnResult<span class="o">.</span>outputCount<br />
<span class="num">1</span><br />
</code><br />
          To get the output, use the <code>getOutput</code> method with an index. It is zero-based indexing, so to get the first output, use index zero. The following statement gets the first output (and only) output from the <code>pnResult</code> object:<br />
<code><br />
          &gt;&gt;&gt; pnResult<span class="o">.</span>getOutput(<span class="mi">0</span>)<br />
<span class="n">u'C:/gispy/data/ch06\PN.dbf'</span><br />
</code></p>
<p>The output depends on the nature of the tool. The main purpose of some tools, such as Buffer and Polygon Neighbors, is to create an output file. While  the main purpose of other tools, such as Get Count and Average Nearest Neighbors is to compute numeric values. In the first case, there is one output value, the name of the output file. <br />
<br />
<code>&gt;&gt;&gt; res <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span>Buffer_analysis(<span class="s">'park.shp'</span>, <span class="s">'outBuff.shp'</span>, <span class="s">'4 miles'</span>)<br />
           &gt;&gt;&gt; <span class="k">print</span> res<br />
<span class="n">C:/gispy/data/ch06\outBuff.shp</span><br />
</code><br />
          Whereas, in the second case, the tool call returns the calculated results. <br />
<br />
<code>&gt;&gt;&gt; resGC <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span>GetCount_management(<span class="s">'park.shp'</span>)<br />
           &gt;&gt;&gt; <span class="k">print</span> resGC<br />
<span class="num">426</span><br />
</code></p>
<p>Though the print statement is convenient for printing the first result, the <code>getOutput</code> function must be used to retrieve further results or to use numeric results in calculations. The following code throws an exception because a <code>Result</code> object cannot be added to a number:</p>
<p><code>&gt;&gt;&gt; resGC <span class="o">+</span><span class="mi"> 25</span><br />
<span class="err">Traceback (most recent call last):<br />
          File &quot;&lt;interactive input&gt;&quot;, line 1, in &lt;module&gt;<br />
          TypeError: unsupported operand type(s) for +: 'Result' and 'int'</span><br />
</code></p>
<p>          Instead, the value must be retrieved from the <code>Result</code> object using the <code>getOutput</code> method:<br />
<br />
<code>&gt;&gt;&gt; count <span class="o">=</span> resGC<span><span class="o">.</span></span>getOutput(<span class="mi">0</span>)<br />
&gt;&gt;&gt; count<br />
<span class="num">u'426'<br />
</span></code></p>
<p>But  <code>getOutput</code> returns a string, so this can't be used directly:<br />
<code><br />
  &gt;&gt;&gt; count <span class="o">+ </span><span class="mi">25</span><br />
<span class="err">Traceback (most recent call last):<br />
          File &quot;&lt;interactive input&gt;&quot;, line 1, in &lt;module&gt;<br />
        TypeError: coercing to Unicode: need string or buffer, int found<br />
</span></code><br />
          Instead it needs to be cast to an integer:<br />
<code><br />
&gt;&gt;&gt; int(count) <span class="o">+</span><span class="mi"> 25</span><br />
<span class="num">451</span><br />
</code><br />
          The <code>getOutput</code> method also needs to be used when a tool returns more than one result. For example,  the Average Nearest Neighbor (Spatial Statistics)
          <leo_highlight style="background-color: transparent; background-image: none; 
background-repeat: repeat; background-attachment: scroll; 
background-position: 0% 0%; -moz-background-size: auto auto; cursor: 
pointer; display: inline; -moz-background-clip: -moz-initial; 
-moz-background-origin: -moz-initial; -moz-background-inline-policy: 
-moz-initial;" id="leoHighlights_Underline_3" onclick="leoHighlightsHandleClick('leoHighlights_Underline_28')" onmouseover="leoHighlightsHandleMouseOver('leoHighlights_Underline_28')" onmouseout="leoHighlightsHandleMouseOut('leoHighlights_Underline_28')" leohighlights_keywords="tool" leohighlights_url_top="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsTop.jsp?keywords%3Dtool%26domain%3D" leohighlights_url_bottom="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsBottom.jsp?keywords%3Dtool%26domain%3D" leohighlights_underline="false">tool</leo_highlight>
          computes a nearest neighbor ratio and a z-score 
          which tell us 
          something about the clustering of our points. Suppose we have points representing acts of kindness, we 
          might be interested in whether the points exhibit 
          clustering or if they 
        resemble a random distribution. Example 6.1 calls the Average Nearest Neighbor tool and prints the results using the <code>Result</code> object <code>getOutput</code> method. According to the results, the points exhibit clustering.</p>
<table border="0" height="41" width="600">
<tbody>
<tr>
<td width="773" bgcolor="#ffffcc" scope="row"><strong>Example 6.1</strong><br />
<code>
<div class="highlight">
<pre><span class="c"># avgNearNeighbor.py </span>
<span class="c">#Purpose: Analyze crime data to determine if spatial patterns are statistically significant </span>
<span class="kn">import</span> <span class="nn">arcpy</span><br />

<br /><span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/data/ch06&#39;</span>
<br />
<span class="n">annResult</span> <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span><span class="n">AverageNearestNeighbor_stats</span><span class="p">(</span><span class="s">&#39;points.shp&#39;</span><span class="p">,</span> <span class="s">&#39;Euclidean Distance&#39;</span><span class="p">)</span>
<br />

<span class="k">print</span> <span class="s">&#39;Average Nearest Neighbor Output&#39;</span>
<span class="k">print</span> <span class="s">&#39;Nearest neighbor ratio: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">)</span> 
<span class="k">print</span> <span class="s">&#39;z-score: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">)</span>
<span class="k">print</span> <span class="s">&#39;p-value: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">)</span> 
<span class="k">print</span> <span class="s">&#39;Expected Mean Distance: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">)</span>
<span class="k">print</span> <span class="s">&#39;Observed Mean Distance: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="p">)</span>

<span class="o"></span><span class="mf"></span></pre>
</div></code>
<p> Printed output:                </p>
<p>&gt;&gt;&gt; <code><span class="n">Average Nearest Neighbor Output<br />
                  Nearest neighbor ratio: 0.853047<br />
                  z-score: -5.802495<br />
                  p-value: 0<br />
                  Expected Mean Distance: 753.825013<br />
              Observed Mean Distance: 643.048013</span></code></p></td>
</tr>
</tbody>
</table>
<p><img src="../images/resultObject.png" alt="resultObject" /><br />
<strong>Figure 6.5</strong>: <code>Result</code> object methods and properties.<br />
</p>
<hr /> <table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">6.4.8 Calling  Spatial Analyst tools</span><a name="sa" id="sa"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p><br />
          The syntax for calling Spatial Analyst tools is slightly different from other tools.  Double dot notation must be used instead of an underscore to specify the toolbox.<br />
</p>
<table width="600" border="0" bgcolor="#ffcccc">
<tbody>
<tr>
<td width="791" scope="row"><code>arcpy<span class="o">.</span>toolboxAlias<span class="o">.</span>toolName(arguments1, 
              argument2, argument3,...)</code></td>
</tr>
</tbody>
</table>
<p>There's another difference in the way Spatial Analyst  tools work. Instead of returning a <code>Result</code> object,  Spatial Analyst tools return <code>arcpy</code> <code>Raster</code> objects. This <code>Raster</code> object temporarily holds the output raster in memory. Unless explicitly saved, it will be deleted when the IDE session is closed. To store the raster permanently, we have to save the raster in a separate step. The following code assigns the environment settings, checks out the Spatial Analyst extension and then calls the Square Root tool on a raster named <code>'getty_rast'</code>. The <code>Raster</code> object being returned is assigned to a variable named <code>outputRast</code>.<br />
<code><br />
          &gt;&gt;&gt; <span class="key">import</span> arcpy<br />
          &gt;&gt;&gt; <span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span>workspace<span class="o"> =</span> <span class="s">'C:/gispy/data/ch06/'</span><br />
          &gt;&gt;&gt;<span class="n"> arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span><br />
          &gt;&gt;&gt; inRast <span class="o">=</span> <span class="s">'getty_rast'</span><br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>CheckOutExtension(<span class="s">'Spatial'</span>)<br />
</code><code><span class="n">u'CheckedOut'</span></code><br />
          &gt;&gt;&gt; outputRast <span class="o">=</span> arcpy<span class="o">.</span>sa<span class="o">.</span>SquareRoot(inRast)<br />
<br />
          The next step is to save the output raster. The  <code>Raster</code> objects have a <code>save</code> method which takes on optional parameter, a name.  When the Square Root tool was run, it automatically generated a name. If no parameter is used, the raster is saved by that name. The following line of code saves the output raster with the default name:</p>
<p><code>&gt;&gt;&gt; outputRast<span class="o">.</span>save( )<br />
          &gt;&gt;&gt; outputRast<span class="n"><br />
          C:\gispy\data\ch06\squar_ras</span><br />
</code></p>
<p>In this case, the automatically generated name is <code>'squar_ras'</code>. The following line of code saves the raster and names it <code>'gettySqRoot'</code>:<br />
<code><br />
          &gt;&gt;&gt; outputRast<span class="o">.</span>save(<span class="s">'gettySqRoot'</span>)<br />
</code></p>
<p>Raster names have some constraints. When you don't specify an extension, the Esri GRID raster format is used. The names of GRID rasters must be no longer than 13 characters, though the error says something more generic than that, as shown here:<br />
<code><br />
          &gt;&gt;&gt; outputRast<span class="o">.</span>save(<span class="s">'gettySquareRoot'</span>)<br />
<span class="err">Traceback (most recent call last):<br />
          File &quot;&lt;interactive input&gt;&quot;, line 1, in &lt;module&gt;<br />
          RuntimeError: ERROR 010240: Could not save raster dataset to C:\gispy\data\ch06\gettySquareRoot with output format GRID.</span><br />
          &gt;&gt;&gt; len(<span class="s">'gettySquareRoot'</span>)<br />
<span class="num">15</span><br />
</code></p>
<p>
Other toolboxes automatically save the output to a long-term storage location such as a shapefile on the computer hard disk drive when the tool is called. The Spatial Analyst tools keep the raster data in-memory (a sort of short term memory storage which is fast to access). The raster <code>save</code> method commits the raster to long-term memory.  This extra step of saving the raster is designed for optimization. Raster calculations might involve a chain of sequential calls that create intermediate rasters. If only the final output is needed (and not the intermediate rasters), the script can opt to only save the last one. This can save significantly on processing time for large rasters.<br />
</p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span>
<span class="head">6.4.9 Importing spatial analyst</span>
<a name="importsa" id="importsa"></a></span></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>
            The ArcGIS Resources Spatial Analyst tool reference pages sometimes use a variation of the import statement in the code samples as in the following code:<br />
<br />
<code>&gt;&gt;&gt; <span class="key">from</span> arcpy<span class="o">.</span>sa <span class="key">import</span> *<br />
</code><br />
          This statement creates a direct reference to the Spatial Analyst tool; It provides a shortcut so Spatial Analyst tools can be called without preprending <code>arcpy<span class="o">.</span>sa</code>. For example, it allows you to  replace this statement:<br />
<code><br />
            &gt;&gt;&gt; outputRast <span class="o">=</span> arcpy<span class="o">.</span>sa<span class="o">.</span>SquareRoot(inRast)<br />
</code><br />
            with this statement:<br />
<br />
<code>&gt;&gt;&gt; outputRast <span class="o">=</span> SquareRoot(inRast)<br />
</code><br />

            This type of import saves some typing, but it can lead to confusion. For example, the Spatial Analyst has an <code>Int</code> tool which converts each cell raster value to  an integer; At the same time, Python has a built-in integer function named <code>int</code>. Using the special import shortcut could lead to mystifying code such as the following:<br />
<code><br />
            &gt;&gt;&gt; outputRast <span class="o">=</span> Int(inRast)<br />
            &gt;&gt;&gt; outputNum <span class="o">=</span> int(myNum)<br />
</code><br />

            These statements look almost identical, but one takes a raster and returns a <code>Raster</code> object; The other takes a number and returns a number. Using the standard import and full tool call (e.g., <code>arcpy<span class="o">.</span>sa<span class="o">.</span>Int</code>) avoids ambiguities.        </p>
<hr /> <table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">6.4.10 Raster Calculator</span>

<a name="rastCalc" id="importsa2"></a> </th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<br />
            Python can call 
          any tool in ArcToolbox with the exception of the Spatial Analyst Raster Calculator tool. The Raster Calculator performs what is know as 'map algebra' --is performs mathematical operations on each cell of a raster grid. For example, multiplying a raster by two using the Raster Calculator doubles the value stored in each cell. The Raster Calculator tool is not designed to be called from a stand-alone script. Instead, the script can call tools from the Spatial Analyst Math Toolset. For example, multiplying the cells in 'getty_rast' by 5 and subtracting 2 from each cell, in Raster Calculator would look like this: 5 * 'getty_rast' - 2. The values in 'getty_rast' are 1 and 2, so the resulting values are 3 and 8. To do this in a Python script, you could use two tool calls. Output from the first statement would provide input for the second as shown in Example 6.2. Since the initial values are 1 and 2, outRast1 has the values 5 and 10. These values are used in the Minus tool call, so the  values in outRast2 are 3 and 8. The second to last line of code saves this raster. The last two lines of code delete the <code>Raster</code> objects using the <code>del</code> keyword. This avoids locking issues.<br />

<table border="0" height="267" width="600">
<tbody>
<tr>
<td width="773" height="263" bgcolor="#ffffcc" scope="row"><strong>Example 6.2</strong><br />
<code>
<div class="highlight">
<pre><span class="c"># computeRastEquation.py </span>
<span class="c"># Purpose: Calculate 5 * &#39;getty_rast&#39; - 2</span>

<span class="kn">import</span> <span class="nn">arcpy</span>

<span class="n"><br />arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/data/ch06/rastSmall.gdb&#39;</span><br />arcpy<span class="o">.</span>CheckOutExtension(<span class="s">'Spatial'</span>)<br /><span class="n"><br />outRast1</span> <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span><span class="n">sa</span><span class="o">.</span><span class="n">Times</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="s">&#39;dataRast&#39;</span><span class="p">)</span>
<span class="n">outRast2</span> <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span><span class="n">sa</span><span class="o">.</span><span class="n">Minus</span><span class="p">(</span><span class="n">outRast1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">outRast2</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="s">&#39;equationRast&#39;</span> <span class="p">)</span><br /><span class="kn">del</span> outRast1<br /><span class="kn">del</span> outRast2

</pre>
</div> </code> </td>
</tr>
</tbody>
</table>
<p>Another way to handle raster calculations is to create  <code>arcpy</code> <code>Raster</code> objects using the <code>arcpy</code> <code>Raster</code> method and then construct mathematical expressions using  mathematical operators in combination with the <code>Raster</code> objects. The following code is equivalent to the code used in Example 6.2, producing values in <code>equationRast2</code> identical to those in <code>equationRast</code>: </p>
<code><div class="highlight">
<pre>
<span class="n">&gt;&gt;&gt; rastObj</span> <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span><span class="n">Raster</span><span class="p">(</span><span class="s">&#39;dataRast&#39;</span><span class="p">)</span>
<span class="n">&gt;&gt;&gt; outRast</span> <span class="o">=</span> <span class="mi">5</span><span class="o">*</span><span class="n">rastObj</span> <span class="o">-</span> <span class="mi">2</span>
<span class="n">&gt;&gt;&gt; outRast</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="s">&#39;equationRast2&#39;</span> <span class="p">)</span><br />&gt;&gt;&gt; <span class="kn">del</span> outRast</pre>
</div></code>
<p>One advantage of this approach is that pairwise mathematical operators (<code>*</code>, <code>/</code>, <code>+</code>, <code>-</code>, etc.) can be used more than once, so that more than one pair of items can be multiplied in one statement, whereas, the Times (Spatial Analyst) tool can only handle pairs. The following code uses multiple <code>Raster</code> objects and numbers and mathematical operators in a single expression and saves the results in the <code>'output'</code> raster:</p>
<div class="highlight">
<pre><code>
<span class="n">&gt;&gt;&gt; r1</span> <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span><span class="n">Raster</span><span class="p">(</span><span class="s">&#39;out1&#39;</span><span class="p">)</span>
<span class="n">&gt;&gt;&gt; r2</span> <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span><span class="n">Raster</span><span class="p">(</span><span class="s">&#39;out2&#39;</span> <span class="p">)</span>
<span class="n">&gt;&gt;&gt; r3</span> <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span><span class="n">Raster</span><span class="p">(</span><span class="s">&#39;out3&#39;</span> <span class="p">)</span>
<span class="n">&gt;&gt;&gt; outRast</span> <span class="o">=</span> <span class="p">(</span><span class="mi">5</span><span class="o">*</span><span class="n">r1</span><span class="o">*</span><span class="n">r2</span><span class="o">*</span><span class="n">r3</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span>
<span class="n">&gt;&gt;&gt; outRast</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="s">&#39;output&#39;</span> <span class="p">)<br /></span>&gt;&gt;&gt; <span class="kn">del</span> outRast<br /></code></pre>
</div>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span><strong><span class="head">6.4.11 Temporary feature layers</span><a name="tempLayers" id="custom2"></a></strong></span></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Unlike the Spatial Analyst raster computations, most   ArcGIS tools that compute vector data output create a long term file (such as a shapefile or geodatabase feature class) without calling a <code>save</code> function. Some exceptions can be found in the Data Management toolbox.  Some of these tools create <em>temporary feature layer</em>s output, a collection of features in temporary memory that will not persist after the IDE session ends.  For example, the Make XY Event Layer (Data Management)  tool creates a temporary feature layer. This tool takes a text file containing header fields and rows of attribute values and creates a new point feature layer based on the x and y coordinate fields in the file. The following code makes a temporary layer file (<code>'tmpLayer'</code>) from the  'xyData.txt' file which contains 'x', 'y', and 'butterfly' fields. <br />
</p>
<p><code>&gt;&gt;&gt; <span class="n">arcpy</span><span class="o">.</span><span class="n">MakeXYEventLayer_management</span><span class="p">(</span><span class="s">&#39;C:/gispy/data/ch06/xyData.txt&#39;</span><span class="p">,</span><span class="s">&#39;x&#39;</span><span class="p">,</span><span class="s">&#39;y&#39;</span><span class="p">,</span><span class="s">&#39;tmpLayer&#39;</span><span class="p">)</span><br />
</code></p>
<p> You can perform additional tool calls on the temporary layer within the same script (or within the same Interactive Window session). The following code gets the record count:</p>
<p><code>&gt;&gt;&gt;<span class="n"> countRes</span> <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span><span class="n">GetCount_management</span><span class="p">(</span><span class="s">&#39;tmpLayer&#39;</span><span class="p">)</span><br />
  &gt;&gt;&gt;<span class="n"> countRes</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><br />
<span class="n">u'8'</span><br />
</code></p>
<p>No file named  <code>'tempLayer'</code> ever appears in the 'C:/gispy/data/ch06' directory. To save this file in long-term memory, you'll need to call another <code>arcpy</code> tool. There are a number of Data Management tools that can be used for this. The following code uses the 'CopyFeatures' tool to save the layer to a shapefile:<br />
</p>
<p><code>&gt;&gt;&gt; <span class="n">arcpy</span><span class="o">.</span><span class="n">CopyFeatures_management</span><span class="p">(</span><span class="s">&#39;tmpLayer&#39;</span><span class="p">,</span> <span class="s">&#39;butterflies.shp&#39;</span><span class="p">)</span><br />
<span class="n">&lt;Result 'C:/gispy/data/ch06\\butterflies.shp'&gt;</span><br />
</code></p>
<p>The output from the Make XY Event Layer (Data Management)  tool is used as input for the 'Copy Features' tool and a 'butterflies.shp' file is saved in the 'C:/gispy/data/ch06' directory. When the current  IDE session ends (for example, when PythonWin is closed), this file will persist, but <code>'tmpLayer'</code> will be destroyed.</p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">6.4.12 Using variables for multiple tool calls</span><a name="multipleTool" id="multipleTool"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Calling more than one tool in a script often involves using the output from one tool as the input for the next tool. In this case, it becomes useful to  employ variables to store tool arguments so that string literals are not repeated. The temporary feature layer example in the previous section repeats the string literal <code>'tmpLayer'</code> three times. Using a variable name would make it easier to change this name if needed (since it would only need to be changed in one place). Additionally, output file names can easily be created based on input file names. For example, the following code slices the file extension and appends 'Buffer.shp' to the name:<br />
</p>
<p><code>
          &gt;&gt;&gt; fireDamage <span class="o">=</span> <span class="s">&#39;special_regions.shp&#39;<br />
</span><span class="n">&gt;&gt;&gt; fireBuffer</span> <span class="o">=</span> <span class="n">fireDamage</span><span class="p">[:</span><span class="o">-</span><span class="mi">4</span><span class="p">]</span> <span class="o">+</span> <span class="s">&#39;Buffer.shp&#39;</span> <br />
<span class="n">&gt;&gt;&gt; fireBuffer</span> <br />
<span class="n">'special_regionsBuffer.shp'</span><br />
</code></p>
        In Example 6.3, 'special_regions.shp' represents regions damaged by a 
          fire. To find the portion of the park 
          (in 'park.shp') which lies 
          within 1 mile of the fire damage, 
          we buffer the fire 
          damaged regions and then clip the park polygons on the
        buffer zone. The output from the Buffer tool is input for the Clip tool.
<table border="0" height="812" width="600">
<tbody>
<tr>
<td width="447" height="808" bgcolor="#ffffcc" scope="row"><strong>Example 6.3</strong> <br />
<code>
<div class="highlight">
<pre><span class="c"># buffer_clip.py (hard-coded version)</span>
<span class="c"># Purpose: Buffer a zone and use it to clip another file</span>
<span class="c"># Input: No arguments needed.</span>

<span class="kn">import</span> <span class="nn">arcpy</span><span class="o"></span><span class="nn"></span>

<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/data/ch06&#39;</span>
<span class="n">outDir</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/scratch/&#39;</span>

<span class="c"># Set buffer params</span>
<span class="n">fireDamage</span> <span class="o">=</span> <span class="s">&#39;special_regions.shp&#39;</span>
<span class="n">fireBuffer</span> <span class="o">=</span>  <span class="n">outDir</span> <span class="o">+</span> <span class="n">fireDamage</span><span class="p">[:</span><span class="o">-</span><span class="mi">4</span><span class="p">]</span> <span class="o">+</span> <span class="s">&#39;Buffer.shp&#39;</span>
<span class="n">bufferDist</span> <span class="o">=</span> <span class="s">&#39;1 mile&#39;</span>

<span class="c"># Set clip params</span>
<span class="n">park</span> <span class="o">=</span> <span class="s">&#39;park.shp&#39;</span>
<span class="n">clipOutput</span> <span class="o">=</span> <span class="n">outDir</span> <span class="o">+</span> <span class="n">park</span><span class="p">[:</span><span class="o">-</span><span class="mi">4</span><span class="p">]</span> <span class="o">+</span> <span class="s">&#39;DamageBuffer.shp&#39;</span>

<span class="n">arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="n">fireDamage</span><span class="p">,</span> <span class="n">fireBuffer</span><span class="p">,</span><span class="n">bufferDist</span><span class="p">)</span>
<span class="k">print</span> <span class="s">&#39;{0} created.&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">fireBuffer</span><span class="p">)</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">Clip_analysis</span><span class="p">(</span><span class="n">park</span><span class="p">,</span> <span class="n">fireBuffer</span><span class="p">,</span> <span class="n">clipOutput</span> <span class="p">)</span>
<span class="k">print</span> <span class="s">&#39;{0} created.&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">clipOutput</span><span class="p">)</span>
  </pre></div></code>
<p><img src="../images/buffer_clip_input.jpg" alt="initialview" /></p>
<p>Figure 6.6a: Initial view of data in Example 6.3<br />
                  black: park = 'park.shp'<br />
                  gray: fireDamage = 'special_regions.shp'</p>
<p><img src="../images/buffer_clip_intermediate.jpg" alt="2" /><br />
                  Figure 6.6b: Intermediate view of data in Example 6.3<br />
                  black: park = 'park.shp' <br />
                  green: fireBuffer = 'special_regionsBuffer.shp'</p>
<p><img src="../images/buffer_clip_output.jpg" alt="3" /><br />
                  Figure 6.6c: Final view of data in Example 6.3<br />
                  black: park = 'park.shp' <br />
                  gray: fireDamage = 'special_regions.shp'<br />
                  light gray: clipOutput = 'parkDamageBuffer.shp'<br />
                  Park within 1 mi. of fire <br />
</p></td>
</tr>
</tbody>
</table>
<span><br />
</span>
<p>Example 6.4 finds the lengths of the fire damage boundaries in two steps. First a field is added to store this information. Second, shape lengths are calculated in the new field. Both of these tools use the same input dataset and  field name, and these variable values are set  before the tool calls. The other two Calculate Field parameters are set as string literals and  only used once in this example. The length is calculated using the <code>'!shape.length!'</code> expression and <code>'PYTHON'</code> indicates that it is a Python type expression. </p>
<table border="0" height="41" width="600">
<tbody>
<tr>
<td width="773" bgcolor="#ffffcc" scope="row"><p><strong>Example 6.4</strong><br />
</p><code>
<div class="highlight">
<pre><span class="c"># addLengthField.py</span>
<span class="c"># Purpose: Add a field containing polygon lengths to the shapefile.</span>
<span class="c"># Usage: No arguments needed.</span>
<span class="kn">import</span> <span class="nn">arcpy</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/data/ch06&#39;</span>

<span class="n">inputFile</span> <span class="o">=</span> <span class="s">&#39;special_regions.shp&#39;</span>
<span class="n">fieldName</span> <span class="o">=</span> <span class="s">&#39;Length&#39;</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">AddField_management</span><span class="p">(</span> <span class="n">inputFile</span><span class="p">,</span> <span class="n">fieldName</span><span class="p">,</span> <span class="s">&#39;FLOAT&#39;</span> <span class="p">)</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">CalculateField_management</span><span class="p">(</span> <span class="n">inputFile</span><span class="p">,</span> <span class="n">fieldName</span><span class="p">,</span> <span class="s">&#39;!shape.length!&#39;</span><span class="p">,</span> <span class="s">&#39;PYTHON&#39;</span> <span class="p">)</span>
</pre>
</div> </code></td>
</tr>
</tbody>
</table>
<br /><hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><span><strong><span class="head">6.4.13 Calling custom tools</span><a name="custom" id="custom"></a></strong></span></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Many useful tools can be found by searching online. You may find models or Script Tools that you want to call from within your code. To use custom tools (those that
          are not built-in to ArcToolbox) use the <code>arcpy</code> <code>ImportToolbox</code> function and then call the 
        tool using the tool name and the toolbox alias. Tool names can differ from the labels displayed in ArcCatalog. Labels are allowed to contain spaces. To determine the tool name, right-click on the tool and view the 'Name' property on the 'General' tab. To determine the toolbox alias, right-click on the toolbox and view the 'Alias' property on the general tab. If it doesn't already have one, you need to set the alias here. </p>
<p>This example pertains to 'customTools.tbx' which has a Script Tool named 'Inventory'. The toolbox alias is 'custom'. The Script Tool points to a script named 'inventory.py'. The header comments in this script say the following:<br />
<code><br />
<span class="comment"># Usage: workspace, level_of_detail (SUMMARY_ONLY or DETAILED_INVENTORY)<br />
          # Example: C:/gispy/data/ch06/ SUMMARY_ONLY summaryFile.txt</span></code><br />
</p>
<p>We call the tool requesting a summary of the 'C:/gispy/data/ch06/' directory.</p>
<table border="0" height="41" width="600">
<tbody>
<tr>
<td width="773" bgcolor="#ffffcc" scope="row"><p><strong>Example 6.5</strong><br />
</p>
<code>
<div class="highlight">
<pre><span class="c"># callInventory.py</span>
<span class="c"># Purpose: Call the inventory tool.</span>
<span class="kn">import</span> <span class="nn">arcpy</span>

<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/sample_scripts/ch06&#39;</span>
<span class="n">inputDir</span> <span class="o">=</span> <span class="s">&quot;C:/gispy/data/ch06/&quot;</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">ImportToolbox</span><span class="p">(</span><span class="s">&#39;customTools.tbx&#39;</span><span class="p">)</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">Inventory_custom</span><span class="p">(</span><span class="n">inputDir</span><span class="p">,</span> <span class="s">&#39;SUMMARY_ONLY&#39;</span><span class="p">,</span> <span class="s">&#39;summaryFile.txt&#39;</span><span class="p">)</span></pre>
</div>
</code></td>
</tr>
</tbody>
</table>
<p>The output text file from this tool, 'summaryFile.txt', looks something  like this:</p>
<p>Summary of C:\gispy\data\ch06<br />
          -------------------------------------<br />
          27 Files<br />
          10 ShapeFiles<br />
          1 Workspaces<br />
          1 Folders<br />
          2 TextFiles<br />
          1 RasterDatasets<br />
</p>
<hr />
<table border="0" width="775">
<tbody>
<tr>
<th align="left" scope="row"><span class="head">6.5 A word about old scripts</span> <a name="arcgisscripting" id="introduction3"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<p>Python programming for ArcGIS has changed a great deal since it was first introduced. ArcGIS Python is backwards compatible. In other words, Python code written for previous versions of ArcGIS will still run in the newer versions. For example, an ArcGIS 9.2 Python script will in ArcGIS10.1.  The <code>arcpy</code> package is how ArcGIS 10.x gives Python access to geoprocessing. In 9.x  versions, the <code>arcgisscripting</code> package was used. <code>arcpy</code> encompasses and enhances arcgisscripting. Table 6.4 shows prior version equivalents to <code>import arcpy</code>. </p>
<table width="483" bgcolor="#eeeeee">
<tr>
<td width="475" height="201"><p><strong>Table 6.4: Geoprocessing in Python. </strong><a name="create" id="create"></a></p>
<table width="405" border="1">
<tr>
<td width="68"><strong>ArcGIS Version</strong></td>
<td width="321"><strong>Python code statements</strong></td>
</tr>
<tr>
<td><div align="center">9.1</div></td>
<td><code><span class="key">from</span> win32com.client <span class="key">import</span> Dispatch <br />
                    gp <span class="o">=</span> Dispatch(<span class="s">'esriGeoprocessing.GPDispatch.1'</span>)</code> </td>
</tr>
<tr>
<td><div align="center">9.2</div></td>
<td><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create( ) </code></td>
</tr>
<tr>
<td><div align="center">9.3</div></td>
<td><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create(<span class="mi">9.3</span>) </code></td>
</tr>
<tr>
<td><div align="center">10.x</div></td>
<td><code><span class="key">import</span> arcpy</code></td>
</tr>
</table></td>
</tr>
</table>
<span><br />
</span>
<hr /><table border="0" width="775">
<tbody>
<tr>
<th align="left" scope="row"><span class="head">6.6 Discussion </span><a name="discussion" id="discussion"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<p>Calling tools in ArcGIS follows a basic pattern with some variations. The parameters required by the tools vary based on the kinds of input the tool needs. To use Python for ArcGIS, you'll need to become familiar with the basic pattern and use the tool help for more detailed information. Context menus  help with spelling and parameter requirements. The ArcGIS Resources tool help  parameter tables and script examples provide more detailed information. This chapter  presented the basic pattern for calling tools and highlighted the most common parameter usage questions. Spatial Analyst toolbox objects such as the <code>arcpy.sa.RemapValue</code> and <code>arcpy.sa.WOTable</code> are somewhat complex and highly specialized. For tools that require these arguments, run the tool via ArcToolbox and 'Copy the code snippet' to get an example with sample input data. For the vast majority of tool calls though, you won't need to copy code snippets, because the syntax will become routine after a little practice.</p>
<p>The <code>ValueTable</code>, <code>Result</code>, and <code>Raster</code> objects introduced in this chapter are just three of the many <code>arcpy</code> objects. The <code>arcpy</code> cheatsheet detail diagrams in this book, like the one in Figure 6.5, provide selected method and property names for several <code>arcpy</code> objects. The  ArcGIS Resource site explain every property and method  for  each <code>arcpy</code> object. <br />
<br />
        When searching, for an <code>arcpy</code> object, use the word <code>arcpy</code> along with the name of the object to improve the search results. For example, instead of searching for 'result', search for 'result arcpy', to bring the <code>Result</code> object help page to the top of the search. </p>
<table width="779" border="3" bgcolor="#CEDAE3">
<tr>
<td width="765" height="86"><blockquote>
<p>When you search for <code>arcpy</code> objects on the ArcGIS Resources site,  add the word <code>arcpy</code> to the search to bring the <code>arcpy</code>-related results to the top of the search.<br />
</p>
</blockquote></td>
</tr>
</table>
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">6.7 Key terms</span><a name="keyterms" id="keyterms2"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Modelbuilder models<br />
<span class="key">import</span> keyword<br />
<code>arcpy</code> package<br />
          Python package<br />
          Python module<br />
          Environment settings<br />
          full path file name<br />
          Multivalue input<br />
          Multivalue string<br />
        Temporary feature layers</p>
<hr />
<table border="0" width="775">
<tbody>
<tr>
<th align="left" scope="row"><span class="head">6.8 Exercises</span> <a name="exercises" id="exercises"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<p>Write a Python script to solve each 
          problem and test the script on sample data in 'C:/gispy/data/ch06/'. Hard-code the workspace to this directory. Hard-coding means specifying it with a string literal (<code><span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/data/ch06&#39;</span></code>). To achieve a deeper understanding of the code syntax, write the scripts without using ModelBuilder. Name the script as specified in bold print at the beginning of each question. <br />
</p>
<ol>
<li><strong>erase.py</strong> 'special_regions.shp' represents areas where a fire damaged a park, 'park.shp'.
            
            Use the Erase
            (Analysis)
            <leo_highlight style="background-color: 
transparent; background-image: none; background-repeat: repeat; 
background-attachment: scroll; background-position: 0% 0%; 
-moz-background-size: auto auto; cursor: pointer; display: inline; 
-moz-background-clip: -moz-initial; -moz-background-origin: 
-moz-initial; -moz-background-inline-policy: -moz-initial;" id="leoHighlights_Underline_38" onclick="leoHighlightsHandleClick('leoHighlights_Underline_38')" onmouseover="leoHighlightsHandleMouseOver('leoHighlights_Underline_38')" onmouseout="leoHighlightsHandleMouseOut('leoHighlights_Underline_38')" leohighlights_keywords="tool" leohighlights_url_top="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsTop.jsp?keywords%3Dtool%26domain%3D" leohighlights_url_bottom="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsBottom.jsp?keywords%3Dtool%26domain%3D" leohighlights_underline="false">tool</leo_highlight>
            to create a shapefile in 'C:/gispy/scratch' 
            called 'no_damage.shp'  which shows all the park 
            regions that did 
            not sustain damage.<br />
<br />
</li>
<li><strong>freq.py</strong> The land cover types in 'park.shp' include 'woods', 'orchards', and 'other'. Park 
            rangers would 
            like a table including the frequencies of polygons with 
            each cover type.
            Write a script to perform a Frequency (Analysis) on the 
            'COVER' field that 
            will generate this table. Create the output in 'C:/gispy/scratch' and name it 'COVER_freq.dbf'.<br />
<br />
</li>
<li><strong>split.py</strong> 'park.shp' is a 
            large park. Maintenance has outlined work zones for 
            which different 
            teams will be responsible. 'workzones.shp' 
            specifies the zones. 
            The manager would like to give each
            <leo_highlight style="background-color: transparent; background-image: none; 
background-repeat: repeat; background-attachment: scroll; 
background-position: 0% 0%; -moz-background-size: auto auto; cursor: 
pointer; display: inline; -moz-background-clip: -moz-initial; 
-moz-background-origin: -moz-initial; -moz-background-inline-policy: 
-moz-initial;" id="leoHighlights_Underline_35" onclick="leoHighlightsHandleClick('leoHighlights_Underline_35')" onmouseover="leoHighlightsHandleMouseOver('leoHighlights_Underline_35')" onmouseout="leoHighlightsHandleMouseOut('leoHighlights_Underline_35')" leohighlights_keywords="team" leohighlights_url_top="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsTop.jsp?keywords%3Dteam%26domain%3D" leohighlights_url_bottom="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsBottom.jsp?keywords%3Dteam%26domain%3D" leohighlights_underline="false">team</leo_highlight>
            leader a map that 
            only includes
            her own work zone.  Write a script to call the Split (Analysis)
            <leo_highlight style="background-color: transparent; background-image: none; 
background-repeat: repeat; background-attachment: scroll; 
background-position: 0% 0%; -moz-background-size: auto auto; cursor: 
pointer; display: inline; -moz-background-clip: -moz-initial; 
-moz-background-origin: -moz-initial; -moz-background-inline-policy: 
-moz-initial;" id="leoHighlights_Underline_36" onclick="leoHighlightsHandleClick('leoHighlights_Underline_36')" onmouseover="leoHighlightsHandleMouseOver('leoHighlights_Underline_36')" onmouseout="leoHighlightsHandleMouseOut('leoHighlights_Underline_36')" leohighlights_keywords="tool" leohighlights_url_top="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsTop.jsp?keywords%3Dtool%26domain%3D" leohighlights_url_bottom="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsBottom.jsp?keywords%3Dtool%26domain%3D" leohighlights_underline="false">tool</leo_highlight>
            to generate the desired shapefiles. 
            Using the Zone 
            field to split the park. Have the script place the 
            output shapefiles in 'C:/gispy/scratch'.<br />
<br />
</li>
<li><strong>square.py </strong>Compute the square of        the cell values in Gettysburg battlefield Esri GRID 
            raster, 'getty_rast', using the Square (Spatial Analyst) tool. Create the output raster in 'C:/gispy/scratch' and name it  'squareGetty'.<br />
<br />
</li>
<li><strong>getCount.py</strong> Use the Get Count (Data Management)
            <leo_highlight style="background-color: 
transparent; background-image: none; background-repeat: repeat; 
background-attachment: scroll; background-position: 0% 0%; 
-moz-background-size: auto auto; cursor: pointer; display: inline; 
-moz-background-clip: -moz-initial; -moz-background-origin: 
-moz-initial; -moz-background-inline-policy: -moz-initial;" id="leoHighlights_Underline_34" onclick="leoHighlightsHandleClick('leoHighlights_Underline_34')" onmouseover="leoHighlightsHandleMouseOver('leoHighlights_Underline_34')" onmouseout="leoHighlightsHandleMouseOut('leoHighlights_Underline_34')" leohighlights_keywords="tool" leohighlights_url_top="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsTop.jsp?keywords%3Dtool%26domain%3D" leohighlights_url_bottom="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsBottom.jsp?keywords%3Dtool%26domain%3D" leohighlights_underline="false">tool</leo_highlight>
            to determine the 
            number of polygons  in 'park.shp'. 
            Get the count using the  <code>arcpy</code> <code>Result</code> 
            object. Output should look  like this, though you may get a different count if 'park.shp' has been modified:<br />
<code>&gt;&gt;&gt;  <span class="n">There are 425 polygons  in  
            park.shp</span></code><br />
<br />
</li>
<li><strong>distribution.py </strong>Practice performing sequential geoprocessing steps. To see 
            how the land cover polygons are distributed within 'C:/gispy/data/ch06/park.shp', perform two
            <leo_highlight style="background-color: transparent; background-image: none; 
background-repeat: repeat; background-attachment: scroll; 
background-position: 0% 0%; -moz-background-size: auto auto; cursor: 
pointer; display: inline; -moz-background-clip: -moz-initial; 
-moz-background-origin: -moz-initial; -moz-background-inline-policy: 
-moz-initial;" id="leoHighlights_Underline_42" onclick="leoHighlightsHandleClick('leoHighlights_Underline_42')" onmouseover="leoHighlightsHandleMouseOver('leoHighlights_Underline_42')" onmouseout="leoHighlightsHandleMouseOut('leoHighlights_Underline_42')" leohighlights_keywords="tool" leohighlights_url_top="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsTop.jsp?keywords%3Dtool%26domain%3D" leohighlights_url_bottom="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsBottom.jsp?keywords%3Dtool%26domain%3D" leohighlights_underline="false">tool calls in this script. </leo_highlight>
            Use the Feature to Point (Data Management) tool to find the centroid of each polygon. Name this result 'C:/gispy/scratch/centroid.shp'. Then use the Create Thiessen Polygons (Analysis) tool to find the Voronoi regions of these centroids and name the result 'C:/gispy/scratch/voronoi.shp'.<br />
<br />
</li>
<li><strong>hullPoints.py</strong> Practice performing sequential geoprocessing steps. To find four corner point for  'C:/gispy/data/ch06/data1.shp',   perform two
            <leo_highlight style="background-color: transparent; background-image: none; 
background-repeat: repeat; background-attachment: scroll; 
background-position: 0% 0%; -moz-background-size: auto auto; cursor: 
pointer; display: inline; -moz-background-clip: -moz-initial; 
-moz-background-origin: -moz-initial; -moz-background-inline-policy: 
-moz-initial;" id="leoHighlights_Underline_5" onclick="leoHighlightsHandleClick('leoHighlights_Underline_42')" onmouseover="leoHighlightsHandleMouseOver('leoHighlights_Underline_42')" onmouseout="leoHighlightsHandleMouseOut('leoHighlights_Underline_42')" leohighlights_keywords="tool" leohighlights_url_top="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsTop.jsp?keywords%3Dtool%26domain%3D" leohighlights_url_bottom="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsBottom.jsp?keywords%3Dtool%26domain%3D" leohighlights_underline="false">tool calls in this script: </leo_highlight>
          Use the Minimum Bounding Geometry (Data Management) tool to find the hull of the points. Name this result 'C:/gispy/scratch/boundingPoly.shp'. Then call the Feature Vertices to Points (Data Management) tool on this bounding polygon and name this result 'C:/gispy/scratch/outerPoints.shp'.<br />
<br />
</li>
<li><strong>avgRast.py </strong>Write a script that uses <code>Raster</code> objects and Spatial Analyst to calculate an average raster value from three rasters 'out1', 'out2', and 'out3'  in the sample database, in rastSmall.gdb. Save the output raster in rastSmall.gdb as 'C:/gispy/scratch/avgRast'. Use a few simple mathematical operations instead of using the Cell Statistics tool. Be sure to delete the output <code>Raster</code> object using the <code>del</code> keyword.<br />
<br />
</li>
<li><strong>reclassify.py</strong> To explore using the <code>RemapValue</code> object, the  Reclassify (Spatial Analyst)
            <leo_highlight style="background-color: transparent; background-image: none; 
background-repeat: repeat; background-attachment: scroll; 
background-position: 0% 0%; -moz-background-size: auto auto; cursor: 
pointer; display: inline; -moz-background-clip: -moz-initial; 
-moz-background-origin: -moz-initial; -moz-background-inline-policy: 
-moz-initial;" id="leoHighlights_Underline_37" onclick="leoHighlightsHandleClick('leoHighlights_Underline_37')" onmouseover="leoHighlightsHandleMouseOver('leoHighlights_Underline_37')" onmouseout="leoHighlightsHandleMouseOut('leoHighlights_Underline_37')" leohighlights_keywords="tool" leohighlights_url_top="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsTop.jsp?keywords%3Dtool%26domain%3D" leohighlights_url_bottom="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsBottom.jsp?keywords%3Dtool%26domain%3D" leohighlights_underline="false">tool</leo_highlight>
            to 
            reclassify       the Gettysburg battlefield Esri GRID 
            raster 
            (getty_rast) 'VALUE' field so that all raster areas with a value of 1 
            have a new      
            value of 100 and all areas with a value of 2 have a new 
            value of 200. 
          Name the output raster 'C:/gispy/scratch/reclassGetty'. Then copy a code snippet from the results to see the syntax for the <code>RemapValue</code> object, and write a script that calls the Reclassify tool with the same input and output. In the script, be sure to delete the output <code>Raster</code> object using the <code>del</code> keyword.          </li>
</ol><a href="#top">back to top</a> <p><strong>Table 6.1: Highlights of <code>arcpy</code> functionality </strong><a name="create" id="create2"></a></p>
<table width="759" border="1">
<tr>
<td width="74"><strong>ArcGIS Topic</strong></td>
<td width="260"><strong>Functionality</strong></td>
<td width="403"><strong>Code sample</strong></td>
</tr>
<tr>
<td>Tools </td>
<td>Call ArcToolbox tools</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="s">&#39;output.shp&#39;</span><span class="p">,</span> <span class="s">&#39;1 Mile&#39;</span><span class="p">)</span></code></td>
</tr>
<tr>
<td>Other functions</td>
<td>Licensing, data management, and other miscellaneous needs.</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">CheckOutExtension</span><span class="p">(</span><span class="s">&#39;Spatial&#39;</span><span class="p">)</span></code></td>
</tr>
<tr>
<td>Environment<br />
                      variables</td>
<td>Set and get environment variable values</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span> </code></td>
</tr>
<tr>
<td>Describe</td>
<td>Describe data properties</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">Describe</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">)</span> </code></td>
</tr>
<tr>
<td>Listing data</td>
<td>List  items (e.g., rasters, feature classes, workspaces, toolboxes,  environment variables, and indexes)</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">ListFeatureClasses</span><span class="p">(</span> <span class="p">)</span> </code></td>
</tr>
<tr>
<td>Cursor</td>
<td>Read/modify attribute table elements</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">da</span><span class="o">.</span><span class="n">SearchCursor</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="n">fieldNames</span><span class="p">)</span> </code></td>
</tr>
<tr>
<td>Messaging</td>
<td>Get and print geoprocessing messages</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">GetMessages</span><span class="p">(</span> <span class="p">)</span> </code></td>
</tr>
<tr>
<td>Mapping</td>
<td>Manipulate existing map layers, add layers to maps, modifying surrounds, manipulate symbology<br /></td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">mapping</span><span class="o">.</span><span class="n">MoveLayer</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">refLayer</span><span class="p">,</span> <span class="n">moveLayer</span><span class="p">,</span> <span class="s">&#39;BEFORE&#39;</span><span class="p">)</span> </code></td>
</tr>
</table>
<br /><strong>ArcGIS Topic</strong><strong>Functionality</strong><strong>Code sample</strong>Tools Call ArcToolbox tools<code><span class="n">arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="s">&#39;output.shp&#39;</span><span class="p">,</span> <span class="s">&#39;1 Mile&#39;</span><span class="p">)</span></code>Other functionsLicensing, data management, and other miscellaneous needs.<code><span class="n">arcpy</span><span class="o">.</span><span class="n">CheckOutExtension</span><span class="p">(</span><span class="s">&#39;Spatial&#39;</span><span class="p">)</span></code>Environment<br />
                      variablesSet and get environment variable values<code><span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span> </code>DescribeDescribe data properties<code><span class="n">arcpy</span><span class="o">.</span><span class="n">Describe</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">)</span> </code>Listing dataList  items (e.g., rasters, feature classes, workspaces, toolboxes,  environment variables, and indexes)<code><span class="n">arcpy</span><span class="o">.</span><span class="n">ListFeatureClasses</span><span class="p">(</span> <span class="p">)</span> </code>CursorRead/modify attribute table elements<code><span class="n">arcpy</span><span class="o">.</span><span class="n">da</span><span class="o">.</span><span class="n">SearchCursor</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="n">fieldNames</span><span class="p">)</span> </code>MessagingGet and print geoprocessing messages<code><span class="n">arcpy</span><span class="o">.</span><span class="n">GetMessages</span><span class="p">(</span> <span class="p">)</span> </code>MappingManipulate existing map layers, add layers to maps, modifying surrounds, manipulate symbology<br /><code><span class="n">arcpy</span><span class="o">.</span><span class="n">mapping</span><span class="o">.</span><span class="n">MoveLayer</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">refLayer</span><span class="p">,</span> <span class="n">moveLayer</span><span class="p">,</span> <span class="s">&#39;BEFORE&#39;</span><span class="p">)</span> </code><a href="#top">back to top</a> <code>arcpy<span class="o">.</span>functionName(argument1, 
              argument2, argument3,...)</code><a href="#top">back to top</a> <a href="#top">back to top</a> <code>arcpy<span class="o">.</span>toolName_toolboxAlias(arguments1, 
              argument2, argument3,...)</code><strong>Table 6.2 </strong>Toolbox alias examples<br />
<table border="3">
<tr>
<th width="186" scope="row">Toolbox</th>
<th width="117">Alias</th>
</tr>
<tr>
<td>3D Analyst Tools</td>
<td>3d</td>
</tr>
<tr>
<td>Analysis Tools</td>
<td>analysis</td>
</tr>
<tr>
<td>Cartography Tools</td>
<td>cartography</td>
</tr>
<tr>
<td>Conversion Tools</td>
<td>conversion</td>
</tr>
<tr>
<td>Data Interoperability Tools</td>
<td>interop</td>
</tr>
<tr>
<td>Data Management Tools</td>
<td>management</td>
</tr>
<tr>
<td>Spatial Analyst Tools</td>
<td>sa</td>
</tr>
<tr>
<td>Spatial Statistics Tools</td>
<td>stats</td>
</tr>
</table>3D Analyst Tools3dAnalysis ToolsanalysisCartography ToolscartographyConversion ToolsconversionData Interoperability ToolsinteropData Management ToolsmanagementSpatial Analyst ToolssaSpatial Statistics Toolsstats<a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <strong>Table 6.3</strong> Linear Unit of Measure Keywords (not case 
              sensitive)
              <table border="1" width="453">
<tbody>
<tr>
<td width="443">centimeters | decimal degrees | decimeters | feet | inches | kilometers | meters | miles | millimeters | nautical miles | points | unknown | yards</td>
</tr>
</tbody>
</table>centimeters | decimal degrees | decimeters | feet | inches | kilometers | meters | miles | millimeters | nautical miles | points | unknown | yards<a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <code>variable = arcpy<span class="o">.</span>toolName_toolboxAlias(arguments1, 
              argument2, argument3,...)</code><strong>Example 6.1</strong><br />
<code>
<div class="highlight">
<pre><span class="c"># avgNearNeighbor.py </span>
<span class="c">#Purpose: Analyze crime data to determine if spatial patterns are statistically significant </span>
<span class="kn">import</span> <span class="nn">arcpy</span><br />

<br /><span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/data/ch06&#39;</span>
<br />
<span class="n">annResult</span> <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span><span class="n">AverageNearestNeighbor_stats</span><span class="p">(</span><span class="s">&#39;points.shp&#39;</span><span class="p">,</span> <span class="s">&#39;Euclidean Distance&#39;</span><span class="p">)</span>
<br />

<span class="k">print</span> <span class="s">&#39;Average Nearest Neighbor Output&#39;</span>
<span class="k">print</span> <span class="s">&#39;Nearest neighbor ratio: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">)</span> 
<span class="k">print</span> <span class="s">&#39;z-score: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">)</span>
<span class="k">print</span> <span class="s">&#39;p-value: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">)</span> 
<span class="k">print</span> <span class="s">&#39;Expected Mean Distance: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">)</span>
<span class="k">print</span> <span class="s">&#39;Observed Mean Distance: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="p">)</span>

<span class="o"></span><span class="mf"></span></pre>
</div></code>
<p> Printed output:                </p>
<p>&gt;&gt;&gt; <code><span class="n">Average Nearest Neighbor Output<br />
                  Nearest neighbor ratio: 0.853047<br />
                  z-score: -5.802495<br />
                  p-value: 0<br />
                  Expected Mean Distance: 753.825013<br />
              Observed Mean Distance: 643.048013</span></code></p><a href="#top">back to top</a> <code>arcpy<span class="o">.</span>toolboxAlias<span class="o">.</span>toolName(arguments1, 
              argument2, argument3,...)</code><a href="#top">back to top</a> <a href="#top">back to top</a> <strong>Example 6.2</strong><br />
<code>
<div class="highlight">
<pre><span class="c"># computeRastEquation.py </span>
<span class="c"># Purpose: Calculate 5 * &#39;getty_rast&#39; - 2</span>

<span class="kn">import</span> <span class="nn">arcpy</span>

<span class="n"><br />arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/data/ch06/rastSmall.gdb&#39;</span><br />arcpy<span class="o">.</span>CheckOutExtension(<span class="s">'Spatial'</span>)<br /><span class="n"><br />outRast1</span> <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span><span class="n">sa</span><span class="o">.</span><span class="n">Times</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="s">&#39;dataRast&#39;</span><span class="p">)</span>
<span class="n">outRast2</span> <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span><span class="n">sa</span><span class="o">.</span><span class="n">Minus</span><span class="p">(</span><span class="n">outRast1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">outRast2</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="s">&#39;equationRast&#39;</span> <span class="p">)</span><br /><span class="kn">del</span> outRast1<br /><span class="kn">del</span> outRast2

</pre>
</div> </code> <a href="#top">back to top</a> <a href="#top">back to top</a> <strong>Example 6.3</strong> <br />
<code>
<div class="highlight">
<pre><span class="c"># buffer_clip.py (hard-coded version)</span>
<span class="c"># Purpose: Buffer a zone and use it to clip another file</span>
<span class="c"># Input: No arguments needed.</span>

<span class="kn">import</span> <span class="nn">arcpy</span><span class="o"></span><span class="nn"></span>

<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/data/ch06&#39;</span>
<span class="n">outDir</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/scratch/&#39;</span>

<span class="c"># Set buffer params</span>
<span class="n">fireDamage</span> <span class="o">=</span> <span class="s">&#39;special_regions.shp&#39;</span>
<span class="n">fireBuffer</span> <span class="o">=</span>  <span class="n">outDir</span> <span class="o">+</span> <span class="n">fireDamage</span><span class="p">[:</span><span class="o">-</span><span class="mi">4</span><span class="p">]</span> <span class="o">+</span> <span class="s">&#39;Buffer.shp&#39;</span>
<span class="n">bufferDist</span> <span class="o">=</span> <span class="s">&#39;1 mile&#39;</span>

<span class="c"># Set clip params</span>
<span class="n">park</span> <span class="o">=</span> <span class="s">&#39;park.shp&#39;</span>
<span class="n">clipOutput</span> <span class="o">=</span> <span class="n">outDir</span> <span class="o">+</span> <span class="n">park</span><span class="p">[:</span><span class="o">-</span><span class="mi">4</span><span class="p">]</span> <span class="o">+</span> <span class="s">&#39;DamageBuffer.shp&#39;</span>

<span class="n">arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="n">fireDamage</span><span class="p">,</span> <span class="n">fireBuffer</span><span class="p">,</span><span class="n">bufferDist</span><span class="p">)</span>
<span class="k">print</span> <span class="s">&#39;{0} created.&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">fireBuffer</span><span class="p">)</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">Clip_analysis</span><span class="p">(</span><span class="n">park</span><span class="p">,</span> <span class="n">fireBuffer</span><span class="p">,</span> <span class="n">clipOutput</span> <span class="p">)</span>
<span class="k">print</span> <span class="s">&#39;{0} created.&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">clipOutput</span><span class="p">)</span>
  </pre></div></code>
<p><img src="../images/buffer_clip_input.jpg" alt="initialview" /></p>
<p>Figure 6.6a: Initial view of data in Example 6.3<br />
                  black: park = 'park.shp'<br />
                  gray: fireDamage = 'special_regions.shp'</p>
<p><img src="../images/buffer_clip_intermediate.jpg" alt="2" /><br />
                  Figure 6.6b: Intermediate view of data in Example 6.3<br />
                  black: park = 'park.shp' <br />
                  green: fireBuffer = 'special_regionsBuffer.shp'</p>
<p><img src="../images/buffer_clip_output.jpg" alt="3" /><br />
                  Figure 6.6c: Final view of data in Example 6.3<br />
                  black: park = 'park.shp' <br />
                  gray: fireDamage = 'special_regions.shp'<br />
                  light gray: clipOutput = 'parkDamageBuffer.shp'<br />
                  Park within 1 mi. of fire <br />
</p><p><strong>Example 6.4</strong><br />
</p><code>
<div class="highlight">
<pre><span class="c"># addLengthField.py</span>
<span class="c"># Purpose: Add a field containing polygon lengths to the shapefile.</span>
<span class="c"># Usage: No arguments needed.</span>
<span class="kn">import</span> <span class="nn">arcpy</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/data/ch06&#39;</span>

<span class="n">inputFile</span> <span class="o">=</span> <span class="s">&#39;special_regions.shp&#39;</span>
<span class="n">fieldName</span> <span class="o">=</span> <span class="s">&#39;Length&#39;</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">AddField_management</span><span class="p">(</span> <span class="n">inputFile</span><span class="p">,</span> <span class="n">fieldName</span><span class="p">,</span> <span class="s">&#39;FLOAT&#39;</span> <span class="p">)</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">CalculateField_management</span><span class="p">(</span> <span class="n">inputFile</span><span class="p">,</span> <span class="n">fieldName</span><span class="p">,</span> <span class="s">&#39;!shape.length!&#39;</span><span class="p">,</span> <span class="s">&#39;PYTHON&#39;</span> <span class="p">)</span>
</pre>
</div> </code><a href="#top">back to top</a> <p><strong>Example 6.5</strong><br />
</p>
<code>
<div class="highlight">
<pre><span class="c"># callInventory.py</span>
<span class="c"># Purpose: Call the inventory tool.</span>
<span class="kn">import</span> <span class="nn">arcpy</span>

<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/sample_scripts/ch06&#39;</span>
<span class="n">inputDir</span> <span class="o">=</span> <span class="s">&quot;C:/gispy/data/ch06/&quot;</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">ImportToolbox</span><span class="p">(</span><span class="s">&#39;customTools.tbx&#39;</span><span class="p">)</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">Inventory_custom</span><span class="p">(</span><span class="n">inputDir</span><span class="p">,</span> <span class="s">&#39;SUMMARY_ONLY&#39;</span><span class="p">,</span> <span class="s">&#39;summaryFile.txt&#39;</span><span class="p">)</span></pre>
</div>
</code><a href="#top">back to top</a> <p><strong>Table 6.4: Geoprocessing in Python. </strong><a name="create" id="create"></a></p>
<table width="405" border="1">
<tr>
<td width="68"><strong>ArcGIS Version</strong></td>
<td width="321"><strong>Python code statements</strong></td>
</tr>
<tr>
<td><div align="center">9.1</div></td>
<td><code><span class="key">from</span> win32com.client <span class="key">import</span> Dispatch <br />
                    gp <span class="o">=</span> Dispatch(<span class="s">'esriGeoprocessing.GPDispatch.1'</span>)</code> </td>
</tr>
<tr>
<td><div align="center">9.2</div></td>
<td><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create( ) </code></td>
</tr>
<tr>
<td><div align="center">9.3</div></td>
<td><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create(<span class="mi">9.3</span>) </code></td>
</tr>
<tr>
<td><div align="center">10.x</div></td>
<td><code><span class="key">import</span> arcpy</code></td>
</tr>
</table><strong>ArcGIS Version</strong><strong>Python code statements</strong><div align="center">9.1</div><code><span class="key">from</span> win32com.client <span class="key">import</span> Dispatch <br />
                    gp <span class="o">=</span> Dispatch(<span class="s">'esriGeoprocessing.GPDispatch.1'</span>)</code> <div align="center">9.2</div><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create( ) </code><div align="center">9.3</div><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create(<span class="mi">9.3</span>) </code><div align="center">10.x</div><code><span class="key">import</span> arcpy</code><a href="#top">back to top</a> <blockquote>
<p>When you search for <code>arcpy</code> objects on the ArcGIS Resources site,  add the word <code>arcpy</code> to the search to bring the <code>arcpy</code>-related results to the top of the search.<br />
</p>
</blockquote><a href="#top">back to top</a> <a href="#top">back to top</a> <span class="head">6.1 Importing <code>arcpy</code></span> <a name="arcpy" id="environment3"></a><a href="#top">back to top</a> <p><strong>Table 6.1: Highlights of <code>arcpy</code> functionality </strong><a name="create" id="create2"></a></p>
<table width="759" border="1">
<tr>
<td width="74"><strong>ArcGIS Topic</strong></td>
<td width="260"><strong>Functionality</strong></td>
<td width="403"><strong>Code sample</strong></td>
</tr>
<tr>
<td>Tools </td>
<td>Call ArcToolbox tools</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="s">&#39;output.shp&#39;</span><span class="p">,</span> <span class="s">&#39;1 Mile&#39;</span><span class="p">)</span></code></td>
</tr>
<tr>
<td>Other functions</td>
<td>Licensing, data management, and other miscellaneous needs.</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">CheckOutExtension</span><span class="p">(</span><span class="s">&#39;Spatial&#39;</span><span class="p">)</span></code></td>
</tr>
<tr>
<td>Environment<br />
                      variables</td>
<td>Set and get environment variable values</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span> </code></td>
</tr>
<tr>
<td>Describe</td>
<td>Describe data properties</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">Describe</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">)</span> </code></td>
</tr>
<tr>
<td>Listing data</td>
<td>List  items (e.g., rasters, feature classes, workspaces, toolboxes,  environment variables, and indexes)</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">ListFeatureClasses</span><span class="p">(</span> <span class="p">)</span> </code></td>
</tr>
<tr>
<td>Cursor</td>
<td>Read/modify attribute table elements</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">da</span><span class="o">.</span><span class="n">SearchCursor</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="n">fieldNames</span><span class="p">)</span> </code></td>
</tr>
<tr>
<td>Messaging</td>
<td>Get and print geoprocessing messages</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">GetMessages</span><span class="p">(</span> <span class="p">)</span> </code></td>
</tr>
<tr>
<td>Mapping</td>
<td>Manipulate existing map layers, add layers to maps, modifying surrounds, manipulate symbology<br /></td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">mapping</span><span class="o">.</span><span class="n">MoveLayer</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">refLayer</span><span class="p">,</span> <span class="n">moveLayer</span><span class="p">,</span> <span class="s">&#39;BEFORE&#39;</span><span class="p">)</span> </code></td>
</tr>
</table>
<br /><strong>ArcGIS Topic</strong><strong>Functionality</strong><strong>Code sample</strong>Tools Call ArcToolbox tools<code><span class="n">arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="s">&#39;output.shp&#39;</span><span class="p">,</span> <span class="s">&#39;1 Mile&#39;</span><span class="p">)</span></code>Other functionsLicensing, data management, and other miscellaneous needs.<code><span class="n">arcpy</span><span class="o">.</span><span class="n">CheckOutExtension</span><span class="p">(</span><span class="s">&#39;Spatial&#39;</span><span class="p">)</span></code>Environment<br />
                      variablesSet and get environment variable values<code><span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span> </code>DescribeDescribe data properties<code><span class="n">arcpy</span><span class="o">.</span><span class="n">Describe</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">)</span> </code>Listing dataList  items (e.g., rasters, feature classes, workspaces, toolboxes,  environment variables, and indexes)<code><span class="n">arcpy</span><span class="o">.</span><span class="n">ListFeatureClasses</span><span class="p">(</span> <span class="p">)</span> </code>CursorRead/modify attribute table elements<code><span class="n">arcpy</span><span class="o">.</span><span class="n">da</span><span class="o">.</span><span class="n">SearchCursor</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="n">fieldNames</span><span class="p">)</span> </code>MessagingGet and print geoprocessing messages<code><span class="n">arcpy</span><span class="o">.</span><span class="n">GetMessages</span><span class="p">(</span> <span class="p">)</span> </code>MappingManipulate existing map layers, add layers to maps, modifying surrounds, manipulate symbology<br /><code><span class="n">arcpy</span><span class="o">.</span><span class="n">mapping</span><span class="o">.</span><span class="n">MoveLayer</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">refLayer</span><span class="p">,</span> <span class="n">moveLayer</span><span class="p">,</span> <span class="s">&#39;BEFORE&#39;</span><span class="p">)</span> </code><strong>ArcGIS Topic</strong><strong>Functionality</strong><strong>Code sample</strong>Tools Call ArcToolbox tools<code><span class="n">arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="s">&#39;output.shp&#39;</span><span class="p">,</span> <span class="s">&#39;1 Mile&#39;</span><span class="p">)</span></code>Other functionsLicensing, data management, and other miscellaneous needs.<code><span class="n">arcpy</span><span class="o">.</span><span class="n">CheckOutExtension</span><span class="p">(</span><span class="s">&#39;Spatial&#39;</span><span class="p">)</span></code>Environment<br />
                      variablesSet and get environment variable values<code><span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span> </code>DescribeDescribe data properties<code><span class="n">arcpy</span><span class="o">.</span><span class="n">Describe</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">)</span> </code>Listing dataList  items (e.g., rasters, feature classes, workspaces, toolboxes,  environment variables, and indexes)<code><span class="n">arcpy</span><span class="o">.</span><span class="n">ListFeatureClasses</span><span class="p">(</span> <span class="p">)</span> </code>CursorRead/modify attribute table elements<code><span class="n">arcpy</span><span class="o">.</span><span class="n">da</span><span class="o">.</span><span class="n">SearchCursor</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="n">fieldNames</span><span class="p">)</span> </code>MessagingGet and print geoprocessing messages<code><span class="n">arcpy</span><span class="o">.</span><span class="n">GetMessages</span><span class="p">(</span> <span class="p">)</span> </code>MappingManipulate existing map layers, add layers to maps, modifying surrounds, manipulate symbology<br /><code><span class="n">arcpy</span><span class="o">.</span><span class="n">mapping</span><span class="o">.</span><span class="n">MoveLayer</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">refLayer</span><span class="p">,</span> <span class="n">moveLayer</span><span class="p">,</span> <span class="s">&#39;BEFORE&#39;</span><span class="p">)</span> </code><span class="head">6.2 <code>arcpy</code> Functions</span> <a name="functions" id="environment2"></a><a href="#top">back to top</a> <code>arcpy<span class="o">.</span>functionName(argument1, 
              argument2, argument3,...)</code><span class="head">6.3 Environment
                settings</span> <a name="environment" id="environment"></a><a href="#top">back to top</a> <code>arcpy<span class="o">.</span>env<span class="o">.</span>property <span class="o">=</span> value</code><code>variable <span class="o">=</span> arcpy<span class="o">.</span>env<span class="o">.</span>property</code><p><span class="head">6.4 Calling 
                  Tools</span> <a name="tools" id="tools"></a></p><a href="#top">back to top</a> <code>arcpy<span class="o">.</span>toolName_toolboxAlias(arguments1, 
              argument2, argument3,...)</code>ToolboxAlias<strong>Table 6.2 </strong>Toolbox alias examples<br />
<table border="3">
<tr>
<th width="186" scope="row">Toolbox</th>
<th width="117">Alias</th>
</tr>
<tr>
<td>3D Analyst Tools</td>
<td>3d</td>
</tr>
<tr>
<td>Analysis Tools</td>
<td>analysis</td>
</tr>
<tr>
<td>Cartography Tools</td>
<td>cartography</td>
</tr>
<tr>
<td>Conversion Tools</td>
<td>conversion</td>
</tr>
<tr>
<td>Data Interoperability Tools</td>
<td>interop</td>
</tr>
<tr>
<td>Data Management Tools</td>
<td>management</td>
</tr>
<tr>
<td>Spatial Analyst Tools</td>
<td>sa</td>
</tr>
<tr>
<td>Spatial Statistics Tools</td>
<td>stats</td>
</tr>
</table>3D Analyst Tools3dAnalysis ToolsanalysisCartography ToolscartographyConversion ToolsconversionData Interoperability ToolsinteropData Management ToolsmanagementSpatial Analyst ToolssaSpatial Statistics ToolsstatsToolboxAlias3D Analyst Tools3dAnalysis ToolsanalysisCartography ToolscartographyConversion ToolsconversionData Interoperability ToolsinteropData Management ToolsmanagementSpatial Analyst ToolssaSpatial Statistics Toolsstats<span><strong><span class="head">6.4.1 Using tool help</span><a name="help" id="help"></a></strong></span><a href="#top">back to top</a> <span><strong><span class="head">6.4.2 Copy code snippet</span></strong></span> <a name="snippet" id="snippet"></a><a href="#top">back to top</a> <span><strong><span class="head">6.4.3 Linear units</span></strong></span> <a name="linear" id="snippet2"></a><a href="#top">back to top</a> <strong>Table 6.3</strong> Linear Unit of Measure Keywords (not case 
              sensitive)
              <table border="1" width="453">
<tbody>
<tr>
<td width="443">centimeters | decimal degrees | decimeters | feet | inches | kilometers | meters | miles | millimeters | nautical miles | points | unknown | yards</td>
</tr>
</tbody>
</table>centimeters | decimal degrees | decimeters | feet | inches | kilometers | meters | miles | millimeters | nautical miles | points | unknown | yardscentimeters | decimal degrees | decimeters | feet | inches | kilometers | meters | miles | millimeters | nautical miles | points | unknown | yards<span><strong><span class="head">6.4.4 Python expressions as inputs</span><a name="expressions" id="expressions"></a></strong></span><a href="#top">back to top</a> <span><strong><span class="head">6.4.5 Multivalue inputs</span></strong></span> <a name="multivalue" id="multivalue"></a><a href="#top">back to top</a> <span><strong><span class="head">6.4.6 Optional parameters</span></strong></span> <a name="optional" id="optional"></a><a href="#top">back to top</a> <span><strong><span class="head">6.4.7 Return values (...using the <code>Result</code> object)</span><a name="return" id="return"></a></strong></span><a href="#top">back to top</a> <code>variable = arcpy<span class="o">.</span>toolName_toolboxAlias(arguments1, 
              argument2, argument3,...)</code><strong>Example 6.1</strong><br />
<code>
<div class="highlight">
<pre><span class="c"># avgNearNeighbor.py </span>
<span class="c">#Purpose: Analyze crime data to determine if spatial patterns are statistically significant </span>
<span class="kn">import</span> <span class="nn">arcpy</span><br />

<br /><span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/data/ch06&#39;</span>
<br />
<span class="n">annResult</span> <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span><span class="n">AverageNearestNeighbor_stats</span><span class="p">(</span><span class="s">&#39;points.shp&#39;</span><span class="p">,</span> <span class="s">&#39;Euclidean Distance&#39;</span><span class="p">)</span>
<br />

<span class="k">print</span> <span class="s">&#39;Average Nearest Neighbor Output&#39;</span>
<span class="k">print</span> <span class="s">&#39;Nearest neighbor ratio: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">)</span> 
<span class="k">print</span> <span class="s">&#39;z-score: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">)</span>
<span class="k">print</span> <span class="s">&#39;p-value: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">)</span> 
<span class="k">print</span> <span class="s">&#39;Expected Mean Distance: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">)</span>
<span class="k">print</span> <span class="s">&#39;Observed Mean Distance: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="p">)</span>

<span class="o"></span><span class="mf"></span></pre>
</div></code>
<p> Printed output:                </p>
<p>&gt;&gt;&gt; <code><span class="n">Average Nearest Neighbor Output<br />
                  Nearest neighbor ratio: 0.853047<br />
                  z-score: -5.802495<br />
                  p-value: 0<br />
                  Expected Mean Distance: 753.825013<br />
              Observed Mean Distance: 643.048013</span></code></p><span class="head">6.4.8 Calling  Spatial Analyst tools</span><a name="sa" id="sa"></a><a href="#top">back to top</a> <code>arcpy<span class="o">.</span>toolboxAlias<span class="o">.</span>toolName(arguments1, 
              argument2, argument3,...)</code><span>
<span class="head">6.4.9 Importing spatial analyst</span>
<a name="importsa" id="importsa"></a></span><a href="#top">back to top</a> <span class="head">6.4.10 Raster Calculator</span>

<a name="rastCalc" id="importsa2"></a> <a href="#top">back to top</a> <strong>Example 6.2</strong><br />
<code>
<div class="highlight">
<pre><span class="c"># computeRastEquation.py </span>
<span class="c"># Purpose: Calculate 5 * &#39;getty_rast&#39; - 2</span>

<span class="kn">import</span> <span class="nn">arcpy</span>

<span class="n"><br />arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/data/ch06/rastSmall.gdb&#39;</span><br />arcpy<span class="o">.</span>CheckOutExtension(<span class="s">'Spatial'</span>)<br /><span class="n"><br />outRast1</span> <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span><span class="n">sa</span><span class="o">.</span><span class="n">Times</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="s">&#39;dataRast&#39;</span><span class="p">)</span>
<span class="n">outRast2</span> <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span><span class="n">sa</span><span class="o">.</span><span class="n">Minus</span><span class="p">(</span><span class="n">outRast1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">outRast2</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="s">&#39;equationRast&#39;</span> <span class="p">)</span><br /><span class="kn">del</span> outRast1<br /><span class="kn">del</span> outRast2

</pre>
</div> </code> <span><strong><span class="head">6.4.11 Temporary feature layers</span><a name="tempLayers" id="custom2"></a></strong></span><a href="#top">back to top</a> <span class="head">6.4.12 Using variables for multiple tool calls</span><a name="multipleTool" id="multipleTool"></a><a href="#top">back to top</a> <strong>Example 6.3</strong> <br />
<code>
<div class="highlight">
<pre><span class="c"># buffer_clip.py (hard-coded version)</span>
<span class="c"># Purpose: Buffer a zone and use it to clip another file</span>
<span class="c"># Input: No arguments needed.</span>

<span class="kn">import</span> <span class="nn">arcpy</span><span class="o"></span><span class="nn"></span>

<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/data/ch06&#39;</span>
<span class="n">outDir</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/scratch/&#39;</span>

<span class="c"># Set buffer params</span>
<span class="n">fireDamage</span> <span class="o">=</span> <span class="s">&#39;special_regions.shp&#39;</span>
<span class="n">fireBuffer</span> <span class="o">=</span>  <span class="n">outDir</span> <span class="o">+</span> <span class="n">fireDamage</span><span class="p">[:</span><span class="o">-</span><span class="mi">4</span><span class="p">]</span> <span class="o">+</span> <span class="s">&#39;Buffer.shp&#39;</span>
<span class="n">bufferDist</span> <span class="o">=</span> <span class="s">&#39;1 mile&#39;</span>

<span class="c"># Set clip params</span>
<span class="n">park</span> <span class="o">=</span> <span class="s">&#39;park.shp&#39;</span>
<span class="n">clipOutput</span> <span class="o">=</span> <span class="n">outDir</span> <span class="o">+</span> <span class="n">park</span><span class="p">[:</span><span class="o">-</span><span class="mi">4</span><span class="p">]</span> <span class="o">+</span> <span class="s">&#39;DamageBuffer.shp&#39;</span>

<span class="n">arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="n">fireDamage</span><span class="p">,</span> <span class="n">fireBuffer</span><span class="p">,</span><span class="n">bufferDist</span><span class="p">)</span>
<span class="k">print</span> <span class="s">&#39;{0} created.&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">fireBuffer</span><span class="p">)</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">Clip_analysis</span><span class="p">(</span><span class="n">park</span><span class="p">,</span> <span class="n">fireBuffer</span><span class="p">,</span> <span class="n">clipOutput</span> <span class="p">)</span>
<span class="k">print</span> <span class="s">&#39;{0} created.&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">clipOutput</span><span class="p">)</span>
  </pre></div></code>
<p><img src="../images/buffer_clip_input.jpg" alt="initialview" /></p>
<p>Figure 6.6a: Initial view of data in Example 6.3<br />
                  black: park = 'park.shp'<br />
                  gray: fireDamage = 'special_regions.shp'</p>
<p><img src="../images/buffer_clip_intermediate.jpg" alt="2" /><br />
                  Figure 6.6b: Intermediate view of data in Example 6.3<br />
                  black: park = 'park.shp' <br />
                  green: fireBuffer = 'special_regionsBuffer.shp'</p>
<p><img src="../images/buffer_clip_output.jpg" alt="3" /><br />
                  Figure 6.6c: Final view of data in Example 6.3<br />
                  black: park = 'park.shp' <br />
                  gray: fireDamage = 'special_regions.shp'<br />
                  light gray: clipOutput = 'parkDamageBuffer.shp'<br />
                  Park within 1 mi. of fire <br />
</p><p><strong>Example 6.4</strong><br />
</p><code>
<div class="highlight">
<pre><span class="c"># addLengthField.py</span>
<span class="c"># Purpose: Add a field containing polygon lengths to the shapefile.</span>
<span class="c"># Usage: No arguments needed.</span>
<span class="kn">import</span> <span class="nn">arcpy</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/data/ch06&#39;</span>

<span class="n">inputFile</span> <span class="o">=</span> <span class="s">&#39;special_regions.shp&#39;</span>
<span class="n">fieldName</span> <span class="o">=</span> <span class="s">&#39;Length&#39;</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">AddField_management</span><span class="p">(</span> <span class="n">inputFile</span><span class="p">,</span> <span class="n">fieldName</span><span class="p">,</span> <span class="s">&#39;FLOAT&#39;</span> <span class="p">)</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">CalculateField_management</span><span class="p">(</span> <span class="n">inputFile</span><span class="p">,</span> <span class="n">fieldName</span><span class="p">,</span> <span class="s">&#39;!shape.length!&#39;</span><span class="p">,</span> <span class="s">&#39;PYTHON&#39;</span> <span class="p">)</span>
</pre>
</div> </code><span><strong><span class="head">6.4.13 Calling custom tools</span><a name="custom" id="custom"></a></strong></span><a href="#top">back to top</a> <p><strong>Example 6.5</strong><br />
</p>
<code>
<div class="highlight">
<pre><span class="c"># callInventory.py</span>
<span class="c"># Purpose: Call the inventory tool.</span>
<span class="kn">import</span> <span class="nn">arcpy</span>

<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/sample_scripts/ch06&#39;</span>
<span class="n">inputDir</span> <span class="o">=</span> <span class="s">&quot;C:/gispy/data/ch06/&quot;</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">ImportToolbox</span><span class="p">(</span><span class="s">&#39;customTools.tbx&#39;</span><span class="p">)</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">Inventory_custom</span><span class="p">(</span><span class="n">inputDir</span><span class="p">,</span> <span class="s">&#39;SUMMARY_ONLY&#39;</span><span class="p">,</span> <span class="s">&#39;summaryFile.txt&#39;</span><span class="p">)</span></pre>
</div>
</code><span class="head">6.5 A word about old scripts</span> <a name="arcgisscripting" id="introduction3"></a><a href="#top">back to top</a> <p><strong>Table 6.4: Geoprocessing in Python. </strong><a name="create" id="create"></a></p>
<table width="405" border="1">
<tr>
<td width="68"><strong>ArcGIS Version</strong></td>
<td width="321"><strong>Python code statements</strong></td>
</tr>
<tr>
<td><div align="center">9.1</div></td>
<td><code><span class="key">from</span> win32com.client <span class="key">import</span> Dispatch <br />
                    gp <span class="o">=</span> Dispatch(<span class="s">'esriGeoprocessing.GPDispatch.1'</span>)</code> </td>
</tr>
<tr>
<td><div align="center">9.2</div></td>
<td><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create( ) </code></td>
</tr>
<tr>
<td><div align="center">9.3</div></td>
<td><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create(<span class="mi">9.3</span>) </code></td>
</tr>
<tr>
<td><div align="center">10.x</div></td>
<td><code><span class="key">import</span> arcpy</code></td>
</tr>
</table><strong>ArcGIS Version</strong><strong>Python code statements</strong><div align="center">9.1</div><code><span class="key">from</span> win32com.client <span class="key">import</span> Dispatch <br />
                    gp <span class="o">=</span> Dispatch(<span class="s">'esriGeoprocessing.GPDispatch.1'</span>)</code> <div align="center">9.2</div><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create( ) </code><div align="center">9.3</div><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create(<span class="mi">9.3</span>) </code><div align="center">10.x</div><code><span class="key">import</span> arcpy</code><strong>ArcGIS Version</strong><strong>Python code statements</strong><div align="center">9.1</div><code><span class="key">from</span> win32com.client <span class="key">import</span> Dispatch <br />
                    gp <span class="o">=</span> Dispatch(<span class="s">'esriGeoprocessing.GPDispatch.1'</span>)</code> <div align="center">9.2</div><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create( ) </code><div align="center">9.3</div><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create(<span class="mi">9.3</span>) </code><div align="center">10.x</div><code><span class="key">import</span> arcpy</code><span class="head">6.6 Discussion </span><a name="discussion" id="discussion"></a><a href="#top">back to top</a> <blockquote>
<p>When you search for <code>arcpy</code> objects on the ArcGIS Resources site,  add the word <code>arcpy</code> to the search to bring the <code>arcpy</code>-related results to the top of the search.<br />
</p>
</blockquote><span class="head">6.7 Key terms</span><a name="keyterms" id="keyterms2"></a><a href="#top">back to top</a> <span class="head">6.8 Exercises</span> <a name="exercises" id="exercises"></a><a href="#top">back to top</a> ------------------------------------------------------------rows: 63 cols: 0<span class="head">6.1 Importing <code>arcpy</code></span> <a name="arcpy" id="environment3"></a><span class="head">6.2 <code>arcpy</code> Functions</span> <a name="functions" id="environment2"></a><span class="head">6.3 Environment
                settings</span> <a name="environment" id="environment"></a><code>arcpy<span class="o">.</span>env<span class="o">.</span>property <span class="o">=</span> value</code><code>variable <span class="o">=</span> arcpy<span class="o">.</span>env<span class="o">.</span>property</code><p><span class="head">6.4 Calling 
                  Tools</span> <a name="tools" id="tools"></a></p>ToolboxAlias<span><strong><span class="head">6.4.1 Using tool help</span><a name="help" id="help"></a></strong></span><span><strong><span class="head">6.4.2 Copy code snippet</span></strong></span> <a name="snippet" id="snippet"></a><span><strong><span class="head">6.4.3 Linear units</span></strong></span> <a name="linear" id="snippet2"></a><span><strong><span class="head">6.4.4 Python expressions as inputs</span><a name="expressions" id="expressions"></a></strong></span><span><strong><span class="head">6.4.5 Multivalue inputs</span></strong></span> <a name="multivalue" id="multivalue"></a><span><strong><span class="head">6.4.6 Optional parameters</span></strong></span> <a name="optional" id="optional"></a><span><strong><span class="head">6.4.7 Return values (...using the <code>Result</code> object)</span><a name="return" id="return"></a></strong></span><span class="head">6.4.8 Calling  Spatial Analyst tools</span><a name="sa" id="sa"></a><span>
<span class="head">6.4.9 Importing spatial analyst</span>
<a name="importsa" id="importsa"></a></span><span class="head">6.4.10 Raster Calculator</span>

<a name="rastCalc" id="importsa2"></a> <span><strong><span class="head">6.4.11 Temporary feature layers</span><a name="tempLayers" id="custom2"></a></strong></span><span class="head">6.4.12 Using variables for multiple tool calls</span><a name="multipleTool" id="multipleTool"></a><span><strong><span class="head">6.4.13 Calling custom tools</span><a name="custom" id="custom"></a></strong></span><span class="head">6.5 A word about old scripts</span> <a name="arcgisscripting" id="introduction3"></a><span class="head">6.6 Discussion </span><a name="discussion" id="discussion"></a><span class="head">6.7 Key terms</span><a name="keyterms" id="keyterms2"></a><span class="head">6.8 Exercises</span> <a name="exercises" id="exercises"></a><br /><span class="head">Chapter objectives</span>
<br />
<br />
        After reading this chapter, you'll be able to do the following: 
        <ul>
<li>Explain, in general terms, the capabilities of the <code>arcpy</code> package.<br />
</li>
<li>Define the Python terms <em>module</em> and <em>package</em>.</li>
<li><span>Set geoprocessing environment variables.</span></li>
<li>Invoke geoprocessing tools with Python.</li>
<li>Interpret ArcGIS Resources  scripting help for geoprocessing tools.</li>
<li>Copy code snippets from hand-run tools.</li>
<li>Calculate field values with Python expressions.</li>
<li>Format linear units, multi-value input and optional input for GIS tools.</li>
<li>Consume values returned by GIS tools.</li>
<li>Call Spatial Analyst tools and perform map algebra.</li>
<li>Save temporary raster and feature layer data.</li>
<li>Use output from tool a GIS tool as input to another GIS tool. </li>
<li>Import custom toolboxes and call custom tools.</li>
</ul>
<hr />
<span class="foo">
<span class="head">Chapter Outline</span>
<br />
<br />
<a href="#arcpy">Importing <code>arcpy</code> </a><br />
<a href="#functions"><code>arcpy</code> Functions</a><br />
<a href="#environment">Environment settings</a><br />
<a href="#tools">Calling tools</a><br />
          &nbsp;&nbsp;&nbsp;&nbsp;<a href="#help">Using tool help</a><br />
          &nbsp;&nbsp;&nbsp;&nbsp;<a href="#snippet">Copy Code Snippet</a><br />
          &nbsp;&nbsp;&nbsp;&nbsp;<a href="#linear">Linear units</a><br />
          &nbsp;&nbsp;&nbsp;&nbsp;<a href="#expressions">Python expressions as inputs</a><br />
          &nbsp;&nbsp;&nbsp;&nbsp;<a href="#multivalue">Multivalue inputs</a><br />
          &nbsp;&nbsp;&nbsp;&nbsp;<a href="#optional">Optional parameters</a><br />
          &nbsp;&nbsp;&nbsp;&nbsp;<a href="#return">Return values</a><br />
          &nbsp;&nbsp;&nbsp;&nbsp;<a href="#sa">Calling Spatial Analyst tools</a><br />
          &nbsp;&nbsp;&nbsp;&nbsp;<a href="#importsa">Importing spatial analyst</a><br />
          &nbsp;&nbsp;&nbsp;&nbsp;<a href="#rastCalc">Raster Calculator</a><br />
          &nbsp;&nbsp;&nbsp;&nbsp;<a href="#tempLayers">Temporary Layers<br />
</a><a href="#tempLayers"></a>&nbsp;<a href="#tempLayers"></a>&nbsp;&nbsp;&nbsp;<a href="#multipleTool">Using variables for multiple tool calls</a><br />
          &nbsp;&nbsp;&nbsp;&nbsp;<a href="#custom">Calling custom tools</a><br />
<a href="#arcgisscripting">A word about old scripts</a><br />
<a href="#keyterms">Key terms</a><br />
<a href="#discussion">Discussion</a><br />
<a href="#exercises">Exercises</a><br />
</span> <hr />
<p>          Now that you know some basic  Python and  some things about ArcGIS geoprocessing tools,  we can begin to discuss Python ArcGIS functionality.  Many aspects of ArcGIS  functionality, including tools are accessible through Python. The key to accessing ArcGIS in Python is a special set of scripts called <code>arcpy</code>. The main idea of this chapter is to familiarize you with <code>arcpy</code> and the syntax for using ArcToolbox tools. </p>
<hr /><table border="0" width="775">
<tbody>
<tr>
<th align="left" scope="row"><span class="head">6.1 Importing <code>arcpy</code></span> <a name="arcpy" id="environment3"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<p>You may have noticed that the scripts exported from Modelbuilder begin by importing <code>arcpy</code>.  This is how most geoprocessing scripts begin, because importing <code>arcpy</code> is the key to accessing ArcGIS Python. To use ArcGIS functionality in Python, a script  needs to import <code>arcpy</code>. The terms <code>import</code> and <code>arcpy</code> are explained here:</p>
<ul>
<li>The keyword <code>import</code> is used to reference a  module or a package. This provides access to functionality beyond the built-in Python functionality. As discussed in Chapter 2, the term following the <code>import</code> keyword  is a module or a package.  Recall that a <em>module</em> is a single Python script ('.py' file) containing tightly related definitions and statements. A <em>package</em> is a special way of structuring a set of related Python modules. A package is a directory containing modules and sometimes subpackages, which also contain modules. A module named '__init__.py' tells Python that the directory contains a package. Modules structured within a package and items in those modules can be accessed using the  dot notation.<br />
<br />
</li>
<li><code>arcpy</code> is a package installed with ArcGIS. <code>arcpy</code> can also be thought of as a Python object that has numerous methods, including geoprocessing tools. Search under the ArcGIS install and you will find an <code>arcpy</code> directory. This is the package being imported. <code>arcpy</code> provides a variety of functionality that we'll be using throughout the remainder of the book. Table 6.1 lists the main <code>arcpy</code> topics covered in this book. </li>
</ul>
<p>The <code>arcpy</code> package has an object-oriented design which can be defined using object-oriented terms, some of which were already used in Chapters 3 and 4:</p>
<ul>
<li>Everything in Python is an <em>object</em>, including modules and packages. <code>arcpy</code> is an object. <code>arcpy</code> also uses objects, such as  a <code>ValueTable</code> object, a <code>Describe</code> object, and a <code>Result</code> object which are discussed in upcoming sections. <br />
<br />
</li>
<li>Objects have methods associated with them. A <em>method</em> is a function that performs some action on the object.  Methods are simply a specific type of functions. The terms 'calling methods', 'passing arguments', and 'returning values'  apply to methods just as they apply to functions.</li>
</ul>
<p> Dot notation generates context menus for <code>arcpy</code>, showing a list of available <code>arcpy</code> methods and properties. When you use dot notation with strings and lists, context menus automatically appear, but these are built-in data types. In order to view context menus for <code>arcpy</code>, you must first import <code>arcpy</code> to give Python access to the information it uses to populate the context menu. In other words, it recognizes the word <code>arcpy</code> as a package.  Once you have imported <code>arcpy</code>, within a PythonWin session, the context menus are available for the entire session.  Try the code shown in the screen shot below to see the context menu for  <code>arcpy</code>. In some cases, no error will occur if incorrect spelling or capitalization is used; it will simply not work. Selecting choices from the  context menu is a good way to maintain accurate spelling and capitalization and increase efficiency. You can start typing a name and the menu will scroll to the closest choice. Press the 'Tab' key and the current selection will automatically be completed. If you don't see your choice, your spelling or capitalization is wrong.  The <code>arcpy</code> menu contains a list of  <code>arcpy</code> functions, environment settings,  tools, and modules. <br />
<br />
<img src="../images/autoCompletion.png" alt="autocompletion" width="561" height="205" /></p>
<table bgcolor="#eeeeee" border="0" bordercolor="#ece9d8" width="779">
<tbody>
<tr>
<td scope="row"><p><strong>Table 6.1: Highlights of <code>arcpy</code> functionality </strong><a name="create" id="create2"></a></p>
<table width="759" border="1">
<tr>
<td width="74"><strong>ArcGIS Topic</strong></td>
<td width="260"><strong>Functionality</strong></td>
<td width="403"><strong>Code sample</strong></td>
</tr>
<tr>
<td>Tools </td>
<td>Call ArcToolbox tools</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="s">&#39;output.shp&#39;</span><span class="p">,</span> <span class="s">&#39;1 Mile&#39;</span><span class="p">)</span></code></td>
</tr>
<tr>
<td>Other functions</td>
<td>Licensing, data management, and other miscellaneous needs.</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">CheckOutExtension</span><span class="p">(</span><span class="s">&#39;Spatial&#39;</span><span class="p">)</span></code></td>
</tr>
<tr>
<td>Environment<br />
                      variables</td>
<td>Set and get environment variable values</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span> </code></td>
</tr>
<tr>
<td>Describe</td>
<td>Describe data properties</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">Describe</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">)</span> </code></td>
</tr>
<tr>
<td>Listing data</td>
<td>List  items (e.g., rasters, feature classes, workspaces, toolboxes,  environment variables, and indexes)</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">ListFeatureClasses</span><span class="p">(</span> <span class="p">)</span> </code></td>
</tr>
<tr>
<td>Cursor</td>
<td>Read/modify attribute table elements</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">da</span><span class="o">.</span><span class="n">SearchCursor</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="n">fieldNames</span><span class="p">)</span> </code></td>
</tr>
<tr>
<td>Messaging</td>
<td>Get and print geoprocessing messages</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">GetMessages</span><span class="p">(</span> <span class="p">)</span> </code></td>
</tr>
<tr>
<td>Mapping</td>
<td>Manipulate existing map layers, add layers to maps, modifying surrounds, manipulate symbology<br /></td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">mapping</span><span class="o">.</span><span class="n">MoveLayer</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">refLayer</span><span class="p">,</span> <span class="n">moveLayer</span><span class="p">,</span> <span class="s">&#39;BEFORE&#39;</span><span class="p">)</span> </code></td>
</tr>
</table>
<br /></td>
</tr>
</tbody>
</table>
<p> With each software release, <code>arcpy</code> functionality grows.  It would be difficult to learn about every <code>arcpy</code> object, method, and property. You can accomplish a lot with just a high level knowledge  of available functionality along with some detailed knowledge of a few components. The rest of the details can be referenced in the help documentation. Figure 6.2  provides an overview of <code>arcpy</code> functionality. Symbols are used for properties, methods, and objects as shown in the key (bottom right). Designed loosely to resemble an  object model diagram, the boxes enclose functionality categories and only a few examples are shown for each category (it's designed more like a 'cheat sheet' than an object model diagram). The contents are not exhaustive  but Figure 6.2 will provide a reference for the <code>arcpy</code> discussion. Packages, modules, and classes are Python constructs for organizing code. These constructs can contain functions (or methods) and properties. To see a complete list of functions/methods and properties for any of these constructs, search the online ArcGIS  Resources site. </p>
<p><img src="../images/cheatSheet1.png" border="1" /><br />
<strong>Figure 6.2</strong> Main components of <code>arcpy</code> functionality with a few examples listed for each item.</p>
<hr />
<table border="0" width="775">
<tbody>
<tr>
<th align="left" scope="row"><span class="head">6.2 <code>arcpy</code> Functions</span> <a name="functions" id="environment2"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<p>The  <code>arcpy</code> functions (blue box in Figure 6.2) provide support for geoprocessing workflows.   For example, functions can be used to list datasets, retrieve a dataset's   properties, check for existence of data, validate a table name before   adding it to a geodatabase, or perform many other useful scripting   tasks. The syntax for calling functions in the <code>arcpy</code> package uses the dot notation with  <code>arcpy</code> before the dot and the function name after the dot:</p>
<table width="600" border="0" bgcolor="#ffcccc">
<tbody>
<tr>
<td width="791" scope="row"><code>arcpy<span class="o">.</span>functionName(argument1, 
              argument2, argument3,...)</code></td>
</tr>
</tbody>
</table>
<p>In the following example, the function name is 'CheckExtension' and it takes one argument, the extension code, '3D' for the 3D Analyst toolbox: <br />
</p>
<p><code>&gt;&gt;&gt; <span class="key">import</span> arcpy<br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>CheckExtension(<span class="s">'3D'</span>)<br />
<span class="num">u'Available'<br />
</span></code></p>
<p>The response means the 3D Analyst Extension license is available to be checked out. 
          As mentioned earlier, the <code>u</code> in front stands for unicode, a way of encoding strings. But the string encoding doesn't have any practical repercussions for our interests, so you can ignore this. If you print the value, with the built-in <code>print</code> function, the <code>u</code> will not be included. <br />
<code><br />
          &gt;&gt;&gt; <span class="key">print</span> arcpy<span class="o">.</span>CheckExtension(<span class="s">'3D'</span>)<br />
</code><code><span class="n">Available</span></code><br /> </p>
<p>Notice, the example above did not import <code>arcpy</code>. For a given PythonWin session, once  <code>arcpy</code> is imported, it doesn't need to be imported again. But if  PythonWin is closed and reopened, <code>arcpy</code> needs to be imported again. <br />
<br />
          Functions that don't require arguments still need to use parentheses. For example, the <code>ListPrinterNames</code> function lists the printers available to the caller and takes no arguments:<br />
<code><br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>ListPrinterNames( )<br />
<span class="num">[u'Use Mac Printer', u'Send To OneNote 2010', u'Microsoft XPS Document Writer', u'Fax', u'Adobe PDF']<br />
</span></code><br />
          Many <code>arcpy</code>  functions return  values. An assignment statement can  capture the return value in a variable. The following code creates a <code>arcpy</code> <code>Point</code> object. The <code>CreateObject</code> function returns a <code>Point</code> object and it is stored in the variable named <code>pt</code>. The second line prints the value of this variable,  a 2-dimensional <code>Point</code> object located at <code>(0,0)</code>:<br />
<code><br />
          &gt;&gt;&gt; pt <span class="o">=</span> arcpy<span class="o">.</span>CreateObject(<span class="s">'Point'</span>)<br />
&gt;&gt;&gt; pt<br />
</code><code><span class="n">&lt;Point (0.0, 0.0, #, #)&gt;</span></code><br />
<br />
          The <code>arcpy</code> functions serve a  variety of scripting needs, some dealing with administrative concerns such as licensing (e.g., <code>CheckExtension</code>), others dealing with data management. For example, the <code>Exists</code> function takes one argument, a dataset and checks if it exists:</p>
<p><code>&gt;&gt;&gt; arcpy<span class="o">.</span>Exists(<span class="s">'C:/gispy/data/ch06/park.shp'</span>)<br />
          True<br />
</code></p>
<p>Other functions deal with topics such as geodatabase management, messaging, fields, tools, parameters, and cursors.   Search  for an 'alphabetical list of <code>arcpy</code> functions', on the ArcGIS Resources site to see a complete list of functions. Technically, the ArcToolbox tool functions are <code>arcpy</code> functions, but these are listed separately elsewhere on the site.  The syntax for calling tools is  similar to the syntax for calling other <code>arcpy</code> functions. Before we call tools it's important to know about managing environment settings. The syntax for environment settings uses dot notation as well.<br />
</p>
<hr /><table border="0" width="775">
<tbody>
<tr>
<th align="left" scope="row"><span class="head">6.3 Environment
                settings</span> <a name="environment" id="environment"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<p><img src="../images/envSettings.png" alt="envSettings" /><br />
          Figure 6.2a<br />
<br />
          Each tool has  settings it uses to execute an operation, such as a tolerance or   output location. The <em>environment settings</em> are conditions shared by all tools. ArcGIS has default values for these settings and users can modify the values via a dialog box in ArcGIS (Geoprocessing &gt; Environments launches the dialog box shown in Figure 6.2a). Python commands can also be used to get or set  the values of these settings. <code>arcpy</code> has an <code>env</code> class, a special structure for holding related properties. The <code>env</code> properties control the environment settings. <code>env</code> belongs to <code>arcpy</code> and the properties belong to the <code>env</code> class, so the property names have two dots, one after <code>arcpy</code> and one after <code>env</code>. The format for setting these properties is: </p>
<table width="600" border="0" bgcolor="#ffcccc">
<tbody>
<tr>
<th width="785" scope="row" align="left"><code>arcpy<span class="o">.</span>env<span class="o">.</span>property <span class="o">=</span> value</code></th>
</tr>
</tbody>
</table>
<p>The format for getting these properties is:</p>
<table width="600" border="0" bgcolor="#ffcccc">
<tbody>
<tr>
<th width="783" scope="row" align="left"><code>variable <span class="o">=</span> arcpy<span class="o">.</span>env<span class="o">.</span>property</code></th>
</tr>
</tbody>
</table>
<p>The workspace path and the overwrite output status are important environment  properties. The workspace  path specifies a structure such as a directory or file geodatabase that contains pertinent data. Tools look for input data in the workspace and place the output in the workspace. If the input data resides in the workspace, only the name of the file needs to be used. <code>arcpy</code> will automatically search in the workspace. Similarly, the workspace is the default location for output, unless otherwise specified. <br />
<code><br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>env<span class="o">.</span>workspace <span class="o">=</span> <span class="s">'C:/Data/Forestry'</span> <span class="comment"># Setting 
          the current workspace path</span><br />
<br />
          &gt;&gt;&gt; mydir <span class="o">=</span>  arcpy<span class="o">.</span>env<span class="o">.</span>workspace <span class="comment"># Getting 
          the current workspace path</span><br />
          &gt;&gt;&gt; mydir</code><code><span class="n"><br />
          u'C:/Data/Forestry'</span></code><br />
<br />
          Setting the workspace is simply a string assignment. No checking is done at this point to ensure that the workspace exists. This only occurs when a tool attempts to use the workspace to read or write data. The overwrite output status, either <code>True</code> or <code>False</code>, controls whether or not existing files are allowed to be overwritten by output from tools. The built-in constants <code>True</code> or <code>False</code> must be capitalized. The overwrite output status can also be set to 1 or 0 (1 for <code>True</code> and <code>0</code> for False). The default value for the <code>overwriteOutput</code> properties is <code>False</code>. <br />
<br />
<code>&gt;&gt;&gt; arcpy<span class="o">.</span>env<span class="o">.</span>overwriteOutput<br />
</code><code><span class="n">False</span></code><br />
<br />
          This protects the user from unintentionally overwriting a file, but is  inconvenient during development when scripts  need to be run more than once for testing. For  complex scripts, it's useful to set overwriteOutput to <code>True</code> placing this statement near the beginning of the script, after <code>arcpy</code> is imported, but before any tool calls are made:</p>
<p><code>&gt;&gt;&gt; arcpy<span class="o">.</span>env<span class="o">.</span>overwriteOutput <span class="o">=</span> <span class="bp">True</span><br />
</code><br />
          Since Python is case-sensitive, be sure to use lower camel case for <code>overwriteOutput</code>.  For environment settings, no error will appear if  the capitalization is incorrect; it will simply not work as expect. In this example, we use the wrong capitalization and no error is reported, but the value of the overwriteOutput property is not changed to False:<br />
<code><br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>env<span class="o">.</span>overwriteoutput <span class="o">=</span> <span class="bp">False</span><br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>env<span class="o">.</span>overwriteOutput<br />
<span class="num">True<br />
</span></code><br />
          Other environment variables may be useful for specific 
          problems.  For example, when you are creating raster data
          sets, you may
          want to set the tile size property which specifies the height and width of  data stored in blocks.  The default size  is 128 by 128 pixels:<br />
<code><br />
&gt;&gt;&gt; arcpy<span class="o">.</span>env<span class="o">.</span>tileSize<br />
</code><code><span class="n">u'128 128'</span></code><br />
<br />
          Type the following line of code to print a complete list of available environment 
          properties:</p>
<p><code>&gt;&gt;&gt; arcpy<span class="o">.</span>ListEnvironments()</code></p>
<hr /><table border="0" width="775">
<tbody>
<tr>
<th align="left" scope="row"><p><span class="head">6.4 Calling 
                  Tools</span> <a name="tools" id="tools"></a></p></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<p>
 
 ArcGIS users know how to run tools from ArcToolbox. As you saw in the Modelbuilder example, ArcToolbox tools, like other <code>arcpy</code> functions, use dot notation with <code>arcpy</code> before the dot. After the dot,  are the tool name and toolbox alias separated by an underscore. All ArcGIS tools with the exception of tools in  the Spatial Analyst Toolbox can be called with the following syntax:</p>
<table width="600" border="0" bgcolor="#ffcccc">
<tbody>
<tr>
<td width="600" scope="row"><code>arcpy<span class="o">.</span>toolName_toolboxAlias(arguments1, 
              argument2, argument3,...)</code></td>
</tr>
</tbody>
</table>
<p>For example, the RasterToASCII tool is in the Conversion Toolbox. The following example takes two arguments, the input raster name ('C:/gispy/data/ch06/getty_rast') and the output ASCII text file name ('C:/gispy/data/ch06/output.txt'). The first line sets the workspace, so we don't need to specify the full path file names:<br />
<code><br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>env<span class="o">.</span>workspace <span class="o">=</span> <span class="s">'C:/gispy/data/ch06/'</span><br />
          &gt;&gt;&gt; inputRaster <span class="o">=</span> <span class="s">'getty_rast'</span><br />
          &gt;&gt;&gt; outputFile <span class="o">=</span> <span class="s">'output.txt'</span><br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>RasterToASCII_conversion(inputRaster, outputFile)<br />
</code><br />
          The toolbox alias needs to be part of the tool call because some tools have the same name. For example, there is a Buffer tool in both the Analysis and Coverage Toolboxes. Table 6.2  lists a few toolbox aliases examples. Search the ArcGIS Resources site with the phrase 'toolbox alias' to see a complete list.  The following example finds a one quarter mile buffer around the polygons in the shapefile. If the workspace is not set and the full file path for the output is not specified, the output is placed in the same directory as the input. The first line sets <code>overwriteOutput</code> to <code>True</code>, in case 'parkBuffer.shp' already exists in 'C:/gispy/data/ch06'.</p>
<p><code>&gt;&gt;&gt; arcpy<span class="o">.</span>env<span class="o">.</span>overwriteOutput <span class="o">=</span> <span class="bp">True</span><br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>Buffer_analysis(<span class="s">'C:/gispy/data/ch06/park.shp'</span>,<span class="s"> 'parkBuffer.shp'</span>,<span class="s"> '0.25 
          miles'</span>)<br />
</code></p>
<p>The name of the input, include the path where it is stored. We call this the <em>full path file name</em>. If a full path file name is specified in a tool call, the full path file location is used instead of the workspace. In the following example, the tool looks for the input file within the <code>arcpy</code> workspace, but the output is placed in a different directory because the full path file name is used for the output:<br />
<code><br />
            &gt;&gt;&gt; arcpy<span class="o">.</span>env<span class="o">.</span>workspace <span class="o">=</span> <span class="s">'C:/gispy/data/ch06/'</span><br />
&gt;&gt;&gt; arcpy<span class="o">.</span>Buffer_analysis(<span class="s">'park.shp'</span>,<span class="s"> 'C:/gispy/scratch/parkBuffer.shp'</span>,<span class="s"> '0.25 
          miles'</span>)<br />
</code><br />
          The Buffer (Analysis) tool requires three arguments: the input data, the output file name, and a buffer distance. There are several more optional arguments. The next section explains  the ArcGIS Resources site tool help information, such as the required/optional parameters for a tool.        </p>
<table width="475" bgcolor="#eeeeee">
<tr>
<td width="467"><strong>Table 6.2 </strong>Toolbox alias examples<br />
<table border="3">
<tr>
<th width="186" scope="row">Toolbox</th>
<th width="117">Alias</th>
</tr>
<tr>
<td>3D Analyst Tools</td>
<td>3d</td>
</tr>
<tr>
<td>Analysis Tools</td>
<td>analysis</td>
</tr>
<tr>
<td>Cartography Tools</td>
<td>cartography</td>
</tr>
<tr>
<td>Conversion Tools</td>
<td>conversion</td>
</tr>
<tr>
<td>Data Interoperability Tools</td>
<td>interop</td>
</tr>
<tr>
<td>Data Management Tools</td>
<td>management</td>
</tr>
<tr>
<td>Spatial Analyst Tools</td>
<td>sa</td>
</tr>
<tr>
<td>Spatial Statistics Tools</td>
<td>stats</td>
</tr>
</table></td>
</tr>
</table>
<br />
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span><strong><span class="head">6.4.1 Using tool help</span><a name="help" id="help"></a></strong></span></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p> As mentioned in Chapter 5, the ArcGIS Resources site hosts a 'Tool reference' page for each tool. Search on the name of the tool and filter by 'Help' and 'Desktop' to find a tool's page.  Tool reference pages begin with an explanation of how the tool works (usually consisting of Summary, Illustration, and Usage sections). The next sections, the 'Syntax' and 'Code sample' sections are guides for Python scripting.</p>
<p> As an example, search for the Buffer (Analysis) tool. The 'Syntax' section begins with a function signature (a code template). Locate the 'Syntax' section for the Buffer tool. At the very beginning of this section,  tool syntax is represented by a <em>code signature</em>. This is a blueprint for how to call the tool via Python. The code signature for the Buffer (Analysis) tool looks like this: </p>
<blockquote><code>Buffer_analysis (in_features, out_feature_class,   buffer_distance_or_field, {line_side}, {line_end_type},   {dissolve_option}, {dissolve_field})</code></blockquote>
<p>It shows the toolName_toolboxAlias followed by a list of arguments. Python scripts need to list the parameters in the same order shown in the code signature. The table uses the term 'parameter' instead of 'argument'. These terms are closely related and sometimes used interchangeably. Strictly speaking, though, a 'parameter' is specified in the tool's signature; Whereas,  an 'argument' is a specific value passed in for a tool call.   
          Optional parameters are surrounded by curly brackets in the code signature. For example, the last four buffer parameters are optional. </p>
<p>The table below the code signature provides more information about these parameters. Figure 6.3 shows the first few rows of the Buffer (Analysis) tool parameter table. The table has three columns 'Parameter', 'Explanation', and 'Data Type'. </p>
<ul>
<li>The 'Parameter' column contains the parameter name as given in the code signature. If the parameter is optional, the word 'optional' appears behind the name. The Python code often uses a string to pass in the parameter value. In a some cases, Python lists are used to supply values for <em>multivalue inputs</em>, for  parameters which accept more than one value. If this is the case, a list appears behind the variable name Parameter column. For example, the Merge (Data Management) tool takes a list of input datasets. The table entry for this parameter is shown in Figure 6.3.<br />
<img src="../images/listParameters.png" width="122" height="76" /><br />
<strong>Figure 6.3 </strong>The [inputs,...] indicates that you can pass in a list of input files for this parameter.<br />
<br />
</li>
<li>The 'Explanation' column describes   the purpose of the parameter, gives a list of acceptable values (where applicable), and indicates the default behavior for optional parameters. <br />
<br />
</li>
<li>The 'Data Type' column lists the Esri data type the tool needs for each parameter. These data types are specialized structures related to ArcGIS data. The data types in this column  do not refer to Python data types.  For example, the <code>in_features</code> and <code>out_feature_class</code> are Feature Layer and Feature Class data types, respectively. 'Feature Layer' and 'Feature Class' refer to Esri data files such as Shapefiles, but we use a Python string  to specify the names of these files. The 'Linear Unit' is a distance, but we use a Python string  to specify that too. In the following example, Python string literals are used to specify a Feature Layer, a Feature Class, and a Linear Unit:<br />
<br />
<code>&gt;&gt;&gt; arcpy<span class="o">.</span>Buffer_analysis(<span class="s">'C:/gispy/data/ch06/park.shp'</span>,<span class="s"> 'parkBuffer.shp'</span>,<span class="s"> '0.25 
            miles'</span>)</code></li>
</ul>
<p><img src="../images/buffer_table.png" alt="a" width="787" height="208" /><br />
<strong>Figure 6.4 </strong>The code signature and top portion of the parameter  table in the 'Syntax' section of the Buffer (Analysis) tool help page.</p>
<p id="GUID-005927AB-ACD6-4FB1-99F3-CA0BC43CF71F">The 'Code Sample' section following the 'Syntax' section provides sample scripts that can be a good starting point for beginners. Sometimes they can be used with only slight adjustments to accommodate the differences in input data. </p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span><strong><span class="head">6.4.2 Copy code snippet</span></strong></span> <a name="snippet" id="snippet"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Another help option is to run a tool using its dialog box and then copy the Python code it creates as follows:</p>
<ol id="GUID-15C12CF9-3326-43EB-B474-46EEA64367FD" purpose="ol">
<li purpose="li" id="GUID-EB40E153-19F4-48C0-BFCC-4F597B0D8E66">Locate the tool in ArcToolbox.</li>
<li purpose="li" id="GUID-9C0158F2-5F04-4B17-9AC2-FB16D45D52B5">Execute the tool using its dialog box.</li>
<li purpose="li" id="GUID-E884FE1F-8D1D-44C3-8803-B6DBF08AE271">Open the 'Results' window (Geoprocessing menu &gt; Results).</li>
<li>In the Results window,   right-click on the tool name in the results listed there and select 'Copy as Python snippet'. </li>
<li>Paste the snippet into PythonWin and examine the syntax.</li>
</ol>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span><strong><span class="head">6.4.3 Linear units</span></strong></span> <a name="linear" id="snippet2"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>A linear unit is an Esri data type for Euclidean distances. When we use a tool's GUI interface, there's a text box and a combo box for typing a number and selecting a unit of measure. In Python, linear units are specified as a string, with a number and a unit of measure, separated by a space (e.g.,<code>'0.25 miles'</code>).  A list of recognized unit of measures is given in Table 6.3. Singular and plural forms of these units are both accepted. Also, linear unit names are not case sensitive. If a distance unit is not specified, the tool uses the units of the input feature, unless the Output Coordinate System environment property has been set.</p>
<p><img src="../images/tool_GUI.png" alt="Buffer tool graphical user interface" /></p>
<table width="572" bgcolor="#eeeeee">
<tr>
<td width="564"><strong>Table 6.3</strong> Linear Unit of Measure Keywords (not case 
              sensitive)
              <table border="1" width="453">
<tbody>
<tr>
<td width="443">centimeters | decimal degrees | decimeters | feet | inches | kilometers | meters | miles | millimeters | nautical miles | points | unknown | yards</td>
</tr>
</tbody>
</table></td>
</tr>
</table>
<br />
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span><strong><span class="head">6.4.4 Python expressions as inputs</span><a name="expressions" id="expressions"></a></strong></span></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Some tools, such as the Calculate Field and Calculate Value (Data Management) tools take parameters which are themselves Python expressions. The expression can be very simple. For example, the following code sets every entry in the <code>'result'</code> field of the 'data1.shp' shapefile to 5:<br />
<code><br />
          &gt;&gt;&gt; data <span class="o">=</span><span class="s"> 'C:/gispy/data/ch06/data1.shp'</span><br />
          &gt;&gt;&gt; fieldName <span class="o">=</span> <span class="s">'result'</span><br />
          &gt;&gt;&gt; expression <span class="o">=</span> <span class="mi">5</span><br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>CalculateField_management(data, fieldName, expression, <span class="s">'PYTHON'</span>)<br />
</code></p>
<p>The last parameter in this Calculate Field call indicates the type of the expression (The alternatives are <code>'PYTHON'</code>, <code>'PYTHON_9.3'</code>, or <code>'VB'</code> and <code>'VB'</code> is the default). The Calculate Field expressions can also use the values in other fields and combine them with mathematical operators. In these expressions, field names need to be surrounded by  exclamation points. The following code calculates the <code>'result'</code> field again using an expression which multiplies the value in the <code>'measure'</code> field by two and subtracts the value in the <code>'coverage'</code> field:<br />
<code><br />
          &gt;&gt;&gt; expression <span class="o">=</span> <span class="s">'2*!measure! - !coverage!'</span><br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>CalculateField_management(data, fieldName, expression, <span class="s">'PYTHON'</span>)<br />
</code></p>
<p>Note that the expression must be compatible with the field type. The 'result' field is a 'float' type field, so mathematical values can be used.  Feature class field calculation expressions can also use the 'shape' field (Only feature classes have a 'shape' field). This shape field contains a set of <code>arcpy</code> <code>Geometry</code> objects (listed in Figure 6.2 under 'Other objects'). <code>arcpy</code> <code>Geometry</code> objects have properties such as 'area' and 'length'. These properties  can be used with dot notation on the 'shape' field in the expressions. The following code uses the 'area' geometry property to calculate a field named <code>'PolyArea'</code> for the 'special_regions.shp' polygon shapefile:<br />
<code><br />
          &gt;&gt;&gt; data<span class="o"> =</span> <span class="s">'C:/gispy/data/ch06/special_regions.shp'</span><br />
          &gt;&gt;&gt; fieldName <span class="o">=</span> <span class="s">'PolyArea'</span><br />
          &gt;&gt;&gt; expression <span class="o">=</span> <span class="s">'!shape.area!'</span><br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>CalculateField_management(data, fieldName, expression, <span class="s">'PYTHON'</span>)<br />
</code></p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span><strong><span class="head">6.4.5 Multivalue inputs</span></strong></span> <a name="multivalue" id="multivalue"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p><span>Some tools accept multiple values as input for a single parameter. </span>They are usually tools that combine the input in some manner (e.g., merge or intersect the data). The tool help table shows parameters which accept multiple values with a list behind their name in the 'Parameter' column (see Figure 6.3). A Python list may be the simplest way to input these values, especially if you already have the input in a list. However, there are two other ways to provide input to these tools. They also accept  a semicolon delimited string or as a <code>ValueTable</code> object. In the following code  a Python list is used to specify the three input files to merge:<br />
</p>
<p><code>&gt;&gt;&gt; inputFiles <span class="o">=</span>          [<span class="s">'park.shp'</span>, <span class="s">'special_regions.shp'</span>, <span class="s">'workzones.shp'</span>]<br />
  &gt;&gt;&gt; arcpy<span class="o">.</span>Merge_management(inputFiles, <span class="s">'mergedData.shp'</span>)<br />
</code></p>
<p>In some cases, you may have values in a <em>multivalue string</em>, a string where the values are separated (or delimited) by semicolons. Multivalue parameters can be specified in this way too. Here the three inputs are given in a multivalue string:<br />
<code><br />
          &gt;&gt;&gt; inputFiles <span class="o">=</span> <span class="s">'park.shp;special_regions.shp;workzones.shp'</span><br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>Merge_management(inputFiles, <span class="s">'mergedData2.shp'</span>)<br />
</code><br />
          A ValueTable is an <code>arcpy</code> object for storing rows and columns of information. To use it, you create a <code>ValueTable</code> object using the <code>arcpy</code> <code>ValueTable</code> function. It returns a <code>ValueTable</code> object, which has methods and properties. One of the ValueTable methods is 'addRow'. This example shows how to use the value table to merge three files:<br />
<code><br />
          &gt;&gt;&gt; vt <span class="o">=</span> arcpy<span class="o">.</span>ValueTable( )<br />
          &gt;&gt;&gt; vt<span class="o">.</span>addRow(<span class="s">'park.shp'</span>)<br />
          &gt;&gt;&gt; vt<span class="o">.</span>addRow(<span class="s">'special_regions.shp'</span>)<br />
          &gt;&gt;&gt; vt<span class="o">.</span>addRow(<span class="s">'workzones.shp'</span>)<br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>Merge_management(vt, <span class="s">'mergedData3.shp'</span>)<br />
</code></p>
<p>The merge example is a one-dimensional example.That is, it only has one item in each row. The true advantage of the <code>ValueTable</code> object is for dealing with higher dimensions of data. The <code>ValueTable</code> approach  provides a convenient way to organize data when the input is a list of lists. As an example, the 'in_features' for the Intersect tool is a list of input file names. Alternatively, it can be a list of file names and priority rankings. For example, </p>
<p><code>&gt;&gt;&gt; inputFiles <span class="o">=</span> [ [<span class="s">'park.shp'</span>, 2], [<span class="s">'special_regions.shp'</span>, 2], [<span class="s">'workzones.shp'</span>,1] ]<br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>Intersect_analysis(inputFiles, <span class="s">'intersectData.shp'</span>)<br />
</code></p>
<p>Instead of using a list of lists, you could use a ValueTable for the intersection example as follows:<br />
<code><br />
          &gt;&gt;&gt; vt <span class="o">=</span> arcpy<span class="o">.</span>ValueTable( )<br />
          &gt;&gt;&gt; vt<span class="o">.</span>addRow(<span class="s">'park.shp 2'</span>)<br />
          &gt;&gt;&gt; vt<span class="o">.</span>addRow(<span class="s">'special_regions.shp 2'</span>)<br />
          &gt;&gt;&gt; vt<span class="o">.</span>addRow(<span class="s">'workzones.shp 1'</span>)<br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>Intersect_analysis(vt, <span class="s">'intersectData.shp'</span>)<br />
</code></p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span><strong><span class="head">6.4.6 Optional parameters</span></strong></span> <a name="optional" id="optional"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Tool parameters must be used in the order they are listed in the tool code signature. The required tool parameters always come at the beginning of the list. Optional parameters can be omitted or a number sign (<code>'#'</code>) can be used as a place holder. In either of these cases, the default value is used for that parameter. For example, the Polygon Neighbors tool, which returns a table of statistics about neighboring polygons has two required parameters and six optional parameters, as shown in the code signature: </p>
<p><code>        PolygonNeighbors_analysis (in_features, out_table, {in_fields},   {area_overlap}, {both_sides}, {cluster_tolerance}, {out_linear_units},   {out_area_units})</code></p>
<p>In the following example, Polygon Neighbors is called two different ways, but these lines of code are two equivalent ways of using the default values for the six optional parameters in the Polygon Neighbors (Analysis) tool:<br />
<code><br />
          &gt;&gt;&gt; <span class="n">arcpy</span><span class="o">.</span>env<span class="o">.</span>workspace  <span class="o">=</span> <span class="s">'C:/gispy/data/ch06/'</span><br />
          &gt;&gt;&gt; <span class="n">arcpy</span><span class="o">.</span>env<span class="o">.</span>overwriteOutput <span class="o">=</span> <span class="bp">True</span><br />
          &gt;&gt;&gt; <span class="n">arcpy</span><span class="o">.</span>PolygonNeighbors_analysis(<span class="s">'park.shp'</span>,<span class="s"> 'PN.dbf'</span>) <span class="comment"># Use default values for the last 6 args.</span><br />
          &gt;&gt;&gt; <span class="n">arcpy</span><span class="o">.</span>PolygonNeighbors_analysis(<span class="s">'park.shp'</span>,<span class="s"> 'PN.dbf'</span> ,<span class="comment"> <span class="s">'#'</span></span>, <span class="comment"><span class="str">'#','#', '#'</span>,<span class="str">'#'</span>, <span class="str">'#'</span></span>) <span class="comment"># Use default values for last 6 args.</span><br />
</code></p>
<p>If you want to set some but not all optional parameters,  you must use  number signs as place holders for interior optional arguments. In this example no place holder is needed, because we're using the first optional argument and we can simply omit the last five parameters:<br />
<code><br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>PolygonNeighbors_analysis(<span class="s">'park.shp'</span>,<span class="s"> 'PN.dbf'</span>, <span class="s">'COVER'</span> )<span class="comment"> # Use default values for the last 5 parameters</span>.<br />
</code></p>
<p>But in the following example, the place holder is needed, because we want to set the 'area_overlap' parameter, but use the default value for the 'in_fields' parameter. 'in_fields' precedes 'area_overlap' in the parameters list, so if we failed to use  '#' as a place holder, the tool would assume 'AREA_OVERLAP' was a field name<span class="comment">.</span><br />
<code><br />
          &gt;&gt;&gt; <span class="comment"># Use default value for in_fields, but set the value for area_overlap</span>.<br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>PolygonNeighbors_analysis(<span class="s">'park.shp'</span>,<span class="s"> 'PN.dbf'</span>, <span class="s">'#'</span>, <span class="s">'AREA_OVERLAP'</span>)<br />
</code></p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span><strong><span class="head">6.4.7 Return values (...using the <code>Result</code> object)</span><a name="return" id="return"></a></strong></span></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>          When a geoprocessing tool is run, the tool returns an <code>arcpy</code> <code>Result</code> object. The <code>Result</code> object contains information about the tool run, such as input values for the parameters and whether or not it was successful. It also contains a list of one or more output values. The returned object can be stored in a variable by using an assignment statement:<br />
</p>
<table width="600" border="0" bgcolor="#ffcccc">
<tbody>
<tr>
<td width="600" scope="row"><code>variable = arcpy<span class="o">.</span>toolName_toolboxAlias(arguments1, 
              argument2, argument3,...)</code></td>
</tr>
</tbody>
</table>
<p>In the following example, the <code>Result</code> object returned by the Polygon Neighbors tool is stored in a variable named 'pnResult':<br />
<code><br />
          &gt;&gt;&gt; pnResult <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span>PolygonNeighbors_analysis(<span class="s">'park.shp'</span>,<span class="s"> 'PN.dbf'</span>)<br />
</code></p>
<p>The built-in <code>type</code> function shows that <code>pnResult</code> is an <code>arcpy</code> <code>Result</code> object:<br />
<code><br />
          &gt;&gt;&gt; type(pnResult)<br />
<span class="n">&lt;class 'arcpy.arcobjects.arcobjects.Result'&gt;</span><br />
</code></p>
<p>When printed, the <code>Result</code> object prints the first item in the tool output list. In the case of the Polygon Neighbors tool, the first output is the full path file name for the output:<br />
<code><br />
          &gt;&gt;&gt; <span class="key">print</span> pnResult<br />
<span class="n">C:/gispy/data/ch06\PN.dbf</span><br />
</code></p>
<p><code>Result</code> objects have  a set of methods and properties (See Figure 6.5). Use dot notation with methods and properties to access the information a <code>Result</code> object contains.  The <code>outputCount</code> property and the <code>getOutput</code> method provide access to the output information. The following statement shows that the Polygon Neighbor returned one output:<br />
<code><br />
          &gt;&gt;&gt; pnResult<span class="o">.</span>outputCount<br />
<span class="num">1</span><br />
</code><br />
          To get the output, use the <code>getOutput</code> method with an index. It is zero-based indexing, so to get the first output, use index zero. The following statement gets the first output (and only) output from the <code>pnResult</code> object:<br />
<code><br />
          &gt;&gt;&gt; pnResult<span class="o">.</span>getOutput(<span class="mi">0</span>)<br />
<span class="n">u'C:/gispy/data/ch06\PN.dbf'</span><br />
</code></p>
<p>The output depends on the nature of the tool. The main purpose of some tools, such as Buffer and Polygon Neighbors, is to create an output file. While  the main purpose of other tools, such as Get Count and Average Nearest Neighbors is to compute numeric values. In the first case, there is one output value, the name of the output file. <br />
<br />
<code>&gt;&gt;&gt; res <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span>Buffer_analysis(<span class="s">'park.shp'</span>, <span class="s">'outBuff.shp'</span>, <span class="s">'4 miles'</span>)<br />
           &gt;&gt;&gt; <span class="k">print</span> res<br />
<span class="n">C:/gispy/data/ch06\outBuff.shp</span><br />
</code><br />
          Whereas, in the second case, the tool call returns the calculated results. <br />
<br />
<code>&gt;&gt;&gt; resGC <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span>GetCount_management(<span class="s">'park.shp'</span>)<br />
           &gt;&gt;&gt; <span class="k">print</span> resGC<br />
<span class="num">426</span><br />
</code></p>
<p>Though the print statement is convenient for printing the first result, the <code>getOutput</code> function must be used to retrieve further results or to use numeric results in calculations. The following code throws an exception because a <code>Result</code> object cannot be added to a number:</p>
<p><code>&gt;&gt;&gt; resGC <span class="o">+</span><span class="mi"> 25</span><br />
<span class="err">Traceback (most recent call last):<br />
          File &quot;&lt;interactive input&gt;&quot;, line 1, in &lt;module&gt;<br />
          TypeError: unsupported operand type(s) for +: 'Result' and 'int'</span><br />
</code></p>
<p>          Instead, the value must be retrieved from the <code>Result</code> object using the <code>getOutput</code> method:<br />
<br />
<code>&gt;&gt;&gt; count <span class="o">=</span> resGC<span><span class="o">.</span></span>getOutput(<span class="mi">0</span>)<br />
&gt;&gt;&gt; count<br />
<span class="num">u'426'<br />
</span></code></p>
<p>But  <code>getOutput</code> returns a string, so this can't be used directly:<br />
<code><br />
  &gt;&gt;&gt; count <span class="o">+ </span><span class="mi">25</span><br />
<span class="err">Traceback (most recent call last):<br />
          File &quot;&lt;interactive input&gt;&quot;, line 1, in &lt;module&gt;<br />
        TypeError: coercing to Unicode: need string or buffer, int found<br />
</span></code><br />
          Instead it needs to be cast to an integer:<br />
<code><br />
&gt;&gt;&gt; int(count) <span class="o">+</span><span class="mi"> 25</span><br />
<span class="num">451</span><br />
</code><br />
          The <code>getOutput</code> method also needs to be used when a tool returns more than one result. For example,  the Average Nearest Neighbor (Spatial Statistics)
          <leo_highlight style="background-color: transparent; background-image: none; 
background-repeat: repeat; background-attachment: scroll; 
background-position: 0% 0%; -moz-background-size: auto auto; cursor: 
pointer; display: inline; -moz-background-clip: -moz-initial; 
-moz-background-origin: -moz-initial; -moz-background-inline-policy: 
-moz-initial;" id="leoHighlights_Underline_3" onclick="leoHighlightsHandleClick('leoHighlights_Underline_28')" onmouseover="leoHighlightsHandleMouseOver('leoHighlights_Underline_28')" onmouseout="leoHighlightsHandleMouseOut('leoHighlights_Underline_28')" leohighlights_keywords="tool" leohighlights_url_top="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsTop.jsp?keywords%3Dtool%26domain%3D" leohighlights_url_bottom="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsBottom.jsp?keywords%3Dtool%26domain%3D" leohighlights_underline="false">tool</leo_highlight>
          computes a nearest neighbor ratio and a z-score 
          which tell us 
          something about the clustering of our points. Suppose we have points representing acts of kindness, we 
          might be interested in whether the points exhibit 
          clustering or if they 
        resemble a random distribution. Example 6.1 calls the Average Nearest Neighbor tool and prints the results using the <code>Result</code> object <code>getOutput</code> method. According to the results, the points exhibit clustering.</p>
<table border="0" height="41" width="600">
<tbody>
<tr>
<td width="773" bgcolor="#ffffcc" scope="row"><strong>Example 6.1</strong><br />
<code>
<div class="highlight">
<pre><span class="c"># avgNearNeighbor.py </span>
<span class="c">#Purpose: Analyze crime data to determine if spatial patterns are statistically significant </span>
<span class="kn">import</span> <span class="nn">arcpy</span><br />

<br /><span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/data/ch06&#39;</span>
<br />
<span class="n">annResult</span> <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span><span class="n">AverageNearestNeighbor_stats</span><span class="p">(</span><span class="s">&#39;points.shp&#39;</span><span class="p">,</span> <span class="s">&#39;Euclidean Distance&#39;</span><span class="p">)</span>
<br />

<span class="k">print</span> <span class="s">&#39;Average Nearest Neighbor Output&#39;</span>
<span class="k">print</span> <span class="s">&#39;Nearest neighbor ratio: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">)</span> 
<span class="k">print</span> <span class="s">&#39;z-score: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">)</span>
<span class="k">print</span> <span class="s">&#39;p-value: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">)</span> 
<span class="k">print</span> <span class="s">&#39;Expected Mean Distance: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">)</span>
<span class="k">print</span> <span class="s">&#39;Observed Mean Distance: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="p">)</span>

<span class="o"></span><span class="mf"></span></pre>
</div></code>
<p> Printed output:                </p>
<p>&gt;&gt;&gt; <code><span class="n">Average Nearest Neighbor Output<br />
                  Nearest neighbor ratio: 0.853047<br />
                  z-score: -5.802495<br />
                  p-value: 0<br />
                  Expected Mean Distance: 753.825013<br />
              Observed Mean Distance: 643.048013</span></code></p></td>
</tr>
</tbody>
</table>
<p><img src="../images/resultObject.png" alt="resultObject" /><br />
<strong>Figure 6.5</strong>: <code>Result</code> object methods and properties.<br />
</p>
<hr /> <table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">6.4.8 Calling  Spatial Analyst tools</span><a name="sa" id="sa"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p><br />
          The syntax for calling Spatial Analyst tools is slightly different from other tools.  Double dot notation must be used instead of an underscore to specify the toolbox.<br />
</p>
<table width="600" border="0" bgcolor="#ffcccc">
<tbody>
<tr>
<td width="791" scope="row"><code>arcpy<span class="o">.</span>toolboxAlias<span class="o">.</span>toolName(arguments1, 
              argument2, argument3,...)</code></td>
</tr>
</tbody>
</table>
<p>There's another difference in the way Spatial Analyst  tools work. Instead of returning a <code>Result</code> object,  Spatial Analyst tools return <code>arcpy</code> <code>Raster</code> objects. This <code>Raster</code> object temporarily holds the output raster in memory. Unless explicitly saved, it will be deleted when the IDE session is closed. To store the raster permanently, we have to save the raster in a separate step. The following code assigns the environment settings, checks out the Spatial Analyst extension and then calls the Square Root tool on a raster named <code>'getty_rast'</code>. The <code>Raster</code> object being returned is assigned to a variable named <code>outputRast</code>.<br />
<code><br />
          &gt;&gt;&gt; <span class="key">import</span> arcpy<br />
          &gt;&gt;&gt; <span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span>workspace<span class="o"> =</span> <span class="s">'C:/gispy/data/ch06/'</span><br />
          &gt;&gt;&gt;<span class="n"> arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span><br />
          &gt;&gt;&gt; inRast <span class="o">=</span> <span class="s">'getty_rast'</span><br />
          &gt;&gt;&gt; arcpy<span class="o">.</span>CheckOutExtension(<span class="s">'Spatial'</span>)<br />
</code><code><span class="n">u'CheckedOut'</span></code><br />
          &gt;&gt;&gt; outputRast <span class="o">=</span> arcpy<span class="o">.</span>sa<span class="o">.</span>SquareRoot(inRast)<br />
<br />
          The next step is to save the output raster. The  <code>Raster</code> objects have a <code>save</code> method which takes on optional parameter, a name.  When the Square Root tool was run, it automatically generated a name. If no parameter is used, the raster is saved by that name. The following line of code saves the output raster with the default name:</p>
<p><code>&gt;&gt;&gt; outputRast<span class="o">.</span>save( )<br />
          &gt;&gt;&gt; outputRast<span class="n"><br />
          C:\gispy\data\ch06\squar_ras</span><br />
</code></p>
<p>In this case, the automatically generated name is <code>'squar_ras'</code>. The following line of code saves the raster and names it <code>'gettySqRoot'</code>:<br />
<code><br />
          &gt;&gt;&gt; outputRast<span class="o">.</span>save(<span class="s">'gettySqRoot'</span>)<br />
</code></p>
<p>Raster names have some constraints. When you don't specify an extension, the Esri GRID raster format is used. The names of GRID rasters must be no longer than 13 characters, though the error says something more generic than that, as shown here:<br />
<code><br />
          &gt;&gt;&gt; outputRast<span class="o">.</span>save(<span class="s">'gettySquareRoot'</span>)<br />
<span class="err">Traceback (most recent call last):<br />
          File &quot;&lt;interactive input&gt;&quot;, line 1, in &lt;module&gt;<br />
          RuntimeError: ERROR 010240: Could not save raster dataset to C:\gispy\data\ch06\gettySquareRoot with output format GRID.</span><br />
          &gt;&gt;&gt; len(<span class="s">'gettySquareRoot'</span>)<br />
<span class="num">15</span><br />
</code></p>
<p>
Other toolboxes automatically save the output to a long-term storage location such as a shapefile on the computer hard disk drive when the tool is called. The Spatial Analyst tools keep the raster data in-memory (a sort of short term memory storage which is fast to access). The raster <code>save</code> method commits the raster to long-term memory.  This extra step of saving the raster is designed for optimization. Raster calculations might involve a chain of sequential calls that create intermediate rasters. If only the final output is needed (and not the intermediate rasters), the script can opt to only save the last one. This can save significantly on processing time for large rasters.<br />
</p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span>
<span class="head">6.4.9 Importing spatial analyst</span>
<a name="importsa" id="importsa"></a></span></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>
            The ArcGIS Resources Spatial Analyst tool reference pages sometimes use a variation of the import statement in the code samples as in the following code:<br />
<br />
<code>&gt;&gt;&gt; <span class="key">from</span> arcpy<span class="o">.</span>sa <span class="key">import</span> *<br />
</code><br />
          This statement creates a direct reference to the Spatial Analyst tool; It provides a shortcut so Spatial Analyst tools can be called without preprending <code>arcpy<span class="o">.</span>sa</code>. For example, it allows you to  replace this statement:<br />
<code><br />
            &gt;&gt;&gt; outputRast <span class="o">=</span> arcpy<span class="o">.</span>sa<span class="o">.</span>SquareRoot(inRast)<br />
</code><br />
            with this statement:<br />
<br />
<code>&gt;&gt;&gt; outputRast <span class="o">=</span> SquareRoot(inRast)<br />
</code><br />

            This type of import saves some typing, but it can lead to confusion. For example, the Spatial Analyst has an <code>Int</code> tool which converts each cell raster value to  an integer; At the same time, Python has a built-in integer function named <code>int</code>. Using the special import shortcut could lead to mystifying code such as the following:<br />
<code><br />
            &gt;&gt;&gt; outputRast <span class="o">=</span> Int(inRast)<br />
            &gt;&gt;&gt; outputNum <span class="o">=</span> int(myNum)<br />
</code><br />

            These statements look almost identical, but one takes a raster and returns a <code>Raster</code> object; The other takes a number and returns a number. Using the standard import and full tool call (e.g., <code>arcpy<span class="o">.</span>sa<span class="o">.</span>Int</code>) avoids ambiguities.        </p>
<hr /> <table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">6.4.10 Raster Calculator</span>

<a name="rastCalc" id="importsa2"></a> </th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<br />
            Python can call 
          any tool in ArcToolbox with the exception of the Spatial Analyst Raster Calculator tool. The Raster Calculator performs what is know as 'map algebra' --is performs mathematical operations on each cell of a raster grid. For example, multiplying a raster by two using the Raster Calculator doubles the value stored in each cell. The Raster Calculator tool is not designed to be called from a stand-alone script. Instead, the script can call tools from the Spatial Analyst Math Toolset. For example, multiplying the cells in 'getty_rast' by 5 and subtracting 2 from each cell, in Raster Calculator would look like this: 5 * 'getty_rast' - 2. The values in 'getty_rast' are 1 and 2, so the resulting values are 3 and 8. To do this in a Python script, you could use two tool calls. Output from the first statement would provide input for the second as shown in Example 6.2. Since the initial values are 1 and 2, outRast1 has the values 5 and 10. These values are used in the Minus tool call, so the  values in outRast2 are 3 and 8. The second to last line of code saves this raster. The last two lines of code delete the <code>Raster</code> objects using the <code>del</code> keyword. This avoids locking issues.<br />

<table border="0" height="267" width="600">
<tbody>
<tr>
<td width="773" height="263" bgcolor="#ffffcc" scope="row"><strong>Example 6.2</strong><br />
<code>
<div class="highlight">
<pre><span class="c"># computeRastEquation.py </span>
<span class="c"># Purpose: Calculate 5 * &#39;getty_rast&#39; - 2</span>

<span class="kn">import</span> <span class="nn">arcpy</span>

<span class="n"><br />arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/data/ch06/rastSmall.gdb&#39;</span><br />arcpy<span class="o">.</span>CheckOutExtension(<span class="s">'Spatial'</span>)<br /><span class="n"><br />outRast1</span> <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span><span class="n">sa</span><span class="o">.</span><span class="n">Times</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="s">&#39;dataRast&#39;</span><span class="p">)</span>
<span class="n">outRast2</span> <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span><span class="n">sa</span><span class="o">.</span><span class="n">Minus</span><span class="p">(</span><span class="n">outRast1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">outRast2</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="s">&#39;equationRast&#39;</span> <span class="p">)</span><br /><span class="kn">del</span> outRast1<br /><span class="kn">del</span> outRast2

</pre>
</div> </code> </td>
</tr>
</tbody>
</table>
<p>Another way to handle raster calculations is to create  <code>arcpy</code> <code>Raster</code> objects using the <code>arcpy</code> <code>Raster</code> method and then construct mathematical expressions using  mathematical operators in combination with the <code>Raster</code> objects. The following code is equivalent to the code used in Example 6.2, producing values in <code>equationRast2</code> identical to those in <code>equationRast</code>: </p>
<code><div class="highlight">
<pre>
<span class="n">&gt;&gt;&gt; rastObj</span> <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span><span class="n">Raster</span><span class="p">(</span><span class="s">&#39;dataRast&#39;</span><span class="p">)</span>
<span class="n">&gt;&gt;&gt; outRast</span> <span class="o">=</span> <span class="mi">5</span><span class="o">*</span><span class="n">rastObj</span> <span class="o">-</span> <span class="mi">2</span>
<span class="n">&gt;&gt;&gt; outRast</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="s">&#39;equationRast2&#39;</span> <span class="p">)</span><br />&gt;&gt;&gt; <span class="kn">del</span> outRast</pre>
</div></code>
<p>One advantage of this approach is that pairwise mathematical operators (<code>*</code>, <code>/</code>, <code>+</code>, <code>-</code>, etc.) can be used more than once, so that more than one pair of items can be multiplied in one statement, whereas, the Times (Spatial Analyst) tool can only handle pairs. The following code uses multiple <code>Raster</code> objects and numbers and mathematical operators in a single expression and saves the results in the <code>'output'</code> raster:</p>
<div class="highlight">
<pre><code>
<span class="n">&gt;&gt;&gt; r1</span> <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span><span class="n">Raster</span><span class="p">(</span><span class="s">&#39;out1&#39;</span><span class="p">)</span>
<span class="n">&gt;&gt;&gt; r2</span> <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span><span class="n">Raster</span><span class="p">(</span><span class="s">&#39;out2&#39;</span> <span class="p">)</span>
<span class="n">&gt;&gt;&gt; r3</span> <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span><span class="n">Raster</span><span class="p">(</span><span class="s">&#39;out3&#39;</span> <span class="p">)</span>
<span class="n">&gt;&gt;&gt; outRast</span> <span class="o">=</span> <span class="p">(</span><span class="mi">5</span><span class="o">*</span><span class="n">r1</span><span class="o">*</span><span class="n">r2</span><span class="o">*</span><span class="n">r3</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span>
<span class="n">&gt;&gt;&gt; outRast</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="s">&#39;output&#39;</span> <span class="p">)<br /></span>&gt;&gt;&gt; <span class="kn">del</span> outRast<br /></code></pre>
</div>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span><strong><span class="head">6.4.11 Temporary feature layers</span><a name="tempLayers" id="custom2"></a></strong></span></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Unlike the Spatial Analyst raster computations, most   ArcGIS tools that compute vector data output create a long term file (such as a shapefile or geodatabase feature class) without calling a <code>save</code> function. Some exceptions can be found in the Data Management toolbox.  Some of these tools create <em>temporary feature layer</em>s output, a collection of features in temporary memory that will not persist after the IDE session ends.  For example, the Make XY Event Layer (Data Management)  tool creates a temporary feature layer. This tool takes a text file containing header fields and rows of attribute values and creates a new point feature layer based on the x and y coordinate fields in the file. The following code makes a temporary layer file (<code>'tmpLayer'</code>) from the  'xyData.txt' file which contains 'x', 'y', and 'butterfly' fields. <br />
</p>
<p><code>&gt;&gt;&gt; <span class="n">arcpy</span><span class="o">.</span><span class="n">MakeXYEventLayer_management</span><span class="p">(</span><span class="s">&#39;C:/gispy/data/ch06/xyData.txt&#39;</span><span class="p">,</span><span class="s">&#39;x&#39;</span><span class="p">,</span><span class="s">&#39;y&#39;</span><span class="p">,</span><span class="s">&#39;tmpLayer&#39;</span><span class="p">)</span><br />
</code></p>
<p> You can perform additional tool calls on the temporary layer within the same script (or within the same Interactive Window session). The following code gets the record count:</p>
<p><code>&gt;&gt;&gt;<span class="n"> countRes</span> <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span><span class="n">GetCount_management</span><span class="p">(</span><span class="s">&#39;tmpLayer&#39;</span><span class="p">)</span><br />
  &gt;&gt;&gt;<span class="n"> countRes</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><br />
<span class="n">u'8'</span><br />
</code></p>
<p>No file named  <code>'tempLayer'</code> ever appears in the 'C:/gispy/data/ch06' directory. To save this file in long-term memory, you'll need to call another <code>arcpy</code> tool. There are a number of Data Management tools that can be used for this. The following code uses the 'CopyFeatures' tool to save the layer to a shapefile:<br />
</p>
<p><code>&gt;&gt;&gt; <span class="n">arcpy</span><span class="o">.</span><span class="n">CopyFeatures_management</span><span class="p">(</span><span class="s">&#39;tmpLayer&#39;</span><span class="p">,</span> <span class="s">&#39;butterflies.shp&#39;</span><span class="p">)</span><br />
<span class="n">&lt;Result 'C:/gispy/data/ch06\\butterflies.shp'&gt;</span><br />
</code></p>
<p>The output from the Make XY Event Layer (Data Management)  tool is used as input for the 'Copy Features' tool and a 'butterflies.shp' file is saved in the 'C:/gispy/data/ch06' directory. When the current  IDE session ends (for example, when PythonWin is closed), this file will persist, but <code>'tmpLayer'</code> will be destroyed.</p>
<hr /><table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">6.4.12 Using variables for multiple tool calls</span><a name="multipleTool" id="multipleTool"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Calling more than one tool in a script often involves using the output from one tool as the input for the next tool. In this case, it becomes useful to  employ variables to store tool arguments so that string literals are not repeated. The temporary feature layer example in the previous section repeats the string literal <code>'tmpLayer'</code> three times. Using a variable name would make it easier to change this name if needed (since it would only need to be changed in one place). Additionally, output file names can easily be created based on input file names. For example, the following code slices the file extension and appends 'Buffer.shp' to the name:<br />
</p>
<p><code>
          &gt;&gt;&gt; fireDamage <span class="o">=</span> <span class="s">&#39;special_regions.shp&#39;<br />
</span><span class="n">&gt;&gt;&gt; fireBuffer</span> <span class="o">=</span> <span class="n">fireDamage</span><span class="p">[:</span><span class="o">-</span><span class="mi">4</span><span class="p">]</span> <span class="o">+</span> <span class="s">&#39;Buffer.shp&#39;</span> <br />
<span class="n">&gt;&gt;&gt; fireBuffer</span> <br />
<span class="n">'special_regionsBuffer.shp'</span><br />
</code></p>
        In Example 6.3, 'special_regions.shp' represents regions damaged by a 
          fire. To find the portion of the park 
          (in 'park.shp') which lies 
          within 1 mile of the fire damage, 
          we buffer the fire 
          damaged regions and then clip the park polygons on the
        buffer zone. The output from the Buffer tool is input for the Clip tool.
<table border="0" height="812" width="600">
<tbody>
<tr>
<td width="447" height="808" bgcolor="#ffffcc" scope="row"><strong>Example 6.3</strong> <br />
<code>
<div class="highlight">
<pre><span class="c"># buffer_clip.py (hard-coded version)</span>
<span class="c"># Purpose: Buffer a zone and use it to clip another file</span>
<span class="c"># Input: No arguments needed.</span>

<span class="kn">import</span> <span class="nn">arcpy</span><span class="o"></span><span class="nn"></span>

<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/data/ch06&#39;</span>
<span class="n">outDir</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/scratch/&#39;</span>

<span class="c"># Set buffer params</span>
<span class="n">fireDamage</span> <span class="o">=</span> <span class="s">&#39;special_regions.shp&#39;</span>
<span class="n">fireBuffer</span> <span class="o">=</span>  <span class="n">outDir</span> <span class="o">+</span> <span class="n">fireDamage</span><span class="p">[:</span><span class="o">-</span><span class="mi">4</span><span class="p">]</span> <span class="o">+</span> <span class="s">&#39;Buffer.shp&#39;</span>
<span class="n">bufferDist</span> <span class="o">=</span> <span class="s">&#39;1 mile&#39;</span>

<span class="c"># Set clip params</span>
<span class="n">park</span> <span class="o">=</span> <span class="s">&#39;park.shp&#39;</span>
<span class="n">clipOutput</span> <span class="o">=</span> <span class="n">outDir</span> <span class="o">+</span> <span class="n">park</span><span class="p">[:</span><span class="o">-</span><span class="mi">4</span><span class="p">]</span> <span class="o">+</span> <span class="s">&#39;DamageBuffer.shp&#39;</span>

<span class="n">arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="n">fireDamage</span><span class="p">,</span> <span class="n">fireBuffer</span><span class="p">,</span><span class="n">bufferDist</span><span class="p">)</span>
<span class="k">print</span> <span class="s">&#39;{0} created.&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">fireBuffer</span><span class="p">)</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">Clip_analysis</span><span class="p">(</span><span class="n">park</span><span class="p">,</span> <span class="n">fireBuffer</span><span class="p">,</span> <span class="n">clipOutput</span> <span class="p">)</span>
<span class="k">print</span> <span class="s">&#39;{0} created.&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">clipOutput</span><span class="p">)</span>
  </pre></div></code>
<p><img src="../images/buffer_clip_input.jpg" alt="initialview" /></p>
<p>Figure 6.6a: Initial view of data in Example 6.3<br />
                  black: park = 'park.shp'<br />
                  gray: fireDamage = 'special_regions.shp'</p>
<p><img src="../images/buffer_clip_intermediate.jpg" alt="2" /><br />
                  Figure 6.6b: Intermediate view of data in Example 6.3<br />
                  black: park = 'park.shp' <br />
                  green: fireBuffer = 'special_regionsBuffer.shp'</p>
<p><img src="../images/buffer_clip_output.jpg" alt="3" /><br />
                  Figure 6.6c: Final view of data in Example 6.3<br />
                  black: park = 'park.shp' <br />
                  gray: fireDamage = 'special_regions.shp'<br />
                  light gray: clipOutput = 'parkDamageBuffer.shp'<br />
                  Park within 1 mi. of fire <br />
</p></td>
</tr>
</tbody>
</table>
<span><br />
</span>
<p>Example 6.4 finds the lengths of the fire damage boundaries in two steps. First a field is added to store this information. Second, shape lengths are calculated in the new field. Both of these tools use the same input dataset and  field name, and these variable values are set  before the tool calls. The other two Calculate Field parameters are set as string literals and  only used once in this example. The length is calculated using the <code>'!shape.length!'</code> expression and <code>'PYTHON'</code> indicates that it is a Python type expression. </p>
<table border="0" height="41" width="600">
<tbody>
<tr>
<td width="773" bgcolor="#ffffcc" scope="row"><p><strong>Example 6.4</strong><br />
</p><code>
<div class="highlight">
<pre><span class="c"># addLengthField.py</span>
<span class="c"># Purpose: Add a field containing polygon lengths to the shapefile.</span>
<span class="c"># Usage: No arguments needed.</span>
<span class="kn">import</span> <span class="nn">arcpy</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/data/ch06&#39;</span>

<span class="n">inputFile</span> <span class="o">=</span> <span class="s">&#39;special_regions.shp&#39;</span>
<span class="n">fieldName</span> <span class="o">=</span> <span class="s">&#39;Length&#39;</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">AddField_management</span><span class="p">(</span> <span class="n">inputFile</span><span class="p">,</span> <span class="n">fieldName</span><span class="p">,</span> <span class="s">&#39;FLOAT&#39;</span> <span class="p">)</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">CalculateField_management</span><span class="p">(</span> <span class="n">inputFile</span><span class="p">,</span> <span class="n">fieldName</span><span class="p">,</span> <span class="s">&#39;!shape.length!&#39;</span><span class="p">,</span> <span class="s">&#39;PYTHON&#39;</span> <span class="p">)</span>
</pre>
</div> </code></td>
</tr>
</tbody>
</table>
<br /><hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><span><strong><span class="head">6.4.13 Calling custom tools</span><a name="custom" id="custom"></a></strong></span></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Many useful tools can be found by searching online. You may find models or Script Tools that you want to call from within your code. To use custom tools (those that
          are not built-in to ArcToolbox) use the <code>arcpy</code> <code>ImportToolbox</code> function and then call the 
        tool using the tool name and the toolbox alias. Tool names can differ from the labels displayed in ArcCatalog. Labels are allowed to contain spaces. To determine the tool name, right-click on the tool and view the 'Name' property on the 'General' tab. To determine the toolbox alias, right-click on the toolbox and view the 'Alias' property on the general tab. If it doesn't already have one, you need to set the alias here. </p>
<p>This example pertains to 'customTools.tbx' which has a Script Tool named 'Inventory'. The toolbox alias is 'custom'. The Script Tool points to a script named 'inventory.py'. The header comments in this script say the following:<br />
<code><br />
<span class="comment"># Usage: workspace, level_of_detail (SUMMARY_ONLY or DETAILED_INVENTORY)<br />
          # Example: C:/gispy/data/ch06/ SUMMARY_ONLY summaryFile.txt</span></code><br />
</p>
<p>We call the tool requesting a summary of the 'C:/gispy/data/ch06/' directory.</p>
<table border="0" height="41" width="600">
<tbody>
<tr>
<td width="773" bgcolor="#ffffcc" scope="row"><p><strong>Example 6.5</strong><br />
</p>
<code>
<div class="highlight">
<pre><span class="c"># callInventory.py</span>
<span class="c"># Purpose: Call the inventory tool.</span>
<span class="kn">import</span> <span class="nn">arcpy</span>

<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/sample_scripts/ch06&#39;</span>
<span class="n">inputDir</span> <span class="o">=</span> <span class="s">&quot;C:/gispy/data/ch06/&quot;</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">ImportToolbox</span><span class="p">(</span><span class="s">&#39;customTools.tbx&#39;</span><span class="p">)</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">Inventory_custom</span><span class="p">(</span><span class="n">inputDir</span><span class="p">,</span> <span class="s">&#39;SUMMARY_ONLY&#39;</span><span class="p">,</span> <span class="s">&#39;summaryFile.txt&#39;</span><span class="p">)</span></pre>
</div>
</code></td>
</tr>
</tbody>
</table>
<p>The output text file from this tool, 'summaryFile.txt', looks something  like this:</p>
<p>Summary of C:\gispy\data\ch06<br />
          -------------------------------------<br />
          27 Files<br />
          10 ShapeFiles<br />
          1 Workspaces<br />
          1 Folders<br />
          2 TextFiles<br />
          1 RasterDatasets<br />
</p>
<hr />
<table border="0" width="775">
<tbody>
<tr>
<th align="left" scope="row"><span class="head">6.5 A word about old scripts</span> <a name="arcgisscripting" id="introduction3"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<p>Python programming for ArcGIS has changed a great deal since it was first introduced. ArcGIS Python is backwards compatible. In other words, Python code written for previous versions of ArcGIS will still run in the newer versions. For example, an ArcGIS 9.2 Python script will in ArcGIS10.1.  The <code>arcpy</code> package is how ArcGIS 10.x gives Python access to geoprocessing. In 9.x  versions, the <code>arcgisscripting</code> package was used. <code>arcpy</code> encompasses and enhances arcgisscripting. Table 6.4 shows prior version equivalents to <code>import arcpy</code>. </p>
<table width="483" bgcolor="#eeeeee">
<tr>
<td width="475" height="201"><p><strong>Table 6.4: Geoprocessing in Python. </strong><a name="create" id="create"></a></p>
<table width="405" border="1">
<tr>
<td width="68"><strong>ArcGIS Version</strong></td>
<td width="321"><strong>Python code statements</strong></td>
</tr>
<tr>
<td><div align="center">9.1</div></td>
<td><code><span class="key">from</span> win32com.client <span class="key">import</span> Dispatch <br />
                    gp <span class="o">=</span> Dispatch(<span class="s">'esriGeoprocessing.GPDispatch.1'</span>)</code> </td>
</tr>
<tr>
<td><div align="center">9.2</div></td>
<td><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create( ) </code></td>
</tr>
<tr>
<td><div align="center">9.3</div></td>
<td><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create(<span class="mi">9.3</span>) </code></td>
</tr>
<tr>
<td><div align="center">10.x</div></td>
<td><code><span class="key">import</span> arcpy</code></td>
</tr>
</table></td>
</tr>
</table>
<span><br />
</span>
<hr /><table border="0" width="775">
<tbody>
<tr>
<th align="left" scope="row"><span class="head">6.6 Discussion </span><a name="discussion" id="discussion"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<p>Calling tools in ArcGIS follows a basic pattern with some variations. The parameters required by the tools vary based on the kinds of input the tool needs. To use Python for ArcGIS, you'll need to become familiar with the basic pattern and use the tool help for more detailed information. Context menus  help with spelling and parameter requirements. The ArcGIS Resources tool help  parameter tables and script examples provide more detailed information. This chapter  presented the basic pattern for calling tools and highlighted the most common parameter usage questions. Spatial Analyst toolbox objects such as the <code>arcpy.sa.RemapValue</code> and <code>arcpy.sa.WOTable</code> are somewhat complex and highly specialized. For tools that require these arguments, run the tool via ArcToolbox and 'Copy the code snippet' to get an example with sample input data. For the vast majority of tool calls though, you won't need to copy code snippets, because the syntax will become routine after a little practice.</p>
<p>The <code>ValueTable</code>, <code>Result</code>, and <code>Raster</code> objects introduced in this chapter are just three of the many <code>arcpy</code> objects. The <code>arcpy</code> cheatsheet detail diagrams in this book, like the one in Figure 6.5, provide selected method and property names for several <code>arcpy</code> objects. The  ArcGIS Resource site explain every property and method  for  each <code>arcpy</code> object. <br />
<br />
        When searching, for an <code>arcpy</code> object, use the word <code>arcpy</code> along with the name of the object to improve the search results. For example, instead of searching for 'result', search for 'result arcpy', to bring the <code>Result</code> object help page to the top of the search. </p>
<table width="779" border="3" bgcolor="#CEDAE3">
<tr>
<td width="765" height="86"><blockquote>
<p>When you search for <code>arcpy</code> objects on the ArcGIS Resources site,  add the word <code>arcpy</code> to the search to bring the <code>arcpy</code>-related results to the top of the search.<br />
</p>
</blockquote></td>
</tr>
</table>
<hr />
<table width="775" border="0">
<tr>
<th align="left" scope="row"><span class="head">6.7 Key terms</span><a name="keyterms" id="keyterms2"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</table>
<p>Modelbuilder models<br />
<span class="key">import</span> keyword<br />
<code>arcpy</code> package<br />
          Python package<br />
          Python module<br />
          Environment settings<br />
          full path file name<br />
          Multivalue input<br />
          Multivalue string<br />
        Temporary feature layers</p>
<hr />
<table border="0" width="775">
<tbody>
<tr>
<th align="left" scope="row"><span class="head">6.8 Exercises</span> <a name="exercises" id="exercises"></a></th>
<td align="right"><a href="#top">back to top</a> </td>
</tr>
</tbody>
</table>
<p>Write a Python script to solve each 
          problem and test the script on sample data in 'C:/gispy/data/ch06/'. Hard-code the workspace to this directory. Hard-coding means specifying it with a string literal (<code><span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/data/ch06&#39;</span></code>). To achieve a deeper understanding of the code syntax, write the scripts without using ModelBuilder. Name the script as specified in bold print at the beginning of each question. <br />
</p>
<ol>
<li><strong>erase.py</strong> 'special_regions.shp' represents areas where a fire damaged a park, 'park.shp'.
            
            Use the Erase
            (Analysis)
            <leo_highlight style="background-color: 
transparent; background-image: none; background-repeat: repeat; 
background-attachment: scroll; background-position: 0% 0%; 
-moz-background-size: auto auto; cursor: pointer; display: inline; 
-moz-background-clip: -moz-initial; -moz-background-origin: 
-moz-initial; -moz-background-inline-policy: -moz-initial;" id="leoHighlights_Underline_38" onclick="leoHighlightsHandleClick('leoHighlights_Underline_38')" onmouseover="leoHighlightsHandleMouseOver('leoHighlights_Underline_38')" onmouseout="leoHighlightsHandleMouseOut('leoHighlights_Underline_38')" leohighlights_keywords="tool" leohighlights_url_top="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsTop.jsp?keywords%3Dtool%26domain%3D" leohighlights_url_bottom="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsBottom.jsp?keywords%3Dtool%26domain%3D" leohighlights_underline="false">tool</leo_highlight>
            to create a shapefile in 'C:/gispy/scratch' 
            called 'no_damage.shp'  which shows all the park 
            regions that did 
            not sustain damage.<br />
<br />
</li>
<li><strong>freq.py</strong> The land cover types in 'park.shp' include 'woods', 'orchards', and 'other'. Park 
            rangers would 
            like a table including the frequencies of polygons with 
            each cover type.
            Write a script to perform a Frequency (Analysis) on the 
            'COVER' field that 
            will generate this table. Create the output in 'C:/gispy/scratch' and name it 'COVER_freq.dbf'.<br />
<br />
</li>
<li><strong>split.py</strong> 'park.shp' is a 
            large park. Maintenance has outlined work zones for 
            which different 
            teams will be responsible. 'workzones.shp' 
            specifies the zones. 
            The manager would like to give each
            <leo_highlight style="background-color: transparent; background-image: none; 
background-repeat: repeat; background-attachment: scroll; 
background-position: 0% 0%; -moz-background-size: auto auto; cursor: 
pointer; display: inline; -moz-background-clip: -moz-initial; 
-moz-background-origin: -moz-initial; -moz-background-inline-policy: 
-moz-initial;" id="leoHighlights_Underline_35" onclick="leoHighlightsHandleClick('leoHighlights_Underline_35')" onmouseover="leoHighlightsHandleMouseOver('leoHighlights_Underline_35')" onmouseout="leoHighlightsHandleMouseOut('leoHighlights_Underline_35')" leohighlights_keywords="team" leohighlights_url_top="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsTop.jsp?keywords%3Dteam%26domain%3D" leohighlights_url_bottom="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsBottom.jsp?keywords%3Dteam%26domain%3D" leohighlights_underline="false">team</leo_highlight>
            leader a map that 
            only includes
            her own work zone.  Write a script to call the Split (Analysis)
            <leo_highlight style="background-color: transparent; background-image: none; 
background-repeat: repeat; background-attachment: scroll; 
background-position: 0% 0%; -moz-background-size: auto auto; cursor: 
pointer; display: inline; -moz-background-clip: -moz-initial; 
-moz-background-origin: -moz-initial; -moz-background-inline-policy: 
-moz-initial;" id="leoHighlights_Underline_36" onclick="leoHighlightsHandleClick('leoHighlights_Underline_36')" onmouseover="leoHighlightsHandleMouseOver('leoHighlights_Underline_36')" onmouseout="leoHighlightsHandleMouseOut('leoHighlights_Underline_36')" leohighlights_keywords="tool" leohighlights_url_top="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsTop.jsp?keywords%3Dtool%26domain%3D" leohighlights_url_bottom="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsBottom.jsp?keywords%3Dtool%26domain%3D" leohighlights_underline="false">tool</leo_highlight>
            to generate the desired shapefiles. 
            Using the Zone 
            field to split the park. Have the script place the 
            output shapefiles in 'C:/gispy/scratch'.<br />
<br />
</li>
<li><strong>square.py </strong>Compute the square of        the cell values in Gettysburg battlefield Esri GRID 
            raster, 'getty_rast', using the Square (Spatial Analyst) tool. Create the output raster in 'C:/gispy/scratch' and name it  'squareGetty'.<br />
<br />
</li>
<li><strong>getCount.py</strong> Use the Get Count (Data Management)
            <leo_highlight style="background-color: 
transparent; background-image: none; background-repeat: repeat; 
background-attachment: scroll; background-position: 0% 0%; 
-moz-background-size: auto auto; cursor: pointer; display: inline; 
-moz-background-clip: -moz-initial; -moz-background-origin: 
-moz-initial; -moz-background-inline-policy: -moz-initial;" id="leoHighlights_Underline_34" onclick="leoHighlightsHandleClick('leoHighlights_Underline_34')" onmouseover="leoHighlightsHandleMouseOver('leoHighlights_Underline_34')" onmouseout="leoHighlightsHandleMouseOut('leoHighlights_Underline_34')" leohighlights_keywords="tool" leohighlights_url_top="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsTop.jsp?keywords%3Dtool%26domain%3D" leohighlights_url_bottom="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsBottom.jsp?keywords%3Dtool%26domain%3D" leohighlights_underline="false">tool</leo_highlight>
            to determine the 
            number of polygons  in 'park.shp'. 
            Get the count using the  <code>arcpy</code> <code>Result</code> 
            object. Output should look  like this, though you may get a different count if 'park.shp' has been modified:<br />
<code>&gt;&gt;&gt;  <span class="n">There are 425 polygons  in  
            park.shp</span></code><br />
<br />
</li>
<li><strong>distribution.py </strong>Practice performing sequential geoprocessing steps. To see 
            how the land cover polygons are distributed within 'C:/gispy/data/ch06/park.shp', perform two
            <leo_highlight style="background-color: transparent; background-image: none; 
background-repeat: repeat; background-attachment: scroll; 
background-position: 0% 0%; -moz-background-size: auto auto; cursor: 
pointer; display: inline; -moz-background-clip: -moz-initial; 
-moz-background-origin: -moz-initial; -moz-background-inline-policy: 
-moz-initial;" id="leoHighlights_Underline_42" onclick="leoHighlightsHandleClick('leoHighlights_Underline_42')" onmouseover="leoHighlightsHandleMouseOver('leoHighlights_Underline_42')" onmouseout="leoHighlightsHandleMouseOut('leoHighlights_Underline_42')" leohighlights_keywords="tool" leohighlights_url_top="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsTop.jsp?keywords%3Dtool%26domain%3D" leohighlights_url_bottom="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsBottom.jsp?keywords%3Dtool%26domain%3D" leohighlights_underline="false">tool calls in this script. </leo_highlight>
            Use the Feature to Point (Data Management) tool to find the centroid of each polygon. Name this result 'C:/gispy/scratch/centroid.shp'. Then use the Create Thiessen Polygons (Analysis) tool to find the Voronoi regions of these centroids and name the result 'C:/gispy/scratch/voronoi.shp'.<br />
<br />
</li>
<li><strong>hullPoints.py</strong> Practice performing sequential geoprocessing steps. To find four corner point for  'C:/gispy/data/ch06/data1.shp',   perform two
            <leo_highlight style="background-color: transparent; background-image: none; 
background-repeat: repeat; background-attachment: scroll; 
background-position: 0% 0%; -moz-background-size: auto auto; cursor: 
pointer; display: inline; -moz-background-clip: -moz-initial; 
-moz-background-origin: -moz-initial; -moz-background-inline-policy: 
-moz-initial;" id="leoHighlights_Underline_5" onclick="leoHighlightsHandleClick('leoHighlights_Underline_42')" onmouseover="leoHighlightsHandleMouseOver('leoHighlights_Underline_42')" onmouseout="leoHighlightsHandleMouseOut('leoHighlights_Underline_42')" leohighlights_keywords="tool" leohighlights_url_top="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsTop.jsp?keywords%3Dtool%26domain%3D" leohighlights_url_bottom="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsBottom.jsp?keywords%3Dtool%26domain%3D" leohighlights_underline="false">tool calls in this script: </leo_highlight>
          Use the Minimum Bounding Geometry (Data Management) tool to find the hull of the points. Name this result 'C:/gispy/scratch/boundingPoly.shp'. Then call the Feature Vertices to Points (Data Management) tool on this bounding polygon and name this result 'C:/gispy/scratch/outerPoints.shp'.<br />
<br />
</li>
<li><strong>avgRast.py </strong>Write a script that uses <code>Raster</code> objects and Spatial Analyst to calculate an average raster value from three rasters 'out1', 'out2', and 'out3'  in the sample database, in rastSmall.gdb. Save the output raster in rastSmall.gdb as 'C:/gispy/scratch/avgRast'. Use a few simple mathematical operations instead of using the Cell Statistics tool. Be sure to delete the output <code>Raster</code> object using the <code>del</code> keyword.<br />
<br />
</li>
<li><strong>reclassify.py</strong> To explore using the <code>RemapValue</code> object, the  Reclassify (Spatial Analyst)
            <leo_highlight style="background-color: transparent; background-image: none; 
background-repeat: repeat; background-attachment: scroll; 
background-position: 0% 0%; -moz-background-size: auto auto; cursor: 
pointer; display: inline; -moz-background-clip: -moz-initial; 
-moz-background-origin: -moz-initial; -moz-background-inline-policy: 
-moz-initial;" id="leoHighlights_Underline_37" onclick="leoHighlightsHandleClick('leoHighlights_Underline_37')" onmouseover="leoHighlightsHandleMouseOver('leoHighlights_Underline_37')" onmouseout="leoHighlightsHandleMouseOut('leoHighlights_Underline_37')" leohighlights_keywords="tool" leohighlights_url_top="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsTop.jsp?keywords%3Dtool%26domain%3D" leohighlights_url_bottom="http%3A//shortcuts.thebrowserhighlighter.com/leonardo/plugin/highlights/3_2/tbh_highlightsBottom.jsp?keywords%3Dtool%26domain%3D" leohighlights_underline="false">tool</leo_highlight>
            to 
            reclassify       the Gettysburg battlefield Esri GRID 
            raster 
            (getty_rast) 'VALUE' field so that all raster areas with a value of 1 
            have a new      
            value of 100 and all areas with a value of 2 have a new 
            value of 200. 
          Name the output raster 'C:/gispy/scratch/reclassGetty'. Then copy a code snippet from the results to see the syntax for the <code>RemapValue</code> object, and write a script that calls the Reclassify tool with the same input and output. In the script, be sure to delete the output <code>Raster</code> object using the <code>del</code> keyword.          </li>
</ol><a href="#top">back to top</a> <p><strong>Table 6.1: Highlights of <code>arcpy</code> functionality </strong><a name="create" id="create2"></a></p>
<table width="759" border="1">
<tr>
<td width="74"><strong>ArcGIS Topic</strong></td>
<td width="260"><strong>Functionality</strong></td>
<td width="403"><strong>Code sample</strong></td>
</tr>
<tr>
<td>Tools </td>
<td>Call ArcToolbox tools</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="s">&#39;output.shp&#39;</span><span class="p">,</span> <span class="s">&#39;1 Mile&#39;</span><span class="p">)</span></code></td>
</tr>
<tr>
<td>Other functions</td>
<td>Licensing, data management, and other miscellaneous needs.</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">CheckOutExtension</span><span class="p">(</span><span class="s">&#39;Spatial&#39;</span><span class="p">)</span></code></td>
</tr>
<tr>
<td>Environment<br />
                      variables</td>
<td>Set and get environment variable values</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span> </code></td>
</tr>
<tr>
<td>Describe</td>
<td>Describe data properties</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">Describe</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">)</span> </code></td>
</tr>
<tr>
<td>Listing data</td>
<td>List  items (e.g., rasters, feature classes, workspaces, toolboxes,  environment variables, and indexes)</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">ListFeatureClasses</span><span class="p">(</span> <span class="p">)</span> </code></td>
</tr>
<tr>
<td>Cursor</td>
<td>Read/modify attribute table elements</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">da</span><span class="o">.</span><span class="n">SearchCursor</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="n">fieldNames</span><span class="p">)</span> </code></td>
</tr>
<tr>
<td>Messaging</td>
<td>Get and print geoprocessing messages</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">GetMessages</span><span class="p">(</span> <span class="p">)</span> </code></td>
</tr>
<tr>
<td>Mapping</td>
<td>Manipulate existing map layers, add layers to maps, modifying surrounds, manipulate symbology<br /></td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">mapping</span><span class="o">.</span><span class="n">MoveLayer</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">refLayer</span><span class="p">,</span> <span class="n">moveLayer</span><span class="p">,</span> <span class="s">&#39;BEFORE&#39;</span><span class="p">)</span> </code></td>
</tr>
</table>
<br /><strong>ArcGIS Topic</strong><strong>Functionality</strong><strong>Code sample</strong>Tools Call ArcToolbox tools<code><span class="n">arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="s">&#39;output.shp&#39;</span><span class="p">,</span> <span class="s">&#39;1 Mile&#39;</span><span class="p">)</span></code>Other functionsLicensing, data management, and other miscellaneous needs.<code><span class="n">arcpy</span><span class="o">.</span><span class="n">CheckOutExtension</span><span class="p">(</span><span class="s">&#39;Spatial&#39;</span><span class="p">)</span></code>Environment<br />
                      variablesSet and get environment variable values<code><span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span> </code>DescribeDescribe data properties<code><span class="n">arcpy</span><span class="o">.</span><span class="n">Describe</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">)</span> </code>Listing dataList  items (e.g., rasters, feature classes, workspaces, toolboxes,  environment variables, and indexes)<code><span class="n">arcpy</span><span class="o">.</span><span class="n">ListFeatureClasses</span><span class="p">(</span> <span class="p">)</span> </code>CursorRead/modify attribute table elements<code><span class="n">arcpy</span><span class="o">.</span><span class="n">da</span><span class="o">.</span><span class="n">SearchCursor</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="n">fieldNames</span><span class="p">)</span> </code>MessagingGet and print geoprocessing messages<code><span class="n">arcpy</span><span class="o">.</span><span class="n">GetMessages</span><span class="p">(</span> <span class="p">)</span> </code>MappingManipulate existing map layers, add layers to maps, modifying surrounds, manipulate symbology<br /><code><span class="n">arcpy</span><span class="o">.</span><span class="n">mapping</span><span class="o">.</span><span class="n">MoveLayer</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">refLayer</span><span class="p">,</span> <span class="n">moveLayer</span><span class="p">,</span> <span class="s">&#39;BEFORE&#39;</span><span class="p">)</span> </code><a href="#top">back to top</a> <code>arcpy<span class="o">.</span>functionName(argument1, 
              argument2, argument3,...)</code><a href="#top">back to top</a> <a href="#top">back to top</a> <code>arcpy<span class="o">.</span>toolName_toolboxAlias(arguments1, 
              argument2, argument3,...)</code><strong>Table 6.2 </strong>Toolbox alias examples<br />
<table border="3">
<tr>
<th width="186" scope="row">Toolbox</th>
<th width="117">Alias</th>
</tr>
<tr>
<td>3D Analyst Tools</td>
<td>3d</td>
</tr>
<tr>
<td>Analysis Tools</td>
<td>analysis</td>
</tr>
<tr>
<td>Cartography Tools</td>
<td>cartography</td>
</tr>
<tr>
<td>Conversion Tools</td>
<td>conversion</td>
</tr>
<tr>
<td>Data Interoperability Tools</td>
<td>interop</td>
</tr>
<tr>
<td>Data Management Tools</td>
<td>management</td>
</tr>
<tr>
<td>Spatial Analyst Tools</td>
<td>sa</td>
</tr>
<tr>
<td>Spatial Statistics Tools</td>
<td>stats</td>
</tr>
</table>3D Analyst Tools3dAnalysis ToolsanalysisCartography ToolscartographyConversion ToolsconversionData Interoperability ToolsinteropData Management ToolsmanagementSpatial Analyst ToolssaSpatial Statistics Toolsstats<a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <strong>Table 6.3</strong> Linear Unit of Measure Keywords (not case 
              sensitive)
              <table border="1" width="453">
<tbody>
<tr>
<td width="443">centimeters | decimal degrees | decimeters | feet | inches | kilometers | meters | miles | millimeters | nautical miles | points | unknown | yards</td>
</tr>
</tbody>
</table>centimeters | decimal degrees | decimeters | feet | inches | kilometers | meters | miles | millimeters | nautical miles | points | unknown | yards<a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <a href="#top">back to top</a> <code>variable = arcpy<span class="o">.</span>toolName_toolboxAlias(arguments1, 
              argument2, argument3,...)</code><strong>Example 6.1</strong><br />
<code>
<div class="highlight">
<pre><span class="c"># avgNearNeighbor.py </span>
<span class="c">#Purpose: Analyze crime data to determine if spatial patterns are statistically significant </span>
<span class="kn">import</span> <span class="nn">arcpy</span><br />

<br /><span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/data/ch06&#39;</span>
<br />
<span class="n">annResult</span> <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span><span class="n">AverageNearestNeighbor_stats</span><span class="p">(</span><span class="s">&#39;points.shp&#39;</span><span class="p">,</span> <span class="s">&#39;Euclidean Distance&#39;</span><span class="p">)</span>
<br />

<span class="k">print</span> <span class="s">&#39;Average Nearest Neighbor Output&#39;</span>
<span class="k">print</span> <span class="s">&#39;Nearest neighbor ratio: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">)</span> 
<span class="k">print</span> <span class="s">&#39;z-score: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">)</span>
<span class="k">print</span> <span class="s">&#39;p-value: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">)</span> 
<span class="k">print</span> <span class="s">&#39;Expected Mean Distance: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">)</span>
<span class="k">print</span> <span class="s">&#39;Observed Mean Distance: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="p">)</span>

<span class="o"></span><span class="mf"></span></pre>
</div></code>
<p> Printed output:                </p>
<p>&gt;&gt;&gt; <code><span class="n">Average Nearest Neighbor Output<br />
                  Nearest neighbor ratio: 0.853047<br />
                  z-score: -5.802495<br />
                  p-value: 0<br />
                  Expected Mean Distance: 753.825013<br />
              Observed Mean Distance: 643.048013</span></code></p><a href="#top">back to top</a> <code>arcpy<span class="o">.</span>toolboxAlias<span class="o">.</span>toolName(arguments1, 
              argument2, argument3,...)</code><a href="#top">back to top</a> <a href="#top">back to top</a> <strong>Example 6.2</strong><br />
<code>
<div class="highlight">
<pre><span class="c"># computeRastEquation.py </span>
<span class="c"># Purpose: Calculate 5 * &#39;getty_rast&#39; - 2</span>

<span class="kn">import</span> <span class="nn">arcpy</span>

<span class="n"><br />arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/data/ch06/rastSmall.gdb&#39;</span><br />arcpy<span class="o">.</span>CheckOutExtension(<span class="s">'Spatial'</span>)<br /><span class="n"><br />outRast1</span> <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span><span class="n">sa</span><span class="o">.</span><span class="n">Times</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="s">&#39;dataRast&#39;</span><span class="p">)</span>
<span class="n">outRast2</span> <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span><span class="n">sa</span><span class="o">.</span><span class="n">Minus</span><span class="p">(</span><span class="n">outRast1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">outRast2</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="s">&#39;equationRast&#39;</span> <span class="p">)</span><br /><span class="kn">del</span> outRast1<br /><span class="kn">del</span> outRast2

</pre>
</div> </code> <a href="#top">back to top</a> <a href="#top">back to top</a> <strong>Example 6.3</strong> <br />
<code>
<div class="highlight">
<pre><span class="c"># buffer_clip.py (hard-coded version)</span>
<span class="c"># Purpose: Buffer a zone and use it to clip another file</span>
<span class="c"># Input: No arguments needed.</span>

<span class="kn">import</span> <span class="nn">arcpy</span><span class="o"></span><span class="nn"></span>

<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/data/ch06&#39;</span>
<span class="n">outDir</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/scratch/&#39;</span>

<span class="c"># Set buffer params</span>
<span class="n">fireDamage</span> <span class="o">=</span> <span class="s">&#39;special_regions.shp&#39;</span>
<span class="n">fireBuffer</span> <span class="o">=</span>  <span class="n">outDir</span> <span class="o">+</span> <span class="n">fireDamage</span><span class="p">[:</span><span class="o">-</span><span class="mi">4</span><span class="p">]</span> <span class="o">+</span> <span class="s">&#39;Buffer.shp&#39;</span>
<span class="n">bufferDist</span> <span class="o">=</span> <span class="s">&#39;1 mile&#39;</span>

<span class="c"># Set clip params</span>
<span class="n">park</span> <span class="o">=</span> <span class="s">&#39;park.shp&#39;</span>
<span class="n">clipOutput</span> <span class="o">=</span> <span class="n">outDir</span> <span class="o">+</span> <span class="n">park</span><span class="p">[:</span><span class="o">-</span><span class="mi">4</span><span class="p">]</span> <span class="o">+</span> <span class="s">&#39;DamageBuffer.shp&#39;</span>

<span class="n">arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="n">fireDamage</span><span class="p">,</span> <span class="n">fireBuffer</span><span class="p">,</span><span class="n">bufferDist</span><span class="p">)</span>
<span class="k">print</span> <span class="s">&#39;{0} created.&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">fireBuffer</span><span class="p">)</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">Clip_analysis</span><span class="p">(</span><span class="n">park</span><span class="p">,</span> <span class="n">fireBuffer</span><span class="p">,</span> <span class="n">clipOutput</span> <span class="p">)</span>
<span class="k">print</span> <span class="s">&#39;{0} created.&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">clipOutput</span><span class="p">)</span>
  </pre></div></code>
<p><img src="../images/buffer_clip_input.jpg" alt="initialview" /></p>
<p>Figure 6.6a: Initial view of data in Example 6.3<br />
                  black: park = 'park.shp'<br />
                  gray: fireDamage = 'special_regions.shp'</p>
<p><img src="../images/buffer_clip_intermediate.jpg" alt="2" /><br />
                  Figure 6.6b: Intermediate view of data in Example 6.3<br />
                  black: park = 'park.shp' <br />
                  green: fireBuffer = 'special_regionsBuffer.shp'</p>
<p><img src="../images/buffer_clip_output.jpg" alt="3" /><br />
                  Figure 6.6c: Final view of data in Example 6.3<br />
                  black: park = 'park.shp' <br />
                  gray: fireDamage = 'special_regions.shp'<br />
                  light gray: clipOutput = 'parkDamageBuffer.shp'<br />
                  Park within 1 mi. of fire <br />
</p><p><strong>Example 6.4</strong><br />
</p><code>
<div class="highlight">
<pre><span class="c"># addLengthField.py</span>
<span class="c"># Purpose: Add a field containing polygon lengths to the shapefile.</span>
<span class="c"># Usage: No arguments needed.</span>
<span class="kn">import</span> <span class="nn">arcpy</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/data/ch06&#39;</span>

<span class="n">inputFile</span> <span class="o">=</span> <span class="s">&#39;special_regions.shp&#39;</span>
<span class="n">fieldName</span> <span class="o">=</span> <span class="s">&#39;Length&#39;</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">AddField_management</span><span class="p">(</span> <span class="n">inputFile</span><span class="p">,</span> <span class="n">fieldName</span><span class="p">,</span> <span class="s">&#39;FLOAT&#39;</span> <span class="p">)</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">CalculateField_management</span><span class="p">(</span> <span class="n">inputFile</span><span class="p">,</span> <span class="n">fieldName</span><span class="p">,</span> <span class="s">&#39;!shape.length!&#39;</span><span class="p">,</span> <span class="s">&#39;PYTHON&#39;</span> <span class="p">)</span>
</pre>
</div> </code><a href="#top">back to top</a> <p><strong>Example 6.5</strong><br />
</p>
<code>
<div class="highlight">
<pre><span class="c"># callInventory.py</span>
<span class="c"># Purpose: Call the inventory tool.</span>
<span class="kn">import</span> <span class="nn">arcpy</span>

<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/sample_scripts/ch06&#39;</span>
<span class="n">inputDir</span> <span class="o">=</span> <span class="s">&quot;C:/gispy/data/ch06/&quot;</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">ImportToolbox</span><span class="p">(</span><span class="s">&#39;customTools.tbx&#39;</span><span class="p">)</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">Inventory_custom</span><span class="p">(</span><span class="n">inputDir</span><span class="p">,</span> <span class="s">&#39;SUMMARY_ONLY&#39;</span><span class="p">,</span> <span class="s">&#39;summaryFile.txt&#39;</span><span class="p">)</span></pre>
</div>
</code><a href="#top">back to top</a> <p><strong>Table 6.4: Geoprocessing in Python. </strong><a name="create" id="create"></a></p>
<table width="405" border="1">
<tr>
<td width="68"><strong>ArcGIS Version</strong></td>
<td width="321"><strong>Python code statements</strong></td>
</tr>
<tr>
<td><div align="center">9.1</div></td>
<td><code><span class="key">from</span> win32com.client <span class="key">import</span> Dispatch <br />
                    gp <span class="o">=</span> Dispatch(<span class="s">'esriGeoprocessing.GPDispatch.1'</span>)</code> </td>
</tr>
<tr>
<td><div align="center">9.2</div></td>
<td><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create( ) </code></td>
</tr>
<tr>
<td><div align="center">9.3</div></td>
<td><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create(<span class="mi">9.3</span>) </code></td>
</tr>
<tr>
<td><div align="center">10.x</div></td>
<td><code><span class="key">import</span> arcpy</code></td>
</tr>
</table><strong>ArcGIS Version</strong><strong>Python code statements</strong><div align="center">9.1</div><code><span class="key">from</span> win32com.client <span class="key">import</span> Dispatch <br />
                    gp <span class="o">=</span> Dispatch(<span class="s">'esriGeoprocessing.GPDispatch.1'</span>)</code> <div align="center">9.2</div><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create( ) </code><div align="center">9.3</div><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create(<span class="mi">9.3</span>) </code><div align="center">10.x</div><code><span class="key">import</span> arcpy</code><a href="#top">back to top</a> <blockquote>
<p>When you search for <code>arcpy</code> objects on the ArcGIS Resources site,  add the word <code>arcpy</code> to the search to bring the <code>arcpy</code>-related results to the top of the search.<br />
</p>
</blockquote><a href="#top">back to top</a> <a href="#top">back to top</a> <span class="head">6.1 Importing <code>arcpy</code></span> <a name="arcpy" id="environment3"></a><a href="#top">back to top</a> <p><strong>Table 6.1: Highlights of <code>arcpy</code> functionality </strong><a name="create" id="create2"></a></p>
<table width="759" border="1">
<tr>
<td width="74"><strong>ArcGIS Topic</strong></td>
<td width="260"><strong>Functionality</strong></td>
<td width="403"><strong>Code sample</strong></td>
</tr>
<tr>
<td>Tools </td>
<td>Call ArcToolbox tools</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="s">&#39;output.shp&#39;</span><span class="p">,</span> <span class="s">&#39;1 Mile&#39;</span><span class="p">)</span></code></td>
</tr>
<tr>
<td>Other functions</td>
<td>Licensing, data management, and other miscellaneous needs.</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">CheckOutExtension</span><span class="p">(</span><span class="s">&#39;Spatial&#39;</span><span class="p">)</span></code></td>
</tr>
<tr>
<td>Environment<br />
                      variables</td>
<td>Set and get environment variable values</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span> </code></td>
</tr>
<tr>
<td>Describe</td>
<td>Describe data properties</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">Describe</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">)</span> </code></td>
</tr>
<tr>
<td>Listing data</td>
<td>List  items (e.g., rasters, feature classes, workspaces, toolboxes,  environment variables, and indexes)</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">ListFeatureClasses</span><span class="p">(</span> <span class="p">)</span> </code></td>
</tr>
<tr>
<td>Cursor</td>
<td>Read/modify attribute table elements</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">da</span><span class="o">.</span><span class="n">SearchCursor</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="n">fieldNames</span><span class="p">)</span> </code></td>
</tr>
<tr>
<td>Messaging</td>
<td>Get and print geoprocessing messages</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">GetMessages</span><span class="p">(</span> <span class="p">)</span> </code></td>
</tr>
<tr>
<td>Mapping</td>
<td>Manipulate existing map layers, add layers to maps, modifying surrounds, manipulate symbology<br /></td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">mapping</span><span class="o">.</span><span class="n">MoveLayer</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">refLayer</span><span class="p">,</span> <span class="n">moveLayer</span><span class="p">,</span> <span class="s">&#39;BEFORE&#39;</span><span class="p">)</span> </code></td>
</tr>
</table>
<br /><strong>ArcGIS Topic</strong><strong>Functionality</strong><strong>Code sample</strong>Tools Call ArcToolbox tools<code><span class="n">arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="s">&#39;output.shp&#39;</span><span class="p">,</span> <span class="s">&#39;1 Mile&#39;</span><span class="p">)</span></code>Other functionsLicensing, data management, and other miscellaneous needs.<code><span class="n">arcpy</span><span class="o">.</span><span class="n">CheckOutExtension</span><span class="p">(</span><span class="s">&#39;Spatial&#39;</span><span class="p">)</span></code>Environment<br />
                      variablesSet and get environment variable values<code><span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span> </code>DescribeDescribe data properties<code><span class="n">arcpy</span><span class="o">.</span><span class="n">Describe</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">)</span> </code>Listing dataList  items (e.g., rasters, feature classes, workspaces, toolboxes,  environment variables, and indexes)<code><span class="n">arcpy</span><span class="o">.</span><span class="n">ListFeatureClasses</span><span class="p">(</span> <span class="p">)</span> </code>CursorRead/modify attribute table elements<code><span class="n">arcpy</span><span class="o">.</span><span class="n">da</span><span class="o">.</span><span class="n">SearchCursor</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="n">fieldNames</span><span class="p">)</span> </code>MessagingGet and print geoprocessing messages<code><span class="n">arcpy</span><span class="o">.</span><span class="n">GetMessages</span><span class="p">(</span> <span class="p">)</span> </code>MappingManipulate existing map layers, add layers to maps, modifying surrounds, manipulate symbology<br /><code><span class="n">arcpy</span><span class="o">.</span><span class="n">mapping</span><span class="o">.</span><span class="n">MoveLayer</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">refLayer</span><span class="p">,</span> <span class="n">moveLayer</span><span class="p">,</span> <span class="s">&#39;BEFORE&#39;</span><span class="p">)</span> </code><strong>ArcGIS Topic</strong><strong>Functionality</strong><strong>Code sample</strong>Tools Call ArcToolbox tools<code><span class="n">arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="s">&#39;output.shp&#39;</span><span class="p">,</span> <span class="s">&#39;1 Mile&#39;</span><span class="p">)</span></code>Other functionsLicensing, data management, and other miscellaneous needs.<code><span class="n">arcpy</span><span class="o">.</span><span class="n">CheckOutExtension</span><span class="p">(</span><span class="s">&#39;Spatial&#39;</span><span class="p">)</span></code>Environment<br />
                      variablesSet and get environment variable values<code><span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span> </code>DescribeDescribe data properties<code><span class="n">arcpy</span><span class="o">.</span><span class="n">Describe</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">)</span> </code>Listing dataList  items (e.g., rasters, feature classes, workspaces, toolboxes,  environment variables, and indexes)<code><span class="n">arcpy</span><span class="o">.</span><span class="n">ListFeatureClasses</span><span class="p">(</span> <span class="p">)</span> </code>CursorRead/modify attribute table elements<code><span class="n">arcpy</span><span class="o">.</span><span class="n">da</span><span class="o">.</span><span class="n">SearchCursor</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="n">fieldNames</span><span class="p">)</span> </code>MessagingGet and print geoprocessing messages<code><span class="n">arcpy</span><span class="o">.</span><span class="n">GetMessages</span><span class="p">(</span> <span class="p">)</span> </code>MappingManipulate existing map layers, add layers to maps, modifying surrounds, manipulate symbology<br /><code><span class="n">arcpy</span><span class="o">.</span><span class="n">mapping</span><span class="o">.</span><span class="n">MoveLayer</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">refLayer</span><span class="p">,</span> <span class="n">moveLayer</span><span class="p">,</span> <span class="s">&#39;BEFORE&#39;</span><span class="p">)</span> </code><span class="head">6.2 <code>arcpy</code> Functions</span> <a name="functions" id="environment2"></a><a href="#top">back to top</a> <code>arcpy<span class="o">.</span>functionName(argument1, 
              argument2, argument3,...)</code><span class="head">6.3 Environment
                settings</span> <a name="environment" id="environment"></a><a href="#top">back to top</a> <code>arcpy<span class="o">.</span>env<span class="o">.</span>property <span class="o">=</span> value</code><code>variable <span class="o">=</span> arcpy<span class="o">.</span>env<span class="o">.</span>property</code><p><span class="head">6.4 Calling 
                  Tools</span> <a name="tools" id="tools"></a></p><a href="#top">back to top</a> <code>arcpy<span class="o">.</span>toolName_toolboxAlias(arguments1, 
              argument2, argument3,...)</code>ToolboxAlias<strong>Table 6.2 </strong>Toolbox alias examples<br />
<table border="3">
<tr>
<th width="186" scope="row">Toolbox</th>
<th width="117">Alias</th>
</tr>
<tr>
<td>3D Analyst Tools</td>
<td>3d</td>
</tr>
<tr>
<td>Analysis Tools</td>
<td>analysis</td>
</tr>
<tr>
<td>Cartography Tools</td>
<td>cartography</td>
</tr>
<tr>
<td>Conversion Tools</td>
<td>conversion</td>
</tr>
<tr>
<td>Data Interoperability Tools</td>
<td>interop</td>
</tr>
<tr>
<td>Data Management Tools</td>
<td>management</td>
</tr>
<tr>
<td>Spatial Analyst Tools</td>
<td>sa</td>
</tr>
<tr>
<td>Spatial Statistics Tools</td>
<td>stats</td>
</tr>
</table>3D Analyst Tools3dAnalysis ToolsanalysisCartography ToolscartographyConversion ToolsconversionData Interoperability ToolsinteropData Management ToolsmanagementSpatial Analyst ToolssaSpatial Statistics ToolsstatsToolboxAlias3D Analyst Tools3dAnalysis ToolsanalysisCartography ToolscartographyConversion ToolsconversionData Interoperability ToolsinteropData Management ToolsmanagementSpatial Analyst ToolssaSpatial Statistics Toolsstats<span><strong><span class="head">6.4.1 Using tool help</span><a name="help" id="help"></a></strong></span><a href="#top">back to top</a> <span><strong><span class="head">6.4.2 Copy code snippet</span></strong></span> <a name="snippet" id="snippet"></a><a href="#top">back to top</a> <span><strong><span class="head">6.4.3 Linear units</span></strong></span> <a name="linear" id="snippet2"></a><a href="#top">back to top</a> <strong>Table 6.3</strong> Linear Unit of Measure Keywords (not case 
              sensitive)
              <table border="1" width="453">
<tbody>
<tr>
<td width="443">centimeters | decimal degrees | decimeters | feet | inches | kilometers | meters | miles | millimeters | nautical miles | points | unknown | yards</td>
</tr>
</tbody>
</table>centimeters | decimal degrees | decimeters | feet | inches | kilometers | meters | miles | millimeters | nautical miles | points | unknown | yardscentimeters | decimal degrees | decimeters | feet | inches | kilometers | meters | miles | millimeters | nautical miles | points | unknown | yards<span><strong><span class="head">6.4.4 Python expressions as inputs</span><a name="expressions" id="expressions"></a></strong></span><a href="#top">back to top</a> <span><strong><span class="head">6.4.5 Multivalue inputs</span></strong></span> <a name="multivalue" id="multivalue"></a><a href="#top">back to top</a> <span><strong><span class="head">6.4.6 Optional parameters</span></strong></span> <a name="optional" id="optional"></a><a href="#top">back to top</a> <span><strong><span class="head">6.4.7 Return values (...using the <code>Result</code> object)</span><a name="return" id="return"></a></strong></span><a href="#top">back to top</a> <code>variable = arcpy<span class="o">.</span>toolName_toolboxAlias(arguments1, 
              argument2, argument3,...)</code><strong>Example 6.1</strong><br />
<code>
<div class="highlight">
<pre><span class="c"># avgNearNeighbor.py </span>
<span class="c">#Purpose: Analyze crime data to determine if spatial patterns are statistically significant </span>
<span class="kn">import</span> <span class="nn">arcpy</span><br />

<br /><span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/data/ch06&#39;</span>
<br />
<span class="n">annResult</span> <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span><span class="n">AverageNearestNeighbor_stats</span><span class="p">(</span><span class="s">&#39;points.shp&#39;</span><span class="p">,</span> <span class="s">&#39;Euclidean Distance&#39;</span><span class="p">)</span>
<br />

<span class="k">print</span> <span class="s">&#39;Average Nearest Neighbor Output&#39;</span>
<span class="k">print</span> <span class="s">&#39;Nearest neighbor ratio: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">)</span> 
<span class="k">print</span> <span class="s">&#39;z-score: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">)</span>
<span class="k">print</span> <span class="s">&#39;p-value: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">)</span> 
<span class="k">print</span> <span class="s">&#39;Expected Mean Distance: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">)</span>
<span class="k">print</span> <span class="s">&#39;Observed Mean Distance: {0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="n">annResult</span><span class="o">.</span><span class="n">getOutput</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="p">)</span>

<span class="o"></span><span class="mf"></span></pre>
</div></code>
<p> Printed output:                </p>
<p>&gt;&gt;&gt; <code><span class="n">Average Nearest Neighbor Output<br />
                  Nearest neighbor ratio: 0.853047<br />
                  z-score: -5.802495<br />
                  p-value: 0<br />
                  Expected Mean Distance: 753.825013<br />
              Observed Mean Distance: 643.048013</span></code></p><span class="head">6.4.8 Calling  Spatial Analyst tools</span><a name="sa" id="sa"></a><a href="#top">back to top</a> <code>arcpy<span class="o">.</span>toolboxAlias<span class="o">.</span>toolName(arguments1, 
              argument2, argument3,...)</code><span>
<span class="head">6.4.9 Importing spatial analyst</span>
<a name="importsa" id="importsa"></a></span><a href="#top">back to top</a> <span class="head">6.4.10 Raster Calculator</span>

<a name="rastCalc" id="importsa2"></a> <a href="#top">back to top</a> <strong>Example 6.2</strong><br />
<code>
<div class="highlight">
<pre><span class="c"># computeRastEquation.py </span>
<span class="c"># Purpose: Calculate 5 * &#39;getty_rast&#39; - 2</span>

<span class="kn">import</span> <span class="nn">arcpy</span>

<span class="n"><br />arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/data/ch06/rastSmall.gdb&#39;</span><br />arcpy<span class="o">.</span>CheckOutExtension(<span class="s">'Spatial'</span>)<br /><span class="n"><br />outRast1</span> <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span><span class="n">sa</span><span class="o">.</span><span class="n">Times</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="s">&#39;dataRast&#39;</span><span class="p">)</span>
<span class="n">outRast2</span> <span class="o">=</span> <span class="n">arcpy</span><span class="o">.</span><span class="n">sa</span><span class="o">.</span><span class="n">Minus</span><span class="p">(</span><span class="n">outRast1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">outRast2</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="s">&#39;equationRast&#39;</span> <span class="p">)</span><br /><span class="kn">del</span> outRast1<br /><span class="kn">del</span> outRast2

</pre>
</div> </code> <span><strong><span class="head">6.4.11 Temporary feature layers</span><a name="tempLayers" id="custom2"></a></strong></span><a href="#top">back to top</a> <span class="head">6.4.12 Using variables for multiple tool calls</span><a name="multipleTool" id="multipleTool"></a><a href="#top">back to top</a> <strong>Example 6.3</strong> <br />
<code>
<div class="highlight">
<pre><span class="c"># buffer_clip.py (hard-coded version)</span>
<span class="c"># Purpose: Buffer a zone and use it to clip another file</span>
<span class="c"># Input: No arguments needed.</span>

<span class="kn">import</span> <span class="nn">arcpy</span><span class="o"></span><span class="nn"></span>

<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/data/ch06&#39;</span>
<span class="n">outDir</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/scratch/&#39;</span>

<span class="c"># Set buffer params</span>
<span class="n">fireDamage</span> <span class="o">=</span> <span class="s">&#39;special_regions.shp&#39;</span>
<span class="n">fireBuffer</span> <span class="o">=</span>  <span class="n">outDir</span> <span class="o">+</span> <span class="n">fireDamage</span><span class="p">[:</span><span class="o">-</span><span class="mi">4</span><span class="p">]</span> <span class="o">+</span> <span class="s">&#39;Buffer.shp&#39;</span>
<span class="n">bufferDist</span> <span class="o">=</span> <span class="s">&#39;1 mile&#39;</span>

<span class="c"># Set clip params</span>
<span class="n">park</span> <span class="o">=</span> <span class="s">&#39;park.shp&#39;</span>
<span class="n">clipOutput</span> <span class="o">=</span> <span class="n">outDir</span> <span class="o">+</span> <span class="n">park</span><span class="p">[:</span><span class="o">-</span><span class="mi">4</span><span class="p">]</span> <span class="o">+</span> <span class="s">&#39;DamageBuffer.shp&#39;</span>

<span class="n">arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="n">fireDamage</span><span class="p">,</span> <span class="n">fireBuffer</span><span class="p">,</span><span class="n">bufferDist</span><span class="p">)</span>
<span class="k">print</span> <span class="s">&#39;{0} created.&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">fireBuffer</span><span class="p">)</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">Clip_analysis</span><span class="p">(</span><span class="n">park</span><span class="p">,</span> <span class="n">fireBuffer</span><span class="p">,</span> <span class="n">clipOutput</span> <span class="p">)</span>
<span class="k">print</span> <span class="s">&#39;{0} created.&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">clipOutput</span><span class="p">)</span>
  </pre></div></code>
<p><img src="../images/buffer_clip_input.jpg" alt="initialview" /></p>
<p>Figure 6.6a: Initial view of data in Example 6.3<br />
                  black: park = 'park.shp'<br />
                  gray: fireDamage = 'special_regions.shp'</p>
<p><img src="../images/buffer_clip_intermediate.jpg" alt="2" /><br />
                  Figure 6.6b: Intermediate view of data in Example 6.3<br />
                  black: park = 'park.shp' <br />
                  green: fireBuffer = 'special_regionsBuffer.shp'</p>
<p><img src="../images/buffer_clip_output.jpg" alt="3" /><br />
                  Figure 6.6c: Final view of data in Example 6.3<br />
                  black: park = 'park.shp' <br />
                  gray: fireDamage = 'special_regions.shp'<br />
                  light gray: clipOutput = 'parkDamageBuffer.shp'<br />
                  Park within 1 mi. of fire <br />
</p><p><strong>Example 6.4</strong><br />
</p><code>
<div class="highlight">
<pre><span class="c"># addLengthField.py</span>
<span class="c"># Purpose: Add a field containing polygon lengths to the shapefile.</span>
<span class="c"># Usage: No arguments needed.</span>
<span class="kn">import</span> <span class="nn">arcpy</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/data/ch06&#39;</span>

<span class="n">inputFile</span> <span class="o">=</span> <span class="s">&#39;special_regions.shp&#39;</span>
<span class="n">fieldName</span> <span class="o">=</span> <span class="s">&#39;Length&#39;</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">AddField_management</span><span class="p">(</span> <span class="n">inputFile</span><span class="p">,</span> <span class="n">fieldName</span><span class="p">,</span> <span class="s">&#39;FLOAT&#39;</span> <span class="p">)</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">CalculateField_management</span><span class="p">(</span> <span class="n">inputFile</span><span class="p">,</span> <span class="n">fieldName</span><span class="p">,</span> <span class="s">&#39;!shape.length!&#39;</span><span class="p">,</span> <span class="s">&#39;PYTHON&#39;</span> <span class="p">)</span>
</pre>
</div> </code><span><strong><span class="head">6.4.13 Calling custom tools</span><a name="custom" id="custom"></a></strong></span><a href="#top">back to top</a> <p><strong>Example 6.5</strong><br />
</p>
<code>
<div class="highlight">
<pre><span class="c"># callInventory.py</span>
<span class="c"># Purpose: Call the inventory tool.</span>
<span class="kn">import</span> <span class="nn">arcpy</span>

<span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">workspace</span> <span class="o">=</span> <span class="s">&#39;C:/gispy/sample_scripts/ch06&#39;</span>
<span class="n">inputDir</span> <span class="o">=</span> <span class="s">&quot;C:/gispy/data/ch06/&quot;</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">ImportToolbox</span><span class="p">(</span><span class="s">&#39;customTools.tbx&#39;</span><span class="p">)</span>
<span class="n">arcpy</span><span class="o">.</span><span class="n">Inventory_custom</span><span class="p">(</span><span class="n">inputDir</span><span class="p">,</span> <span class="s">&#39;SUMMARY_ONLY&#39;</span><span class="p">,</span> <span class="s">&#39;summaryFile.txt&#39;</span><span class="p">)</span></pre>
</div>
</code><span class="head">6.5 A word about old scripts</span> <a name="arcgisscripting" id="introduction3"></a><a href="#top">back to top</a> <p><strong>Table 6.4: Geoprocessing in Python. </strong><a name="create" id="create"></a></p>
<table width="405" border="1">
<tr>
<td width="68"><strong>ArcGIS Version</strong></td>
<td width="321"><strong>Python code statements</strong></td>
</tr>
<tr>
<td><div align="center">9.1</div></td>
<td><code><span class="key">from</span> win32com.client <span class="key">import</span> Dispatch <br />
                    gp <span class="o">=</span> Dispatch(<span class="s">'esriGeoprocessing.GPDispatch.1'</span>)</code> </td>
</tr>
<tr>
<td><div align="center">9.2</div></td>
<td><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create( ) </code></td>
</tr>
<tr>
<td><div align="center">9.3</div></td>
<td><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create(<span class="mi">9.3</span>) </code></td>
</tr>
<tr>
<td><div align="center">10.x</div></td>
<td><code><span class="key">import</span> arcpy</code></td>
</tr>
</table><strong>ArcGIS Version</strong><strong>Python code statements</strong><div align="center">9.1</div><code><span class="key">from</span> win32com.client <span class="key">import</span> Dispatch <br />
                    gp <span class="o">=</span> Dispatch(<span class="s">'esriGeoprocessing.GPDispatch.1'</span>)</code> <div align="center">9.2</div><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create( ) </code><div align="center">9.3</div><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create(<span class="mi">9.3</span>) </code><div align="center">10.x</div><code><span class="key">import</span> arcpy</code><strong>ArcGIS Version</strong><strong>Python code statements</strong><div align="center">9.1</div><code><span class="key">from</span> win32com.client <span class="key">import</span> Dispatch <br />
                    gp <span class="o">=</span> Dispatch(<span class="s">'esriGeoprocessing.GPDispatch.1'</span>)</code> <div align="center">9.2</div><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create( ) </code><div align="center">9.3</div><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create(<span class="mi">9.3</span>) </code><div align="center">10.x</div><code><span class="key">import</span> arcpy</code><span class="head">6.6 Discussion </span><a name="discussion" id="discussion"></a><a href="#top">back to top</a> <blockquote>
<p>When you search for <code>arcpy</code> objects on the ArcGIS Resources site,  add the word <code>arcpy</code> to the search to bring the <code>arcpy</code>-related results to the top of the search.<br />
</p>
</blockquote><span class="head">6.7 Key terms</span><a name="keyterms" id="keyterms2"></a><a href="#top">back to top</a> <span class="head">6.8 Exercises</span> <a name="exercises" id="exercises"></a><a href="#top">back to top</a> ------------------------------------------------------------rows: 10 cols: 3<p><strong>Table 6.1: Highlights of <code>arcpy</code> functionality </strong><a name="create" id="create2"></a></p>
<table width="759" border="1">
<tr>
<td width="74"><strong>ArcGIS Topic</strong></td>
<td width="260"><strong>Functionality</strong></td>
<td width="403"><strong>Code sample</strong></td>
</tr>
<tr>
<td>Tools </td>
<td>Call ArcToolbox tools</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="s">&#39;output.shp&#39;</span><span class="p">,</span> <span class="s">&#39;1 Mile&#39;</span><span class="p">)</span></code></td>
</tr>
<tr>
<td>Other functions</td>
<td>Licensing, data management, and other miscellaneous needs.</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">CheckOutExtension</span><span class="p">(</span><span class="s">&#39;Spatial&#39;</span><span class="p">)</span></code></td>
</tr>
<tr>
<td>Environment<br />
                      variables</td>
<td>Set and get environment variable values</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span> </code></td>
</tr>
<tr>
<td>Describe</td>
<td>Describe data properties</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">Describe</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">)</span> </code></td>
</tr>
<tr>
<td>Listing data</td>
<td>List  items (e.g., rasters, feature classes, workspaces, toolboxes,  environment variables, and indexes)</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">ListFeatureClasses</span><span class="p">(</span> <span class="p">)</span> </code></td>
</tr>
<tr>
<td>Cursor</td>
<td>Read/modify attribute table elements</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">da</span><span class="o">.</span><span class="n">SearchCursor</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="n">fieldNames</span><span class="p">)</span> </code></td>
</tr>
<tr>
<td>Messaging</td>
<td>Get and print geoprocessing messages</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">GetMessages</span><span class="p">(</span> <span class="p">)</span> </code></td>
</tr>
<tr>
<td>Mapping</td>
<td>Manipulate existing map layers, add layers to maps, modifying surrounds, manipulate symbology<br /></td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">mapping</span><span class="o">.</span><span class="n">MoveLayer</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">refLayer</span><span class="p">,</span> <span class="n">moveLayer</span><span class="p">,</span> <span class="s">&#39;BEFORE&#39;</span><span class="p">)</span> </code></td>
</tr>
</table>
<br /><strong>ArcGIS Topic</strong><strong>Functionality</strong><strong>Code sample</strong>Tools Call ArcToolbox tools<code><span class="n">arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="s">&#39;output.shp&#39;</span><span class="p">,</span> <span class="s">&#39;1 Mile&#39;</span><span class="p">)</span></code>Other functionsLicensing, data management, and other miscellaneous needs.<code><span class="n">arcpy</span><span class="o">.</span><span class="n">CheckOutExtension</span><span class="p">(</span><span class="s">&#39;Spatial&#39;</span><span class="p">)</span></code>Environment<br />
                      variablesSet and get environment variable values<code><span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span> </code>DescribeDescribe data properties<code><span class="n">arcpy</span><span class="o">.</span><span class="n">Describe</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">)</span> </code>Listing dataList  items (e.g., rasters, feature classes, workspaces, toolboxes,  environment variables, and indexes)<code><span class="n">arcpy</span><span class="o">.</span><span class="n">ListFeatureClasses</span><span class="p">(</span> <span class="p">)</span> </code>CursorRead/modify attribute table elements<code><span class="n">arcpy</span><span class="o">.</span><span class="n">da</span><span class="o">.</span><span class="n">SearchCursor</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="n">fieldNames</span><span class="p">)</span> </code>MessagingGet and print geoprocessing messages<code><span class="n">arcpy</span><span class="o">.</span><span class="n">GetMessages</span><span class="p">(</span> <span class="p">)</span> </code>MappingManipulate existing map layers, add layers to maps, modifying surrounds, manipulate symbology<br /><code><span class="n">arcpy</span><span class="o">.</span><span class="n">mapping</span><span class="o">.</span><span class="n">MoveLayer</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">refLayer</span><span class="p">,</span> <span class="n">moveLayer</span><span class="p">,</span> <span class="s">&#39;BEFORE&#39;</span><span class="p">)</span> </code><strong>ArcGIS Topic</strong><strong>Functionality</strong><strong>Code sample</strong>Tools Call ArcToolbox tools<code><span class="n">arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="s">&#39;output.shp&#39;</span><span class="p">,</span> <span class="s">&#39;1 Mile&#39;</span><span class="p">)</span></code>Other functionsLicensing, data management, and other miscellaneous needs.<code><span class="n">arcpy</span><span class="o">.</span><span class="n">CheckOutExtension</span><span class="p">(</span><span class="s">&#39;Spatial&#39;</span><span class="p">)</span></code>Environment<br />
                      variablesSet and get environment variable values<code><span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span> </code>DescribeDescribe data properties<code><span class="n">arcpy</span><span class="o">.</span><span class="n">Describe</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">)</span> </code>Listing dataList  items (e.g., rasters, feature classes, workspaces, toolboxes,  environment variables, and indexes)<code><span class="n">arcpy</span><span class="o">.</span><span class="n">ListFeatureClasses</span><span class="p">(</span> <span class="p">)</span> </code>CursorRead/modify attribute table elements<code><span class="n">arcpy</span><span class="o">.</span><span class="n">da</span><span class="o">.</span><span class="n">SearchCursor</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="n">fieldNames</span><span class="p">)</span> </code>MessagingGet and print geoprocessing messages<code><span class="n">arcpy</span><span class="o">.</span><span class="n">GetMessages</span><span class="p">(</span> <span class="p">)</span> </code>MappingManipulate existing map layers, add layers to maps, modifying surrounds, manipulate symbology<br /><code><span class="n">arcpy</span><span class="o">.</span><span class="n">mapping</span><span class="o">.</span><span class="n">MoveLayer</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">refLayer</span><span class="p">,</span> <span class="n">moveLayer</span><span class="p">,</span> <span class="s">&#39;BEFORE&#39;</span><span class="p">)</span> </code>------------------------------------------------------------rows: 10 cols: 3<p><strong>Table 6.1: Highlights of <code>arcpy</code> functionality </strong><a name="create" id="create2"></a></p>
<table width="759" border="1">
<tr>
<td width="74"><strong>ArcGIS Topic</strong></td>
<td width="260"><strong>Functionality</strong></td>
<td width="403"><strong>Code sample</strong></td>
</tr>
<tr>
<td>Tools </td>
<td>Call ArcToolbox tools</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="s">&#39;output.shp&#39;</span><span class="p">,</span> <span class="s">&#39;1 Mile&#39;</span><span class="p">)</span></code></td>
</tr>
<tr>
<td>Other functions</td>
<td>Licensing, data management, and other miscellaneous needs.</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">CheckOutExtension</span><span class="p">(</span><span class="s">&#39;Spatial&#39;</span><span class="p">)</span></code></td>
</tr>
<tr>
<td>Environment<br />
                      variables</td>
<td>Set and get environment variable values</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span> </code></td>
</tr>
<tr>
<td>Describe</td>
<td>Describe data properties</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">Describe</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">)</span> </code></td>
</tr>
<tr>
<td>Listing data</td>
<td>List  items (e.g., rasters, feature classes, workspaces, toolboxes,  environment variables, and indexes)</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">ListFeatureClasses</span><span class="p">(</span> <span class="p">)</span> </code></td>
</tr>
<tr>
<td>Cursor</td>
<td>Read/modify attribute table elements</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">da</span><span class="o">.</span><span class="n">SearchCursor</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="n">fieldNames</span><span class="p">)</span> </code></td>
</tr>
<tr>
<td>Messaging</td>
<td>Get and print geoprocessing messages</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">GetMessages</span><span class="p">(</span> <span class="p">)</span> </code></td>
</tr>
<tr>
<td>Mapping</td>
<td>Manipulate existing map layers, add layers to maps, modifying surrounds, manipulate symbology<br /></td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">mapping</span><span class="o">.</span><span class="n">MoveLayer</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">refLayer</span><span class="p">,</span> <span class="n">moveLayer</span><span class="p">,</span> <span class="s">&#39;BEFORE&#39;</span><span class="p">)</span> </code></td>
</tr>
</table>
<br /><strong>ArcGIS Topic</strong><strong>Functionality</strong><strong>Code sample</strong>Tools Call ArcToolbox tools<code><span class="n">arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="s">&#39;output.shp&#39;</span><span class="p">,</span> <span class="s">&#39;1 Mile&#39;</span><span class="p">)</span></code>Other functionsLicensing, data management, and other miscellaneous needs.<code><span class="n">arcpy</span><span class="o">.</span><span class="n">CheckOutExtension</span><span class="p">(</span><span class="s">&#39;Spatial&#39;</span><span class="p">)</span></code>Environment<br />
                      variablesSet and get environment variable values<code><span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span> </code>DescribeDescribe data properties<code><span class="n">arcpy</span><span class="o">.</span><span class="n">Describe</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">)</span> </code>Listing dataList  items (e.g., rasters, feature classes, workspaces, toolboxes,  environment variables, and indexes)<code><span class="n">arcpy</span><span class="o">.</span><span class="n">ListFeatureClasses</span><span class="p">(</span> <span class="p">)</span> </code>CursorRead/modify attribute table elements<code><span class="n">arcpy</span><span class="o">.</span><span class="n">da</span><span class="o">.</span><span class="n">SearchCursor</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="n">fieldNames</span><span class="p">)</span> </code>MessagingGet and print geoprocessing messages<code><span class="n">arcpy</span><span class="o">.</span><span class="n">GetMessages</span><span class="p">(</span> <span class="p">)</span> </code>MappingManipulate existing map layers, add layers to maps, modifying surrounds, manipulate symbology<br /><code><span class="n">arcpy</span><span class="o">.</span><span class="n">mapping</span><span class="o">.</span><span class="n">MoveLayer</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">refLayer</span><span class="p">,</span> <span class="n">moveLayer</span><span class="p">,</span> <span class="s">&#39;BEFORE&#39;</span><span class="p">)</span> </code><strong>ArcGIS Topic</strong><strong>Functionality</strong><strong>Code sample</strong>Tools Call ArcToolbox tools<code><span class="n">arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="s">&#39;output.shp&#39;</span><span class="p">,</span> <span class="s">&#39;1 Mile&#39;</span><span class="p">)</span></code>Other functionsLicensing, data management, and other miscellaneous needs.<code><span class="n">arcpy</span><span class="o">.</span><span class="n">CheckOutExtension</span><span class="p">(</span><span class="s">&#39;Spatial&#39;</span><span class="p">)</span></code>Environment<br />
                      variablesSet and get environment variable values<code><span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span> </code>DescribeDescribe data properties<code><span class="n">arcpy</span><span class="o">.</span><span class="n">Describe</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">)</span> </code>Listing dataList  items (e.g., rasters, feature classes, workspaces, toolboxes,  environment variables, and indexes)<code><span class="n">arcpy</span><span class="o">.</span><span class="n">ListFeatureClasses</span><span class="p">(</span> <span class="p">)</span> </code>CursorRead/modify attribute table elements<code><span class="n">arcpy</span><span class="o">.</span><span class="n">da</span><span class="o">.</span><span class="n">SearchCursor</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="n">fieldNames</span><span class="p">)</span> </code>MessagingGet and print geoprocessing messages<code><span class="n">arcpy</span><span class="o">.</span><span class="n">GetMessages</span><span class="p">(</span> <span class="p">)</span> </code>MappingManipulate existing map layers, add layers to maps, modifying surrounds, manipulate symbology<br /><code><span class="n">arcpy</span><span class="o">.</span><span class="n">mapping</span><span class="o">.</span><span class="n">MoveLayer</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">refLayer</span><span class="p">,</span> <span class="n">moveLayer</span><span class="p">,</span> <span class="s">&#39;BEFORE&#39;</span><span class="p">)</span> </code>------------------------------------------------------------rows: 10 cols: 3<p><strong>Table 6.1: Highlights of <code>arcpy</code> functionality </strong><a name="create" id="create2"></a></p>
<table width="759" border="1">
<tr>
<td width="74"><strong>ArcGIS Topic</strong></td>
<td width="260"><strong>Functionality</strong></td>
<td width="403"><strong>Code sample</strong></td>
</tr>
<tr>
<td>Tools </td>
<td>Call ArcToolbox tools</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="s">&#39;output.shp&#39;</span><span class="p">,</span> <span class="s">&#39;1 Mile&#39;</span><span class="p">)</span></code></td>
</tr>
<tr>
<td>Other functions</td>
<td>Licensing, data management, and other miscellaneous needs.</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">CheckOutExtension</span><span class="p">(</span><span class="s">&#39;Spatial&#39;</span><span class="p">)</span></code></td>
</tr>
<tr>
<td>Environment<br />
                      variables</td>
<td>Set and get environment variable values</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span> </code></td>
</tr>
<tr>
<td>Describe</td>
<td>Describe data properties</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">Describe</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">)</span> </code></td>
</tr>
<tr>
<td>Listing data</td>
<td>List  items (e.g., rasters, feature classes, workspaces, toolboxes,  environment variables, and indexes)</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">ListFeatureClasses</span><span class="p">(</span> <span class="p">)</span> </code></td>
</tr>
<tr>
<td>Cursor</td>
<td>Read/modify attribute table elements</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">da</span><span class="o">.</span><span class="n">SearchCursor</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="n">fieldNames</span><span class="p">)</span> </code></td>
</tr>
<tr>
<td>Messaging</td>
<td>Get and print geoprocessing messages</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">GetMessages</span><span class="p">(</span> <span class="p">)</span> </code></td>
</tr>
<tr>
<td>Mapping</td>
<td>Manipulate existing map layers, add layers to maps, modifying surrounds, manipulate symbology<br /></td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">mapping</span><span class="o">.</span><span class="n">MoveLayer</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">refLayer</span><span class="p">,</span> <span class="n">moveLayer</span><span class="p">,</span> <span class="s">&#39;BEFORE&#39;</span><span class="p">)</span> </code></td>
</tr>
</table>
<br /><strong>ArcGIS Topic</strong><strong>Functionality</strong><strong>Code sample</strong>Tools Call ArcToolbox tools<code><span class="n">arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="s">&#39;output.shp&#39;</span><span class="p">,</span> <span class="s">&#39;1 Mile&#39;</span><span class="p">)</span></code>Other functionsLicensing, data management, and other miscellaneous needs.<code><span class="n">arcpy</span><span class="o">.</span><span class="n">CheckOutExtension</span><span class="p">(</span><span class="s">&#39;Spatial&#39;</span><span class="p">)</span></code>Environment<br />
                      variablesSet and get environment variable values<code><span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span> </code>DescribeDescribe data properties<code><span class="n">arcpy</span><span class="o">.</span><span class="n">Describe</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">)</span> </code>Listing dataList  items (e.g., rasters, feature classes, workspaces, toolboxes,  environment variables, and indexes)<code><span class="n">arcpy</span><span class="o">.</span><span class="n">ListFeatureClasses</span><span class="p">(</span> <span class="p">)</span> </code>CursorRead/modify attribute table elements<code><span class="n">arcpy</span><span class="o">.</span><span class="n">da</span><span class="o">.</span><span class="n">SearchCursor</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="n">fieldNames</span><span class="p">)</span> </code>MessagingGet and print geoprocessing messages<code><span class="n">arcpy</span><span class="o">.</span><span class="n">GetMessages</span><span class="p">(</span> <span class="p">)</span> </code>MappingManipulate existing map layers, add layers to maps, modifying surrounds, manipulate symbology<br /><code><span class="n">arcpy</span><span class="o">.</span><span class="n">mapping</span><span class="o">.</span><span class="n">MoveLayer</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">refLayer</span><span class="p">,</span> <span class="n">moveLayer</span><span class="p">,</span> <span class="s">&#39;BEFORE&#39;</span><span class="p">)</span> </code><strong>ArcGIS Topic</strong><strong>Functionality</strong><strong>Code sample</strong>Tools Call ArcToolbox tools<code><span class="n">arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="s">&#39;output.shp&#39;</span><span class="p">,</span> <span class="s">&#39;1 Mile&#39;</span><span class="p">)</span></code>Other functionsLicensing, data management, and other miscellaneous needs.<code><span class="n">arcpy</span><span class="o">.</span><span class="n">CheckOutExtension</span><span class="p">(</span><span class="s">&#39;Spatial&#39;</span><span class="p">)</span></code>Environment<br />
                      variablesSet and get environment variable values<code><span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span> </code>DescribeDescribe data properties<code><span class="n">arcpy</span><span class="o">.</span><span class="n">Describe</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">)</span> </code>Listing dataList  items (e.g., rasters, feature classes, workspaces, toolboxes,  environment variables, and indexes)<code><span class="n">arcpy</span><span class="o">.</span><span class="n">ListFeatureClasses</span><span class="p">(</span> <span class="p">)</span> </code>CursorRead/modify attribute table elements<code><span class="n">arcpy</span><span class="o">.</span><span class="n">da</span><span class="o">.</span><span class="n">SearchCursor</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="n">fieldNames</span><span class="p">)</span> </code>MessagingGet and print geoprocessing messages<code><span class="n">arcpy</span><span class="o">.</span><span class="n">GetMessages</span><span class="p">(</span> <span class="p">)</span> </code>MappingManipulate existing map layers, add layers to maps, modifying surrounds, manipulate symbology<br /><code><span class="n">arcpy</span><span class="o">.</span><span class="n">mapping</span><span class="o">.</span><span class="n">MoveLayer</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">refLayer</span><span class="p">,</span> <span class="n">moveLayer</span><span class="p">,</span> <span class="s">&#39;BEFORE&#39;</span><span class="p">)</span> </code>------------------------------------------------------------rows: 10 cols: 3<p><strong>Table 6.1: Highlights of <code>arcpy</code> functionality </strong><a name="create" id="create2"></a></p>
<table width="759" border="1">
<tr>
<td width="74"><strong>ArcGIS Topic</strong></td>
<td width="260"><strong>Functionality</strong></td>
<td width="403"><strong>Code sample</strong></td>
</tr>
<tr>
<td>Tools </td>
<td>Call ArcToolbox tools</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="s">&#39;output.shp&#39;</span><span class="p">,</span> <span class="s">&#39;1 Mile&#39;</span><span class="p">)</span></code></td>
</tr>
<tr>
<td>Other functions</td>
<td>Licensing, data management, and other miscellaneous needs.</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">CheckOutExtension</span><span class="p">(</span><span class="s">&#39;Spatial&#39;</span><span class="p">)</span></code></td>
</tr>
<tr>
<td>Environment<br />
                      variables</td>
<td>Set and get environment variable values</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span> </code></td>
</tr>
<tr>
<td>Describe</td>
<td>Describe data properties</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">Describe</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">)</span> </code></td>
</tr>
<tr>
<td>Listing data</td>
<td>List  items (e.g., rasters, feature classes, workspaces, toolboxes,  environment variables, and indexes)</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">ListFeatureClasses</span><span class="p">(</span> <span class="p">)</span> </code></td>
</tr>
<tr>
<td>Cursor</td>
<td>Read/modify attribute table elements</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">da</span><span class="o">.</span><span class="n">SearchCursor</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="n">fieldNames</span><span class="p">)</span> </code></td>
</tr>
<tr>
<td>Messaging</td>
<td>Get and print geoprocessing messages</td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">GetMessages</span><span class="p">(</span> <span class="p">)</span> </code></td>
</tr>
<tr>
<td>Mapping</td>
<td>Manipulate existing map layers, add layers to maps, modifying surrounds, manipulate symbology<br /></td>
<td><code><span class="n">arcpy</span><span class="o">.</span><span class="n">mapping</span><span class="o">.</span><span class="n">MoveLayer</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">refLayer</span><span class="p">,</span> <span class="n">moveLayer</span><span class="p">,</span> <span class="s">&#39;BEFORE&#39;</span><span class="p">)</span> </code></td>
</tr>
</table>
<br /><strong>ArcGIS Topic</strong><strong>Functionality</strong><strong>Code sample</strong>Tools Call ArcToolbox tools<code><span class="n">arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="s">&#39;output.shp&#39;</span><span class="p">,</span> <span class="s">&#39;1 Mile&#39;</span><span class="p">)</span></code>Other functionsLicensing, data management, and other miscellaneous needs.<code><span class="n">arcpy</span><span class="o">.</span><span class="n">CheckOutExtension</span><span class="p">(</span><span class="s">&#39;Spatial&#39;</span><span class="p">)</span></code>Environment<br />
                      variablesSet and get environment variable values<code><span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span> </code>DescribeDescribe data properties<code><span class="n">arcpy</span><span class="o">.</span><span class="n">Describe</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">)</span> </code>Listing dataList  items (e.g., rasters, feature classes, workspaces, toolboxes,  environment variables, and indexes)<code><span class="n">arcpy</span><span class="o">.</span><span class="n">ListFeatureClasses</span><span class="p">(</span> <span class="p">)</span> </code>CursorRead/modify attribute table elements<code><span class="n">arcpy</span><span class="o">.</span><span class="n">da</span><span class="o">.</span><span class="n">SearchCursor</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="n">fieldNames</span><span class="p">)</span> </code>MessagingGet and print geoprocessing messages<code><span class="n">arcpy</span><span class="o">.</span><span class="n">GetMessages</span><span class="p">(</span> <span class="p">)</span> </code>MappingManipulate existing map layers, add layers to maps, modifying surrounds, manipulate symbology<br /><code><span class="n">arcpy</span><span class="o">.</span><span class="n">mapping</span><span class="o">.</span><span class="n">MoveLayer</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">refLayer</span><span class="p">,</span> <span class="n">moveLayer</span><span class="p">,</span> <span class="s">&#39;BEFORE&#39;</span><span class="p">)</span> </code><strong>ArcGIS Topic</strong><strong>Functionality</strong><strong>Code sample</strong>Tools Call ArcToolbox tools<code><span class="n">arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="s">&#39;output.shp&#39;</span><span class="p">,</span> <span class="s">&#39;1 Mile&#39;</span><span class="p">)</span></code>Other functionsLicensing, data management, and other miscellaneous needs.<code><span class="n">arcpy</span><span class="o">.</span><span class="n">CheckOutExtension</span><span class="p">(</span><span class="s">&#39;Spatial&#39;</span><span class="p">)</span></code>Environment<br />
                      variablesSet and get environment variable values<code><span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span> </code>DescribeDescribe data properties<code><span class="n">arcpy</span><span class="o">.</span><span class="n">Describe</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">)</span> </code>Listing dataList  items (e.g., rasters, feature classes, workspaces, toolboxes,  environment variables, and indexes)<code><span class="n">arcpy</span><span class="o">.</span><span class="n">ListFeatureClasses</span><span class="p">(</span> <span class="p">)</span> </code>CursorRead/modify attribute table elements<code><span class="n">arcpy</span><span class="o">.</span><span class="n">da</span><span class="o">.</span><span class="n">SearchCursor</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="n">fieldNames</span><span class="p">)</span> </code>MessagingGet and print geoprocessing messages<code><span class="n">arcpy</span><span class="o">.</span><span class="n">GetMessages</span><span class="p">(</span> <span class="p">)</span> </code>MappingManipulate existing map layers, add layers to maps, modifying surrounds, manipulate symbology<br /><code><span class="n">arcpy</span><span class="o">.</span><span class="n">mapping</span><span class="o">.</span><span class="n">MoveLayer</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">refLayer</span><span class="p">,</span> <span class="n">moveLayer</span><span class="p">,</span> <span class="s">&#39;BEFORE&#39;</span><span class="p">)</span> </code>------------------------------------------------------------rows: 9 cols: 3<strong>ArcGIS Topic</strong><strong>Functionality</strong><strong>Code sample</strong>Tools Call ArcToolbox tools<code><span class="n">arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="s">&#39;output.shp&#39;</span><span class="p">,</span> <span class="s">&#39;1 Mile&#39;</span><span class="p">)</span></code>Other functionsLicensing, data management, and other miscellaneous needs.<code><span class="n">arcpy</span><span class="o">.</span><span class="n">CheckOutExtension</span><span class="p">(</span><span class="s">&#39;Spatial&#39;</span><span class="p">)</span></code>Environment<br />
                      variablesSet and get environment variable values<code><span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span> </code>DescribeDescribe data properties<code><span class="n">arcpy</span><span class="o">.</span><span class="n">Describe</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">)</span> </code>Listing dataList  items (e.g., rasters, feature classes, workspaces, toolboxes,  environment variables, and indexes)<code><span class="n">arcpy</span><span class="o">.</span><span class="n">ListFeatureClasses</span><span class="p">(</span> <span class="p">)</span> </code>CursorRead/modify attribute table elements<code><span class="n">arcpy</span><span class="o">.</span><span class="n">da</span><span class="o">.</span><span class="n">SearchCursor</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="n">fieldNames</span><span class="p">)</span> </code>MessagingGet and print geoprocessing messages<code><span class="n">arcpy</span><span class="o">.</span><span class="n">GetMessages</span><span class="p">(</span> <span class="p">)</span> </code>MappingManipulate existing map layers, add layers to maps, modifying surrounds, manipulate symbology<br /><code><span class="n">arcpy</span><span class="o">.</span><span class="n">mapping</span><span class="o">.</span><span class="n">MoveLayer</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">refLayer</span><span class="p">,</span> <span class="n">moveLayer</span><span class="p">,</span> <span class="s">&#39;BEFORE&#39;</span><span class="p">)</span> </code>------------------------------------------------------------rows: 9 cols: 3<strong>ArcGIS Topic</strong><strong>Functionality</strong><strong>Code sample</strong>Tools Call ArcToolbox tools<code><span class="n">arcpy</span><span class="o">.</span><span class="n">Buffer_analysis</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="s">&#39;output.shp&#39;</span><span class="p">,</span> <span class="s">&#39;1 Mile&#39;</span><span class="p">)</span></code>Other functionsLicensing, data management, and other miscellaneous needs.<code><span class="n">arcpy</span><span class="o">.</span><span class="n">CheckOutExtension</span><span class="p">(</span><span class="s">&#39;Spatial&#39;</span><span class="p">)</span></code>Environment<br />
                      variablesSet and get environment variable values<code><span class="n">arcpy</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">overwriteOutput</span> <span class="o">=</span> <span class="bp">True</span> </code>DescribeDescribe data properties<code><span class="n">arcpy</span><span class="o">.</span><span class="n">Describe</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">)</span> </code>Listing dataList  items (e.g., rasters, feature classes, workspaces, toolboxes,  environment variables, and indexes)<code><span class="n">arcpy</span><span class="o">.</span><span class="n">ListFeatureClasses</span><span class="p">(</span> <span class="p">)</span> </code>CursorRead/modify attribute table elements<code><span class="n">arcpy</span><span class="o">.</span><span class="n">da</span><span class="o">.</span><span class="n">SearchCursor</span><span class="p">(</span><span class="s">&#39;park.shp&#39;</span><span class="p">,</span> <span class="n">fieldNames</span><span class="p">)</span> </code>MessagingGet and print geoprocessing messages<code><span class="n">arcpy</span><span class="o">.</span><span class="n">GetMessages</span><span class="p">(</span> <span class="p">)</span> </code>MappingManipulate existing map layers, add layers to maps, modifying surrounds, manipulate symbology<br /><code><span class="n">arcpy</span><span class="o">.</span><span class="n">mapping</span><span class="o">.</span><span class="n">MoveLayer</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">refLayer</span><span class="p">,</span> <span class="n">moveLayer</span><span class="p">,</span> <span class="s">&#39;BEFORE&#39;</span><span class="p">)</span> </code>------------------------------------------------------------rows: 10 cols: 2ToolboxAlias<strong>Table 6.2 </strong>Toolbox alias examples<br />
<table border="3">
<tr>
<th width="186" scope="row">Toolbox</th>
<th width="117">Alias</th>
</tr>
<tr>
<td>3D Analyst Tools</td>
<td>3d</td>
</tr>
<tr>
<td>Analysis Tools</td>
<td>analysis</td>
</tr>
<tr>
<td>Cartography Tools</td>
<td>cartography</td>
</tr>
<tr>
<td>Conversion Tools</td>
<td>conversion</td>
</tr>
<tr>
<td>Data Interoperability Tools</td>
<td>interop</td>
</tr>
<tr>
<td>Data Management Tools</td>
<td>management</td>
</tr>
<tr>
<td>Spatial Analyst Tools</td>
<td>sa</td>
</tr>
<tr>
<td>Spatial Statistics Tools</td>
<td>stats</td>
</tr>
</table>3D Analyst Tools3dAnalysis ToolsanalysisCartography ToolscartographyConversion ToolsconversionData Interoperability ToolsinteropData Management ToolsmanagementSpatial Analyst ToolssaSpatial Statistics ToolsstatsToolboxAlias3D Analyst Tools3dAnalysis ToolsanalysisCartography ToolscartographyConversion ToolsconversionData Interoperability ToolsinteropData Management ToolsmanagementSpatial Analyst ToolssaSpatial Statistics Toolsstats------------------------------------------------------------rows: 10 cols: 2ToolboxAlias<strong>Table 6.2 </strong>Toolbox alias examples<br />
<table border="3">
<tr>
<th width="186" scope="row">Toolbox</th>
<th width="117">Alias</th>
</tr>
<tr>
<td>3D Analyst Tools</td>
<td>3d</td>
</tr>
<tr>
<td>Analysis Tools</td>
<td>analysis</td>
</tr>
<tr>
<td>Cartography Tools</td>
<td>cartography</td>
</tr>
<tr>
<td>Conversion Tools</td>
<td>conversion</td>
</tr>
<tr>
<td>Data Interoperability Tools</td>
<td>interop</td>
</tr>
<tr>
<td>Data Management Tools</td>
<td>management</td>
</tr>
<tr>
<td>Spatial Analyst Tools</td>
<td>sa</td>
</tr>
<tr>
<td>Spatial Statistics Tools</td>
<td>stats</td>
</tr>
</table>3D Analyst Tools3dAnalysis ToolsanalysisCartography ToolscartographyConversion ToolsconversionData Interoperability ToolsinteropData Management ToolsmanagementSpatial Analyst ToolssaSpatial Statistics ToolsstatsToolboxAlias3D Analyst Tools3dAnalysis ToolsanalysisCartography ToolscartographyConversion ToolsconversionData Interoperability ToolsinteropData Management ToolsmanagementSpatial Analyst ToolssaSpatial Statistics Toolsstats------------------------------------------------------------rows: 9 cols: 2ToolboxAlias3D Analyst Tools3dAnalysis ToolsanalysisCartography ToolscartographyConversion ToolsconversionData Interoperability ToolsinteropData Management ToolsmanagementSpatial Analyst ToolssaSpatial Statistics Toolsstats------------------------------------------------------------rows: 2 cols: 1<strong>Table 6.3</strong> Linear Unit of Measure Keywords (not case 
              sensitive)
              <table border="1" width="453">
<tbody>
<tr>
<td width="443">centimeters | decimal degrees | decimeters | feet | inches | kilometers | meters | miles | millimeters | nautical miles | points | unknown | yards</td>
</tr>
</tbody>
</table>centimeters | decimal degrees | decimeters | feet | inches | kilometers | meters | miles | millimeters | nautical miles | points | unknown | yardscentimeters | decimal degrees | decimeters | feet | inches | kilometers | meters | miles | millimeters | nautical miles | points | unknown | yards------------------------------------------------------------rows: 2 cols: 1<strong>Table 6.3</strong> Linear Unit of Measure Keywords (not case 
              sensitive)
              <table border="1" width="453">
<tbody>
<tr>
<td width="443">centimeters | decimal degrees | decimeters | feet | inches | kilometers | meters | miles | millimeters | nautical miles | points | unknown | yards</td>
</tr>
</tbody>
</table>centimeters | decimal degrees | decimeters | feet | inches | kilometers | meters | miles | millimeters | nautical miles | points | unknown | yardscentimeters | decimal degrees | decimeters | feet | inches | kilometers | meters | miles | millimeters | nautical miles | points | unknown | yards------------------------------------------------------------rows: 6 cols: 2<p><strong>Table 6.4: Geoprocessing in Python. </strong><a name="create" id="create"></a></p>
<table width="405" border="1">
<tr>
<td width="68"><strong>ArcGIS Version</strong></td>
<td width="321"><strong>Python code statements</strong></td>
</tr>
<tr>
<td><div align="center">9.1</div></td>
<td><code><span class="key">from</span> win32com.client <span class="key">import</span> Dispatch <br />
                    gp <span class="o">=</span> Dispatch(<span class="s">'esriGeoprocessing.GPDispatch.1'</span>)</code> </td>
</tr>
<tr>
<td><div align="center">9.2</div></td>
<td><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create( ) </code></td>
</tr>
<tr>
<td><div align="center">9.3</div></td>
<td><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create(<span class="mi">9.3</span>) </code></td>
</tr>
<tr>
<td><div align="center">10.x</div></td>
<td><code><span class="key">import</span> arcpy</code></td>
</tr>
</table><strong>ArcGIS Version</strong><strong>Python code statements</strong><div align="center">9.1</div><code><span class="key">from</span> win32com.client <span class="key">import</span> Dispatch <br />
                    gp <span class="o">=</span> Dispatch(<span class="s">'esriGeoprocessing.GPDispatch.1'</span>)</code> <div align="center">9.2</div><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create( ) </code><div align="center">9.3</div><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create(<span class="mi">9.3</span>) </code><div align="center">10.x</div><code><span class="key">import</span> arcpy</code><strong>ArcGIS Version</strong><strong>Python code statements</strong><div align="center">9.1</div><code><span class="key">from</span> win32com.client <span class="key">import</span> Dispatch <br />
                    gp <span class="o">=</span> Dispatch(<span class="s">'esriGeoprocessing.GPDispatch.1'</span>)</code> <div align="center">9.2</div><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create( ) </code><div align="center">9.3</div><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create(<span class="mi">9.3</span>) </code><div align="center">10.x</div><code><span class="key">import</span> arcpy</code>------------------------------------------------------------rows: 6 cols: 2<p><strong>Table 6.4: Geoprocessing in Python. </strong><a name="create" id="create"></a></p>
<table width="405" border="1">
<tr>
<td width="68"><strong>ArcGIS Version</strong></td>
<td width="321"><strong>Python code statements</strong></td>
</tr>
<tr>
<td><div align="center">9.1</div></td>
<td><code><span class="key">from</span> win32com.client <span class="key">import</span> Dispatch <br />
                    gp <span class="o">=</span> Dispatch(<span class="s">'esriGeoprocessing.GPDispatch.1'</span>)</code> </td>
</tr>
<tr>
<td><div align="center">9.2</div></td>
<td><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create( ) </code></td>
</tr>
<tr>
<td><div align="center">9.3</div></td>
<td><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create(<span class="mi">9.3</span>) </code></td>
</tr>
<tr>
<td><div align="center">10.x</div></td>
<td><code><span class="key">import</span> arcpy</code></td>
</tr>
</table><strong>ArcGIS Version</strong><strong>Python code statements</strong><div align="center">9.1</div><code><span class="key">from</span> win32com.client <span class="key">import</span> Dispatch <br />
                    gp <span class="o">=</span> Dispatch(<span class="s">'esriGeoprocessing.GPDispatch.1'</span>)</code> <div align="center">9.2</div><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create( ) </code><div align="center">9.3</div><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create(<span class="mi">9.3</span>) </code><div align="center">10.x</div><code><span class="key">import</span> arcpy</code><strong>ArcGIS Version</strong><strong>Python code statements</strong><div align="center">9.1</div><code><span class="key">from</span> win32com.client <span class="key">import</span> Dispatch <br />
                    gp <span class="o">=</span> Dispatch(<span class="s">'esriGeoprocessing.GPDispatch.1'</span>)</code> <div align="center">9.2</div><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create( ) </code><div align="center">9.3</div><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create(<span class="mi">9.3</span>) </code><div align="center">10.x</div><code><span class="key">import</span> arcpy</code>------------------------------------------------------------rows: 5 cols: 2<strong>ArcGIS Version</strong><strong>Python code statements</strong><div align="center">9.1</div><code><span class="key">from</span> win32com.client <span class="key">import</span> Dispatch <br />
                    gp <span class="o">=</span> Dispatch(<span class="s">'esriGeoprocessing.GPDispatch.1'</span>)</code> <div align="center">9.2</div><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create( ) </code><div align="center">9.3</div><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create(<span class="mi">9.3</span>) </code><div align="center">10.x</div><code><span class="key">import</span> arcpy</code>------------------------------------------------------------rows: 5 cols: 2<strong>ArcGIS Version</strong><strong>Python code statements</strong><div align="center">9.1</div><code><span class="key">from</span> win32com.client <span class="key">import</span> Dispatch <br />
                    gp <span class="o">=</span> Dispatch(<span class="s">'esriGeoprocessing.GPDispatch.1'</span>)</code> <div align="center">9.2</div><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create( ) </code><div align="center">9.3</div><code><span class="key">import</span> arcgisscripting<br />
                    gp <span class="o">=</span> arcgisscripting<span class="o">.</span>create(<span class="mi">9.3</span>) </code><div align="center">10.x</div><code><span class="key">import</span> arcpy</code>------------------------------